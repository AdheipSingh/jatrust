{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4","program":"/home/adheip/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","flatbuffers","--edition=2018","/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=7e77d4d2b532361d","-C","extra-filename=-7e77d4d2b532361d","--out-dir","/home/adheip/jatrust/jatrust/arrow-json/target/rls/debug/deps","-L","dependency=/home/adheip/jatrust/jatrust/arrow-json/target/rls/debug/deps","--extern","bitflags=/home/adheip/jatrust/jatrust/arrow-json/target/rls/debug/deps/libbitflags-b725bbe950f19722.rmeta","--extern","smallvec=/home/adheip/jatrust/jatrust/arrow-json/target/rls/debug/deps/libsmallvec-1248cf3ec9d6bdc0.rmeta","--extern","thiserror=/home/adheip/jatrust/jatrust/arrow-json/target/rls/debug/deps/libthiserror-79b1cf780dd3c9fb.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/adheip/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/adheip/jatrust/jatrust/arrow-json/target/rls/debug/deps/libflatbuffers-7e77d4d2b532361d.rmeta"},"prelude":{"crate_id":{"name":"flatbuffers","disambiguator":[17452702720907433988,16695585327464237349]},"crate_root":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src","external_crates":[{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[15256637969148649584,12170509131058075833]}},{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/array.rs","num":2,"id":{"name":"core","disambiguator":[2572959971889902175,17506693968225989007]}},{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[7380289047210505863,13821127130725723065]}},{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[15494144285296940423,1517275930380298805]}},{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[16074686111301742862,11174094882134223101]}},{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[9848143689052418189,5596786287495938678]}},{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[4765876764407181064,11122159180720543906]}},{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[3249135693812064660,5763443684941168569]}},{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[17048817722375060837,16920886256309599893]}},{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[13552797903376776722,10482089333731059857]}},{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[5989449439605467183,7256304997069434828]}},{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[13279369789493161905,12463804053127379464]}},{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[295047501211602818,3843164955111373824]}},{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[14781020588812023641,7393321088923443539]}},{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[1927264790928947756,6617054577979570835]}},{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/lib.rs","num":16,"id":{"name":"miniz_oxide","disambiguator":[7597657085106642381,11470551509849691989]}},{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/lib.rs","num":17,"id":{"name":"adler","disambiguator":[2355022556203982070,155364045674250901]}},{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/lib.rs","num":18,"id":{"name":"panic_unwind","disambiguator":[3046834347757213021,4625500188193743608]}},{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","num":19,"id":{"name":"smallvec","disambiguator":[6763373159956609544,3427387148971872266]}},{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/verifier.rs","num":20,"id":{"name":"thiserror","disambiguator":[3927387539358883814,10886791537913292883]}},{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/verifier.rs","num":21,"id":{"name":"thiserror_impl","disambiguator":[7922379030393238400,11491674622856468128]}},{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/lib.rs","num":22,"id":{"name":"bitflags","disambiguator":[14406972838987844197,15532057060354726600]}}],"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/lib.rs","byte_start":617,"byte_end":2237,"line_start":17,"line_end":60,"column_start":1,"column_end":21}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":84},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/lib.rs","byte_start":1561,"byte_end":1571,"line_start":44,"line_end":44,"column_start":24,"column_end":34},"alias_span":null,"name":"array_init","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":73},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/lib.rs","byte_start":1573,"byte_end":1593,"line_start":44,"line_end":44,"column_start":36,"column_end":56},"alias_span":null,"name":"emplace_scalar_array","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":915},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/lib.rs","byte_start":1595,"byte_end":1600,"line_start":44,"line_end":44,"column_start":58,"column_end":63},"alias_span":null,"name":"Array","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":949},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/lib.rs","byte_start":1627,"byte_end":1644,"line_start":45,"line_end":45,"column_start":25,"column_end":42},"alias_span":null,"name":"FlatBufferBuilder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":237},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/lib.rs","byte_start":1682,"byte_end":1695,"line_start":47,"line_end":47,"column_start":5,"column_end":18},"alias_span":null,"name":"byte_swap_f32","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":238},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/lib.rs","byte_start":1697,"byte_end":1710,"line_start":47,"line_end":47,"column_start":20,"column_end":33},"alias_span":null,"name":"byte_swap_f64","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":239},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/lib.rs","byte_start":1712,"byte_end":1726,"line_start":47,"line_end":47,"column_start":35,"column_end":49},"alias_span":null,"name":"emplace_scalar","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":243},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/lib.rs","byte_start":1728,"byte_end":1739,"line_start":47,"line_end":47,"column_start":51,"column_end":62},"alias_span":null,"name":"read_scalar","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":241},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/lib.rs","byte_start":1741,"byte_end":1755,"line_start":47,"line_end":47,"column_start":64,"column_end":78},"alias_span":null,"name":"read_scalar_at","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":226},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/lib.rs","byte_start":1757,"byte_end":1769,"line_start":47,"line_end":47,"column_start":80,"column_end":92},"alias_span":null,"name":"EndianScalar","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":249},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/lib.rs","byte_start":1798,"byte_end":1804,"line_start":49,"line_end":49,"column_start":25,"column_end":31},"alias_span":null,"name":"Follow","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1005},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/lib.rs","byte_start":1806,"byte_end":1817,"line_start":49,"line_end":49,"column_start":33,"column_end":44},"alias_span":null,"name":"FollowStart","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/lib.rs","byte_start":1847,"byte_end":1848,"line_start":50,"line_end":50,"column_start":28,"column_end":29},"alias_span":null,"name":"*","value":"SkipSizePrefix, UOffsetT, SOffsetT, ForwardsUOffset, VOffsetT, SIZE_SIZEPREFIX, SIZE_UOFFSET","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":469},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/lib.rs","byte_start":1871,"byte_end":1875,"line_start":51,"line_end":51,"column_start":22,"column_end":26},"alias_span":null,"name":"Push","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":500},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/lib.rs","byte_start":1900,"byte_end":1921,"line_start":52,"line_end":52,"column_start":24,"column_end":45},"alias_span":null,"name":"buffer_has_identifier","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1136},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/lib.rs","byte_start":1923,"byte_end":1928,"line_start":52,"line_end":52,"column_start":47,"column_end":52},"alias_span":null,"name":"Table","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":596},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/lib.rs","byte_start":1955,"byte_end":1970,"line_start":53,"line_end":53,"column_start":25,"column_end":40},"alias_span":null,"name":"follow_cast_ref","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":578},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/lib.rs","byte_start":1972,"byte_end":1987,"line_start":53,"line_end":53,"column_start":42,"column_end":57},"alias_span":null,"name":"SafeSliceAccess","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":544},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/lib.rs","byte_start":1989,"byte_end":1995,"line_start":53,"line_end":53,"column_start":59,"column_end":65},"alias_span":null,"name":"Vector","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1154},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/lib.rs","byte_start":1997,"byte_end":2007,"line_start":53,"line_end":53,"column_start":67,"column_end":77},"alias_span":null,"name":"VectorIter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1165},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/lib.rs","byte_start":2041,"byte_end":2057,"line_start":55,"line_end":55,"column_start":5,"column_end":21},"alias_span":null,"name":"ErrorTraceDetail","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1202},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/lib.rs","byte_start":2059,"byte_end":2076,"line_start":55,"line_end":55,"column_start":23,"column_end":40},"alias_span":null,"name":"InvalidFlatbuffer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":754},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/lib.rs","byte_start":2078,"byte_end":2099,"line_start":55,"line_end":55,"column_start":42,"column_end":63},"alias_span":null,"name":"SimpleToVerifyInSlice","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":747},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/lib.rs","byte_start":2101,"byte_end":2111,"line_start":55,"line_end":55,"column_start":65,"column_end":75},"alias_span":null,"name":"Verifiable","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1275},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/lib.rs","byte_start":2113,"byte_end":2121,"line_start":55,"line_end":55,"column_start":77,"column_end":85},"alias_span":null,"name":"Verifier","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1259},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/lib.rs","byte_start":2127,"byte_end":2142,"line_start":56,"line_end":56,"column_start":5,"column_end":20},"alias_span":null,"name":"VerifierOptions","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":800},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/lib.rs","byte_start":2170,"byte_end":2197,"line_start":58,"line_end":58,"column_start":24,"column_end":51},"alias_span":null,"name":"field_index_to_field_offset","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":22,"index":0},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/lib.rs","byte_start":2207,"byte_end":2215,"line_start":59,"line_end":59,"column_start":9,"column_end":17},"alias_span":null,"name":"bitflags","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/lib.rs","byte_start":2235,"byte_end":2236,"line_start":60,"line_end":60,"column_start":19,"column_end":20},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/lib.rs","byte_start":617,"byte_end":2237,"line_start":17,"line_end":60,"column_start":1,"column_end":21},"name":"","qualname":"::","value":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":90},{"krate":0,"index":222},{"krate":0,"index":245},{"krate":0,"index":263},{"krate":0,"index":306},{"krate":0,"index":455},{"krate":0,"index":482},{"krate":0,"index":501},{"krate":0,"index":656},{"krate":0,"index":780},{"krate":0,"index":806},{"krate":0,"index":826},{"krate":0,"index":827},{"krate":0,"index":830},{"krate":0,"index":833},{"krate":0,"index":836},{"krate":0,"index":839},{"krate":0,"index":840},{"krate":0,"index":843},{"krate":0,"index":846},{"krate":0,"index":849},{"krate":0,"index":852},{"krate":0,"index":855},{"krate":0,"index":858},{"krate":0,"index":859},{"krate":0,"index":862},{"krate":0,"index":865},{"krate":0,"index":866},{"krate":0,"index":869},{"krate":0,"index":870},{"krate":0,"index":873},{"krate":0,"index":876},{"krate":0,"index":877},{"krate":0,"index":880},{"krate":0,"index":883},{"krate":0,"index":886},{"krate":0,"index":889},{"krate":0,"index":890},{"krate":0,"index":893},{"krate":0,"index":896},{"krate":0,"index":899},{"krate":0,"index":902},{"krate":0,"index":905},{"krate":0,"index":908},{"krate":0,"index":911},{"krate":0,"index":914}],"decl_id":null,"docs":" # FlatBuffers","sig":null,"attributes":[{"value":"/ # FlatBuffers","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/lib.rs","byte_start":617,"byte_end":634,"line_start":17,"line_end":17,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/lib.rs","byte_start":635,"byte_end":638,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ A library for memory-efficient serialization of data.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/lib.rs","byte_start":639,"byte_end":696,"line_start":19,"line_end":19,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/lib.rs","byte_start":697,"byte_end":700,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ This crate provides runtime support for the FlatBuffers format in the Rust programming language.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/lib.rs","byte_start":701,"byte_end":801,"line_start":21,"line_end":21,"column_start":1,"column_end":101}},{"value":"/ To use this crate, first generate code with the `flatc` compiler, as described here: <https://google.github.io/flatbuffers/>","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/lib.rs","byte_start":802,"byte_end":930,"line_start":22,"line_end":22,"column_start":1,"column_end":129}},{"value":"/ Then, include that code into your project.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/lib.rs","byte_start":931,"byte_end":977,"line_start":23,"line_end":23,"column_start":1,"column_end":47}},{"value":"/ Finally, add this crate to your `Cargo.toml`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/lib.rs","byte_start":978,"byte_end":1027,"line_start":24,"line_end":24,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/lib.rs","byte_start":1028,"byte_end":1031,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ At this time, Rust support is experimental, and APIs may change between minor versions.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/lib.rs","byte_start":1032,"byte_end":1123,"line_start":26,"line_end":26,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/lib.rs","byte_start":1124,"byte_end":1127,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ At this time, to generate Rust code, you will need the latest `master` version of `flatc`, available from here: <https://github.com/google/flatbuffers>","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/lib.rs","byte_start":1128,"byte_end":1283,"line_start":28,"line_end":28,"column_start":1,"column_end":156}},{"value":"/ (On OSX, you can install FlatBuffers from `HEAD` with the Homebrew package manager.)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/lib.rs","byte_start":1284,"byte_end":1372,"line_start":29,"line_end":29,"column_start":1,"column_end":89}}]},{"kind":"Struct","id":{"krate":0,"index":915},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/array.rs","byte_start":3306,"byte_end":3311,"line_start":28,"line_end":28,"column_start":12,"column_end":17},"name":"Array","qualname":"::array::Array","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/array.rs","byte_start":3688,"byte_end":3691,"line_start":42,"line_end":42,"column_start":12,"column_end":15},"name":"new","qualname":"<Array>::new","value":"pub fn new(&'a [u8]) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/array.rs","byte_start":3659,"byte_end":3676,"line_start":41,"line_end":41,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":47},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/array.rs","byte_start":3888,"byte_end":3891,"line_start":52,"line_end":52,"column_start":12,"column_end":15},"name":"len","qualname":"<Array>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/array.rs","byte_start":3859,"byte_end":3876,"line_start":51,"line_end":51,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/array.rs","byte_start":4025,"byte_end":4028,"line_start":59,"line_end":59,"column_start":12,"column_end":15},"name":"get","qualname":"<Array>::get","value":"pub fn get(&Self, usize) -> T::Inner","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/array.rs","byte_start":3996,"byte_end":4013,"line_start":58,"line_end":58,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":53},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/array.rs","byte_start":4203,"byte_end":4207,"line_start":66,"line_end":66,"column_start":12,"column_end":16},"name":"iter","qualname":"<Array>::iter","value":"pub fn iter(&Self) -> VectorIter","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/array.rs","byte_start":4174,"byte_end":4191,"line_start":65,"line_end":65,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/array.rs","byte_start":4571,"byte_end":4581,"line_start":79,"line_end":79,"column_start":12,"column_end":22},"name":"safe_slice","qualname":"<Array>::safe_slice","value":"pub fn safe_slice(Self) -> &'a [T]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":73},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/array.rs","byte_start":5104,"byte_end":5124,"line_start":96,"line_end":96,"column_start":8,"column_end":28},"name":"emplace_scalar_array","qualname":"::array::emplace_scalar_array","value":"pub fn emplace_scalar_array<T: EndianScalar, const N:\n                            usize>(&mut [u8], usize, &[T; ])","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":84},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/array.rs","byte_start":5708,"byte_end":5718,"line_start":121,"line_end":121,"column_start":8,"column_end":18},"name":"array_init","qualname":"::array::array_init","value":"pub fn array_init<F, T, const N: usize>(F) -> [T; ] where F: FnMut(usize) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/array.rs","byte_start":5691,"byte_end":5700,"line_start":120,"line_end":120,"column_start":1,"column_end":10}}]},{"kind":"Struct","id":{"krate":0,"index":949},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":7665,"byte_end":7682,"line_start":45,"line_end":45,"column_start":12,"column_end":29},"name":"FlatBufferBuilder","qualname":"::builder::FlatBufferBuilder","value":"FlatBufferBuilder {  }","parent":null,"children":[{"krate":0,"index":951},{"krate":0,"index":952},{"krate":0,"index":953},{"krate":0,"index":954},{"krate":0,"index":955},{"krate":0,"index":956},{"krate":0,"index":957},{"krate":0,"index":958},{"krate":0,"index":959},{"krate":0,"index":960}],"decl_id":null,"docs":" FlatBufferBuilder builds a FlatBuffer through manipulating its internal\n state. It has an owned `Vec<u8>` that grows as needed (up to the hardcoded\n limit of 2GiB, which is set by the FlatBuffers format).\n","sig":null,"attributes":[{"value":"/ FlatBufferBuilder builds a FlatBuffer through manipulating its internal","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":7400,"byte_end":7475,"line_start":41,"line_end":41,"column_start":1,"column_end":76}},{"value":"/ state. It has an owned `Vec<u8>` that grows as needed (up to the hardcoded","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":7476,"byte_end":7554,"line_start":42,"line_end":42,"column_start":1,"column_end":79}},{"value":"/ limit of 2GiB, which is set by the FlatBuffers format).","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":7555,"byte_end":7614,"line_start":43,"line_end":43,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":149},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":8090,"byte_end":8093,"line_start":64,"line_end":64,"column_start":12,"column_end":15},"name":"new","qualname":"<FlatBufferBuilder>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a FlatBufferBuilder that is ready for writing.\n","sig":null,"attributes":[{"value":"/ Create a FlatBufferBuilder that is ready for writing.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":8021,"byte_end":8078,"line_start":63,"line_end":63,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":8354,"byte_end":8371,"line_start":72,"line_end":72,"column_start":12,"column_end":29},"name":"new_with_capacity","qualname":"<FlatBufferBuilder>::new_with_capacity","value":"pub fn new_with_capacity(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a FlatBufferBuilder that is ready for writing, with a\n ready-to-use capacity of the provided size.","sig":null,"attributes":[{"value":"/ Create a FlatBufferBuilder that is ready for writing, with a","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":8152,"byte_end":8216,"line_start":68,"line_end":68,"column_start":5,"column_end":69}},{"value":"/ ready-to-use capacity of the provided size.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":8221,"byte_end":8268,"line_start":69,"line_end":69,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":8273,"byte_end":8276,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/ The maximum valid value is `FLATBUFFERS_MAX_BUFFER_SIZE`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":8281,"byte_end":8342,"line_start":71,"line_end":71,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":151},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":9673,"byte_end":9678,"line_start":109,"line_end":109,"column_start":12,"column_end":17},"name":"reset","qualname":"<FlatBufferBuilder>::reset","value":"pub fn reset(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Reset the FlatBufferBuilder internal state. Use this method after a\n call to a `finish` function in order to re-use a FlatBufferBuilder.","sig":null,"attributes":[{"value":"/ Reset the FlatBufferBuilder internal state. Use this method after a","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":9077,"byte_end":9148,"line_start":98,"line_end":98,"column_start":5,"column_end":76}},{"value":"/ call to a `finish` function in order to re-use a FlatBufferBuilder.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":9153,"byte_end":9224,"line_start":99,"line_end":99,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":9229,"byte_end":9232,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ This function is the only way to reset the `finished` state and start","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":9237,"byte_end":9310,"line_start":101,"line_end":101,"column_start":5,"column_end":78}},{"value":"/ again.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":9315,"byte_end":9325,"line_start":102,"line_end":102,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":9330,"byte_end":9333,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ If you are using a FlatBufferBuilder repeatedly, make sure to use this","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":9338,"byte_end":9412,"line_start":104,"line_end":104,"column_start":5,"column_end":79}},{"value":"/ function, because it re-uses the FlatBufferBuilder's existing","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":9417,"byte_end":9482,"line_start":105,"line_end":105,"column_start":5,"column_end":70}},{"value":"/ heap-allocated `Vec<u8>` internal buffer. This offers significant speed","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":9487,"byte_end":9562,"line_start":106,"line_end":106,"column_start":5,"column_end":80}},{"value":"/ improvements as compared to creating a new FlatBufferBuilder for every","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":9567,"byte_end":9641,"line_start":107,"line_end":107,"column_start":5,"column_end":79}},{"value":"/ new object.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":9646,"byte_end":9661,"line_start":108,"line_end":108,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":10368,"byte_end":10376,"line_start":131,"line_end":131,"column_start":12,"column_end":20},"name":"collapse","qualname":"<FlatBufferBuilder>::collapse","value":"pub fn collapse(Self) -> (Vec<u8>, usize)","parent":null,"children":[],"decl_id":null,"docs":" Destroy the FlatBufferBuilder, returning its internal byte vector\n and the index into it that represents the start of valid data.\n","sig":null,"attributes":[{"value":"/ Destroy the FlatBufferBuilder, returning its internal byte vector","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":10216,"byte_end":10285,"line_start":129,"line_end":129,"column_start":5,"column_end":74}},{"value":"/ and the index into it that represents the start of valid data.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":10290,"byte_end":10356,"line_start":130,"line_end":130,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":153},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":10673,"byte_end":10677,"line_start":140,"line_end":140,"column_start":12,"column_end":16},"name":"push","qualname":"<FlatBufferBuilder>::push","value":"pub fn push<P: Push>(&mut Self, P) -> WIPOffset<P::Output>","parent":null,"children":[],"decl_id":null,"docs":" Push a Push'able value onto the front of the in-progress data.","sig":null,"attributes":[{"value":"/ Push a Push'able value onto the front of the in-progress data.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":10452,"byte_end":10518,"line_start":135,"line_end":135,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":10523,"byte_end":10526,"line_start":136,"line_end":136,"column_start":5,"column_end":8}},{"value":"/ This function uses traits to provide a unified API for writing","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":10531,"byte_end":10597,"line_start":137,"line_end":137,"column_start":5,"column_end":71}},{"value":"/ scalars, tables, vectors, and WIPOffsets.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":10602,"byte_end":10647,"line_start":138,"line_end":138,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":10652,"byte_end":10661,"line_start":139,"line_end":139,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":155},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":11245,"byte_end":11254,"line_start":155,"line_end":155,"column_start":12,"column_end":21},"name":"push_slot","qualname":"<FlatBufferBuilder>::push_slot","value":"pub fn push_slot<X: Push + PartialEq>(&mut Self, VOffsetT, X, X)","parent":null,"children":[],"decl_id":null,"docs":" Push a Push'able value onto the front of the in-progress data, and\n store a reference to it in the in-progress vtable. If the value matches\n the default, then this is a no-op.\n","sig":null,"attributes":[{"value":"/ Push a Push'able value onto the front of the in-progress data, and","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":11026,"byte_end":11096,"line_start":151,"line_end":151,"column_start":5,"column_end":75}},{"value":"/ store a reference to it in the in-progress vtable. If the value matches","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":11101,"byte_end":11176,"line_start":152,"line_end":152,"column_start":5,"column_end":80}},{"value":"/ the default, then this is a no-op.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":11181,"byte_end":11219,"line_start":153,"line_end":153,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":11224,"byte_end":11233,"line_start":154,"line_end":154,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":157},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":11639,"byte_end":11655,"line_start":165,"line_end":165,"column_start":12,"column_end":28},"name":"push_slot_always","qualname":"<FlatBufferBuilder>::push_slot_always","value":"pub fn push_slot_always<X: Push>(&mut Self, VOffsetT, X)","parent":null,"children":[],"decl_id":null,"docs":" Push a Push'able value onto the front of the in-progress data, and\n store a reference to it in the in-progress vtable.\n","sig":null,"attributes":[{"value":"/ Push a Push'able value onto the front of the in-progress data, and","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":11484,"byte_end":11554,"line_start":162,"line_end":162,"column_start":5,"column_end":75}},{"value":"/ store a reference to it in the in-progress vtable.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":11559,"byte_end":11613,"line_start":163,"line_end":163,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":11618,"byte_end":11627,"line_start":164,"line_end":164,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":159},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":12011,"byte_end":12030,"line_start":174,"line_end":174,"column_start":12,"column_end":31},"name":"num_written_vtables","qualname":"<FlatBufferBuilder>::num_written_vtables","value":"pub fn num_written_vtables(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the number of vtables that have been serialized into the\n FlatBuffer. This is primarily used to check vtable deduplication.\n","sig":null,"attributes":[{"value":"/ Retrieve the number of vtables that have been serialized into the","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":11842,"byte_end":11911,"line_start":171,"line_end":171,"column_start":5,"column_end":74}},{"value":"/ FlatBuffer. This is primarily used to check vtable deduplication.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":11916,"byte_end":11985,"line_start":172,"line_end":172,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":11990,"byte_end":11999,"line_start":173,"line_end":173,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":160},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":12307,"byte_end":12318,"line_start":184,"line_end":184,"column_start":12,"column_end":23},"name":"start_table","qualname":"<FlatBufferBuilder>::start_table","value":"pub fn start_table(&mut Self) -> WIPOffset<TableUnfinishedWIPOffset>","parent":null,"children":[],"decl_id":null,"docs":" Start a Table write.","sig":null,"attributes":[{"value":"/ Start a Table write.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":12101,"byte_end":12125,"line_start":178,"line_end":178,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":12130,"byte_end":12133,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ Asserts that the builder is not in a nested state.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":12138,"byte_end":12192,"line_start":180,"line_end":180,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":12197,"byte_end":12200,"line_start":181,"line_end":181,"column_start":5,"column_end":8}},{"value":"/ Users probably want to use `push_slot` to add values after calling this.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":12205,"byte_end":12281,"line_start":182,"line_end":182,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":12286,"byte_end":12295,"line_start":183,"line_end":183,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":161},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":12709,"byte_end":12718,"line_start":197,"line_end":197,"column_start":12,"column_end":21},"name":"end_table","qualname":"<FlatBufferBuilder>::end_table","value":"pub fn end_table(&mut Self, WIPOffset<TableUnfinishedWIPOffset>)\n-> WIPOffset<TableFinishedWIPOffset>","parent":null,"children":[],"decl_id":null,"docs":" End a Table write.","sig":null,"attributes":[{"value":"/ End a Table write.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":12598,"byte_end":12620,"line_start":193,"line_end":193,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":12625,"byte_end":12628,"line_start":194,"line_end":194,"column_start":5,"column_end":8}},{"value":"/ Asserts that the builder is in a nested state.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":12633,"byte_end":12683,"line_start":195,"line_end":195,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":12688,"byte_end":12697,"line_start":196,"line_end":196,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":13343,"byte_end":13355,"line_start":219,"line_end":219,"column_start":12,"column_end":24},"name":"start_vector","qualname":"<FlatBufferBuilder>::start_vector","value":"pub fn start_vector<T: Push>(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Start a Vector write.","sig":null,"attributes":[{"value":"/ Start a Vector write.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":13025,"byte_end":13050,"line_start":211,"line_end":211,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":13055,"byte_end":13058,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ Asserts that the builder is not in a nested state.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":13063,"byte_end":13117,"line_start":213,"line_end":213,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":13122,"byte_end":13125,"line_start":214,"line_end":214,"column_start":5,"column_end":8}},{"value":"/ Most users will prefer to call `create_vector`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":13130,"byte_end":13181,"line_start":215,"line_end":215,"column_start":5,"column_end":56}},{"value":"/ Speed optimizing users who choose to create vectors manually using this","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":13186,"byte_end":13261,"line_start":216,"line_end":216,"column_start":5,"column_end":80}},{"value":"/ function will want to use `push` to add values.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":13266,"byte_end":13317,"line_start":217,"line_end":217,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":13322,"byte_end":13331,"line_start":218,"line_end":218,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":164},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":13873,"byte_end":13883,"line_start":234,"line_end":234,"column_start":12,"column_end":22},"name":"end_vector","qualname":"<FlatBufferBuilder>::end_vector","value":"pub fn end_vector<T: Push>(&mut Self, usize) -> WIPOffset<Vector>","parent":null,"children":[],"decl_id":null,"docs":" End a Vector write.","sig":null,"attributes":[{"value":"/ End a Vector write.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":13649,"byte_end":13672,"line_start":227,"line_end":227,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":13677,"byte_end":13680,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ Note that the `num_elems` parameter is the number of written items, not","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":13685,"byte_end":13760,"line_start":229,"line_end":229,"column_start":5,"column_end":80}},{"value":"/ the byte count.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":13765,"byte_end":13784,"line_start":230,"line_end":230,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":13789,"byte_end":13792,"line_start":231,"line_end":231,"column_start":5,"column_end":8}},{"value":"/ Asserts that the builder is in a nested state.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":13797,"byte_end":13847,"line_start":232,"line_end":232,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":13852,"byte_end":13861,"line_start":233,"line_end":233,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":14153,"byte_end":14173,"line_start":242,"line_end":242,"column_start":12,"column_end":32},"name":"create_shared_string","qualname":"<FlatBufferBuilder>::create_shared_string","value":"pub fn create_shared_string<'a:'b, 'b>(&'a mut Self, &'b str)\n-> WIPOffset<&'fbb str>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":14132,"byte_end":14141,"line_start":241,"line_end":241,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":170},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":15836,"byte_end":15849,"line_start":282,"line_end":282,"column_start":12,"column_end":25},"name":"create_string","qualname":"<FlatBufferBuilder>::create_string","value":"pub fn create_string<'a:'b, 'b>(&'a mut Self, &'b str) -> WIPOffset<&'fbb str>","parent":null,"children":[],"decl_id":null,"docs":" Create a utf8 string.","sig":null,"attributes":[{"value":"/ Create a utf8 string.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":15703,"byte_end":15728,"line_start":278,"line_end":278,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":15733,"byte_end":15736,"line_start":279,"line_end":279,"column_start":5,"column_end":8}},{"value":"/ The wire format represents this as a zero-terminated byte vector.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":15741,"byte_end":15810,"line_start":280,"line_end":280,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":15815,"byte_end":15824,"line_start":281,"line_end":281,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":173},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":16197,"byte_end":16215,"line_start":291,"line_end":291,"column_start":12,"column_end":30},"name":"create_byte_string","qualname":"<FlatBufferBuilder>::create_byte_string","value":"pub fn create_byte_string(&mut Self, &[u8]) -> WIPOffset<&'fbb [u8]>","parent":null,"children":[],"decl_id":null,"docs":" Create a zero-terminated byte vector.\n","sig":null,"attributes":[{"value":"/ Create a zero-terminated byte vector.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":16130,"byte_end":16171,"line_start":289,"line_end":289,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":16176,"byte_end":16185,"line_start":290,"line_end":290,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":174},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":17068,"byte_end":17088,"line_start":309,"line_end":309,"column_start":12,"column_end":32},"name":"create_vector_direct","qualname":"<FlatBufferBuilder>::create_vector_direct","value":"pub fn create_vector_direct<'a:'b, 'b, T: SafeSliceAccess + Push + Sized +\n                            'b>(&'a mut Self, &'b [T]) -> WIPOffset<Vector>","parent":null,"children":[],"decl_id":null,"docs":" Create a vector by memcpy'ing. This is much faster than calling\n `create_vector`, but the underlying type must be represented as\n little-endian on the host machine. This property is encoded in the\n type system through the SafeSliceAccess trait. The following types are\n always safe, on any platform: bool, u8, i8, and any\n FlatBuffers-generated struct.\n","sig":null,"attributes":[{"value":"/ Create a vector by memcpy'ing. This is much faster than calling","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":16651,"byte_end":16718,"line_start":302,"line_end":302,"column_start":5,"column_end":72}},{"value":"/ `create_vector`, but the underlying type must be represented as","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":16723,"byte_end":16790,"line_start":303,"line_end":303,"column_start":5,"column_end":72}},{"value":"/ little-endian on the host machine. This property is encoded in the","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":16795,"byte_end":16865,"line_start":304,"line_end":304,"column_start":5,"column_end":75}},{"value":"/ type system through the SafeSliceAccess trait. The following types are","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":16870,"byte_end":16944,"line_start":305,"line_end":305,"column_start":5,"column_end":79}},{"value":"/ always safe, on any platform: bool, u8, i8, and any","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":16949,"byte_end":17004,"line_start":306,"line_end":306,"column_start":5,"column_end":60}},{"value":"/ FlatBuffers-generated struct.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":17009,"byte_end":17042,"line_start":307,"line_end":307,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":17047,"byte_end":17056,"line_start":308,"line_end":308,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":178},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":18017,"byte_end":18041,"line_start":334,"line_end":334,"column_start":12,"column_end":36},"name":"create_vector_of_strings","qualname":"<FlatBufferBuilder>::create_vector_of_strings","value":"pub fn create_vector_of_strings<'a, 'b>(&'a mut Self, &'b [&'b str])\n-> WIPOffset<Vector>","parent":null,"children":[],"decl_id":null,"docs":" Create a vector of strings.","sig":null,"attributes":[{"value":"/ Create a vector of strings.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":17803,"byte_end":17834,"line_start":329,"line_end":329,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":17839,"byte_end":17842,"line_start":330,"line_end":330,"column_start":5,"column_end":8}},{"value":"/ Speed-sensitive users may wish to reduce memory usage by creating the","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":17847,"byte_end":17920,"line_start":331,"line_end":331,"column_start":5,"column_end":78}},{"value":"/ vector manually: use `start_vector`, `push`, and `end_vector`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":17925,"byte_end":17991,"line_start":332,"line_end":332,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":17996,"byte_end":18005,"line_start":333,"line_end":333,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":182},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":19186,"byte_end":19199,"line_start":360,"line_end":360,"column_start":12,"column_end":25},"name":"create_vector","qualname":"<FlatBufferBuilder>::create_vector","value":"pub fn create_vector<'a:'b, 'b, T: Push + Copy + 'b>(&'a mut Self, &'b [T])\n-> WIPOffset<Vector>","parent":null,"children":[],"decl_id":null,"docs":" Create a vector of Push-able objects.","sig":null,"attributes":[{"value":"/ Create a vector of Push-able objects.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":18962,"byte_end":19003,"line_start":355,"line_end":355,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":19008,"byte_end":19011,"line_start":356,"line_end":356,"column_start":5,"column_end":8}},{"value":"/ Speed-sensitive users may wish to reduce memory usage by creating the","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":19016,"byte_end":19089,"line_start":357,"line_end":357,"column_start":5,"column_end":78}},{"value":"/ vector manually: use `start_vector`, `push`, and `end_vector`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":19094,"byte_end":19160,"line_start":358,"line_end":358,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":19165,"byte_end":19174,"line_start":359,"line_end":359,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":186},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":19842,"byte_end":19865,"line_start":377,"line_end":377,"column_start":12,"column_end":35},"name":"create_vector_from_iter","qualname":"<FlatBufferBuilder>::create_vector_from_iter","value":"pub fn create_vector_from_iter<T: Push + Copy,\n                               impl ExactSizeIterator<Item = T> + DoubleEndedIterator: ExactSizeIterator<Item\n                               = T> +\n                               DoubleEndedIterator>(&mut Self,\n                                                    impl ExactSizeIterator<Item = T> + DoubleEndedIterator)\n-> WIPOffset<Vector>","parent":null,"children":[],"decl_id":null,"docs":" Create a vector of Push-able objects.","sig":null,"attributes":[{"value":"/ Create a vector of Push-able objects.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":19618,"byte_end":19659,"line_start":372,"line_end":372,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":19664,"byte_end":19667,"line_start":373,"line_end":373,"column_start":5,"column_end":8}},{"value":"/ Speed-sensitive users may wish to reduce memory usage by creating the","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":19672,"byte_end":19745,"line_start":374,"line_end":374,"column_start":5,"column_end":78}},{"value":"/ vector manually: use `start_vector`, `push`, and `end_vector`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":19750,"byte_end":19816,"line_start":375,"line_end":375,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":19821,"byte_end":19830,"line_start":376,"line_end":376,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":189},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":20630,"byte_end":20644,"line_start":398,"line_end":398,"column_start":12,"column_end":26},"name":"force_defaults","qualname":"<FlatBufferBuilder>::force_defaults","value":"pub fn force_defaults(&mut Self, bool)","parent":null,"children":[],"decl_id":null,"docs":" Set whether default values are stored.","sig":null,"attributes":[{"value":"/ Set whether default values are stored.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":20314,"byte_end":20356,"line_start":390,"line_end":390,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":20361,"byte_end":20364,"line_start":391,"line_end":391,"column_start":5,"column_end":8}},{"value":"/ In order to save space, fields that are set to their default value","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":20369,"byte_end":20439,"line_start":392,"line_end":392,"column_start":5,"column_end":75}},{"value":"/ aren't stored in the buffer. Setting `force_defaults` to `true`","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":20444,"byte_end":20511,"line_start":393,"line_end":393,"column_start":5,"column_end":72}},{"value":"/ disables this optimization.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":20516,"byte_end":20547,"line_start":394,"line_end":394,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":20552,"byte_end":20555,"line_start":395,"line_end":395,"column_start":5,"column_end":8}},{"value":"/ By default, `force_defaults` is `false`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":20560,"byte_end":20604,"line_start":396,"line_end":396,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":20609,"byte_end":20618,"line_start":397,"line_end":397,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":190},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":20873,"byte_end":20888,"line_start":405,"line_end":405,"column_start":12,"column_end":27},"name":"unfinished_data","qualname":"<FlatBufferBuilder>::unfinished_data","value":"pub fn unfinished_data(&Self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Get the byte slice for the data that has been written, regardless of\n whether it has been finished.\n","sig":null,"attributes":[{"value":"/ Get the byte slice for the data that has been written, regardless of","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":20737,"byte_end":20809,"line_start":402,"line_end":402,"column_start":5,"column_end":77}},{"value":"/ whether it has been finished.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":20814,"byte_end":20847,"line_start":403,"line_end":403,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":20852,"byte_end":20861,"line_start":404,"line_end":404,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":191},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":21092,"byte_end":21105,"line_start":411,"line_end":411,"column_start":12,"column_end":25},"name":"finished_data","qualname":"<FlatBufferBuilder>::finished_data","value":"pub fn finished_data(&Self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Get the byte slice for the data that has been written after a call to\n one of the `finish` functions.\n","sig":null,"attributes":[{"value":"/ Get the byte slice for the data that has been written after a call to","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":20954,"byte_end":21027,"line_start":408,"line_end":408,"column_start":5,"column_end":78}},{"value":"/ one of the `finish` functions.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":21032,"byte_end":21066,"line_start":409,"line_end":409,"column_start":5,"column_end":39}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":21071,"byte_end":21080,"line_start":410,"line_end":410,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":192},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":21445,"byte_end":21453,"line_start":419,"line_end":419,"column_start":12,"column_end":20},"name":"required","qualname":"<FlatBufferBuilder>::required","value":"pub fn required(&Self, WIPOffset<TableFinishedWIPOffset>, VOffsetT,\n                &'static str)","parent":null,"children":[],"decl_id":null,"docs":" Assert that a field is present in the just-finished Table.","sig":null,"attributes":[{"value":"/ Assert that a field is present in the just-finished Table.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":21272,"byte_end":21334,"line_start":415,"line_end":415,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":21339,"byte_end":21342,"line_start":416,"line_end":416,"column_start":5,"column_end":8}},{"value":"/ This is somewhat low-level and is mostly used by the generated code.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":21347,"byte_end":21419,"line_start":417,"line_end":417,"column_start":5,"column_end":77}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":21424,"byte_end":21433,"line_start":418,"line_end":418,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":193},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":22190,"byte_end":22210,"line_start":436,"line_end":436,"column_start":12,"column_end":32},"name":"finish_size_prefixed","qualname":"<FlatBufferBuilder>::finish_size_prefixed","value":"pub fn finish_size_prefixed<T>(&mut Self, WIPOffset<T>, Option<&str>)","parent":null,"children":[],"decl_id":null,"docs":" Finalize the FlatBuffer by: aligning it, pushing an optional file\n identifier on to it, pushing a size prefix on to it, and marking the\n internal state of the FlatBufferBuilder as `finished`. Afterwards,\n users can call `finished_data` to get the resulting data.\n","sig":null,"attributes":[{"value":"/ Finalize the FlatBuffer by: aligning it, pushing an optional file","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":21877,"byte_end":21946,"line_start":431,"line_end":431,"column_start":5,"column_end":74}},{"value":"/ identifier on to it, pushing a size prefix on to it, and marking the","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":21951,"byte_end":22023,"line_start":432,"line_end":432,"column_start":5,"column_end":77}},{"value":"/ internal state of the FlatBufferBuilder as `finished`. Afterwards,","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":22028,"byte_end":22098,"line_start":433,"line_end":433,"column_start":5,"column_end":75}},{"value":"/ users can call `finished_data` to get the resulting data.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":22103,"byte_end":22164,"line_start":434,"line_end":434,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":22169,"byte_end":22178,"line_start":435,"line_end":435,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":195},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":22630,"byte_end":22636,"line_start":445,"line_end":445,"column_start":12,"column_end":18},"name":"finish","qualname":"<FlatBufferBuilder>::finish","value":"pub fn finish<T>(&mut Self, WIPOffset<T>, Option<&str>)","parent":null,"children":[],"decl_id":null,"docs":" Finalize the FlatBuffer by: aligning it, pushing an optional file\n identifier on to it, and marking the internal state of the\n FlatBufferBuilder as `finished`. Afterwards, users can call\n `finished_data` to get the resulting data.\n","sig":null,"attributes":[{"value":"/ Finalize the FlatBuffer by: aligning it, pushing an optional file","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":22349,"byte_end":22418,"line_start":440,"line_end":440,"column_start":5,"column_end":74}},{"value":"/ identifier on to it, and marking the internal state of the","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":22423,"byte_end":22485,"line_start":441,"line_end":441,"column_start":5,"column_end":67}},{"value":"/ FlatBufferBuilder as `finished`. Afterwards, users can call","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":22490,"byte_end":22553,"line_start":442,"line_end":442,"column_start":5,"column_end":68}},{"value":"/ `finished_data` to get the resulting data.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":22558,"byte_end":22604,"line_start":443,"line_end":443,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":22609,"byte_end":22618,"line_start":444,"line_end":444,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":197},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":23002,"byte_end":23016,"line_start":453,"line_end":453,"column_start":12,"column_end":26},"name":"finish_minimal","qualname":"<FlatBufferBuilder>::finish_minimal","value":"pub fn finish_minimal<T>(&mut Self, WIPOffset<T>)","parent":null,"children":[],"decl_id":null,"docs":" Finalize the FlatBuffer by: aligning it and marking the internal state\n of the FlatBufferBuilder as `finished`. Afterwards, users can call\n `finished_data` to get the resulting data.\n","sig":null,"attributes":[{"value":"/ Finalize the FlatBuffer by: aligning it and marking the internal state","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":22776,"byte_end":22850,"line_start":449,"line_end":449,"column_start":5,"column_end":79}},{"value":"/ of the FlatBufferBuilder as `finished`. Afterwards, users can call","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":22855,"byte_end":22925,"line_start":450,"line_end":450,"column_start":5,"column_end":75}},{"value":"/ `finished_data` to get the resulting data.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":22930,"byte_end":22976,"line_start":451,"line_end":451,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":22981,"byte_end":22990,"line_start":452,"line_end":452,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":226},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/endian_scalar.rs","byte_start":35313,"byte_end":35325,"line_start":29,"line_end":29,"column_start":11,"column_end":23},"name":"EndianScalar","qualname":"::endian_scalar::EndianScalar","value":"EndianScalar: Sized + PartialEq + Copy + Clone","parent":null,"children":[{"krate":0,"index":227},{"krate":0,"index":228}],"decl_id":null,"docs":" Trait for values that must be stored in little-endian byte order, but\n might be represented in memory as big-endian. Every type that implements\n EndianScalar is a valid FlatBuffers scalar value.","sig":null,"attributes":[{"value":"/ Trait for values that must be stored in little-endian byte order, but","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/endian_scalar.rs","byte_start":34792,"byte_end":34865,"line_start":19,"line_end":19,"column_start":1,"column_end":74}},{"value":"/ might be represented in memory as big-endian. Every type that implements","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/endian_scalar.rs","byte_start":34866,"byte_end":34942,"line_start":20,"line_end":20,"column_start":1,"column_end":77}},{"value":"/ EndianScalar is a valid FlatBuffers scalar value.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/endian_scalar.rs","byte_start":34943,"byte_end":34996,"line_start":21,"line_end":21,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/endian_scalar.rs","byte_start":34997,"byte_end":35000,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ The Rust stdlib does not provide a trait to represent scalars, so this trait","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/endian_scalar.rs","byte_start":35001,"byte_end":35081,"line_start":23,"line_end":23,"column_start":1,"column_end":81}},{"value":"/ serves that purpose, too.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/endian_scalar.rs","byte_start":35082,"byte_end":35111,"line_start":24,"line_end":24,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/endian_scalar.rs","byte_start":35112,"byte_end":35115,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ Note that we do not use the num-traits crate for this, because it provides","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/endian_scalar.rs","byte_start":35116,"byte_end":35194,"line_start":26,"line_end":26,"column_start":1,"column_end":79}},{"value":"/ \"too much\". For example, num-traits provides i128 support, but that is an","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/endian_scalar.rs","byte_start":35195,"byte_end":35272,"line_start":27,"line_end":27,"column_start":1,"column_end":78}},{"value":"/ invalid FlatBuffers type.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/endian_scalar.rs","byte_start":35273,"byte_end":35302,"line_start":28,"line_end":28,"column_start":1,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":227},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/endian_scalar.rs","byte_start":35369,"byte_end":35385,"line_start":30,"line_end":30,"column_start":8,"column_end":24},"name":"to_little_endian","qualname":"::endian_scalar::EndianScalar::to_little_endian","value":"pub fn to_little_endian(Self) -> Self","parent":{"krate":0,"index":226},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":228},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/endian_scalar.rs","byte_start":35408,"byte_end":35426,"line_start":31,"line_end":31,"column_start":8,"column_end":26},"name":"from_little_endian","qualname":"::endian_scalar::EndianScalar::from_little_endian","value":"pub fn from_little_endian(Self) -> Self","parent":{"krate":0,"index":226},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":237},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/endian_scalar.rs","byte_start":38191,"byte_end":38204,"line_start":138,"line_end":138,"column_start":8,"column_end":21},"name":"byte_swap_f32","qualname":"::endian_scalar::byte_swap_f32","value":"pub fn byte_swap_f32(f32) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Swaps the bytes of an f32.\n","sig":null,"attributes":[{"value":"/ Swaps the bytes of an f32.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/endian_scalar.rs","byte_start":38123,"byte_end":38153,"line_start":135,"line_end":135,"column_start":1,"column_end":31}},{"value":"allow(dead_code)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/endian_scalar.rs","byte_start":38154,"byte_end":38173,"line_start":136,"line_end":136,"column_start":1,"column_end":20}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/endian_scalar.rs","byte_start":38174,"byte_end":38183,"line_start":137,"line_end":137,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":238},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/endian_scalar.rs","byte_start":38338,"byte_end":38351,"line_start":145,"line_end":145,"column_start":8,"column_end":21},"name":"byte_swap_f64","qualname":"::endian_scalar::byte_swap_f64","value":"pub fn byte_swap_f64(f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Swaps the bytes of an f64.\n","sig":null,"attributes":[{"value":"/ Swaps the bytes of an f64.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/endian_scalar.rs","byte_start":38270,"byte_end":38300,"line_start":142,"line_end":142,"column_start":1,"column_end":31}},{"value":"allow(dead_code)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/endian_scalar.rs","byte_start":38301,"byte_end":38320,"line_start":143,"line_end":143,"column_start":1,"column_end":20}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/endian_scalar.rs","byte_start":38321,"byte_end":38330,"line_start":144,"line_end":144,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":239},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/endian_scalar.rs","byte_start":38544,"byte_end":38558,"line_start":152,"line_end":152,"column_start":8,"column_end":22},"name":"emplace_scalar","qualname":"::endian_scalar::emplace_scalar","value":"pub fn emplace_scalar<T: EndianScalar>(&mut [u8], T)","parent":null,"children":[],"decl_id":null,"docs":" Place an EndianScalar into the provided mutable byte slice. Performs\n endian conversion, if necessary.\n","sig":null,"attributes":[{"value":"/ Place an EndianScalar into the provided mutable byte slice. Performs","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/endian_scalar.rs","byte_start":38417,"byte_end":38489,"line_start":149,"line_end":149,"column_start":1,"column_end":73}},{"value":"/ endian conversion, if necessary.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/endian_scalar.rs","byte_start":38490,"byte_end":38526,"line_start":150,"line_end":150,"column_start":1,"column_end":37}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/endian_scalar.rs","byte_start":38527,"byte_end":38536,"line_start":151,"line_end":151,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":241},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/endian_scalar.rs","byte_start":38963,"byte_end":38977,"line_start":166,"line_end":166,"column_start":8,"column_end":22},"name":"read_scalar_at","qualname":"::endian_scalar::read_scalar_at","value":"pub fn read_scalar_at<T: EndianScalar>(&[u8], usize) -> T","parent":null,"children":[],"decl_id":null,"docs":" Read an EndianScalar from the provided byte slice at the specified location.\n Performs endian conversion, if necessary.\n","sig":null,"attributes":[{"value":"/ Read an EndianScalar from the provided byte slice at the specified location.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/endian_scalar.rs","byte_start":38819,"byte_end":38899,"line_start":163,"line_end":163,"column_start":1,"column_end":81}},{"value":"/ Performs endian conversion, if necessary.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/endian_scalar.rs","byte_start":38900,"byte_end":38945,"line_start":164,"line_end":164,"column_start":1,"column_end":46}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/endian_scalar.rs","byte_start":38946,"byte_end":38955,"line_start":165,"line_end":165,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":243},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/endian_scalar.rs","byte_start":39172,"byte_end":39183,"line_start":173,"line_end":173,"column_start":8,"column_end":19},"name":"read_scalar","qualname":"::endian_scalar::read_scalar","value":"pub fn read_scalar<T: EndianScalar>(&[u8]) -> T","parent":null,"children":[],"decl_id":null,"docs":" Read an EndianScalar from the provided byte slice. Performs endian\n conversion, if necessary.\n","sig":null,"attributes":[{"value":"/ Read an EndianScalar from the provided byte slice. Performs endian","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/endian_scalar.rs","byte_start":39054,"byte_end":39124,"line_start":170,"line_end":170,"column_start":1,"column_end":71}},{"value":"/ conversion, if necessary.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/endian_scalar.rs","byte_start":39125,"byte_end":39154,"line_start":171,"line_end":171,"column_start":1,"column_end":30}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/endian_scalar.rs","byte_start":39155,"byte_end":39164,"line_start":172,"line_end":172,"column_start":1,"column_end":10}}]},{"kind":"Trait","id":{"krate":0,"index":249},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/follow.rs","byte_start":40850,"byte_end":40856,"line_start":30,"line_end":30,"column_start":11,"column_end":17},"name":"Follow","qualname":"::follow::Follow","value":"Follow<'buf>","parent":null,"children":[{"krate":0,"index":251},{"krate":0,"index":252}],"decl_id":null,"docs":" Follow is a trait that allows us to access FlatBuffers in a declarative,\n type safe, and fast way. They compile down to almost no code (after\n optimizations). Conceptually, Follow lifts the offset-based access\n patterns of FlatBuffers data into the type system. This trait is used\n pervasively at read time, to access tables, vtables, vectors, strings, and\n all other data. At this time, Follow is not utilized much on the write\n path.","sig":null,"attributes":[{"value":"/ Follow is a trait that allows us to access FlatBuffers in a declarative,","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/follow.rs","byte_start":40190,"byte_end":40266,"line_start":19,"line_end":19,"column_start":1,"column_end":77}},{"value":"/ type safe, and fast way. They compile down to almost no code (after","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/follow.rs","byte_start":40267,"byte_end":40338,"line_start":20,"line_end":20,"column_start":1,"column_end":72}},{"value":"/ optimizations). Conceptually, Follow lifts the offset-based access","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/follow.rs","byte_start":40339,"byte_end":40409,"line_start":21,"line_end":21,"column_start":1,"column_end":71}},{"value":"/ patterns of FlatBuffers data into the type system. This trait is used","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/follow.rs","byte_start":40410,"byte_end":40483,"line_start":22,"line_end":22,"column_start":1,"column_end":74}},{"value":"/ pervasively at read time, to access tables, vtables, vectors, strings, and","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/follow.rs","byte_start":40484,"byte_end":40562,"line_start":23,"line_end":23,"column_start":1,"column_end":79}},{"value":"/ all other data. At this time, Follow is not utilized much on the write","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/follow.rs","byte_start":40563,"byte_end":40637,"line_start":24,"line_end":24,"column_start":1,"column_end":75}},{"value":"/ path.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/follow.rs","byte_start":40638,"byte_end":40647,"line_start":25,"line_end":25,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/follow.rs","byte_start":40648,"byte_end":40651,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ Writing a new Follow implementation primarily involves deciding whether","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/follow.rs","byte_start":40652,"byte_end":40727,"line_start":27,"line_end":27,"column_start":1,"column_end":76}},{"value":"/ you want to return data (of the type Self::Inner) or do you want to","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/follow.rs","byte_start":40728,"byte_end":40799,"line_start":28,"line_end":28,"column_start":1,"column_end":72}},{"value":"/ continue traversing the FlatBuffer.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/follow.rs","byte_start":40800,"byte_end":40839,"line_start":29,"line_end":29,"column_start":1,"column_end":40}}]},{"kind":"Type","id":{"krate":0,"index":251},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/follow.rs","byte_start":40874,"byte_end":40879,"line_start":31,"line_end":31,"column_start":10,"column_end":15},"name":"Inner","qualname":"::follow::Follow::Inner","value":"type Inner;","parent":{"krate":0,"index":249},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":252},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/follow.rs","byte_start":40888,"byte_end":40894,"line_start":32,"line_end":32,"column_start":8,"column_end":14},"name":"follow","qualname":"::follow::Follow::follow","value":"pub fn follow(&'buf [u8], usize) -> Self::Inner","parent":{"krate":0,"index":249},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1005},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/follow.rs","byte_start":41097,"byte_end":41108,"line_start":38,"line_end":38,"column_start":12,"column_end":23},"name":"FollowStart","qualname":"::follow::FollowStart","value":"","parent":null,"children":[],"decl_id":null,"docs":" FollowStart wraps a Follow impl in a struct type. This can make certain\n programming patterns more ergonomic.\n","sig":null,"attributes":[{"value":"/ FollowStart wraps a Follow impl in a struct type. This can make certain","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/follow.rs","byte_start":40943,"byte_end":41018,"line_start":35,"line_end":35,"column_start":1,"column_end":76}},{"value":"/ programming patterns more ergonomic.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/follow.rs","byte_start":41019,"byte_end":41059,"line_start":36,"line_end":36,"column_start":1,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":256},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/follow.rs","byte_start":41200,"byte_end":41203,"line_start":41,"line_end":41,"column_start":12,"column_end":15},"name":"new","qualname":"<FollowStart<T>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/follow.rs","byte_start":41179,"byte_end":41188,"line_start":40,"line_end":40,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":257},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/follow.rs","byte_start":41279,"byte_end":41290,"line_start":45,"line_end":45,"column_start":12,"column_end":23},"name":"self_follow","qualname":"<FollowStart<T>>::self_follow","value":"pub fn self_follow(&'a Self, &'a [u8], usize) -> T::Inner","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/follow.rs","byte_start":41258,"byte_end":41267,"line_start":44,"line_end":44,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":286},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/get_root.rs","byte_start":42595,"byte_end":42599,"line_start":26,"line_end":26,"column_start":8,"column_end":12},"name":"root","qualname":"::get_root::root","value":"pub fn root<'buf, T>(&'buf [u8]) -> Result<T::Inner, InvalidFlatbuffer> where\nT: 'buf + Follow + Verifiable","parent":null,"children":[],"decl_id":null,"docs":" Gets the root of the Flatbuffer, verifying it first with default options.\n Note that verification is an experimental feature and may not be maximally performant or\n catch every error (though that is the goal). See the `_unchecked` variants for previous\n behavior.\n","sig":null,"attributes":[{"value":"/ Gets the root of the Flatbuffer, verifying it first with default options.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/get_root.rs","byte_start":42311,"byte_end":42388,"line_start":22,"line_end":22,"column_start":1,"column_end":78}},{"value":"/ Note that verification is an experimental feature and may not be maximally performant or","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/get_root.rs","byte_start":42389,"byte_end":42481,"line_start":23,"line_end":23,"column_start":1,"column_end":93}},{"value":"/ catch every error (though that is the goal). See the `_unchecked` variants for previous","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/get_root.rs","byte_start":42482,"byte_end":42573,"line_start":24,"line_end":24,"column_start":1,"column_end":92}},{"value":"/ behavior.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/get_root.rs","byte_start":42574,"byte_end":42587,"line_start":25,"line_end":25,"column_start":1,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":289},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/get_root.rs","byte_start":43090,"byte_end":43104,"line_start":39,"line_end":39,"column_start":8,"column_end":22},"name":"root_with_opts","qualname":"::get_root::root_with_opts","value":"pub fn root_with_opts<'opts, 'buf, T>(&'opts VerifierOptions, &'buf [u8])\n-> Result<T::Inner, InvalidFlatbuffer> where T: 'buf + Follow + Verifiable","parent":null,"children":[],"decl_id":null,"docs":" Gets the root of the Flatbuffer, verifying it first with given options.\n Note that verification is an experimental feature and may not be maximally performant or\n catch every error (though that is the goal). See the `_unchecked` variants for previous\n behavior.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/get_root.rs","byte_start":42798,"byte_end":42807,"line_start":34,"line_end":34,"column_start":1,"column_end":10}},{"value":"/ Gets the root of the Flatbuffer, verifying it first with given options.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/get_root.rs","byte_start":42808,"byte_end":42883,"line_start":35,"line_end":35,"column_start":1,"column_end":76}},{"value":"/ Note that verification is an experimental feature and may not be maximally performant or","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/get_root.rs","byte_start":42884,"byte_end":42976,"line_start":36,"line_end":36,"column_start":1,"column_end":93}},{"value":"/ catch every error (though that is the goal). See the `_unchecked` variants for previous","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/get_root.rs","byte_start":42977,"byte_end":43068,"line_start":37,"line_end":37,"column_start":1,"column_end":92}},{"value":"/ behavior.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/get_root.rs","byte_start":43069,"byte_end":43082,"line_start":38,"line_end":38,"column_start":1,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":293},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/get_root.rs","byte_start":43718,"byte_end":43736,"line_start":56,"line_end":56,"column_start":8,"column_end":26},"name":"size_prefixed_root","qualname":"::get_root::size_prefixed_root","value":"pub fn size_prefixed_root<'buf, T>(&'buf [u8])\n-> Result<T::Inner, InvalidFlatbuffer> where T: 'buf + Follow + Verifiable","parent":null,"children":[],"decl_id":null,"docs":" Gets the root of a size prefixed Flatbuffer, verifying it first with default options.\n Note that verification is an experimental feature and may not be maximally performant or\n catch every error (though that is the goal). See the `_unchecked` variants for previous\n behavior.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/get_root.rs","byte_start":43412,"byte_end":43421,"line_start":51,"line_end":51,"column_start":1,"column_end":10}},{"value":"/ Gets the root of a size prefixed Flatbuffer, verifying it first with default options.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/get_root.rs","byte_start":43422,"byte_end":43511,"line_start":52,"line_end":52,"column_start":1,"column_end":90}},{"value":"/ Note that verification is an experimental feature and may not be maximally performant or","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/get_root.rs","byte_start":43512,"byte_end":43604,"line_start":53,"line_end":53,"column_start":1,"column_end":93}},{"value":"/ catch every error (though that is the goal). See the `_unchecked` variants for previous","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/get_root.rs","byte_start":43605,"byte_end":43696,"line_start":54,"line_end":54,"column_start":1,"column_end":92}},{"value":"/ behavior.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/get_root.rs","byte_start":43697,"byte_end":43710,"line_start":55,"line_end":55,"column_start":1,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":296},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/get_root.rs","byte_start":44253,"byte_end":44281,"line_start":69,"line_end":69,"column_start":8,"column_end":36},"name":"size_prefixed_root_with_opts","qualname":"::get_root::size_prefixed_root_with_opts","value":"pub fn size_prefixed_root_with_opts<'opts, 'buf,\n                                    T>(&'opts VerifierOptions, &'buf [u8])\n-> Result<T::Inner, InvalidFlatbuffer> where T: 'buf + Follow + Verifiable","parent":null,"children":[],"decl_id":null,"docs":" Gets the root of a size prefixed Flatbuffer, verifying it first with given options.\n Note that verification is an experimental feature and may not be maximally performant or\n catch every error (though that is the goal). See the `_unchecked` variants for previous\n behavior.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/get_root.rs","byte_start":43949,"byte_end":43958,"line_start":64,"line_end":64,"column_start":1,"column_end":10}},{"value":"/ Gets the root of a size prefixed Flatbuffer, verifying it first with given options.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/get_root.rs","byte_start":43959,"byte_end":44046,"line_start":65,"line_end":65,"column_start":1,"column_end":88}},{"value":"/ Note that verification is an experimental feature and may not be maximally performant or","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/get_root.rs","byte_start":44047,"byte_end":44139,"line_start":66,"line_end":66,"column_start":1,"column_end":93}},{"value":"/ catch every error (though that is the goal). See the `_unchecked` variants for previous","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/get_root.rs","byte_start":44140,"byte_end":44231,"line_start":67,"line_end":67,"column_start":1,"column_end":92}},{"value":"/ behavior.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/get_root.rs","byte_start":44232,"byte_end":44245,"line_start":68,"line_end":68,"column_start":1,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":300},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/get_root.rs","byte_start":45038,"byte_end":45052,"line_start":88,"line_end":88,"column_start":15,"column_end":29},"name":"root_unchecked","qualname":"::get_root::root_unchecked","value":"pub unsafe fn root_unchecked<'buf, T>(&'buf [u8]) -> T::Inner where\nT: Follow + 'buf","parent":null,"children":[],"decl_id":null,"docs":" Gets root for a trusted Flatbuffer.\n # Safety\n Flatbuffers accessors do not perform validation checks before accessing. Unlike the other\n `root` functions, this does not validate the flatbuffer before returning the accessor. Users\n must trust `data` contains a valid flatbuffer (e.g. b/c it was built by your software). Reading\n unchecked buffers may cause panics or even UB.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/get_root.rs","byte_start":44619,"byte_end":44628,"line_start":81,"line_end":81,"column_start":1,"column_end":10}},{"value":"/ Gets root for a trusted Flatbuffer.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/get_root.rs","byte_start":44629,"byte_end":44668,"line_start":82,"line_end":82,"column_start":1,"column_end":40}},{"value":"/ # Safety","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/get_root.rs","byte_start":44669,"byte_end":44681,"line_start":83,"line_end":83,"column_start":1,"column_end":13}},{"value":"/ Flatbuffers accessors do not perform validation checks before accessing. Unlike the other","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/get_root.rs","byte_start":44682,"byte_end":44775,"line_start":84,"line_end":84,"column_start":1,"column_end":94}},{"value":"/ `root` functions, this does not validate the flatbuffer before returning the accessor. Users","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/get_root.rs","byte_start":44776,"byte_end":44872,"line_start":85,"line_end":85,"column_start":1,"column_end":97}},{"value":"/ must trust `data` contains a valid flatbuffer (e.g. b/c it was built by your software). Reading","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/get_root.rs","byte_start":44873,"byte_end":44972,"line_start":86,"line_end":86,"column_start":1,"column_end":100}},{"value":"/ unchecked buffers may cause panics or even UB.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/get_root.rs","byte_start":44973,"byte_end":45023,"line_start":87,"line_end":87,"column_start":1,"column_end":51}}]},{"kind":"Function","id":{"krate":0,"index":303},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/get_root.rs","byte_start":45608,"byte_end":45636,"line_start":102,"line_end":102,"column_start":15,"column_end":43},"name":"size_prefixed_root_unchecked","qualname":"::get_root::size_prefixed_root_unchecked","value":"pub unsafe fn size_prefixed_root_unchecked<'buf, T>(&'buf [u8]) -> T::Inner\nwhere T: Follow + 'buf","parent":null,"children":[],"decl_id":null,"docs":" Gets root for a trusted, size prefixed, Flatbuffer.\n # Safety\n Flatbuffers accessors do not perform validation checks before accessing. Unlike the other\n `root` functions, this does not validate the flatbuffer before returning the accessor. Users\n must trust `data` contains a valid flatbuffer (e.g. b/c it was built by your software). Reading\n unchecked buffers may cause panics or even UB.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/get_root.rs","byte_start":45173,"byte_end":45182,"line_start":95,"line_end":95,"column_start":1,"column_end":10}},{"value":"/ Gets root for a trusted, size prefixed, Flatbuffer.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/get_root.rs","byte_start":45183,"byte_end":45238,"line_start":96,"line_end":96,"column_start":1,"column_end":56}},{"value":"/ # Safety","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/get_root.rs","byte_start":45239,"byte_end":45251,"line_start":97,"line_end":97,"column_start":1,"column_end":13}},{"value":"/ Flatbuffers accessors do not perform validation checks before accessing. Unlike the other","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/get_root.rs","byte_start":45252,"byte_end":45345,"line_start":98,"line_end":98,"column_start":1,"column_end":94}},{"value":"/ `root` functions, this does not validate the flatbuffer before returning the accessor. Users","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/get_root.rs","byte_start":45346,"byte_end":45442,"line_start":99,"line_end":99,"column_start":1,"column_end":97}},{"value":"/ must trust `data` contains a valid flatbuffer (e.g. b/c it was built by your software). Reading","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/get_root.rs","byte_start":45443,"byte_end":45542,"line_start":100,"line_end":100,"column_start":1,"column_end":100}},{"value":"/ unchecked buffers may cause panics or even UB.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/get_root.rs","byte_start":45543,"byte_end":45593,"line_start":101,"line_end":101,"column_start":1,"column_end":51}}]},{"kind":"Const","id":{"krate":0,"index":332},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":46599,"byte_end":46626,"line_start":25,"line_end":25,"column_start":11,"column_end":38},"name":"FLATBUFFERS_MAX_BUFFER_SIZE","qualname":"::primitives::FLATBUFFERS_MAX_BUFFER_SIZE","value":"usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":333},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":46670,"byte_end":46692,"line_start":27,"line_end":27,"column_start":11,"column_end":33},"name":"FILE_IDENTIFIER_LENGTH","qualname":"::primitives::FILE_IDENTIFIER_LENGTH","value":"usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":334},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":46716,"byte_end":46738,"line_start":29,"line_end":29,"column_start":11,"column_end":33},"name":"VTABLE_METADATA_FIELDS","qualname":"::primitives::VTABLE_METADATA_FIELDS","value":"usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":335},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":46762,"byte_end":46769,"line_start":31,"line_end":31,"column_start":11,"column_end":18},"name":"SIZE_U8","qualname":"::primitives::SIZE_U8","value":"usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":336},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":46806,"byte_end":46813,"line_start":32,"line_end":32,"column_start":11,"column_end":18},"name":"SIZE_I8","qualname":"::primitives::SIZE_I8","value":"usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":337},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":46851,"byte_end":46859,"line_start":34,"line_end":34,"column_start":11,"column_end":19},"name":"SIZE_U16","qualname":"::primitives::SIZE_U16","value":"usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":338},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":46897,"byte_end":46905,"line_start":35,"line_end":35,"column_start":11,"column_end":19},"name":"SIZE_I16","qualname":"::primitives::SIZE_I16","value":"usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":339},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":46944,"byte_end":46952,"line_start":37,"line_end":37,"column_start":11,"column_end":19},"name":"SIZE_U32","qualname":"::primitives::SIZE_U32","value":"usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":340},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":46990,"byte_end":46998,"line_start":38,"line_end":38,"column_start":11,"column_end":19},"name":"SIZE_I32","qualname":"::primitives::SIZE_I32","value":"usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":341},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":47037,"byte_end":47045,"line_start":40,"line_end":40,"column_start":11,"column_end":19},"name":"SIZE_U64","qualname":"::primitives::SIZE_U64","value":"usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":342},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":47083,"byte_end":47091,"line_start":41,"line_end":41,"column_start":11,"column_end":19},"name":"SIZE_I64","qualname":"::primitives::SIZE_I64","value":"usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":343},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":47130,"byte_end":47138,"line_start":43,"line_end":43,"column_start":11,"column_end":19},"name":"SIZE_F32","qualname":"::primitives::SIZE_F32","value":"usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":344},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":47176,"byte_end":47184,"line_start":44,"line_end":44,"column_start":11,"column_end":19},"name":"SIZE_F64","qualname":"::primitives::SIZE_F64","value":"usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":345},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":47223,"byte_end":47235,"line_start":46,"line_end":46,"column_start":11,"column_end":23},"name":"SIZE_SOFFSET","qualname":"::primitives::SIZE_SOFFSET","value":"usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":346},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":47265,"byte_end":47277,"line_start":47,"line_end":47,"column_start":11,"column_end":23},"name":"SIZE_UOFFSET","qualname":"::primitives::SIZE_UOFFSET","value":"usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":347},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":47307,"byte_end":47319,"line_start":48,"line_end":48,"column_start":11,"column_end":23},"name":"SIZE_VOFFSET","qualname":"::primitives::SIZE_VOFFSET","value":"usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":348},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":47350,"byte_end":47365,"line_start":50,"line_end":50,"column_start":11,"column_end":26},"name":"SIZE_SIZEPREFIX","qualname":"::primitives::SIZE_SIZEPREFIX","value":"usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":349},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":47464,"byte_end":47472,"line_start":53,"line_end":53,"column_start":10,"column_end":18},"name":"SOffsetT","qualname":"::primitives::SOffsetT","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" SOffsetT is a relative pointer from tables to their vtables.\n","sig":null,"attributes":[{"value":"/ SOffsetT is a relative pointer from tables to their vtables.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":47390,"byte_end":47454,"line_start":52,"line_end":52,"column_start":1,"column_end":65}}]},{"kind":"Type","id":{"krate":0,"index":350},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":47572,"byte_end":47580,"line_start":56,"line_end":56,"column_start":10,"column_end":18},"name":"UOffsetT","qualname":"::primitives::UOffsetT","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" UOffsetT is used represent both for relative pointers and lengths of vectors.\n","sig":null,"attributes":[{"value":"/ UOffsetT is used represent both for relative pointers and lengths of vectors.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":47481,"byte_end":47562,"line_start":55,"line_end":55,"column_start":1,"column_end":82}}]},{"kind":"Type","id":{"krate":0,"index":351},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":47680,"byte_end":47688,"line_start":59,"line_end":59,"column_start":10,"column_end":18},"name":"VOffsetT","qualname":"::primitives::VOffsetT","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" VOffsetT is a relative pointer in vtables to point from tables to field data.\n","sig":null,"attributes":[{"value":"/ VOffsetT is a relative pointer in vtables to point from tables to field data.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":47589,"byte_end":47670,"line_start":58,"line_end":58,"column_start":1,"column_end":82}}]},{"kind":"Struct","id":{"krate":0,"index":1015},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":47807,"byte_end":47829,"line_start":63,"line_end":63,"column_start":12,"column_end":34},"name":"TableFinishedWIPOffset","qualname":"::primitives::TableFinishedWIPOffset","value":"TableFinishedWIPOffset {  }","parent":null,"children":[],"decl_id":null,"docs":" TableFinishedWIPOffset marks a WIPOffset as being for a finished table.\n","sig":null,"attributes":[{"value":"/ TableFinishedWIPOffset marks a WIPOffset as being for a finished table.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":47697,"byte_end":47772,"line_start":61,"line_end":61,"column_start":1,"column_end":76}}]},{"kind":"Struct","id":{"krate":0,"index":1019},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":47949,"byte_end":47973,"line_start":67,"line_end":67,"column_start":12,"column_end":36},"name":"TableUnfinishedWIPOffset","qualname":"::primitives::TableUnfinishedWIPOffset","value":"TableUnfinishedWIPOffset {  }","parent":null,"children":[],"decl_id":null,"docs":" TableUnfinishedWIPOffset marks a WIPOffset as being for an unfinished table.\n","sig":null,"attributes":[{"value":"/ TableUnfinishedWIPOffset marks a WIPOffset as being for an unfinished table.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":47834,"byte_end":47914,"line_start":65,"line_end":65,"column_start":1,"column_end":81}}]},{"kind":"Struct","id":{"krate":0,"index":1023},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":48077,"byte_end":48091,"line_start":71,"line_end":71,"column_start":12,"column_end":26},"name":"UnionWIPOffset","qualname":"::primitives::UnionWIPOffset","value":"UnionWIPOffset {  }","parent":null,"children":[],"decl_id":null,"docs":" UnionWIPOffset marks a WIPOffset as being for a union value.\n","sig":null,"attributes":[{"value":"/ UnionWIPOffset marks a WIPOffset as being for a union value.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":47978,"byte_end":48042,"line_start":69,"line_end":69,"column_start":1,"column_end":65}}]},{"kind":"Struct","id":{"krate":0,"index":1027},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":48191,"byte_end":48206,"line_start":75,"line_end":75,"column_start":12,"column_end":27},"name":"VTableWIPOffset","qualname":"::primitives::VTableWIPOffset","value":"VTableWIPOffset {  }","parent":null,"children":[],"decl_id":null,"docs":" VTableWIPOffset marks a WIPOffset as being for a vtable.\n","sig":null,"attributes":[{"value":"/ VTableWIPOffset marks a WIPOffset as being for a vtable.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":48096,"byte_end":48156,"line_start":73,"line_end":73,"column_start":1,"column_end":61}}]},{"kind":"Struct","id":{"krate":0,"index":1031},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":48536,"byte_end":48545,"line_start":82,"line_end":82,"column_start":12,"column_end":21},"name":"WIPOffset","qualname":"::primitives::WIPOffset","value":"","parent":null,"children":[],"decl_id":null,"docs":" WIPOffset contains an UOffsetT with a special meaning: it is the location of\n data relative to the *end* of an in-progress FlatBuffer. The\n FlatBufferBuilder uses this to track the location of objects in an absolute\n way. The impl of Push converts a WIPOffset into a ForwardsUOffset.\n","sig":null,"attributes":[{"value":"/ WIPOffset contains an UOffsetT with a special meaning: it is the location of","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":48211,"byte_end":48291,"line_start":77,"line_end":77,"column_start":1,"column_end":81}},{"value":"/ data relative to the *end* of an in-progress FlatBuffer. The","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":48292,"byte_end":48356,"line_start":78,"line_end":78,"column_start":1,"column_end":65}},{"value":"/ FlatBufferBuilder uses this to track the location of objects in an absolute","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":48357,"byte_end":48436,"line_start":79,"line_end":79,"column_start":1,"column_end":80}},{"value":"/ way. The impl of Push converts a WIPOffset into a ForwardsUOffset.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":48437,"byte_end":48507,"line_start":80,"line_end":80,"column_start":1,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":369},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":49329,"byte_end":49332,"line_start":114,"line_end":114,"column_start":12,"column_end":15},"name":"new","qualname":"<WIPOffset<T>>::new","value":"pub fn new(UOffsetT) -> WIPOffset<T>","parent":null,"children":[],"decl_id":null,"docs":" Create a new WIPOffset.\n","sig":null,"attributes":[{"value":"/ Create a new WIPOffset.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":49276,"byte_end":49303,"line_start":112,"line_end":112,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":49308,"byte_end":49317,"line_start":113,"line_end":113,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":370},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":49586,"byte_end":49600,"line_start":124,"line_end":124,"column_start":12,"column_end":26},"name":"as_union_value","qualname":"<WIPOffset<T>>::as_union_value","value":"pub fn as_union_value(Self) -> WIPOffset<UnionWIPOffset>","parent":null,"children":[],"decl_id":null,"docs":" Return a wrapped value that brings its meaning as a union WIPOffset\n into the type system.\n","sig":null,"attributes":[{"value":"/ Return a wrapped value that brings its meaning as a union WIPOffset","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":49451,"byte_end":49522,"line_start":121,"line_end":121,"column_start":5,"column_end":76}},{"value":"/ into the type system.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":49527,"byte_end":49552,"line_start":122,"line_end":122,"column_start":5,"column_end":30}},{"value":"inline(always)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":49557,"byte_end":49574,"line_start":123,"line_end":123,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":371},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":49742,"byte_end":49747,"line_start":129,"line_end":129,"column_start":12,"column_end":17},"name":"value","qualname":"<WIPOffset<T>>::value","value":"pub fn value(Self) -> UOffsetT","parent":null,"children":[],"decl_id":null,"docs":" Get the underlying value.\n","sig":null,"attributes":[{"value":"/ Get the underlying value.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":49679,"byte_end":49708,"line_start":127,"line_end":127,"column_start":5,"column_end":34}},{"value":"inline(always)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":49713,"byte_end":49730,"line_start":128,"line_end":128,"column_start":5,"column_end":22}}]},{"kind":"Struct","id":{"krate":0,"index":1039},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":50411,"byte_end":50426,"line_start":156,"line_end":156,"column_start":12,"column_end":27},"name":"ForwardsUOffset","qualname":"::primitives::ForwardsUOffset","value":"","parent":null,"children":[],"decl_id":null,"docs":" ForwardsUOffset is used by Follow to traverse a FlatBuffer: the pointer\n is incremented by the value contained in this type.\n","sig":null,"attributes":[{"value":"/ ForwardsUOffset is used by Follow to traverse a FlatBuffer: the pointer","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":50251,"byte_end":50326,"line_start":153,"line_end":153,"column_start":1,"column_end":76}},{"value":"/ is incremented by the value contained in this type.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":50327,"byte_end":50382,"line_start":154,"line_end":154,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":387},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":50911,"byte_end":50916,"line_start":172,"line_end":172,"column_start":12,"column_end":17},"name":"value","qualname":"<ForwardsUOffset<T>>::value","value":"pub fn value(Self) -> UOffsetT","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":50882,"byte_end":50899,"line_start":171,"line_end":171,"column_start":5,"column_end":22}}]},{"kind":"Struct","id":{"krate":0,"index":1047},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":51436,"byte_end":51451,"line_start":190,"line_end":190,"column_start":12,"column_end":27},"name":"ForwardsVOffset","qualname":"::primitives::ForwardsVOffset","value":"","parent":null,"children":[],"decl_id":null,"docs":" ForwardsVOffset is used by Follow to traverse a FlatBuffer: the pointer\n is incremented by the value contained in this type.\n","sig":null,"attributes":[{"value":"/ ForwardsVOffset is used by Follow to traverse a FlatBuffer: the pointer","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":51276,"byte_end":51351,"line_start":187,"line_end":187,"column_start":1,"column_end":76}},{"value":"/ is incremented by the value contained in this type.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":51352,"byte_end":51407,"line_start":188,"line_end":188,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":395},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":51544,"byte_end":51549,"line_start":193,"line_end":193,"column_start":12,"column_end":17},"name":"value","qualname":"<ForwardsVOffset<T>>::value","value":"pub fn value(&Self) -> VOffsetT","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":51515,"byte_end":51532,"line_start":192,"line_end":192,"column_start":5,"column_end":22}}]},{"kind":"Struct","id":{"krate":0,"index":1055},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":52267,"byte_end":52283,"line_start":220,"line_end":220,"column_start":12,"column_end":28},"name":"BackwardsSOffset","qualname":"::primitives::BackwardsSOffset","value":"","parent":null,"children":[],"decl_id":null,"docs":" ForwardsSOffset is used by Follow to traverse a FlatBuffer: the pointer\n is incremented by the *negative* of the value contained in this type.\n","sig":null,"attributes":[{"value":"/ ForwardsSOffset is used by Follow to traverse a FlatBuffer: the pointer","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":52089,"byte_end":52164,"line_start":217,"line_end":217,"column_start":1,"column_end":76}},{"value":"/ is incremented by the *negative* of the value contained in this type.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":52165,"byte_end":52238,"line_start":218,"line_end":218,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":407},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":52377,"byte_end":52382,"line_start":223,"line_end":223,"column_start":12,"column_end":17},"name":"value","qualname":"<BackwardsSOffset<T>>::value","value":"pub fn value(&Self) -> SOffsetT","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":52348,"byte_end":52365,"line_start":222,"line_end":222,"column_start":5,"column_end":22}}]},{"kind":"Struct","id":{"krate":0,"index":417},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":53108,"byte_end":53122,"line_start":249,"line_end":249,"column_start":12,"column_end":26},"name":"SkipSizePrefix","qualname":"::primitives::SkipSizePrefix","value":"","parent":null,"children":[],"decl_id":null,"docs":" SkipSizePrefix is used by Follow to traverse a FlatBuffer: the pointer is\n incremented by a fixed constant in order to skip over the size prefix value.\n","sig":null,"attributes":[{"value":"/ SkipSizePrefix is used by Follow to traverse a FlatBuffer: the pointer is","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":52938,"byte_end":53015,"line_start":247,"line_end":247,"column_start":1,"column_end":78}},{"value":"/ incremented by a fixed constant in order to skip over the size prefix value.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":53016,"byte_end":53096,"line_start":248,"line_end":248,"column_start":1,"column_end":81}}]},{"kind":"Struct","id":{"krate":0,"index":426},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":53539,"byte_end":53553,"line_start":260,"line_end":260,"column_start":12,"column_end":26},"name":"SkipRootOffset","qualname":"::primitives::SkipRootOffset","value":"","parent":null,"children":[],"decl_id":null,"docs":" SkipRootOffset is used by Follow to traverse a FlatBuffer: the pointer is\n incremented by a fixed constant in order to skip over the root offset value.\n","sig":null,"attributes":[{"value":"/ SkipRootOffset is used by Follow to traverse a FlatBuffer: the pointer is","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":53369,"byte_end":53446,"line_start":258,"line_end":258,"column_start":1,"column_end":78}},{"value":"/ incremented by a fixed constant in order to skip over the root offset value.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":53447,"byte_end":53527,"line_start":259,"line_end":259,"column_start":1,"column_end":81}}]},{"kind":"Struct","id":{"krate":0,"index":435},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":53964,"byte_end":53978,"line_start":271,"line_end":271,"column_start":12,"column_end":26},"name":"FileIdentifier","qualname":"::primitives::FileIdentifier","value":"","parent":null,"children":[],"decl_id":null,"docs":" FileIdentifier is used by Follow to traverse a FlatBuffer: the pointer is\n dereferenced into a byte slice, whose bytes are the file identifer value.\n","sig":null,"attributes":[{"value":"/ FileIdentifier is used by Follow to traverse a FlatBuffer: the pointer is","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":53797,"byte_end":53874,"line_start":269,"line_end":269,"column_start":1,"column_end":78}},{"value":"/ dereferenced into a byte slice, whose bytes are the file identifer value.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":53875,"byte_end":53952,"line_start":270,"line_end":270,"column_start":1,"column_end":78}}]},{"kind":"Struct","id":{"krate":0,"index":441},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":54367,"byte_end":54385,"line_start":283,"line_end":283,"column_start":12,"column_end":30},"name":"SkipFileIdentifier","qualname":"::primitives::SkipFileIdentifier","value":"","parent":null,"children":[],"decl_id":null,"docs":" SkipFileIdentifier is used by Follow to traverse a FlatBuffer: the pointer\n is incremented by a fixed constant in order to skip over the file\n identifier value.\n","sig":null,"attributes":[{"value":"/ SkipFileIdentifier is used by Follow to traverse a FlatBuffer: the pointer","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":54185,"byte_end":54263,"line_start":280,"line_end":280,"column_start":1,"column_end":79}},{"value":"/ is incremented by a fixed constant in order to skip over the file","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":54264,"byte_end":54333,"line_start":281,"line_end":281,"column_start":1,"column_end":70}},{"value":"/ identifier value.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":54334,"byte_end":54355,"line_start":282,"line_end":282,"column_start":1,"column_end":22}}]},{"kind":"Trait","id":{"krate":0,"index":469},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/push.rs","byte_start":56619,"byte_end":56623,"line_start":25,"line_end":25,"column_start":11,"column_end":15},"name":"Push","qualname":"::push::Push","value":"Push: Sized","parent":null,"children":[{"krate":0,"index":470},{"krate":0,"index":471},{"krate":0,"index":472},{"krate":0,"index":473}],"decl_id":null,"docs":" Trait to abstract over functionality needed to write values (either owned\n or referenced). Used in FlatBufferBuilder and implemented for generated\n types.\n","sig":null,"attributes":[{"value":"/ Trait to abstract over functionality needed to write values (either owned","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/push.rs","byte_start":56444,"byte_end":56521,"line_start":22,"line_end":22,"column_start":1,"column_end":78}},{"value":"/ or referenced). Used in FlatBufferBuilder and implemented for generated","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/push.rs","byte_start":56522,"byte_end":56597,"line_start":23,"line_end":23,"column_start":1,"column_end":76}},{"value":"/ types.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/push.rs","byte_start":56598,"byte_end":56608,"line_start":24,"line_end":24,"column_start":1,"column_end":11}}]},{"kind":"Type","id":{"krate":0,"index":470},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/push.rs","byte_start":56642,"byte_end":56648,"line_start":26,"line_end":26,"column_start":10,"column_end":16},"name":"Output","qualname":"::push::Push::Output","value":"type Output;","parent":{"krate":0,"index":469},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":471},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/push.rs","byte_start":56657,"byte_end":56661,"line_start":27,"line_end":27,"column_start":8,"column_end":12},"name":"push","qualname":"::push::Push::push","value":"pub fn push(&Self, &mut [u8], &[u8])","parent":{"krate":0,"index":469},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":472},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/push.rs","byte_start":56721,"byte_end":56725,"line_start":29,"line_end":29,"column_start":8,"column_end":12},"name":"size","qualname":"::push::Push::size","value":"pub fn size() -> usize","parent":{"krate":0,"index":469},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/push.rs","byte_start":56704,"byte_end":56713,"line_start":28,"line_end":28,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":473},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/push.rs","byte_start":56800,"byte_end":56809,"line_start":33,"line_end":33,"column_start":8,"column_end":17},"name":"alignment","qualname":"::push::Push::alignment","value":"pub fn alignment() -> PushAlignment","parent":{"krate":0,"index":469},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/push.rs","byte_start":56783,"byte_end":56792,"line_start":32,"line_end":32,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":474},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/push.rs","byte_start":57049,"byte_end":57062,"line_start":40,"line_end":40,"column_start":12,"column_end":25},"name":"PushAlignment","qualname":"::push::PushAlignment","value":"","parent":null,"children":[],"decl_id":null,"docs":" Ensure Push alignment calculations are typesafe (because this helps reduce\n implementation issues when using FlatBufferBuilder::align).\n","sig":null,"attributes":[{"value":"/ Ensure Push alignment calculations are typesafe (because this helps reduce","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/push.rs","byte_start":56895,"byte_end":56973,"line_start":38,"line_end":38,"column_start":1,"column_end":79}},{"value":"/ implementation issues when using FlatBufferBuilder::align).","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/push.rs","byte_start":56974,"byte_end":57037,"line_start":39,"line_end":39,"column_start":1,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":478},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/push.rs","byte_start":57117,"byte_end":57120,"line_start":43,"line_end":43,"column_start":12,"column_end":15},"name":"new","qualname":"<PushAlignment>::new","value":"pub fn new(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/push.rs","byte_start":57096,"byte_end":57105,"line_start":42,"line_end":42,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":479},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/push.rs","byte_start":57203,"byte_end":57208,"line_start":47,"line_end":47,"column_start":12,"column_end":17},"name":"value","qualname":"<PushAlignment>::value","value":"pub fn value(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/push.rs","byte_start":57182,"byte_end":57191,"line_start":46,"line_end":46,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":480},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/push.rs","byte_start":57273,"byte_end":57279,"line_start":51,"line_end":51,"column_start":12,"column_end":18},"name":"max_of","qualname":"<PushAlignment>::max_of","value":"pub fn max_of(&Self, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/push.rs","byte_start":57252,"byte_end":57261,"line_start":50,"line_end":50,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1136},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/table.rs","byte_start":58836,"byte_end":58841,"line_start":22,"line_end":22,"column_start":12,"column_end":17},"name":"Table","qualname":"::table::Table","value":"Table { buf, loc }","parent":null,"children":[{"krate":0,"index":1138},{"krate":0,"index":1139}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1138},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/table.rs","byte_start":58856,"byte_end":58859,"line_start":23,"line_end":23,"column_start":9,"column_end":12},"name":"buf","qualname":"::table::Table::buf","value":"&'a [u8]","parent":{"krate":0,"index":1136},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1139},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/table.rs","byte_start":58879,"byte_end":58882,"line_start":24,"line_end":24,"column_start":9,"column_end":12},"name":"loc","qualname":"::table::Table::loc","value":"usize","parent":{"krate":0,"index":1136},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":492},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/table.rs","byte_start":58940,"byte_end":58943,"line_start":29,"line_end":29,"column_start":12,"column_end":15},"name":"new","qualname":"<Table>::new","value":"pub fn new(&'a [u8], usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/table.rs","byte_start":58919,"byte_end":58928,"line_start":28,"line_end":28,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":493},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/table.rs","byte_start":59039,"byte_end":59045,"line_start":33,"line_end":33,"column_start":12,"column_end":18},"name":"vtable","qualname":"<Table>::vtable","value":"pub fn vtable(&Self) -> VTable","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/table.rs","byte_start":59018,"byte_end":59027,"line_start":32,"line_end":32,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":494},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/table.rs","byte_start":59167,"byte_end":59170,"line_start":37,"line_end":37,"column_start":12,"column_end":15},"name":"get","qualname":"<Table>::get","value":"pub fn get<T: Follow + 'a>(&Self, VOffsetT, Option<T::Inner>)\n-> Option<T::Inner>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/table.rs","byte_start":59146,"byte_end":59155,"line_start":36,"line_end":36,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":500},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/table.rs","byte_start":59668,"byte_end":59689,"line_start":59,"line_end":59,"column_start":8,"column_end":29},"name":"buffer_has_identifier","qualname":"::table::buffer_has_identifier","value":"pub fn buffer_has_identifier(&[u8], &str, bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/table.rs","byte_start":59651,"byte_end":59660,"line_start":58,"line_end":58,"column_start":1,"column_end":10}}]},{"kind":"Struct","id":{"krate":0,"index":544},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/vector.rs","byte_start":61050,"byte_end":61056,"line_start":30,"line_end":30,"column_start":12,"column_end":18},"name":"Vector","qualname":"::vector::Vector","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":570},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/vector.rs","byte_start":62053,"byte_end":62056,"line_start":66,"line_end":66,"column_start":12,"column_end":15},"name":"new","qualname":"<Vector>::new","value":"pub fn new(&'a [u8], usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/vector.rs","byte_start":62024,"byte_end":62041,"line_start":65,"line_end":65,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":571},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/vector.rs","byte_start":62229,"byte_end":62232,"line_start":75,"line_end":75,"column_start":12,"column_end":15},"name":"len","qualname":"<Vector>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/vector.rs","byte_start":62200,"byte_end":62217,"line_start":74,"line_end":74,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":572},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/vector.rs","byte_start":62351,"byte_end":62359,"line_start":79,"line_end":79,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Vector>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/vector.rs","byte_start":62322,"byte_end":62339,"line_start":78,"line_end":78,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":576},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/vector.rs","byte_start":62488,"byte_end":62491,"line_start":86,"line_end":86,"column_start":12,"column_end":15},"name":"get","qualname":"<Vector>::get","value":"pub fn get(&Self, usize) -> T::Inner","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/vector.rs","byte_start":62459,"byte_end":62476,"line_start":85,"line_end":85,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":577},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/vector.rs","byte_start":62776,"byte_end":62780,"line_start":94,"line_end":94,"column_start":12,"column_end":16},"name":"iter","qualname":"<Vector>::iter","value":"pub fn iter(&Self) -> VectorIter","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/vector.rs","byte_start":62747,"byte_end":62764,"line_start":93,"line_end":93,"column_start":5,"column_end":22}}]},{"kind":"Trait","id":{"krate":0,"index":578},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/vector.rs","byte_start":62869,"byte_end":62884,"line_start":99,"line_end":99,"column_start":11,"column_end":26},"name":"SafeSliceAccess","qualname":"::vector::SafeSliceAccess","value":"SafeSliceAccess","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":582},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/vector.rs","byte_start":62949,"byte_end":62959,"line_start":101,"line_end":101,"column_start":12,"column_end":22},"name":"safe_slice","qualname":"<Vector>::safe_slice","value":"pub fn safe_slice(Self) -> &'a [T]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":596},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/vector.rs","byte_start":64107,"byte_end":64122,"line_start":137,"line_end":137,"column_start":8,"column_end":23},"name":"follow_cast_ref","qualname":"::vector::follow_cast_ref","value":"pub fn follow_cast_ref<'a, T: Sized + 'a>(&'a [u8], usize) -> &'a T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1154},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/vector.rs","byte_start":65627,"byte_end":65637,"line_start":183,"line_end":183,"column_start":12,"column_end":22},"name":"VectorIter","qualname":"::vector::VectorIter","value":"VectorIter {  }","parent":null,"children":[{"krate":0,"index":1157},{"krate":0,"index":1158},{"krate":0,"index":1159},{"krate":0,"index":1160}],"decl_id":null,"docs":" An iterator over a `Vector`.\n","sig":null,"attributes":[{"value":"/ An iterator over a `Vector`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/vector.rs","byte_start":65566,"byte_end":65598,"line_start":181,"line_end":181,"column_start":1,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":618},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/vector.rs","byte_start":65801,"byte_end":65812,"line_start":192,"line_end":192,"column_start":12,"column_end":23},"name":"from_vector","qualname":"<VectorIter>::from_vector","value":"pub fn from_vector(Vector) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/vector.rs","byte_start":65780,"byte_end":65789,"line_start":191,"line_end":191,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":619},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/vector.rs","byte_start":66236,"byte_end":66246,"line_start":205,"line_end":205,"column_start":12,"column_end":22},"name":"from_slice","qualname":"<VectorIter>::from_slice","value":"pub fn from_slice(&'a [u8], usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/vector.rs","byte_start":66215,"byte_end":66224,"line_start":204,"line_end":204,"column_start":5,"column_end":14}}]},{"kind":"StructVariant","id":{"krate":0,"index":1166},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/verifier.rs","byte_start":69340,"byte_end":69353,"line_start":11,"line_end":11,"column_start":5,"column_end":18},"name":"VectorElement","qualname":"::verifier::ErrorTraceDetail::VectorElement","value":"ErrorTraceDetail::VectorElement { index, position }","parent":{"krate":0,"index":1165},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1169},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/verifier.rs","byte_start":69414,"byte_end":69424,"line_start":15,"line_end":15,"column_start":5,"column_end":15},"name":"TableField","qualname":"::verifier::ErrorTraceDetail::TableField","value":"ErrorTraceDetail::TableField { field_name, position }","parent":{"krate":0,"index":1165},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1172},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/verifier.rs","byte_start":69497,"byte_end":69509,"line_start":19,"line_end":19,"column_start":5,"column_end":17},"name":"UnionVariant","qualname":"::verifier::ErrorTraceDetail::UnionVariant","value":"ErrorTraceDetail::UnionVariant { variant, position }","parent":{"krate":0,"index":1165},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1165},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/verifier.rs","byte_start":69317,"byte_end":69333,"line_start":10,"line_end":10,"column_start":10,"column_end":26},"name":"ErrorTraceDetail","qualname":"::verifier::ErrorTraceDetail","value":"pub enum ErrorTraceDetail {\n    VectorElement {\n        index: usize,\n        position: usize,\n    },\n    TableField {\n        field_name: &'static str,\n        position: usize,\n    },\n    UnionVariant {\n        variant: &'static str,\n        position: usize,\n    },\n}","parent":null,"children":[{"krate":0,"index":1166},{"krate":0,"index":1169},{"krate":0,"index":1172}],"decl_id":null,"docs":" Traces the location of data errors. Not populated for Dos detecting errors.\n Useful for MissingRequiredField and Utf8Error in particular, though\n the other errors should not be producible by correct flatbuffers implementations.\n","sig":null,"attributes":[{"value":"/ Traces the location of data errors. Not populated for Dos detecting errors.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/verifier.rs","byte_start":69031,"byte_end":69110,"line_start":6,"line_end":6,"column_start":1,"column_end":80}},{"value":"/ Useful for MissingRequiredField and Utf8Error in particular, though","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/verifier.rs","byte_start":69111,"byte_end":69182,"line_start":7,"line_end":7,"column_start":1,"column_end":72}},{"value":"/ the other errors should not be producible by correct flatbuffers implementations.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/verifier.rs","byte_start":69183,"byte_end":69268,"line_start":8,"line_end":8,"column_start":1,"column_end":86}}]},{"kind":"Struct","id":{"krate":0,"index":1186},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/verifier.rs","byte_start":69636,"byte_end":69646,"line_start":25,"line_end":25,"column_start":12,"column_end":22},"name":"ErrorTrace","qualname":"::verifier::ErrorTrace","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1228},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/verifier.rs","byte_start":70143,"byte_end":70163,"line_start":38,"line_end":38,"column_start":5,"column_end":25},"name":"MissingRequiredField","qualname":"::verifier::InvalidFlatbuffer::MissingRequiredField","value":"InvalidFlatbuffer::MissingRequiredField { required, error_trace }","parent":{"krate":0,"index":1202},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"error(\"Missing required field `{required}`.\\n{error_trace}\")","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/verifier.rs","byte_start":70075,"byte_end":70138,"line_start":37,"line_end":37,"column_start":5,"column_end":68}}]},{"kind":"StructVariant","id":{"krate":0,"index":1231},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/verifier.rs","byte_start":70394,"byte_end":70411,"line_start":46,"line_end":46,"column_start":5,"column_end":22},"name":"InconsistentUnion","qualname":"::verifier::InvalidFlatbuffer::InconsistentUnion","value":"InvalidFlatbuffer::InconsistentUnion { field, field_type, error_trace }","parent":{"krate":0,"index":1202},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"error(\"Union exactly one of union discriminant (`{field_type}`) and value \\\n             (`{field}`) are present.\\n{error_trace}\")","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/verifier.rs","byte_start":70242,"byte_end":70389,"line_start":42,"line_end":45,"column_start":5,"column_end":7}}]},{"kind":"StructVariant","id":{"krate":0,"index":1235},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/verifier.rs","byte_start":70596,"byte_end":70605,"line_start":52,"line_end":52,"column_start":5,"column_end":14},"name":"Utf8Error","qualname":"::verifier::InvalidFlatbuffer::Utf8Error","value":"InvalidFlatbuffer::Utf8Error { error, range, error_trace }","parent":{"krate":0,"index":1202},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"error(\"Utf8 error for string in {range:?}: {error}\\n{error_trace}\")","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/verifier.rs","byte_start":70521,"byte_end":70591,"line_start":51,"line_end":51,"column_start":5,"column_end":75}}]},{"kind":"StructVariant","id":{"krate":0,"index":1239},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/verifier.rs","byte_start":70859,"byte_end":70880,"line_start":60,"line_end":60,"column_start":5,"column_end":26},"name":"MissingNullTerminator","qualname":"::verifier::InvalidFlatbuffer::MissingNullTerminator","value":"InvalidFlatbuffer::MissingNullTerminator { range, error_trace }","parent":{"krate":0,"index":1202},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"error(\"String in range [{}, {}) is missing its null terminator.\\n{error_trace}\",\n        range.start, range.end)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/verifier.rs","byte_start":70735,"byte_end":70854,"line_start":58,"line_end":59,"column_start":5,"column_end":37}}]},{"kind":"StructVariant","id":{"krate":0,"index":1242},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/verifier.rs","byte_start":71048,"byte_end":71057,"line_start":65,"line_end":65,"column_start":5,"column_end":14},"name":"Unaligned","qualname":"::verifier::InvalidFlatbuffer::Unaligned","value":"InvalidFlatbuffer::Unaligned { position, unaligned_type, error_trace }","parent":{"krate":0,"index":1202},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"error(\"Type `{unaligned_type}` at position {position} is unaligned.\\n{error_trace}\")","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/verifier.rs","byte_start":70956,"byte_end":71043,"line_start":64,"line_end":64,"column_start":5,"column_end":92}}]},{"kind":"StructVariant","id":{"krate":0,"index":1246},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/verifier.rs","byte_start":71255,"byte_end":71271,"line_start":71,"line_end":71,"column_start":5,"column_end":21},"name":"RangeOutOfBounds","qualname":"::verifier::InvalidFlatbuffer::RangeOutOfBounds","value":"InvalidFlatbuffer::RangeOutOfBounds { range, error_trace }","parent":{"krate":0,"index":1202},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"error(\"Range [{}, {}) is out of bounds.\\n{error_trace}\", range.start,\n        range.end)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/verifier.rs","byte_start":71167,"byte_end":71250,"line_start":70,"line_end":70,"column_start":5,"column_end":88}}]},{"kind":"StructVariant","id":{"krate":0,"index":1249},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/verifier.rs","byte_start":71492,"byte_end":71515,"line_start":79,"line_end":79,"column_start":5,"column_end":28},"name":"SignedOffsetOutOfBounds","qualname":"::verifier::InvalidFlatbuffer::SignedOffsetOutOfBounds","value":"InvalidFlatbuffer::SignedOffsetOutOfBounds { soffset, position, error_trace }","parent":{"krate":0,"index":1202},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"error(\"Signed offset at position {position} has value {soffset} which points out of bounds.\\\n             \\n{error_trace}\")","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/verifier.rs","byte_start":71347,"byte_end":71487,"line_start":75,"line_end":78,"column_start":5,"column_end":7}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1253},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/verifier.rs","byte_start":71744,"byte_end":71757,"line_start":86,"line_end":86,"column_start":5,"column_end":18},"name":"TooManyTables","qualname":"::verifier::InvalidFlatbuffer::TooManyTables","value":"InvalidFlatbuffer::TooManyTables","parent":{"krate":0,"index":1202},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"error(\"Too many tables.\")","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/verifier.rs","byte_start":71711,"byte_end":71739,"line_start":85,"line_end":85,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1255},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/verifier.rs","byte_start":71804,"byte_end":71824,"line_start":88,"line_end":88,"column_start":5,"column_end":25},"name":"ApparentSizeTooLarge","qualname":"::verifier::InvalidFlatbuffer::ApparentSizeTooLarge","value":"InvalidFlatbuffer::ApparentSizeTooLarge","parent":{"krate":0,"index":1202},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"error(\"Apparent size too large.\")","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/verifier.rs","byte_start":71763,"byte_end":71799,"line_start":87,"line_end":87,"column_start":5,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1257},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/verifier.rs","byte_start":71880,"byte_end":71897,"line_start":90,"line_end":90,"column_start":5,"column_end":22},"name":"DepthLimitReached","qualname":"::verifier::InvalidFlatbuffer::DepthLimitReached","value":"InvalidFlatbuffer::DepthLimitReached","parent":{"krate":0,"index":1202},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"error(\"Nested table depth limit reached.\")","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/verifier.rs","byte_start":71830,"byte_end":71875,"line_start":89,"line_end":89,"column_start":5,"column_end":50}}]},{"kind":"Enum","id":{"krate":0,"index":1202},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/verifier.rs","byte_start":70051,"byte_end":70068,"line_start":36,"line_end":36,"column_start":10,"column_end":27},"name":"InvalidFlatbuffer","qualname":"::verifier::InvalidFlatbuffer","value":"pub enum InvalidFlatbuffer {\n    MissingRequiredField {\n        required: &'static str,\n        error_trace: ErrorTrace,\n    },\n    InconsistentUnion {\n        field: &'static str,\n        field_type: &'static str,\n        error_trace: ErrorTrace,\n    },\n    Utf8Error {\n        error: std::str::Utf8Error,\n        range: Range<usize>,\n        error_trace: ErrorTrace,\n    },\n    MissingNullTerminator {\n        range: Range<usize>,\n        error_trace: ErrorTrace,\n    },\n    Unaligned {\n        position: usize,\n        unaligned_type: &'static str,\n        error_trace: ErrorTrace,\n    },\n    RangeOutOfBounds {\n        range: Range<usize>,\n        error_trace: ErrorTrace,\n    },\n    SignedOffsetOutOfBounds {\n        soffset: SOffsetT,\n        position: usize,\n        error_trace: ErrorTrace,\n    },\n    TooManyTables,\n    ApparentSizeTooLarge,\n    DepthLimitReached,\n}","parent":null,"children":[{"krate":0,"index":1228},{"krate":0,"index":1231},{"krate":0,"index":1235},{"krate":0,"index":1239},{"krate":0,"index":1242},{"krate":0,"index":1246},{"krate":0,"index":1249},{"krate":0,"index":1253},{"krate":0,"index":1255},{"krate":0,"index":1257}],"decl_id":null,"docs":" Describes how a flatuffer is invalid and, for data errors, roughly where. No extra tracing\n information is given for DoS detecting errors since it will probably be a lot.\n","sig":null,"attributes":[{"value":"/ Describes how a flatuffer is invalid and, for data errors, roughly where. No extra tracing","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/verifier.rs","byte_start":69818,"byte_end":69912,"line_start":33,"line_end":33,"column_start":1,"column_end":95}},{"value":"/ information is given for DoS detecting errors since it will probably be a lot.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/verifier.rs","byte_start":69913,"byte_end":69995,"line_start":34,"line_end":34,"column_start":1,"column_end":83}}]},{"kind":"Struct","id":{"krate":0,"index":1259},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/verifier.rs","byte_start":74981,"byte_end":74996,"line_start":186,"line_end":186,"column_start":12,"column_end":27},"name":"VerifierOptions","qualname":"::verifier::VerifierOptions","value":"VerifierOptions { max_depth, max_tables, max_apparent_size, ignore_missing_null_terminator }","parent":null,"children":[{"krate":0,"index":1260},{"krate":0,"index":1261},{"krate":0,"index":1262},{"krate":0,"index":1263}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1260},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/verifier.rs","byte_start":75077,"byte_end":75086,"line_start":188,"line_end":188,"column_start":9,"column_end":18},"name":"max_depth","qualname":"::verifier::VerifierOptions::max_depth","value":"usize","parent":{"krate":0,"index":1259},"children":[],"decl_id":null,"docs":" Maximum depth of nested tables allowed in a valid flatbuffer.\n","sig":null,"attributes":[{"value":"/ Maximum depth of nested tables allowed in a valid flatbuffer.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/verifier.rs","byte_start":75003,"byte_end":75068,"line_start":187,"line_end":187,"column_start":5,"column_end":70}}]},{"kind":"Field","id":{"krate":0,"index":1261},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/verifier.rs","byte_start":75167,"byte_end":75177,"line_start":190,"line_end":190,"column_start":9,"column_end":19},"name":"max_tables","qualname":"::verifier::VerifierOptions::max_tables","value":"usize","parent":{"krate":0,"index":1259},"children":[],"decl_id":null,"docs":" Maximum number of tables allowed in a valid flatbuffer.\n","sig":null,"attributes":[{"value":"/ Maximum number of tables allowed in a valid flatbuffer.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/verifier.rs","byte_start":75099,"byte_end":75158,"line_start":189,"line_end":189,"column_start":5,"column_end":64}}]},{"kind":"Field","id":{"krate":0,"index":1262},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/verifier.rs","byte_start":75303,"byte_end":75320,"line_start":193,"line_end":193,"column_start":9,"column_end":26},"name":"max_apparent_size","qualname":"::verifier::VerifierOptions::max_apparent_size","value":"usize","parent":{"krate":0,"index":1259},"children":[],"decl_id":null,"docs":" Maximum \"apparent\" size of the message if the Flatbuffer object DAG is expanded into a\n tree.\n","sig":null,"attributes":[{"value":"/ Maximum \"apparent\" size of the message if the Flatbuffer object DAG is expanded into a","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/verifier.rs","byte_start":75190,"byte_end":75280,"line_start":191,"line_end":191,"column_start":5,"column_end":95}},{"value":"/ tree.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/verifier.rs","byte_start":75285,"byte_end":75294,"line_start":192,"line_end":192,"column_start":5,"column_end":14}}]},{"kind":"Field","id":{"krate":0,"index":1263},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/verifier.rs","byte_start":75500,"byte_end":75530,"line_start":196,"line_end":196,"column_start":9,"column_end":39},"name":"ignore_missing_null_terminator","qualname":"::verifier::VerifierOptions::ignore_missing_null_terminator","value":"bool","parent":{"krate":0,"index":1259},"children":[],"decl_id":null,"docs":" Ignore errors where a string is missing its null terminator.\n This is mostly a problem if the message will be sent to a client using old c-strings.\n","sig":null,"attributes":[{"value":"/ Ignore errors where a string is missing its null terminator.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/verifier.rs","byte_start":75333,"byte_end":75397,"line_start":194,"line_end":194,"column_start":5,"column_end":69}},{"value":"/ This is mostly a problem if the message will be sent to a client using old c-strings.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/verifier.rs","byte_start":75402,"byte_end":75491,"line_start":195,"line_end":195,"column_start":5,"column_end":94}}]},{"kind":"Struct","id":{"krate":0,"index":1275},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/verifier.rs","byte_start":76135,"byte_end":76143,"line_start":215,"line_end":215,"column_start":12,"column_end":20},"name":"Verifier","qualname":"::verifier::Verifier","value":"Verifier {  }","parent":null,"children":[{"krate":0,"index":1278},{"krate":0,"index":1279},{"krate":0,"index":1280},{"krate":0,"index":1281},{"krate":0,"index":1282}],"decl_id":null,"docs":" Carries the verification state. Should not be reused between tables.\n","sig":null,"attributes":[{"value":"/ Carries the verification state. Should not be reused between tables.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/verifier.rs","byte_start":76034,"byte_end":76106,"line_start":213,"line_end":213,"column_start":1,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":714},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/verifier.rs","byte_start":76339,"byte_end":76342,"line_start":223,"line_end":223,"column_start":12,"column_end":15},"name":"new","qualname":"<Verifier>::new","value":"pub fn new(&'opts VerifierOptions, &'buf [u8]) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":715},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/verifier.rs","byte_start":76616,"byte_end":76621,"line_start":234,"line_end":234,"column_start":12,"column_end":17},"name":"reset","qualname":"<Verifier>::reset","value":"pub fn reset(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Resets verifier internal state.\n","sig":null,"attributes":[{"value":"/ Resets verifier internal state.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/verifier.rs","byte_start":76555,"byte_end":76590,"line_start":232,"line_end":232,"column_start":5,"column_end":40}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/verifier.rs","byte_start":76595,"byte_end":76604,"line_start":233,"line_end":233,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":719},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/verifier.rs","byte_start":78011,"byte_end":78020,"line_start":272,"line_end":272,"column_start":12,"column_end":21},"name":"in_buffer","qualname":"<Verifier>::in_buffer","value":"pub fn in_buffer<T>(&mut Self, usize) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Check that there really is a T in there.\n","sig":null,"attributes":[{"value":"/ Check that there really is a T in there.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/verifier.rs","byte_start":77941,"byte_end":77985,"line_start":270,"line_end":270,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/verifier.rs","byte_start":77990,"byte_end":77999,"line_start":271,"line_end":271,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":724},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/verifier.rs","byte_start":79496,"byte_end":79507,"line_start":319,"line_end":319,"column_start":12,"column_end":23},"name":"visit_table","qualname":"<Verifier>::visit_table","value":"pub fn visit_table<'ver>(&'ver mut Self, usize) -> Result<TableVerifier>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/verifier.rs","byte_start":79475,"byte_end":79484,"line_start":318,"line_end":318,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":726},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/verifier.rs","byte_start":80504,"byte_end":80524,"line_start":346,"line_end":346,"column_start":12,"column_end":32},"name":"verify_union_variant","qualname":"<Verifier>::verify_union_variant","value":"pub fn verify_union_variant<T: Verifiable>(&mut Self, &'static str, usize)\n-> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Runs the union variant's type's verifier assuming the variant is at the given position,\n tracing the error.\n","sig":null,"attributes":[{"value":"/ Runs the union variant's type's verifier assuming the variant is at the given position,","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/verifier.rs","byte_start":80374,"byte_end":80465,"line_start":344,"line_end":344,"column_start":5,"column_end":96}},{"value":"/ tracing the error.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/verifier.rs","byte_start":80470,"byte_end":80492,"line_start":345,"line_end":345,"column_start":5,"column_end":27}}]},{"kind":"Struct","id":{"krate":0,"index":728},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/verifier.rs","byte_start":80914,"byte_end":80927,"line_start":358,"line_end":358,"column_start":12,"column_end":25},"name":"TableVerifier","qualname":"::verifier::TableVerifier","value":"TableVerifier {  }","parent":null,"children":[{"krate":0,"index":732},{"krate":0,"index":733},{"krate":0,"index":734},{"krate":0,"index":735}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":741},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/verifier.rs","byte_start":81799,"byte_end":81810,"line_start":383,"line_end":383,"column_start":12,"column_end":23},"name":"visit_field","qualname":"<TableVerifier>::visit_field","value":"pub fn visit_field<T: Verifiable>(Self, &'static str, VOffsetT, bool)\n-> Result<Self>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/verifier.rs","byte_start":81778,"byte_end":81787,"line_start":382,"line_end":382,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":743},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/verifier.rs","byte_start":82645,"byte_end":82656,"line_start":407,"line_end":407,"column_start":12,"column_end":23},"name":"visit_union","qualname":"<TableVerifier>::visit_union","value":"pub fn visit_union<Key,\n                   UnionVerifier>(Self, &'static str, VOffsetT, &'static str,\n                                  VOffsetT, bool, UnionVerifier)\n-> Result<Self> where Key: Follow + Verifiable,\nUnionVerifier: std::ops::FnOnce(<Key as Follow>::Inner, &mut Verifier, usize)\n-> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Union verification is complicated. The schemas passes this function the metadata of the\n union's key (discriminant) and value fields, and a callback. The function verifies and\n reads the key, then invokes the callback to perform data-dependent verification.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/verifier.rs","byte_start":82344,"byte_end":82353,"line_start":403,"line_end":403,"column_start":5,"column_end":14}},{"value":"/ Union verification is complicated. The schemas passes this function the metadata of the","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/verifier.rs","byte_start":82358,"byte_end":82449,"line_start":404,"line_end":404,"column_start":5,"column_end":96}},{"value":"/ union's key (discriminant) and value fields, and a callback. The function verifies and","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/verifier.rs","byte_start":82454,"byte_end":82544,"line_start":405,"line_end":405,"column_start":5,"column_end":95}},{"value":"/ reads the key, then invokes the callback to perform data-dependent verification.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/verifier.rs","byte_start":82549,"byte_end":82633,"line_start":406,"line_end":406,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":746},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/verifier.rs","byte_start":84093,"byte_end":84099,"line_start":446,"line_end":446,"column_start":12,"column_end":18},"name":"finish","qualname":"<TableVerifier>::finish","value":"pub fn finish(Self) -> &'ver mut Verifier","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":747},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/verifier.rs","byte_start":84314,"byte_end":84324,"line_start":454,"line_end":454,"column_start":11,"column_end":21},"name":"Verifiable","qualname":"::verifier::Verifiable","value":"Verifiable","parent":null,"children":[{"krate":0,"index":748}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":748},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/verifier.rs","byte_start":84479,"byte_end":84491,"line_start":457,"line_end":457,"column_start":8,"column_end":20},"name":"run_verifier","qualname":"::verifier::Verifiable::run_verifier","value":"pub fn run_verifier(&mut Verifier, usize) -> Result<()>","parent":{"krate":0,"index":747},"children":[],"decl_id":null,"docs":" Runs the verifier for this type, assuming its at position `pos` in the verifier's buffer.\n Should not need to be called directly.\n","sig":null,"attributes":[{"value":"/ Runs the verifier for this type, assuming its at position `pos` in the verifier's buffer.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/verifier.rs","byte_start":84331,"byte_end":84424,"line_start":455,"line_end":455,"column_start":5,"column_end":98}},{"value":"/ Should not need to be called directly.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/verifier.rs","byte_start":84429,"byte_end":84471,"line_start":456,"line_end":456,"column_start":5,"column_end":47}}]},{"kind":"Trait","id":{"krate":0,"index":754},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/verifier.rs","byte_start":85376,"byte_end":85397,"line_start":481,"line_end":481,"column_start":11,"column_end":32},"name":"SimpleToVerifyInSlice","qualname":"::verifier::SimpleToVerifyInSlice","value":"SimpleToVerifyInSlice","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1331},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/vtable.rs","byte_start":89033,"byte_end":89039,"line_start":24,"line_end":24,"column_start":12,"column_end":18},"name":"VTable","qualname":"::vtable::VTable","value":"VTable {  }","parent":null,"children":[{"krate":0,"index":1333},{"krate":0,"index":1334}],"decl_id":null,"docs":" VTable encapsulates read-only usage of a vtable. It is only to be used\n by generated code.\n","sig":null,"attributes":[{"value":"/ VTable encapsulates read-only usage of a vtable. It is only to be used","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/vtable.rs","byte_start":88907,"byte_end":88981,"line_start":21,"line_end":21,"column_start":1,"column_end":75}},{"value":"/ by generated code.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/vtable.rs","byte_start":88982,"byte_end":89004,"line_start":22,"line_end":22,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":793},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/vtable.rs","byte_start":89250,"byte_end":89254,"line_start":36,"line_end":36,"column_start":12,"column_end":16},"name":"init","qualname":"<VTable>::init","value":"pub fn init(&'a [u8], usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":794},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/vtable.rs","byte_start":89337,"byte_end":89347,"line_start":39,"line_end":39,"column_start":12,"column_end":22},"name":"num_fields","qualname":"<VTable>::num_fields","value":"pub fn num_fields(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":795},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/vtable.rs","byte_start":89429,"byte_end":89438,"line_start":42,"line_end":42,"column_start":12,"column_end":21},"name":"num_bytes","qualname":"<VTable>::num_bytes","value":"pub fn num_bytes(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":796},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/vtable.rs","byte_start":89538,"byte_end":89561,"line_start":45,"line_end":45,"column_start":12,"column_end":35},"name":"object_inline_num_bytes","qualname":"<VTable>::object_inline_num_bytes","value":"pub fn object_inline_num_bytes(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":797},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/vtable.rs","byte_start":89695,"byte_end":89704,"line_start":49,"line_end":49,"column_start":12,"column_end":21},"name":"get_field","qualname":"<VTable>::get_field","value":"pub fn get_field(&Self, usize) -> VOffsetT","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":798},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/vtable.rs","byte_start":90018,"byte_end":90021,"line_start":59,"line_end":59,"column_start":12,"column_end":15},"name":"get","qualname":"<VTable>::get","value":"pub fn get(&Self, VOffsetT) -> VOffsetT","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":799},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/vtable.rs","byte_start":90291,"byte_end":90299,"line_start":66,"line_end":66,"column_start":12,"column_end":20},"name":"as_bytes","qualname":"<VTable>::as_bytes","value":"pub fn as_bytes(&Self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":800},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/vtable.rs","byte_start":90434,"byte_end":90461,"line_start":73,"line_end":73,"column_start":8,"column_end":35},"name":"field_index_to_field_offset","qualname":"::vtable::field_index_to_field_offset","value":"pub fn field_index_to_field_offset(VOffsetT) -> VOffsetT","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(dead_code)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/vtable.rs","byte_start":90407,"byte_end":90426,"line_start":72,"line_end":72,"column_start":1,"column_end":20}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/array.rs","byte_start":3409,"byte_end":3414,"line_start":30,"line_end":30,"column_start":43,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":41}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/array.rs","byte_start":3637,"byte_end":3642,"line_start":40,"line_end":40,"column_start":33,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":46},{"krate":0,"index":47}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/array.rs","byte_start":3974,"byte_end":3979,"line_start":57,"line_end":57,"column_start":46,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":52},{"krate":0,"index":53}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/array.rs","byte_start":4370,"byte_end":4375,"line_start":71,"line_end":71,"column_start":73,"column_end":78},"value":"","parent":null,"children":[{"krate":0,"index":59}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/array.rs","byte_start":4542,"byte_end":4547,"line_start":78,"line_end":78,"column_start":51,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":66}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/array.rs","byte_start":4900,"byte_end":4905,"line_start":88,"line_end":88,"column_start":61,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":71},{"krate":0,"index":72}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/array.rs","byte_start":5522,"byte_end":5527,"line_start":111,"line_end":111,"column_start":63,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":81},{"krate":0,"index":82},{"krate":0,"index":83}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":7991,"byte_end":8008,"line_start":62,"line_end":62,"column_start":12,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":155},{"krate":0,"index":157},{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":164},{"krate":0,"index":166},{"krate":0,"index":170},{"krate":0,"index":173},{"krate":0,"index":174},{"krate":0,"index":178},{"krate":0,"index":182},{"krate":0,"index":186},{"krate":0,"index":189},{"krate":0,"index":190},{"krate":0,"index":191},{"krate":0,"index":192},{"krate":0,"index":193},{"krate":0,"index":195},{"krate":0,"index":197},{"krate":0,"index":199},{"krate":0,"index":200},{"krate":0,"index":201},{"krate":0,"index":202},{"krate":0,"index":203},{"krate":0,"index":204},{"krate":0,"index":206},{"krate":0,"index":207},{"krate":0,"index":208},{"krate":0,"index":209},{"krate":0,"index":210},{"krate":0,"index":211},{"krate":0,"index":212},{"krate":0,"index":213},{"krate":0,"index":214},{"krate":0,"index":215}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":34054,"byte_end":34071,"line_start":764,"line_end":764,"column_start":24,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":221}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/follow.rs","byte_start":41158,"byte_end":41169,"line_start":39,"line_end":39,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":256},{"krate":0,"index":257}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/follow.rs","byte_start":41417,"byte_end":41428,"line_start":49,"line_end":49,"column_start":40,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":261},{"krate":0,"index":262}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":48826,"byte_end":48835,"line_start":88,"line_end":88,"column_start":18,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":48860,"byte_end":48869,"line_start":89,"line_end":89,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":356}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":48965,"byte_end":48974,"line_start":96,"line_end":96,"column_start":16,"column_end":25},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":49004,"byte_end":49013,"line_start":98,"line_end":98,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":361}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":49125,"byte_end":49134,"line_start":104,"line_end":104,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":364},{"krate":0,"index":365}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":49257,"byte_end":49266,"line_start":111,"line_end":111,"column_start":17,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":369},{"krate":0,"index":370},{"krate":0,"index":371}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":49809,"byte_end":49818,"line_start":134,"line_end":134,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":374},{"krate":0,"index":375}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":50086,"byte_end":50101,"line_start":144,"line_end":144,"column_start":18,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":378},{"krate":0,"index":379}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":50713,"byte_end":50728,"line_start":162,"line_end":162,"column_start":18,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":50753,"byte_end":50768,"line_start":163,"line_end":163,"column_start":19,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":384}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":50857,"byte_end":50872,"line_start":170,"line_end":170,"column_start":9,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":387}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":51000,"byte_end":51015,"line_start":177,"line_end":177,"column_start":40,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":391},{"krate":0,"index":392}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":51490,"byte_end":51505,"line_start":191,"line_end":191,"column_start":9,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":395}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":51634,"byte_end":51649,"line_start":198,"line_end":198,"column_start":40,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":399},{"krate":0,"index":400}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":51932,"byte_end":51947,"line_start":208,"line_end":208,"column_start":18,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":403},{"krate":0,"index":404}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":52322,"byte_end":52338,"line_start":221,"line_end":221,"column_start":9,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":407}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":52467,"byte_end":52483,"line_start":228,"line_end":228,"column_start":40,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":411},{"krate":0,"index":412}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":52780,"byte_end":52796,"line_start":238,"line_end":238,"column_start":18,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":415},{"krate":0,"index":416}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":53187,"byte_end":53201,"line_start":250,"line_end":250,"column_start":45,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":424},{"krate":0,"index":425}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":53618,"byte_end":53632,"line_start":261,"line_end":261,"column_start":45,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":433},{"krate":0,"index":434}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":54004,"byte_end":54018,"line_start":272,"line_end":272,"column_start":25,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":439},{"krate":0,"index":440}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":54450,"byte_end":54468,"line_start":284,"line_end":284,"column_start":45,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":448},{"krate":0,"index":449}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/push.rs","byte_start":57076,"byte_end":57089,"line_start":41,"line_end":41,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":478},{"krate":0,"index":479},{"krate":0,"index":480}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/table.rs","byte_start":58903,"byte_end":58908,"line_start":27,"line_end":27,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":492},{"krate":0,"index":493},{"krate":0,"index":494}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/table.rs","byte_start":59503,"byte_end":59508,"line_start":50,"line_end":50,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":498},{"krate":0,"index":499}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/vector.rs","byte_start":61131,"byte_end":61137,"line_start":32,"line_end":32,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":554}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/vector.rs","byte_start":61454,"byte_end":61460,"line_start":44,"line_end":44,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":559}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/vector.rs","byte_start":61880,"byte_end":61886,"line_start":57,"line_end":57,"column_start":22,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/vector.rs","byte_start":61919,"byte_end":61925,"line_start":58,"line_end":58,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":566}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/vector.rs","byte_start":62004,"byte_end":62010,"line_start":64,"line_end":64,"column_start":17,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":570},{"krate":0,"index":571},{"krate":0,"index":572}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/vector.rs","byte_start":62439,"byte_end":62445,"line_start":84,"line_end":84,"column_start":30,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":576},{"krate":0,"index":577}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/vector.rs","byte_start":62922,"byte_end":62928,"line_start":100,"line_end":100,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":582}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/vector.rs","byte_start":65421,"byte_end":65427,"line_start":174,"line_end":174,"column_start":45,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":613},{"krate":0,"index":614}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/vector.rs","byte_start":65756,"byte_end":65766,"line_start":190,"line_end":190,"column_start":17,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":618},{"krate":0,"index":619}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/vector.rs","byte_start":66474,"byte_end":66484,"line_start":215,"line_end":215,"column_start":40,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":623}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/vector.rs","byte_start":66748,"byte_end":66758,"line_start":227,"line_end":227,"column_start":43,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":627},{"krate":0,"index":628},{"krate":0,"index":629},{"krate":0,"index":630}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/vector.rs","byte_start":67725,"byte_end":67735,"line_start":265,"line_end":265,"column_start":54,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":634},{"krate":0,"index":635}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/vector.rs","byte_start":68278,"byte_end":68288,"line_start":286,"line_end":286,"column_start":52,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":639}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/vector.rs","byte_start":68420,"byte_end":68430,"line_start":293,"line_end":293,"column_start":48,"column_end":58},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/vector.rs","byte_start":68488,"byte_end":68494,"line_start":295,"line_end":295,"column_start":47,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":646},{"krate":0,"index":647},{"krate":0,"index":648}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/verifier.rs","byte_start":69720,"byte_end":69730,"line_start":26,"line_end":26,"column_start":50,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":689}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/verifier.rs","byte_start":71929,"byte_end":71939,"line_start":93,"line_end":93,"column_start":28,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":691}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/verifier.rs","byte_start":73114,"byte_end":73131,"line_start":130,"line_end":130,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":696},{"krate":0,"index":698},{"krate":0,"index":700}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/verifier.rs","byte_start":75751,"byte_end":75766,"line_start":201,"line_end":201,"column_start":18,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":710}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/verifier.rs","byte_start":76304,"byte_end":76312,"line_start":222,"line_end":222,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":714},{"krate":0,"index":715},{"krate":0,"index":716},{"krate":0,"index":718},{"krate":0,"index":719},{"krate":0,"index":721},{"krate":0,"index":722},{"krate":0,"index":723},{"krate":0,"index":724},{"krate":0,"index":726}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/verifier.rs","byte_start":81265,"byte_end":81278,"line_start":368,"line_end":368,"column_start":25,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":740},{"krate":0,"index":741},{"krate":0,"index":743},{"krate":0,"index":746}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/verifier.rs","byte_start":84650,"byte_end":84665,"line_start":461,"line_end":461,"column_start":36,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":751}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/verifier.rs","byte_start":85865,"byte_end":85871,"line_start":494,"line_end":494,"column_start":47,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":768}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/verifier.rs","byte_start":86049,"byte_end":86063,"line_start":501,"line_end":501,"column_start":36,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":771}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/verifier.rs","byte_start":86264,"byte_end":86270,"line_start":508,"line_end":508,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":774}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/vtable.rs","byte_start":89107,"byte_end":89113,"line_start":29,"line_end":29,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":790}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/vtable.rs","byte_start":89226,"byte_end":89232,"line_start":35,"line_end":35,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":793},{"krate":0,"index":794},{"krate":0,"index":795},{"krate":0,"index":796},{"krate":0,"index":797},{"krate":0,"index":798},{"krate":0,"index":799}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/vtable.rs","byte_start":90956,"byte_end":90962,"line_start":86,"line_end":86,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":804},{"krate":0,"index":805}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/vtable_writer.rs","byte_start":91980,"byte_end":91992,"line_start":28,"line_end":28,"column_start":10,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":820},{"krate":0,"index":821},{"krate":0,"index":822},{"krate":0,"index":823},{"krate":0,"index":824},{"krate":0,"index":825}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/array.rs","byte_start":3409,"byte_end":3414,"line_start":30,"line_end":30,"column_start":43,"column_end":48},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":915},"to":{"krate":2,"index":8887}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/array.rs","byte_start":3637,"byte_end":3642,"line_start":40,"line_end":40,"column_start":33,"column_end":38},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":915},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/array.rs","byte_start":3974,"byte_end":3979,"line_start":57,"line_end":57,"column_start":46,"column_end":51},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":915},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/array.rs","byte_start":4370,"byte_end":4375,"line_start":71,"line_end":71,"column_start":73,"column_end":78},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":915},"to":{"krate":2,"index":2756}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/array.rs","byte_start":4542,"byte_end":4547,"line_start":78,"line_end":78,"column_start":51,"column_end":56},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":915},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/array.rs","byte_start":4900,"byte_end":4905,"line_start":88,"line_end":88,"column_start":61,"column_end":66},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":915},"to":{"krate":0,"index":249}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/array.rs","byte_start":5522,"byte_end":5527,"line_start":111,"line_end":111,"column_start":63,"column_end":68},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":915},"to":{"krate":2,"index":7147}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":7991,"byte_end":8008,"line_start":62,"line_end":62,"column_start":12,"column_end":29},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":949},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/builder.rs","byte_start":34054,"byte_end":34071,"line_start":764,"line_end":764,"column_start":24,"column_end":41},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":949},"to":{"krate":2,"index":2831}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/endian_scalar.rs","byte_start":35327,"byte_end":35332,"line_start":29,"line_end":29,"column_start":25,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":2858},"to":{"krate":0,"index":226}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/endian_scalar.rs","byte_start":35335,"byte_end":35344,"line_start":29,"line_end":29,"column_start":33,"column_end":42},"kind":"SuperTrait","from":{"krate":2,"index":2504},"to":{"krate":0,"index":226}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/endian_scalar.rs","byte_start":35347,"byte_end":35351,"line_start":29,"line_end":29,"column_start":45,"column_end":49},"kind":"SuperTrait","from":{"krate":2,"index":2863},"to":{"krate":0,"index":226}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/endian_scalar.rs","byte_start":35354,"byte_end":35359,"line_start":29,"line_end":29,"column_start":52,"column_end":57},"kind":"SuperTrait","from":{"krate":2,"index":2474},"to":{"krate":0,"index":226}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/follow.rs","byte_start":41158,"byte_end":41169,"line_start":39,"line_end":39,"column_start":30,"column_end":41},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":1005},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/follow.rs","byte_start":41417,"byte_end":41428,"line_start":49,"line_end":49,"column_start":40,"column_end":51},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":1005},"to":{"krate":0,"index":249}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":48826,"byte_end":48835,"line_start":88,"line_end":88,"column_start":18,"column_end":27},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":1031},"to":{"krate":2,"index":2863}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":48860,"byte_end":48869,"line_start":89,"line_end":89,"column_start":19,"column_end":28},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":1031},"to":{"krate":2,"index":2474}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":48965,"byte_end":48974,"line_start":96,"line_end":96,"column_start":16,"column_end":25},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":1031},"to":{"krate":2,"index":2509}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":49004,"byte_end":49013,"line_start":98,"line_end":98,"column_start":23,"column_end":32},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":1031},"to":{"krate":2,"index":2504}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":49125,"byte_end":49134,"line_start":104,"line_end":104,"column_start":19,"column_end":28},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":1031},"to":{"krate":2,"index":3064}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":49257,"byte_end":49266,"line_start":111,"line_end":111,"column_start":17,"column_end":26},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":1031},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":49809,"byte_end":49818,"line_start":134,"line_end":134,"column_start":18,"column_end":27},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":1031},"to":{"krate":0,"index":469}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":50086,"byte_end":50101,"line_start":144,"line_end":144,"column_start":18,"column_end":33},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":1039},"to":{"krate":0,"index":469}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":50713,"byte_end":50728,"line_start":162,"line_end":162,"column_start":18,"column_end":33},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":1039},"to":{"krate":2,"index":2863}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":50753,"byte_end":50768,"line_start":163,"line_end":163,"column_start":19,"column_end":34},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":1039},"to":{"krate":2,"index":2474}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":50857,"byte_end":50872,"line_start":170,"line_end":170,"column_start":9,"column_end":24},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":1039},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":51000,"byte_end":51015,"line_start":177,"line_end":177,"column_start":40,"column_end":55},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":1039},"to":{"krate":0,"index":249}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":51490,"byte_end":51505,"line_start":191,"line_end":191,"column_start":9,"column_end":24},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":1047},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":51634,"byte_end":51649,"line_start":198,"line_end":198,"column_start":40,"column_end":55},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":1047},"to":{"krate":0,"index":249}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":51932,"byte_end":51947,"line_start":208,"line_end":208,"column_start":18,"column_end":33},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":1047},"to":{"krate":0,"index":469}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":52322,"byte_end":52338,"line_start":221,"line_end":221,"column_start":9,"column_end":25},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":1055},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":52467,"byte_end":52483,"line_start":228,"line_end":228,"column_start":40,"column_end":56},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":1055},"to":{"krate":0,"index":249}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":52780,"byte_end":52796,"line_start":238,"line_end":238,"column_start":18,"column_end":34},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":1055},"to":{"krate":0,"index":469}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":53187,"byte_end":53201,"line_start":250,"line_end":250,"column_start":45,"column_end":59},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":417},"to":{"krate":0,"index":249}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":53618,"byte_end":53632,"line_start":261,"line_end":261,"column_start":45,"column_end":59},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":426},"to":{"krate":0,"index":249}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":54004,"byte_end":54018,"line_start":272,"line_end":272,"column_start":25,"column_end":39},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":435},"to":{"krate":0,"index":249}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/primitives.rs","byte_start":54450,"byte_end":54468,"line_start":284,"line_end":284,"column_start":45,"column_end":63},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":441},"to":{"krate":0,"index":249}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/push.rs","byte_start":56625,"byte_end":56630,"line_start":25,"line_end":25,"column_start":17,"column_end":22},"kind":"SuperTrait","from":{"krate":2,"index":2858},"to":{"krate":0,"index":469}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/push.rs","byte_start":57076,"byte_end":57089,"line_start":41,"line_end":41,"column_start":6,"column_end":19},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":474},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/table.rs","byte_start":58903,"byte_end":58908,"line_start":27,"line_end":27,"column_start":10,"column_end":15},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":1136},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/table.rs","byte_start":59503,"byte_end":59508,"line_start":50,"line_end":50,"column_start":25,"column_end":30},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":1136},"to":{"krate":0,"index":249}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/vector.rs","byte_start":61131,"byte_end":61137,"line_start":32,"line_end":32,"column_start":29,"column_end":35},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":544},"to":{"krate":2,"index":2831}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/vector.rs","byte_start":61454,"byte_end":61460,"line_start":44,"line_end":44,"column_start":23,"column_end":29},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":544},"to":{"krate":2,"index":8887}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/vector.rs","byte_start":61880,"byte_end":61886,"line_start":57,"line_end":57,"column_start":22,"column_end":28},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":544},"to":{"krate":2,"index":2863}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/vector.rs","byte_start":61919,"byte_end":61925,"line_start":58,"line_end":58,"column_start":23,"column_end":29},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":544},"to":{"krate":2,"index":2474}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/vector.rs","byte_start":62004,"byte_end":62010,"line_start":64,"line_end":64,"column_start":17,"column_end":23},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":544},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/vector.rs","byte_start":62439,"byte_end":62445,"line_start":84,"line_end":84,"column_start":30,"column_end":36},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":544},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/vector.rs","byte_start":62922,"byte_end":62928,"line_start":100,"line_end":100,"column_start":35,"column_end":41},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":544},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/vector.rs","byte_start":65421,"byte_end":65427,"line_start":174,"line_end":174,"column_start":45,"column_end":51},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":544},"to":{"krate":0,"index":249}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/vector.rs","byte_start":65756,"byte_end":65766,"line_start":190,"line_end":190,"column_start":17,"column_end":27},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":1154},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/vector.rs","byte_start":66474,"byte_end":66484,"line_start":215,"line_end":215,"column_start":40,"column_end":50},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":1154},"to":{"krate":2,"index":2474}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/vector.rs","byte_start":66748,"byte_end":66758,"line_start":227,"line_end":227,"column_start":43,"column_end":53},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":1154},"to":{"krate":2,"index":7310}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/vector.rs","byte_start":67725,"byte_end":67735,"line_start":265,"line_end":265,"column_start":54,"column_end":64},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":1154},"to":{"krate":2,"index":7174}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/vector.rs","byte_start":68278,"byte_end":68288,"line_start":286,"line_end":286,"column_start":52,"column_end":62},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":1154},"to":{"krate":2,"index":7199}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/vector.rs","byte_start":68420,"byte_end":68430,"line_start":293,"line_end":293,"column_start":48,"column_end":58},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":1154},"to":{"krate":2,"index":7586}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/vector.rs","byte_start":68488,"byte_end":68494,"line_start":295,"line_end":295,"column_start":47,"column_end":53},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":544},"to":{"krate":2,"index":7147}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/verifier.rs","byte_start":69720,"byte_end":69730,"line_start":26,"line_end":26,"column_start":50,"column_end":60},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":1186},"to":{"krate":2,"index":2750}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/verifier.rs","byte_start":71929,"byte_end":71939,"line_start":93,"line_end":93,"column_start":28,"column_end":38},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":1186},"to":{"krate":2,"index":8894}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/verifier.rs","byte_start":73114,"byte_end":73131,"line_start":130,"line_end":130,"column_start":6,"column_end":23},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":1202},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/verifier.rs","byte_start":75751,"byte_end":75766,"line_start":201,"line_end":201,"column_start":18,"column_end":33},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":1259},"to":{"krate":2,"index":2831}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/verifier.rs","byte_start":76304,"byte_end":76312,"line_start":222,"line_end":222,"column_start":19,"column_end":27},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":1275},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/verifier.rs","byte_start":81265,"byte_end":81278,"line_start":368,"line_end":368,"column_start":25,"column_end":38},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":728},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/verifier.rs","byte_start":84650,"byte_end":84665,"line_start":461,"line_end":461,"column_start":36,"column_end":51},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":1039},"to":{"krate":0,"index":747}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/verifier.rs","byte_start":85865,"byte_end":85871,"line_start":494,"line_end":494,"column_start":47,"column_end":53},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":544},"to":{"krate":0,"index":747}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/verifier.rs","byte_start":86049,"byte_end":86063,"line_start":501,"line_end":501,"column_start":36,"column_end":50},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":417},"to":{"krate":0,"index":747}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/verifier.rs","byte_start":86264,"byte_end":86270,"line_start":508,"line_end":508,"column_start":36,"column_end":42},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":544},"to":{"krate":0,"index":747}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/vtable.rs","byte_start":89107,"byte_end":89113,"line_start":29,"line_end":29,"column_start":24,"column_end":30},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":1331},"to":{"krate":2,"index":2504}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/vtable.rs","byte_start":89226,"byte_end":89232,"line_start":35,"line_end":35,"column_start":10,"column_end":16},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":1331},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/vtable.rs","byte_start":90956,"byte_end":90962,"line_start":86,"line_end":86,"column_start":25,"column_end":31},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":1331},"to":{"krate":0,"index":249}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.8.4/src/vtable_writer.rs","byte_start":91980,"byte_end":91992,"line_start":28,"line_end":28,"column_start":10,"column_end":22},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":1338},"to":{"krate":4294967295,"index":4294967295}}]}