{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0","program":"/home/adheip/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","arrow","--edition=2018","/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"default\"","-C","metadata=8a16c0dbc967eabe","-C","extra-filename=-8a16c0dbc967eabe","--out-dir","/home/adheip/jatrust/jatrust/arrow-json/target/rls/debug/deps","-L","dependency=/home/adheip/jatrust/jatrust/arrow-json/target/rls/debug/deps","--extern","chrono=/home/adheip/jatrust/jatrust/arrow-json/target/rls/debug/deps/libchrono-6d22116a12534676.rmeta","--extern","csv=/home/adheip/jatrust/jatrust/arrow-json/target/rls/debug/deps/libcsv-40c3654276a5616e.rmeta","--extern","flatbuffers=/home/adheip/jatrust/jatrust/arrow-json/target/rls/debug/deps/libflatbuffers-7e77d4d2b532361d.rmeta","--extern","hex=/home/adheip/jatrust/jatrust/arrow-json/target/rls/debug/deps/libhex-4e132399b961d086.rmeta","--extern","indexmap=/home/adheip/jatrust/jatrust/arrow-json/target/rls/debug/deps/libindexmap-5183ff54085e1086.rmeta","--extern","lazy_static=/home/adheip/jatrust/jatrust/arrow-json/target/rls/debug/deps/liblazy_static-acd7d23482fe8b54.rmeta","--extern","lexical_core=/home/adheip/jatrust/jatrust/arrow-json/target/rls/debug/deps/liblexical_core-806311a9d0ff9748.rmeta","--extern","num=/home/adheip/jatrust/jatrust/arrow-json/target/rls/debug/deps/libnum-93f5164ff4f8c321.rmeta","--extern","rand=/home/adheip/jatrust/jatrust/arrow-json/target/rls/debug/deps/librand-6711c5c861da848c.rmeta","--extern","regex=/home/adheip/jatrust/jatrust/arrow-json/target/rls/debug/deps/libregex-d03052e6c282786c.rmeta","--extern","serde=/home/adheip/jatrust/jatrust/arrow-json/target/rls/debug/deps/libserde-615e855e6d218b5c.rmeta","--extern","serde_derive=/home/adheip/jatrust/jatrust/arrow-json/target/rls/debug/deps/libserde_derive-f18fdbf2b5c14a57.so","--extern","serde_json=/home/adheip/jatrust/jatrust/arrow-json/target/rls/debug/deps/libserde_json-cc0a6c67b7c24adf.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/adheip/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/adheip/jatrust/jatrust/arrow-json/target/rls/debug/deps/libarrow-8a16c0dbc967eabe.rmeta"},"prelude":{"crate_id":{"name":"arrow","disambiguator":[15764548415204380715,4760819799968916942]},"crate_root":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src","external_crates":[{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[15256637969148649584,12170509131058075833]}},{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_union.rs","num":2,"id":{"name":"core","disambiguator":[2572959971889902175,17506693968225989007]}},{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[7380289047210505863,13821127130725723065]}},{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[15494144285296940423,1517275930380298805]}},{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[16074686111301742862,11174094882134223101]}},{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[9848143689052418189,5596786287495938678]}},{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[4765876764407181064,11122159180720543906]}},{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[3249135693812064660,5763443684941168569]}},{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[17048817722375060837,16920886256309599893]}},{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[13552797903376776722,10482089333731059857]}},{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[5989449439605467183,7256304997069434828]}},{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[13279369789493161905,12463804053127379464]}},{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[295047501211602818,3843164955111373824]}},{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[14781020588812023641,7393321088923443539]}},{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[1927264790928947756,6617054577979570835]}},{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","num":16,"id":{"name":"miniz_oxide","disambiguator":[7597657085106642381,11470551509849691989]}},{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","num":17,"id":{"name":"adler","disambiguator":[2355022556203982070,155364045674250901]}},{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","num":18,"id":{"name":"panic_unwind","disambiguator":[3046834347757213021,4625500188193743608]}},{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_list.rs","num":19,"id":{"name":"num","disambiguator":[210309747447107446,8439207600414910974]}},{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_list.rs","num":20,"id":{"name":"num_bigint","disambiguator":[14181667656961932889,7601535663362494545]}},{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_list.rs","num":21,"id":{"name":"num_integer","disambiguator":[5553581063183468653,11299415917043405953]}},{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_list.rs","num":22,"id":{"name":"num_traits","disambiguator":[2974498265845647676,13140870568599806007]}},{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_list.rs","num":23,"id":{"name":"num_complex","disambiguator":[3805341594967313980,14909082301450421143]}},{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_list.rs","num":24,"id":{"name":"num_rational","disambiguator":[16377484921203067206,7668830933436157537]}},{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_list.rs","num":25,"id":{"name":"num_iter","disambiguator":[1512691313307474317,387823615071026891]}},{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_primitive.rs","num":26,"id":{"name":"chrono","disambiguator":[3435007158024325643,14937318432462607776]}},{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_primitive.rs","num":27,"id":{"name":"time","disambiguator":[15055467851321769883,5298931098510535828]}},{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_primitive.rs","num":28,"id":{"name":"libc","disambiguator":[17319376255221460936,17339010578460562462]}},{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal_json.rs","num":29,"id":{"name":"hex","disambiguator":[10381091535252026269,2293417149705319682]}},{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal_json.rs","num":30,"id":{"name":"serde_json","disambiguator":[7518662154867139874,7774493909997382626]}},{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","num":31,"id":{"name":"serde","disambiguator":[6219940558920700197,7735096111308064721]}},{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","num":32,"id":{"name":"indexmap","disambiguator":[1031670354472117513,755386716959485960]}},{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal_json.rs","num":33,"id":{"name":"hashbrown","disambiguator":[14772961095709544784,9750305838409405306]}},{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal_json.rs","num":34,"id":{"name":"itoa","disambiguator":[8748891582871500327,12200914056416326647]}},{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal_json.rs","num":35,"id":{"name":"ryu","disambiguator":[11470782334523648659,8653981335039768051]}},{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/comparison.rs","num":36,"id":{"name":"regex","disambiguator":[15109182440305680232,8748423920462504346]}},{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/comparison.rs","num":37,"id":{"name":"regex_syntax","disambiguator":[283791072225402269,18198010613972305146]}},{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/comparison.rs","num":38,"id":{"name":"aho_corasick","disambiguator":[4062114912529834653,17037397568569658057]}},{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/comparison.rs","num":39,"id":{"name":"memchr","disambiguator":[6140065031258977407,15987706662218225508]}},{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","num":40,"id":{"name":"lazy_static","disambiguator":[13808990345214567022,8458474173850622234]}},{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","num":41,"id":{"name":"csv","disambiguator":[12881542112571142359,4520205570186979719]}},{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","num":42,"id":{"name":"bstr","disambiguator":[7013678791029888553,8745804133087294983]}},{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","num":43,"id":{"name":"regex_automata","disambiguator":[8960557820121258180,12420351625593082465]}},{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","num":44,"id":{"name":"csv_core","disambiguator":[1630770130054838583,5041643212558988460]}},{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","num":45,"id":{"name":"serde_derive","disambiguator":[16046167303765844339,12017656031789288671]}},{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/convert.rs","num":46,"id":{"name":"flatbuffers","disambiguator":[17452702720907433988,16695585327464237349]}},{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/convert.rs","num":47,"id":{"name":"smallvec","disambiguator":[6763373159956609544,3427387148971872266]}},{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/convert.rs","num":48,"id":{"name":"thiserror","disambiguator":[3927387539358883814,10886791537913292883]}},{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/convert.rs","num":49,"id":{"name":"thiserror_impl","disambiguator":[7922379030393238400,11491674622856468128]}},{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/convert.rs","num":50,"id":{"name":"bitflags","disambiguator":[14406972838987844197,15532057060354726600]}},{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/test_util.rs","num":51,"id":{"name":"rand","disambiguator":[9195511493643202331,9156200125363749521]}},{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/test_util.rs","num":52,"id":{"name":"rand_core","disambiguator":[2617049007542759159,14005397281942951721]}},{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/test_util.rs","num":53,"id":{"name":"getrandom","disambiguator":[1307837426074935581,11039202123743712149]}},{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/test_util.rs","num":54,"id":{"name":"cfg_if","disambiguator":[663853888918535240,12010312547204163862]}},{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/test_util.rs","num":55,"id":{"name":"rand_chacha","disambiguator":[5999560986871793325,14291949792287711255]}},{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/test_util.rs","num":56,"id":{"name":"ppv_lite86","disambiguator":[16342140534606003648,15606045994417953711]}},{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/cast.rs","num":57,"id":{"name":"lexical_core","disambiguator":[10716324038538648138,8046341106762236892]}},{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/cast.rs","num":58,"id":{"name":"arrayvec","disambiguator":[1788620935045434593,12624748379594686418]}},{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/cast.rs","num":59,"id":{"name":"static_assertions","disambiguator":[2800172271264622283,16868211187352620724]}}],"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":802,"byte_end":7329,"line_start":18,"line_end":154,"column_start":1,"column_end":21}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":32},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":11679,"byte_end":11684,"line_start":110,"line_end":110,"column_start":22,"column_end":27},"alias_span":null,"name":"Array","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":47},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":11707,"byte_end":11715,"line_start":111,"line_end":111,"column_start":22,"column_end":30},"alias_span":null,"name":"ArrayRef","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":7582},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":11737,"byte_end":11746,"line_start":112,"line_end":112,"column_start":21,"column_end":30},"alias_span":null,"name":"ArrayData","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":7594},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":11768,"byte_end":11784,"line_start":113,"line_end":113,"column_start":21,"column_end":37},"alias_span":null,"name":"ArrayDataBuilder","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":1259},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":11806,"byte_end":11818,"line_start":114,"line_end":114,"column_start":21,"column_end":33},"alias_span":null,"name":"ArrayDataRef","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":168},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":11849,"byte_end":11860,"line_start":116,"line_end":116,"column_start":29,"column_end":40},"alias_span":null,"name":"BinaryArray","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":216},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":11890,"byte_end":11902,"line_start":117,"line_end":117,"column_start":29,"column_end":41},"alias_span":null,"name":"DecimalArray","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":185},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":11932,"byte_end":11952,"line_start":118,"line_end":118,"column_start":29,"column_end":49},"alias_span":null,"name":"FixedSizeBinaryArray","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":169},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":11982,"byte_end":11998,"line_start":119,"line_end":119,"column_start":29,"column_end":45},"alias_span":null,"name":"LargeBinaryArray","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":288},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":12029,"byte_end":12041,"line_start":120,"line_end":120,"column_start":30,"column_end":42},"alias_span":null,"name":"BooleanArray","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":393},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":12075,"byte_end":12090,"line_start":121,"line_end":121,"column_start":33,"column_end":48},"alias_span":null,"name":"DictionaryArray","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":515},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":12118,"byte_end":12136,"line_start":122,"line_end":122,"column_start":27,"column_end":45},"alias_span":null,"name":"FixedSizeListArray","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":514},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":12164,"byte_end":12178,"line_start":123,"line_end":123,"column_start":27,"column_end":41},"alias_span":null,"name":"LargeListArray","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":513},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":12206,"byte_end":12215,"line_start":124,"line_end":124,"column_start":27,"column_end":36},"alias_span":null,"name":"ListArray","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":585},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":12248,"byte_end":12262,"line_start":125,"line_end":125,"column_start":32,"column_end":46},"alias_span":null,"name":"PrimitiveArray","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":765},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":12292,"byte_end":12308,"line_start":126,"line_end":126,"column_start":29,"column_end":45},"alias_span":null,"name":"LargeStringArray","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":764},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":12338,"byte_end":12349,"line_start":127,"line_end":127,"column_start":29,"column_end":40},"alias_span":null,"name":"StringArray","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":830},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":12379,"byte_end":12390,"line_start":128,"line_end":128,"column_start":29,"column_end":40},"alias_span":null,"name":"StructArray","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":906},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":12419,"byte_end":12429,"line_start":129,"line_end":129,"column_start":28,"column_end":38},"alias_span":null,"name":"UnionArray","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":1929},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":12451,"byte_end":12460,"line_start":130,"line_end":130,"column_start":21,"column_end":30},"alias_span":null,"name":"NullArray","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":48},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":12484,"byte_end":12494,"line_start":132,"line_end":132,"column_start":22,"column_end":32},"alias_span":null,"name":"make_array","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":123},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":14638,"byte_end":14659,"line_start":171,"line_end":171,"column_start":29,"column_end":50},"alias_span":null,"name":"BinaryOffsetSizeTrait","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":129},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":14689,"byte_end":14707,"line_start":172,"line_end":172,"column_start":29,"column_end":47},"alias_span":null,"name":"GenericBinaryArray","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":486},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":14735,"byte_end":14751,"line_start":173,"line_end":173,"column_start":27,"column_end":43},"alias_span":null,"name":"GenericListArray","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":477},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":14779,"byte_end":14794,"line_start":174,"line_end":174,"column_start":27,"column_end":42},"alias_span":null,"name":"OffsetSizeTrait","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":712},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":14824,"byte_end":14842,"line_start":175,"line_end":175,"column_start":29,"column_end":47},"alias_span":null,"name":"GenericStringArray","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":706},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":14872,"byte_end":14893,"line_start":176,"line_end":176,"column_start":29,"column_end":50},"alias_span":null,"name":"StringOffsetSizeTrait","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":7484},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":14981,"byte_end":15001,"line_start":180,"line_end":180,"column_start":24,"column_end":44},"alias_span":null,"name":"BooleanBufferBuilder","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":7476},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":15026,"byte_end":15039,"line_start":181,"line_end":181,"column_start":24,"column_end":37},"alias_span":null,"name":"BufferBuilder","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":999},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":16807,"byte_end":16819,"line_start":211,"line_end":211,"column_start":24,"column_end":36},"alias_span":null,"name":"ArrayBuilder","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":1083},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":16844,"byte_end":16857,"line_start":212,"line_end":212,"column_start":24,"column_end":37},"alias_span":null,"name":"BinaryBuilder","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":7489},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":16882,"byte_end":16896,"line_start":213,"line_end":213,"column_start":24,"column_end":38},"alias_span":null,"name":"BooleanBuilder","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":7537},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":16921,"byte_end":16935,"line_start":214,"line_end":214,"column_start":24,"column_end":38},"alias_span":null,"name":"DecimalBuilder","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":7533},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":16960,"byte_end":16982,"line_start":215,"line_end":215,"column_start":24,"column_end":46},"alias_span":null,"name":"FixedSizeBinaryBuilder","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":7512},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":17007,"byte_end":17027,"line_start":216,"line_end":216,"column_start":24,"column_end":44},"alias_span":null,"name":"FixedSizeListBuilder","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":1084},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":17052,"byte_end":17070,"line_start":217,"line_end":217,"column_start":24,"column_end":42},"alias_span":null,"name":"LargeBinaryBuilder","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":1063},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":17095,"byte_end":17111,"line_start":218,"line_end":218,"column_start":24,"column_end":40},"alias_span":null,"name":"LargeListBuilder","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":1086},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":17136,"byte_end":17154,"line_start":219,"line_end":219,"column_start":24,"column_end":42},"alias_span":null,"name":"LargeStringBuilder","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":1061},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":17179,"byte_end":17190,"line_start":220,"line_end":220,"column_start":24,"column_end":35},"alias_span":null,"name":"ListBuilder","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":7494},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":17215,"byte_end":17231,"line_start":221,"line_end":221,"column_start":24,"column_end":40},"alias_span":null,"name":"PrimitiveBuilder","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":7559},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":17256,"byte_end":17282,"line_start":222,"line_end":222,"column_start":24,"column_end":50},"alias_span":null,"name":"PrimitiveDictionaryBuilder","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":1085},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":17307,"byte_end":17320,"line_start":223,"line_end":223,"column_start":24,"column_end":37},"alias_span":null,"name":"StringBuilder","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":7569},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":17345,"byte_end":17368,"line_start":224,"line_end":224,"column_start":24,"column_end":47},"alias_span":null,"name":"StringDictionaryBuilder","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":1144},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":17393,"byte_end":17406,"line_start":225,"line_end":225,"column_start":24,"column_end":37},"alias_span":null,"name":"StructBuilder","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":7551},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":17431,"byte_end":17443,"line_start":226,"line_end":226,"column_start":24,"column_end":36},"alias_span":null,"name":"UnionBuilder","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":2240},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":19203,"byte_end":19219,"line_start":256,"line_end":256,"column_start":26,"column_end":42},"alias_span":null,"name":"MutableArrayData","value":"","parent":{"krate":0,"index":4}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":19309,"byte_end":19310,"line_start":260,"line_end":260,"column_start":25,"column_end":26},"alias_span":null,"name":"*","value":"GenericBinaryIter, BooleanIter, GenericStringIter, PrimitiveIter","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":1706},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":19402,"byte_end":19411,"line_start":264,"line_end":264,"column_start":27,"column_end":36},"alias_span":null,"name":"JsonEqual","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":1988},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":19508,"byte_end":19521,"line_start":268,"line_end":268,"column_start":21,"column_end":34},"alias_span":null,"name":"build_compare","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":1965},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":19523,"byte_end":19536,"line_start":268,"line_end":268,"column_start":36,"column_end":49},"alias_span":null,"name":"DynComparator","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":7579},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":19646,"byte_end":19662,"line_start":273,"line_end":273,"column_start":5,"column_end":21},"alias_span":null,"name":"as_boolean_array","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":1230},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":19664,"byte_end":19683,"line_start":273,"line_end":273,"column_start":23,"column_end":42},"alias_span":null,"name":"as_dictionary_array","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":7578},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":19685,"byte_end":19705,"line_start":273,"line_end":273,"column_start":44,"column_end":64},"alias_span":null,"name":"as_largestring_array","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":1232},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":19707,"byte_end":19720,"line_start":273,"line_end":273,"column_start":66,"column_end":79},"alias_span":null,"name":"as_list_array","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":7580},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":19726,"byte_end":19739,"line_start":274,"line_end":274,"column_start":5,"column_end":18},"alias_span":null,"name":"as_null_array","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":1228},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":19741,"byte_end":19759,"line_start":274,"line_end":274,"column_start":20,"column_end":38},"alias_span":null,"name":"as_primitive_array","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":7577},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":19761,"byte_end":19776,"line_start":274,"line_end":274,"column_start":40,"column_end":55},"alias_span":null,"name":"as_string_array","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":7581},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":19778,"byte_end":19793,"line_start":274,"line_end":274,"column_start":57,"column_end":72},"alias_span":null,"name":"as_struct_array","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":49},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":19900,"byte_end":19919,"line_start":279,"line_end":279,"column_start":22,"column_end":41},"alias_span":null,"name":"make_array_from_raw","value":"","parent":{"krate":0,"index":4}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/mod.rs","byte_start":597713,"byte_end":597714,"line_start":24,"line_end":24,"column_start":35,"column_end":36},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":2776}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/mod.rs","byte_start":597751,"byte_end":597752,"line_start":25,"line_end":25,"column_start":36,"column_end":37},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":2776}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/mod.rs","byte_start":597786,"byte_end":597787,"line_start":26,"line_end":26,"column_start":33,"column_end":34},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":2776}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/mod.rs","byte_start":597818,"byte_end":597819,"line_start":27,"line_end":27,"column_start":30,"column_end":31},"alias_span":null,"name":"*","value":"cast","parent":{"krate":0,"index":2776}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/mod.rs","byte_start":597856,"byte_end":597857,"line_start":28,"line_end":28,"column_start":36,"column_end":37},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":2776}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/mod.rs","byte_start":597890,"byte_end":597891,"line_start":29,"line_end":29,"column_start":32,"column_end":33},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":2776}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/mod.rs","byte_start":597924,"byte_end":597925,"line_start":30,"line_end":30,"column_start":32,"column_end":33},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":2776}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/mod.rs","byte_start":597957,"byte_end":597958,"line_start":31,"line_end":31,"column_start":31,"column_end":32},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":2776}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/mod.rs","byte_start":597989,"byte_end":597990,"line_start":32,"line_end":32,"column_start":30,"column_end":31},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":2776}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/mod.rs","byte_start":598021,"byte_end":598022,"line_start":33,"line_end":33,"column_start":30,"column_end":31},"alias_span":null,"name":"*","value":"take","parent":{"krate":0,"index":2776}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/mod.rs","byte_start":598057,"byte_end":598058,"line_start":34,"line_end":34,"column_start":34,"column_end":35},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":2776}},{"kind":"Use","ref_id":{"krate":0,"index":3612},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/mod.rs","byte_start":1023311,"byte_end":1023334,"line_start":23,"line_end":23,"column_start":23,"column_end":46},"alias_span":null,"name":"infer_schema_from_files","value":"","parent":{"krate":0,"index":3536}},{"kind":"Use","ref_id":{"krate":0,"index":3614},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/mod.rs","byte_start":1023358,"byte_end":1023364,"line_start":24,"line_end":24,"column_start":23,"column_end":29},"alias_span":null,"name":"Reader","value":"","parent":{"krate":0,"index":3536}},{"kind":"Use","ref_id":{"krate":0,"index":7809},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/mod.rs","byte_start":1023388,"byte_end":1023401,"line_start":25,"line_end":25,"column_start":23,"column_end":36},"alias_span":null,"name":"ReaderBuilder","value":"","parent":{"krate":0,"index":3536}},{"kind":"Use","ref_id":{"krate":0,"index":7819},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/mod.rs","byte_start":1023425,"byte_end":1023431,"line_start":26,"line_end":26,"column_start":23,"column_end":29},"alias_span":null,"name":"Writer","value":"","parent":{"krate":0,"index":3536}},{"kind":"Use","ref_id":{"krate":0,"index":7831},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/mod.rs","byte_start":1023455,"byte_end":1023468,"line_start":27,"line_end":27,"column_start":23,"column_end":36},"alias_span":null,"name":"WriterBuilder","value":"","parent":{"krate":0,"index":3536}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/mod.rs","byte_start":1243965,"byte_end":1243966,"line_start":32,"line_end":32,"column_start":26,"column_end":27},"alias_span":null,"name":"*","value":"FooterBuilder, Block, root_as_footer","parent":{"krate":0,"index":4076}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/mod.rs","byte_start":1243996,"byte_end":1243997,"line_start":33,"line_end":33,"column_start":29,"column_end":30},"alias_span":null,"name":"*","value":"RecordBatchBuilder, root_as_message, FieldNode, DictionaryBatch, RecordBatch, MessageBuilder, DictionaryBatchBuilder, MessageHeader","parent":{"krate":0,"index":4076}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/mod.rs","byte_start":1244026,"byte_end":1244027,"line_start":34,"line_end":34,"column_start":28,"column_end":29},"alias_span":null,"name":"*","value":"FieldBuilder, Schema, FixedSizeListBuilder, KeyValue, SchemaBuilder, KeyValueBuilder, DictionaryEncodingBuilder, FieldArgs, DurationBuilder, TimeBuilder, Buffer, Endianness, ListBuilder, LargeBinaryBuilder, DecimalBuilder, KeyValueArgs, DictionaryEncoding, Struct_Builder, Precision, IntervalBuilder, DateBuilder, TimeUnit, Utf8Builder, BoolBuilder, Field, Type, FixedSizeBinaryBuilder, BinaryBuilder, LargeListBuilder, MetadataVersion, IntervalUnit, TimestampBuilder, LargeUtf8Builder, FloatingPointBuilder, DateUnit, NullBuilder, IntBuilder","parent":{"krate":0,"index":4076}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/mod.rs","byte_start":1244062,"byte_end":1244063,"line_start":35,"line_end":35,"column_start":34,"column_end":35},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":4076}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/mod.rs","byte_start":1244092,"byte_end":1244093,"line_start":36,"line_end":36,"column_start":28,"column_end":29},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":4076}},{"kind":"Use","ref_id":{"krate":0,"index":9612},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/mod.rs","byte_start":1648940,"byte_end":1648946,"line_start":22,"line_end":22,"column_start":23,"column_end":29},"alias_span":null,"name":"Reader","value":"","parent":{"krate":0,"index":6881}},{"kind":"Use","ref_id":{"krate":0,"index":9619},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/mod.rs","byte_start":1648970,"byte_end":1648983,"line_start":23,"line_end":23,"column_start":23,"column_end":36},"alias_span":null,"name":"ReaderBuilder","value":"","parent":{"krate":0,"index":6881}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":802,"byte_end":7329,"line_start":18,"line_end":154,"column_start":1,"column_end":21},"name":"","qualname":"::","value":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":2532},{"krate":0,"index":2575},{"krate":0,"index":2723},{"krate":0,"index":2776},{"krate":0,"index":3536},{"krate":0,"index":3754},{"krate":0,"index":3959},{"krate":0,"index":3991},{"krate":0,"index":4076},{"krate":0,"index":6881},{"krate":0,"index":7035},{"krate":0,"index":7067},{"krate":0,"index":7099},{"krate":0,"index":7161},{"krate":0,"index":7376}],"decl_id":null,"docs":" A native Rust implementation of [Apache Arrow](https://arrow.apache.org), a cross-language\n development platform for in-memory data.","sig":null,"attributes":[{"value":"/ A native Rust implementation of [Apache Arrow](https://arrow.apache.org), a cross-language","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":802,"byte_end":896,"line_start":18,"line_end":18,"column_start":1,"column_end":95}},{"value":"/ development platform for in-memory data.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":897,"byte_end":941,"line_start":19,"line_end":19,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":942,"byte_end":945,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ ### DataType","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":946,"byte_end":962,"line_start":21,"line_end":21,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":963,"byte_end":966,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ Every [`Array`](array::Array) in this crate has an associated [`DataType`](datatypes::DataType),","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":967,"byte_end":1067,"line_start":23,"line_end":23,"column_start":1,"column_end":101}},{"value":"/ that specifies how its data is layed in memory and represented.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":1068,"byte_end":1135,"line_start":24,"line_end":24,"column_start":1,"column_end":68}},{"value":"/ Thus, a central enum of this crate is [`DataType`](datatypes::DataType), that contains the set of valid","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":1136,"byte_end":1243,"line_start":25,"line_end":25,"column_start":1,"column_end":108}},{"value":"/ DataTypes in the specification. For example, [`DataType::Utf8`](datatypes::DataType::Utf8).","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":1244,"byte_end":1339,"line_start":26,"line_end":26,"column_start":1,"column_end":96}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":1340,"byte_end":1343,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ ## Array","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":1344,"byte_end":1356,"line_start":28,"line_end":28,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":1357,"byte_end":1360,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ The central trait of this package is the dynamically-typed [`Array`](array::Array) that","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":1361,"byte_end":1452,"line_start":30,"line_end":30,"column_start":1,"column_end":92}},{"value":"/ represents a fixed-sized, immutable, Send + Sync Array of nullable elements. An example of such an array is [`UInt32Array`](array::UInt32Array).","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":1453,"byte_end":1601,"line_start":31,"line_end":31,"column_start":1,"column_end":149}},{"value":"/ One way to think about an arrow [`Array`](array::Array) is a `Arc<[Option<T>; len]>` where T can be anything ranging from an integer to a string, or even","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":1602,"byte_end":1759,"line_start":32,"line_end":32,"column_start":1,"column_end":158}},{"value":"/ another [`Array`](array::Array).","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":1760,"byte_end":1796,"line_start":33,"line_end":33,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":1797,"byte_end":1800,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ [`Arrays`](array::Array) have [`len()`](array::Array::len), [`data_type()`](array::Array::data_type), and the nullability of each of its elements,","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":1801,"byte_end":1951,"line_start":35,"line_end":35,"column_start":1,"column_end":151}},{"value":"/ can be obtained via [`is_null(index)`](array::Array::is_null). To downcast an [`Array`](array::Array) to a specific implementation, you can use","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":1952,"byte_end":2099,"line_start":36,"line_end":36,"column_start":1,"column_end":148}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":2100,"byte_end":2103,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":2104,"byte_end":2115,"line_start":38,"line_end":38,"column_start":1,"column_end":12}},{"value":"/ use arrow::array::{Array, UInt32Array};","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":2116,"byte_end":2159,"line_start":39,"line_end":39,"column_start":1,"column_end":44}},{"value":"/ let array = UInt32Array::from(vec![Some(1), None, Some(3)]);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":2160,"byte_end":2224,"line_start":40,"line_end":40,"column_start":1,"column_end":65}},{"value":"/ assert_eq!(array.len(), 3);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":2225,"byte_end":2256,"line_start":41,"line_end":41,"column_start":1,"column_end":32}},{"value":"/ assert_eq!(array.value(0), 1);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":2257,"byte_end":2291,"line_start":42,"line_end":42,"column_start":1,"column_end":35}},{"value":"/ assert_eq!(array.is_null(1), true);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":2292,"byte_end":2331,"line_start":43,"line_end":43,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":2332,"byte_end":2339,"line_start":44,"line_end":44,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":2340,"byte_end":2343,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ To make the array dynamically typed, we wrap it in an [`Arc`](std::sync::Arc):","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":2344,"byte_end":2426,"line_start":46,"line_end":46,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":2427,"byte_end":2430,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":2431,"byte_end":2442,"line_start":48,"line_end":48,"column_start":1,"column_end":12}},{"value":"/ # use std::sync::Arc;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":2443,"byte_end":2468,"line_start":49,"line_end":49,"column_start":1,"column_end":26}},{"value":"/ use arrow::datatypes::DataType;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":2469,"byte_end":2504,"line_start":50,"line_end":50,"column_start":1,"column_end":36}},{"value":"/ use arrow::array::{UInt32Array, ArrayRef};","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":2505,"byte_end":2551,"line_start":51,"line_end":51,"column_start":1,"column_end":47}},{"value":"/ # let array = UInt32Array::from(vec![Some(1), None, Some(3)]);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":2552,"byte_end":2618,"line_start":52,"line_end":52,"column_start":1,"column_end":67}},{"value":"/ let array: ArrayRef = Arc::new(array);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":2619,"byte_end":2661,"line_start":53,"line_end":53,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(array.len(), 3);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":2662,"byte_end":2693,"line_start":54,"line_end":54,"column_start":1,"column_end":32}},{"value":"/ // array.value() is not available in the dynamically-typed version","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":2694,"byte_end":2764,"line_start":55,"line_end":55,"column_start":1,"column_end":71}},{"value":"/ assert_eq!(array.is_null(1), true);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":2765,"byte_end":2804,"line_start":56,"line_end":56,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(array.data_type(), &DataType::UInt32);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":2805,"byte_end":2858,"line_start":57,"line_end":57,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":2859,"byte_end":2866,"line_start":58,"line_end":58,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":2867,"byte_end":2870,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ to downcast, use `as_any()`:","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":2871,"byte_end":2903,"line_start":60,"line_end":60,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":2904,"byte_end":2907,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":2908,"byte_end":2919,"line_start":62,"line_end":62,"column_start":1,"column_end":12}},{"value":"/ # use std::sync::Arc;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":2920,"byte_end":2945,"line_start":63,"line_end":63,"column_start":1,"column_end":26}},{"value":"/ # use arrow::array::{UInt32Array, ArrayRef};","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":2946,"byte_end":2994,"line_start":64,"line_end":64,"column_start":1,"column_end":49}},{"value":"/ # let array = UInt32Array::from(vec![Some(1), None, Some(3)]);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":2995,"byte_end":3061,"line_start":65,"line_end":65,"column_start":1,"column_end":67}},{"value":"/ # let array: ArrayRef = Arc::new(array);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":3062,"byte_end":3106,"line_start":66,"line_end":66,"column_start":1,"column_end":45}},{"value":"/ let array = array.as_any().downcast_ref::<UInt32Array>().unwrap();","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":3107,"byte_end":3177,"line_start":67,"line_end":67,"column_start":1,"column_end":71}},{"value":"/ assert_eq!(array.value(0), 1);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":3178,"byte_end":3212,"line_start":68,"line_end":68,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":3213,"byte_end":3220,"line_start":69,"line_end":69,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":3221,"byte_end":3224,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ ## Memory and Buffers","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":3225,"byte_end":3250,"line_start":71,"line_end":71,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":3251,"byte_end":3254,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ Data in [`Array`](array::Array) is stored in [`ArrayData`](array::ArrayData), that in turn","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":3255,"byte_end":3349,"line_start":73,"line_end":73,"column_start":1,"column_end":95}},{"value":"/ is a collection of other [`ArrayData`](array::ArrayData) and [`Buffers`](buffer::Buffer).","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":3350,"byte_end":3443,"line_start":74,"line_end":74,"column_start":1,"column_end":94}},{"value":"/ [`Buffers`](buffer::Buffer) is the central struct that array implementations use keep allocated memory and pointers.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":3444,"byte_end":3564,"line_start":75,"line_end":75,"column_start":1,"column_end":121}},{"value":"/ The [`MutableBuffer`](buffer::MutableBuffer) is the mutable counter-part of[`Buffer`](buffer::Buffer).","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":3565,"byte_end":3671,"line_start":76,"line_end":76,"column_start":1,"column_end":107}},{"value":"/ These are the lowest abstractions of this crate, and are used throughout the crate to","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":3672,"byte_end":3761,"line_start":77,"line_end":77,"column_start":1,"column_end":90}},{"value":"/ efficiently allocate, write, read and deallocate memory.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":3762,"byte_end":3822,"line_start":78,"line_end":78,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":3823,"byte_end":3826,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ ## Field, Schema and RecordBatch","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":3827,"byte_end":3863,"line_start":80,"line_end":80,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":3864,"byte_end":3867,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ [`Field`](datatypes::Field) is a struct that contains an array's metadata (datatype and whether its values","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":3868,"byte_end":3978,"line_start":82,"line_end":82,"column_start":1,"column_end":111}},{"value":"/ can be null), and a name. [`Schema`](datatypes::Schema) is a vector of fields with optional metadata.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":3979,"byte_end":4084,"line_start":83,"line_end":83,"column_start":1,"column_end":106}},{"value":"/ Together, they form the basis of a schematic representation of a group of [`Arrays`](array::Array).","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":4085,"byte_end":4188,"line_start":84,"line_end":84,"column_start":1,"column_end":104}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":4189,"byte_end":4192,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ In fact, [`RecordBatch`](record_batch::RecordBatch) is a struct with a [`Schema`](datatypes::Schema) and a vector of","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":4193,"byte_end":4313,"line_start":86,"line_end":86,"column_start":1,"column_end":121}},{"value":"/ [`Array`](array::Array)s, all with the same `len`. A record batch is the highest order struct that this crate currently offers","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":4314,"byte_end":4444,"line_start":87,"line_end":87,"column_start":1,"column_end":131}},{"value":"/ and is broadly used to represent a table where each column in an `Array`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":4445,"byte_end":4522,"line_start":88,"line_end":88,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":4523,"byte_end":4526,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ ## Compute","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":4527,"byte_end":4541,"line_start":90,"line_end":90,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":4542,"byte_end":4545,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ This crate offers many operations (called kernels) to operate on `Array`s, that you can find at [compute::kernels].","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":4546,"byte_end":4665,"line_start":92,"line_end":92,"column_start":1,"column_end":120}},{"value":"/ It has both vertical and horizontal operations, and some of them have an SIMD implementation.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":4666,"byte_end":4763,"line_start":93,"line_end":93,"column_start":1,"column_end":98}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":4764,"byte_end":4767,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/ ## Status","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":4768,"byte_end":4781,"line_start":95,"line_end":95,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":4782,"byte_end":4785,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ This crate has most of the implementation of the arrow specification. Specifically, it supports the following types:","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":4786,"byte_end":4906,"line_start":97,"line_end":97,"column_start":1,"column_end":121}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":4907,"byte_end":4910,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ * All arrow primitive types, such as [`Int32Array`](array::UInt8Array), [`BooleanArray`](array::BooleanArray) and [`Float64Array`](array::Float64Array).","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":4911,"byte_end":5067,"line_start":99,"line_end":99,"column_start":1,"column_end":157}},{"value":"/ * All arrow variable length types, such as [`StringArray`](array::StringArray) and [`BinaryArray`](array::BinaryArray)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":5068,"byte_end":5190,"line_start":100,"line_end":100,"column_start":1,"column_end":123}},{"value":"/ * All composite types such as [`StructArray`](array::StructArray) and [`ListArray`](array::ListArray)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":5191,"byte_end":5296,"line_start":101,"line_end":101,"column_start":1,"column_end":106}},{"value":"/ * Dictionary types  [`DictionaryArray`](array::DictionaryArray)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":5297,"byte_end":5364,"line_start":102,"line_end":102,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":5366,"byte_end":5369,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ This crate also implements many common vertical operations:","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":5370,"byte_end":5433,"line_start":105,"line_end":105,"column_start":1,"column_end":64}},{"value":"/ * all mathematical binary operators, such as [`subtract`](compute::kernels::arithmetic::subtract)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":5434,"byte_end":5535,"line_start":106,"line_end":106,"column_start":1,"column_end":102}},{"value":"/ * all boolean binary operators such as [`equality`](compute::kernels::comparison::eq)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":5536,"byte_end":5625,"line_start":107,"line_end":107,"column_start":1,"column_end":90}},{"value":"/ * [`cast`](compute::kernels::cast::cast)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":5626,"byte_end":5670,"line_start":108,"line_end":108,"column_start":1,"column_end":45}},{"value":"/ * [`filter`](compute::kernels::filter::filter)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":5671,"byte_end":5721,"line_start":109,"line_end":109,"column_start":1,"column_end":51}},{"value":"/ * [`take`](compute::kernels::take::take) and [`limit`](compute::kernels::limit::limit)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":5722,"byte_end":5812,"line_start":110,"line_end":110,"column_start":1,"column_end":91}},{"value":"/ * [`sort`](compute::kernels::sort::sort)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":5813,"byte_end":5857,"line_start":111,"line_end":111,"column_start":1,"column_end":45}},{"value":"/ * some string operators such as [`substring`](compute::kernels::substring::substring) and [`length`](compute::kernels::length::length)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":5858,"byte_end":5996,"line_start":112,"line_end":112,"column_start":1,"column_end":139}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":5997,"byte_end":6000,"line_start":113,"line_end":113,"column_start":1,"column_end":4}},{"value":"/ as well as some horizontal operations, such as","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":6001,"byte_end":6051,"line_start":114,"line_end":114,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":6052,"byte_end":6055,"line_start":115,"line_end":115,"column_start":1,"column_end":4}},{"value":"/ * [`min`](compute::kernels::aggregate::min) and [`max`](compute::kernels::aggregate::max)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":6056,"byte_end":6149,"line_start":116,"line_end":116,"column_start":1,"column_end":94}},{"value":"/ * [`sum`](compute::kernels::aggregate::sum)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":6150,"byte_end":6197,"line_start":117,"line_end":117,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":6198,"byte_end":6201,"line_start":118,"line_end":118,"column_start":1,"column_end":4}},{"value":"/ Finally, this crate implements some readers and writers to different formats:","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":6202,"byte_end":6283,"line_start":119,"line_end":119,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":6284,"byte_end":6287,"line_start":120,"line_end":120,"column_start":1,"column_end":4}},{"value":"/ * json: [reader](json::reader::Reader)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":6288,"byte_end":6330,"line_start":121,"line_end":121,"column_start":1,"column_end":43}},{"value":"/ * csv: [reader](csv::reader::Reader) and [writer](csv::writer::Writer)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":6331,"byte_end":6405,"line_start":122,"line_end":122,"column_start":1,"column_end":75}},{"value":"/ * ipc: [reader](ipc::reader::StreamReader) and [writer](ipc::writer::FileWriter)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":6406,"byte_end":6490,"line_start":123,"line_end":123,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":6491,"byte_end":6494,"line_start":124,"line_end":124,"column_start":1,"column_end":4}},{"value":"/ The parquet implementation is on a [separate crate](https://crates.io/crates/parquet)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":6495,"byte_end":6584,"line_start":125,"line_end":125,"column_start":1,"column_end":90}},{"value":"allow(dead_code)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":6755,"byte_end":6775,"line_start":130,"line_end":130,"column_start":1,"column_end":21}},{"value":"allow(non_camel_case_types)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":6776,"byte_end":6807,"line_start":131,"line_end":131,"column_start":1,"column_end":32}},{"value":"allow(bare_trait_objects)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":6808,"byte_end":6837,"line_start":132,"line_end":132,"column_start":1,"column_end":30}},{"value":"warn(missing_debug_implementations)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":6838,"byte_end":6877,"line_start":133,"line_end":133,"column_start":1,"column_end":40}},{"value":"deny(clippy :: redundant_clone)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":6878,"byte_end":6911,"line_start":134,"line_end":134,"column_start":1,"column_end":34}},{"value":"allow(clippy :: float_equality_without_abs, clippy :: type_complexity)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":6993,"byte_end":7063,"line_start":136,"line_end":136,"column_start":1,"column_end":71}}]},{"kind":"Mod","id":{"krate":0,"index":4},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"array","qualname":"::array","value":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","parent":null,"children":[{"krate":0,"index":5},{"krate":0,"index":53},{"krate":0,"index":242},{"krate":0,"index":325},{"krate":0,"index":436},{"krate":0,"index":537},{"krate":0,"index":647},{"krate":0,"index":769},{"krate":0,"index":863},{"krate":0,"index":932},{"krate":0,"index":1225},{"krate":0,"index":1235},{"krate":0,"index":1292},{"krate":0,"index":1684},{"krate":0,"index":1802},{"krate":0,"index":1826},{"krate":0,"index":1908},{"krate":0,"index":1946},{"krate":0,"index":1993},{"krate":0,"index":2011},{"krate":0,"index":2268},{"krate":0,"index":2269},{"krate":0,"index":2272},{"krate":0,"index":2275},{"krate":0,"index":2278},{"krate":0,"index":2281},{"krate":0,"index":2284},{"krate":0,"index":2287},{"krate":0,"index":2290},{"krate":0,"index":2293},{"krate":0,"index":2296},{"krate":0,"index":2299},{"krate":0,"index":2302},{"krate":0,"index":2305},{"krate":0,"index":2308},{"krate":0,"index":2311},{"krate":0,"index":2314},{"krate":0,"index":2317},{"krate":0,"index":2320},{"krate":0,"index":2323},{"krate":0,"index":2326},{"krate":0,"index":2329},{"krate":0,"index":2332},{"krate":0,"index":2333},{"krate":0,"index":2334},{"krate":0,"index":2335},{"krate":0,"index":2336},{"krate":0,"index":2337},{"krate":0,"index":2338},{"krate":0,"index":2339},{"krate":0,"index":2340},{"krate":0,"index":2341},{"krate":0,"index":2342},{"krate":0,"index":2343},{"krate":0,"index":2344},{"krate":0,"index":2345},{"krate":0,"index":2346},{"krate":0,"index":2347},{"krate":0,"index":2348},{"krate":0,"index":2349},{"krate":0,"index":2350},{"krate":0,"index":2351},{"krate":0,"index":2352},{"krate":0,"index":2353},{"krate":0,"index":2354},{"krate":0,"index":2355},{"krate":0,"index":2356},{"krate":0,"index":2357},{"krate":0,"index":2358},{"krate":0,"index":2359},{"krate":0,"index":2360},{"krate":0,"index":2361},{"krate":0,"index":2362},{"krate":0,"index":2363},{"krate":0,"index":2364},{"krate":0,"index":2365},{"krate":0,"index":2366},{"krate":0,"index":2369},{"krate":0,"index":2372},{"krate":0,"index":2375},{"krate":0,"index":2378},{"krate":0,"index":2381},{"krate":0,"index":2384},{"krate":0,"index":2387},{"krate":0,"index":2390},{"krate":0,"index":2391},{"krate":0,"index":2392},{"krate":0,"index":2393},{"krate":0,"index":2394},{"krate":0,"index":2395},{"krate":0,"index":2396},{"krate":0,"index":2397},{"krate":0,"index":2398},{"krate":0,"index":2399},{"krate":0,"index":2400},{"krate":0,"index":2401},{"krate":0,"index":2402},{"krate":0,"index":2403},{"krate":0,"index":2404},{"krate":0,"index":2405},{"krate":0,"index":2406},{"krate":0,"index":2407},{"krate":0,"index":2408},{"krate":0,"index":2409},{"krate":0,"index":2410},{"krate":0,"index":2411},{"krate":0,"index":2412},{"krate":0,"index":2413},{"krate":0,"index":2414},{"krate":0,"index":2415},{"krate":0,"index":2416},{"krate":0,"index":2419},{"krate":0,"index":2422},{"krate":0,"index":2425},{"krate":0,"index":2428},{"krate":0,"index":2431},{"krate":0,"index":2434},{"krate":0,"index":2437},{"krate":0,"index":2440},{"krate":0,"index":2443},{"krate":0,"index":2446},{"krate":0,"index":2449},{"krate":0,"index":2452},{"krate":0,"index":2455},{"krate":0,"index":2458},{"krate":0,"index":2461},{"krate":0,"index":2464},{"krate":0,"index":2465},{"krate":0,"index":2466},{"krate":0,"index":2467},{"krate":0,"index":2468},{"krate":0,"index":2469},{"krate":0,"index":2470},{"krate":0,"index":2471},{"krate":0,"index":2472},{"krate":0,"index":2473},{"krate":0,"index":2474},{"krate":0,"index":2475},{"krate":0,"index":2476},{"krate":0,"index":2477},{"krate":0,"index":2478},{"krate":0,"index":2479},{"krate":0,"index":2480},{"krate":0,"index":2481},{"krate":0,"index":2482},{"krate":0,"index":2483},{"krate":0,"index":2484},{"krate":0,"index":2485},{"krate":0,"index":2486},{"krate":0,"index":2487},{"krate":0,"index":2488},{"krate":0,"index":2489},{"krate":0,"index":2490},{"krate":0,"index":2493},{"krate":0,"index":2494},{"krate":0,"index":2497},{"krate":0,"index":2498},{"krate":0,"index":2501},{"krate":0,"index":2504},{"krate":0,"index":2505},{"krate":0,"index":2508},{"krate":0,"index":2511},{"krate":0,"index":2514},{"krate":0,"index":2517},{"krate":0,"index":2520},{"krate":0,"index":2523},{"krate":0,"index":2526},{"krate":0,"index":2529}],"decl_id":null,"docs":" The central type in Apache Arrow are arrays, represented\n by the [`Array` trait](crate::array::Array).\n An array represents a known-length sequence of values all\n having the same type.","sig":null,"attributes":[{"value":"/ The central type in Apache Arrow are arrays, represented","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":9149,"byte_end":9209,"line_start":18,"line_end":18,"column_start":1,"column_end":61}},{"value":"/ by the [`Array` trait](crate::array::Array).","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":9210,"byte_end":9258,"line_start":19,"line_end":19,"column_start":1,"column_end":49}},{"value":"/ An array represents a known-length sequence of values all","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":9259,"byte_end":9320,"line_start":20,"line_end":20,"column_start":1,"column_end":62}},{"value":"/ having the same type.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":9321,"byte_end":9346,"line_start":21,"line_end":21,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":9347,"byte_end":9350,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ Internally, those values are represented by one or several","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":9351,"byte_end":9413,"line_start":23,"line_end":23,"column_start":1,"column_end":63}},{"value":"/ [buffers](crate::buffer::Buffer), the number and meaning","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":9414,"byte_end":9474,"line_start":24,"line_end":24,"column_start":1,"column_end":61}},{"value":"/ of which depend on the array’s data type, as documented in","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":9475,"byte_end":9539,"line_start":25,"line_end":25,"column_start":1,"column_end":63}},{"value":"/ [the Arrow data layout specification](https://arrow.apache.org/docs/format/Columnar.html).","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":9540,"byte_end":9634,"line_start":26,"line_end":26,"column_start":1,"column_end":95}},{"value":"/ For example, the type `Int16Array` represents an Apache","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":9635,"byte_end":9694,"line_start":27,"line_end":27,"column_start":1,"column_end":60}},{"value":"/ Arrow array of 16-bit integers.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":9695,"byte_end":9730,"line_start":28,"line_end":28,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":9731,"byte_end":9734,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ Those buffers consist of the value data itself and an","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":9735,"byte_end":9792,"line_start":30,"line_end":30,"column_start":1,"column_end":58}},{"value":"/ optional [bitmap buffer](crate::bitmap::Bitmap) that","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":9793,"byte_end":9849,"line_start":31,"line_end":31,"column_start":1,"column_end":57}},{"value":"/ indicates which array entries are null values.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":9850,"byte_end":9900,"line_start":32,"line_end":32,"column_start":1,"column_end":51}},{"value":"/ The bitmap buffer can be entirely omitted if the array is","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":9901,"byte_end":9962,"line_start":33,"line_end":33,"column_start":1,"column_end":62}},{"value":"/ known to have zero null values.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":9963,"byte_end":9998,"line_start":34,"line_end":34,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":9999,"byte_end":10002,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ There are concrete implementations of this trait for each","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":10003,"byte_end":10064,"line_start":36,"line_end":36,"column_start":1,"column_end":62}},{"value":"/ data type, that help you access individual values of the","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":10065,"byte_end":10125,"line_start":37,"line_end":37,"column_start":1,"column_end":61}},{"value":"/ array.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":10126,"byte_end":10136,"line_start":38,"line_end":38,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":10137,"byte_end":10140,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ # Building an Array","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":10141,"byte_end":10164,"line_start":40,"line_end":40,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":10165,"byte_end":10168,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ Arrow's `Arrays` are immutable, but there is the trait","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":10169,"byte_end":10227,"line_start":42,"line_end":42,"column_start":1,"column_end":59}},{"value":"/ [`ArrayBuilder`](crate::array::ArrayBuilder)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":10228,"byte_end":10276,"line_start":43,"line_end":43,"column_start":1,"column_end":49}},{"value":"/ that helps you with constructing new `Arrays`. As with the","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":10277,"byte_end":10339,"line_start":44,"line_end":44,"column_start":1,"column_end":63}},{"value":"/ `Array` trait, there are builder implementations for all","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":10340,"byte_end":10400,"line_start":45,"line_end":45,"column_start":1,"column_end":61}},{"value":"/ concrete array types.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":10401,"byte_end":10426,"line_start":46,"line_end":46,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":10427,"byte_end":10430,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":10431,"byte_end":10444,"line_start":48,"line_end":48,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":10445,"byte_end":10452,"line_start":49,"line_end":49,"column_start":1,"column_end":8}},{"value":"/ extern crate arrow;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":10453,"byte_end":10476,"line_start":50,"line_end":50,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":10477,"byte_end":10480,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ use arrow::array::Int16Array;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":10481,"byte_end":10514,"line_start":52,"line_end":52,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":10515,"byte_end":10518,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ // Create a new builder with a capacity of 100","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":10519,"byte_end":10569,"line_start":54,"line_end":54,"column_start":1,"column_end":51}},{"value":"/ let mut builder = Int16Array::builder(100);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":10570,"byte_end":10617,"line_start":55,"line_end":55,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":10618,"byte_end":10621,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ // Append a single primitive value","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":10622,"byte_end":10660,"line_start":57,"line_end":57,"column_start":1,"column_end":39}},{"value":"/ builder.append_value(1).unwrap();","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":10661,"byte_end":10698,"line_start":58,"line_end":58,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":10699,"byte_end":10702,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ // Append a null value","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":10703,"byte_end":10729,"line_start":60,"line_end":60,"column_start":1,"column_end":27}},{"value":"/ builder.append_null().unwrap();","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":10730,"byte_end":10765,"line_start":61,"line_end":61,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":10766,"byte_end":10769,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ // Append a slice of primitive values","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":10770,"byte_end":10811,"line_start":63,"line_end":63,"column_start":1,"column_end":42}},{"value":"/ builder.append_slice(&[2, 3, 4]).unwrap();","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":10812,"byte_end":10858,"line_start":64,"line_end":64,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":10859,"byte_end":10862,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ // Build the array","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":10863,"byte_end":10885,"line_start":66,"line_end":66,"column_start":1,"column_end":23}},{"value":"/ let array = builder.finish();","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":10886,"byte_end":10919,"line_start":67,"line_end":67,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":10920,"byte_end":10923,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":10924,"byte_end":10939,"line_start":69,"line_end":69,"column_start":1,"column_end":16}},{"value":"/     5,","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":10940,"byte_end":10950,"line_start":70,"line_end":70,"column_start":1,"column_end":11}},{"value":"/     array.len(),","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":10951,"byte_end":10971,"line_start":71,"line_end":71,"column_start":1,"column_end":21}},{"value":"/     \"The array has 5 values, counting the null value\"","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":10972,"byte_end":11029,"line_start":72,"line_end":72,"column_start":1,"column_end":58}},{"value":"/ );","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":11030,"byte_end":11036,"line_start":73,"line_end":73,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":11037,"byte_end":11040,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(2, array.value(2), \"Get the value with index 2\");","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":11041,"byte_end":11105,"line_start":75,"line_end":75,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":11106,"byte_end":11109,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":11110,"byte_end":11125,"line_start":77,"line_end":77,"column_start":1,"column_end":16}},{"value":"/     &array.values()[3..5],","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":11126,"byte_end":11156,"line_start":78,"line_end":78,"column_start":1,"column_end":31}},{"value":"/     &[3, 4],","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":11157,"byte_end":11173,"line_start":79,"line_end":79,"column_start":1,"column_end":17}},{"value":"/     \"Get slice of len 2 starting at idx 3\"","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":11174,"byte_end":11220,"line_start":80,"line_end":80,"column_start":1,"column_end":47}},{"value":"/ )","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":11221,"byte_end":11226,"line_start":81,"line_end":81,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":11227,"byte_end":11234,"line_start":82,"line_end":82,"column_start":1,"column_end":8}}]},{"kind":"Trait","id":{"krate":0,"index":32},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":21050,"byte_end":21055,"line_start":30,"line_end":30,"column_start":11,"column_end":16},"name":"Array","qualname":"::array::array::Array","value":"Array: fmt::Debug + Send + Sync + JsonEqual","parent":null,"children":[{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":45},{"krate":0,"index":46}],"decl_id":null,"docs":" Trait for dealing with different types of array at runtime when the type of the\n array is not known in advance.\n","sig":null,"attributes":[{"value":"/ Trait for dealing with different types of array at runtime when the type of the","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":20921,"byte_end":21004,"line_start":28,"line_end":28,"column_start":1,"column_end":84}},{"value":"/ array is not known in advance.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":21005,"byte_end":21039,"line_start":29,"line_end":29,"column_start":1,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":33},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":21930,"byte_end":21936,"line_start":57,"line_end":57,"column_start":8,"column_end":14},"name":"as_any","qualname":"::array::array::Array::as_any","value":"pub fn as_any(&Self) -> &Any","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Returns the array as [`Any`](std::any::Any) so that it can be\n downcasted to a specific implementation.","sig":null,"attributes":[{"value":"/ Returns the array as [`Any`](std::any::Any) so that it can be","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":21100,"byte_end":21165,"line_start":31,"line_end":31,"column_start":5,"column_end":70}},{"value":"/ downcasted to a specific implementation.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":21170,"byte_end":21214,"line_start":32,"line_end":32,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":21219,"byte_end":21222,"line_start":33,"line_end":33,"column_start":5,"column_end":8}},{"value":"/ # Example:","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":21227,"byte_end":21241,"line_start":34,"line_end":34,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":21246,"byte_end":21249,"line_start":35,"line_end":35,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":21254,"byte_end":21261,"line_start":36,"line_end":36,"column_start":5,"column_end":12}},{"value":"/ use std::sync::Arc;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":21266,"byte_end":21289,"line_start":37,"line_end":37,"column_start":5,"column_end":28}},{"value":"/ use arrow::array::Int32Array;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":21294,"byte_end":21327,"line_start":38,"line_end":38,"column_start":5,"column_end":38}},{"value":"/ use arrow::datatypes::{Schema, Field, DataType};","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":21332,"byte_end":21384,"line_start":39,"line_end":39,"column_start":5,"column_end":57}},{"value":"/ use arrow::record_batch::RecordBatch;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":21389,"byte_end":21430,"line_start":40,"line_end":40,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":21435,"byte_end":21438,"line_start":41,"line_end":41,"column_start":5,"column_end":8}},{"value":"/ # fn main() -> arrow::error::Result<()> {","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":21443,"byte_end":21488,"line_start":42,"line_end":42,"column_start":5,"column_end":50}},{"value":"/ let id = Int32Array::from(vec![1, 2, 3, 4, 5]);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":21493,"byte_end":21544,"line_start":43,"line_end":43,"column_start":5,"column_end":56}},{"value":"/ let batch = RecordBatch::try_new(","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":21549,"byte_end":21586,"line_start":44,"line_end":44,"column_start":5,"column_end":42}},{"value":"/     Arc::new(Schema::new(vec![Field::new(\"id\", DataType::Int32, false)])),","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":21591,"byte_end":21669,"line_start":45,"line_end":45,"column_start":5,"column_end":83}},{"value":"/     vec![Arc::new(id)]","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":21674,"byte_end":21700,"line_start":46,"line_end":46,"column_start":5,"column_end":31}},{"value":"/ )?;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":21705,"byte_end":21712,"line_start":47,"line_end":47,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":21717,"byte_end":21720,"line_start":48,"line_end":48,"column_start":5,"column_end":8}},{"value":"/ let int32array = batch","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":21725,"byte_end":21751,"line_start":49,"line_end":49,"column_start":5,"column_end":31}},{"value":"/     .column(0)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":21756,"byte_end":21774,"line_start":50,"line_end":50,"column_start":5,"column_end":23}},{"value":"/     .as_any()","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":21779,"byte_end":21796,"line_start":51,"line_end":51,"column_start":5,"column_end":22}},{"value":"/     .downcast_ref::<Int32Array>()","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":21801,"byte_end":21838,"line_start":52,"line_end":52,"column_start":5,"column_end":42}},{"value":"/     .expect(\"Failed to downcast\");","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":21843,"byte_end":21881,"line_start":53,"line_end":53,"column_start":5,"column_end":43}},{"value":"/ # Ok(())","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":21886,"byte_end":21898,"line_start":54,"line_end":54,"column_start":5,"column_end":17}},{"value":"/ # }","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":21903,"byte_end":21910,"line_start":55,"line_end":55,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":21915,"byte_end":21922,"line_start":56,"line_end":56,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":34},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":22043,"byte_end":22047,"line_start":60,"line_end":60,"column_start":8,"column_end":12},"name":"data","qualname":"::array::array::Array::data","value":"pub fn data(&Self) -> ArrayDataRef","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Returns a reference-counted pointer to the underlying data of this array.\n","sig":null,"attributes":[{"value":"/ Returns a reference-counted pointer to the underlying data of this array.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":21958,"byte_end":22035,"line_start":59,"line_end":59,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":35},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":22173,"byte_end":22181,"line_start":63,"line_end":63,"column_start":8,"column_end":16},"name":"data_ref","qualname":"::array::array::Array::data_ref","value":"pub fn data_ref(&Self) -> &ArrayDataRef","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Returns a borrowed & reference-counted pointer to the underlying data of this array.\n","sig":null,"attributes":[{"value":"/ Returns a borrowed & reference-counted pointer to the underlying data of this array.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":22077,"byte_end":22165,"line_start":62,"line_end":62,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":22584,"byte_end":22593,"line_start":77,"line_end":77,"column_start":8,"column_end":17},"name":"data_type","qualname":"::array::array::Array::data_type","value":"pub fn data_type(&Self) -> &DataType","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Returns a reference to the [`DataType`](crate::datatypes::DataType) of this array.","sig":null,"attributes":[{"value":"/ Returns a reference to the [`DataType`](crate::datatypes::DataType) of this array.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":22212,"byte_end":22298,"line_start":65,"line_end":65,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":22303,"byte_end":22306,"line_start":66,"line_end":66,"column_start":5,"column_end":8}},{"value":"/ # Example:","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":22311,"byte_end":22325,"line_start":67,"line_end":67,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":22330,"byte_end":22333,"line_start":68,"line_end":68,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":22338,"byte_end":22345,"line_start":69,"line_end":69,"column_start":5,"column_end":12}},{"value":"/ use arrow::datatypes::DataType;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":22350,"byte_end":22385,"line_start":70,"line_end":70,"column_start":5,"column_end":40}},{"value":"/ use arrow::array::{Array, Int32Array};","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":22390,"byte_end":22432,"line_start":71,"line_end":71,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":22437,"byte_end":22440,"line_start":72,"line_end":72,"column_start":5,"column_end":8}},{"value":"/ let array = Int32Array::from(vec![1, 2, 3, 4, 5]);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":22445,"byte_end":22499,"line_start":73,"line_end":73,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":22504,"byte_end":22507,"line_start":74,"line_end":74,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(*array.data_type(), DataType::Int32);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":22512,"byte_end":22564,"line_start":75,"line_end":75,"column_start":5,"column_end":57}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":22569,"byte_end":22576,"line_start":76,"line_end":76,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":37},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":23102,"byte_end":23107,"line_start":94,"line_end":94,"column_start":8,"column_end":13},"name":"slice","qualname":"::array::array::Array::slice","value":"pub fn slice(&Self, usize, usize) -> ArrayRef","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Returns a zero-copy slice of this array with the indicated offset and length.","sig":null,"attributes":[{"value":"/ Returns a zero-copy slice of this array with the indicated offset and length.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":22663,"byte_end":22744,"line_start":81,"line_end":81,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":22749,"byte_end":22752,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ # Example:","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":22757,"byte_end":22771,"line_start":83,"line_end":83,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":22776,"byte_end":22779,"line_start":84,"line_end":84,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":22784,"byte_end":22791,"line_start":85,"line_end":85,"column_start":5,"column_end":12}},{"value":"/ use arrow::array::{Array, Int32Array};","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":22796,"byte_end":22838,"line_start":86,"line_end":86,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":22843,"byte_end":22846,"line_start":87,"line_end":87,"column_start":5,"column_end":8}},{"value":"/ let array = Int32Array::from(vec![1, 2, 3, 4, 5]);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":22851,"byte_end":22905,"line_start":88,"line_end":88,"column_start":5,"column_end":59}},{"value":"/ // Make slice over the values [2, 3, 4]","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":22910,"byte_end":22953,"line_start":89,"line_end":89,"column_start":5,"column_end":48}},{"value":"/ let array_slice = array.slice(1, 3);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":22958,"byte_end":22998,"line_start":90,"line_end":90,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":23003,"byte_end":23006,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(array_slice.as_ref(), &Int32Array::from(vec![2, 3, 4]));","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":23011,"byte_end":23082,"line_start":92,"line_end":92,"column_start":5,"column_end":76}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":23087,"byte_end":23094,"line_start":93,"line_end":93,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":23536,"byte_end":23539,"line_start":109,"line_end":109,"column_start":8,"column_end":11},"name":"len","qualname":"::array::array::Array::len","value":"pub fn len(&Self) -> usize","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Returns the length (i.e., number of elements) of this array.","sig":null,"attributes":[{"value":"/ Returns the length (i.e., number of elements) of this array.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":23247,"byte_end":23311,"line_start":98,"line_end":98,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":23316,"byte_end":23319,"line_start":99,"line_end":99,"column_start":5,"column_end":8}},{"value":"/ # Example:","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":23324,"byte_end":23338,"line_start":100,"line_end":100,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":23343,"byte_end":23346,"line_start":101,"line_end":101,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":23351,"byte_end":23358,"line_start":102,"line_end":102,"column_start":5,"column_end":12}},{"value":"/ use arrow::array::{Array, Int32Array};","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":23363,"byte_end":23405,"line_start":103,"line_end":103,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":23410,"byte_end":23413,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ let array = Int32Array::from(vec![1, 2, 3, 4, 5]);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":23418,"byte_end":23472,"line_start":105,"line_end":105,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":23477,"byte_end":23480,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(array.len(), 5);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":23485,"byte_end":23516,"line_start":107,"line_end":107,"column_start":5,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":23521,"byte_end":23528,"line_start":108,"line_end":108,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":39},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":23873,"byte_end":23881,"line_start":124,"line_end":124,"column_start":8,"column_end":16},"name":"is_empty","qualname":"::array::array::Array::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Returns whether this array is empty.","sig":null,"attributes":[{"value":"/ Returns whether this array is empty.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":23599,"byte_end":23639,"line_start":113,"line_end":113,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":23644,"byte_end":23647,"line_start":114,"line_end":114,"column_start":5,"column_end":8}},{"value":"/ # Example:","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":23652,"byte_end":23666,"line_start":115,"line_end":115,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":23671,"byte_end":23674,"line_start":116,"line_end":116,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":23679,"byte_end":23686,"line_start":117,"line_end":117,"column_start":5,"column_end":12}},{"value":"/ use arrow::array::{Array, Int32Array};","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":23691,"byte_end":23733,"line_start":118,"line_end":118,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":23738,"byte_end":23741,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ let array = Int32Array::from(vec![1, 2, 3, 4, 5]);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":23746,"byte_end":23800,"line_start":120,"line_end":120,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":23805,"byte_end":23808,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(array.is_empty(), false);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":23813,"byte_end":23853,"line_start":122,"line_end":122,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":23858,"byte_end":23865,"line_start":123,"line_end":123,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":24484,"byte_end":24490,"line_start":144,"line_end":144,"column_start":8,"column_end":14},"name":"offset","qualname":"::array::array::Array::offset","value":"pub fn offset(&Self) -> usize","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Returns the offset into the underlying data used by this array(-slice).\n Note that the underlying data can be shared by many arrays.\n This defaults to `0`.","sig":null,"attributes":[{"value":"/ Returns the offset into the underlying data used by this array(-slice).","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":23945,"byte_end":24020,"line_start":128,"line_end":128,"column_start":5,"column_end":80}},{"value":"/ Note that the underlying data can be shared by many arrays.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":24025,"byte_end":24088,"line_start":129,"line_end":129,"column_start":5,"column_end":68}},{"value":"/ This defaults to `0`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":24093,"byte_end":24118,"line_start":130,"line_end":130,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":24123,"byte_end":24126,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/ # Example:","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":24131,"byte_end":24145,"line_start":132,"line_end":132,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":24150,"byte_end":24153,"line_start":133,"line_end":133,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":24158,"byte_end":24165,"line_start":134,"line_end":134,"column_start":5,"column_end":12}},{"value":"/ use arrow::array::{Array, Int32Array};","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":24170,"byte_end":24212,"line_start":135,"line_end":135,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":24217,"byte_end":24220,"line_start":136,"line_end":136,"column_start":5,"column_end":8}},{"value":"/ let array = Int32Array::from(vec![1, 2, 3, 4, 5]);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":24225,"byte_end":24279,"line_start":137,"line_end":137,"column_start":5,"column_end":59}},{"value":"/ // Make slice over the values [2, 3, 4]","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":24284,"byte_end":24327,"line_start":138,"line_end":138,"column_start":5,"column_end":48}},{"value":"/ let array_slice = array.slice(1, 3);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":24332,"byte_end":24372,"line_start":139,"line_end":139,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":24377,"byte_end":24380,"line_start":140,"line_end":140,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(array.offset(), 0);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":24385,"byte_end":24419,"line_start":141,"line_end":141,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(array_slice.offset(), 1);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":24424,"byte_end":24464,"line_start":142,"line_end":142,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":24469,"byte_end":24476,"line_start":143,"line_end":143,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":41},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":24963,"byte_end":24970,"line_start":161,"line_end":161,"column_start":8,"column_end":15},"name":"is_null","qualname":"::array::array::Array::is_null","value":"pub fn is_null(&Self, usize) -> bool","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Returns whether the element at `index` is null.\n When using this function on a slice, the index is relative to the slice.","sig":null,"attributes":[{"value":"/ Returns whether the element at `index` is null.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":24553,"byte_end":24604,"line_start":148,"line_end":148,"column_start":5,"column_end":56}},{"value":"/ When using this function on a slice, the index is relative to the slice.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":24609,"byte_end":24685,"line_start":149,"line_end":149,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":24690,"byte_end":24693,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ # Example:","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":24698,"byte_end":24712,"line_start":151,"line_end":151,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":24717,"byte_end":24720,"line_start":152,"line_end":152,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":24725,"byte_end":24732,"line_start":153,"line_end":153,"column_start":5,"column_end":12}},{"value":"/ use arrow::array::{Array, Int32Array};","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":24737,"byte_end":24779,"line_start":154,"line_end":154,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":24784,"byte_end":24787,"line_start":155,"line_end":155,"column_start":5,"column_end":8}},{"value":"/ let array = Int32Array::from(vec![Some(1), None]);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":24792,"byte_end":24846,"line_start":156,"line_end":156,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":24851,"byte_end":24854,"line_start":157,"line_end":157,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(array.is_null(0), false);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":24859,"byte_end":24899,"line_start":158,"line_end":158,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(array.is_null(1), true);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":24904,"byte_end":24943,"line_start":159,"line_end":159,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":24948,"byte_end":24955,"line_start":160,"line_end":160,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":25468,"byte_end":25476,"line_start":178,"line_end":178,"column_start":8,"column_end":16},"name":"is_valid","qualname":"::array::array::Array::is_valid","value":"pub fn is_valid(&Self, usize) -> bool","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Returns whether the element at `index` is not null.\n When using this function on a slice, the index is relative to the slice.","sig":null,"attributes":[{"value":"/ Returns whether the element at `index` is not null.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":25052,"byte_end":25107,"line_start":165,"line_end":165,"column_start":5,"column_end":60}},{"value":"/ When using this function on a slice, the index is relative to the slice.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":25112,"byte_end":25188,"line_start":166,"line_end":166,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":25193,"byte_end":25196,"line_start":167,"line_end":167,"column_start":5,"column_end":8}},{"value":"/ # Example:","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":25201,"byte_end":25215,"line_start":168,"line_end":168,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":25220,"byte_end":25223,"line_start":169,"line_end":169,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":25228,"byte_end":25235,"line_start":170,"line_end":170,"column_start":5,"column_end":12}},{"value":"/ use arrow::array::{Array, Int32Array};","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":25240,"byte_end":25282,"line_start":171,"line_end":171,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":25287,"byte_end":25290,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ let array = Int32Array::from(vec![Some(1), None]);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":25295,"byte_end":25349,"line_start":173,"line_end":173,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":25354,"byte_end":25357,"line_start":174,"line_end":174,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(array.is_valid(0), true);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":25362,"byte_end":25402,"line_start":175,"line_end":175,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(array.is_valid(1), false);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":25407,"byte_end":25448,"line_start":176,"line_end":176,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":25453,"byte_end":25460,"line_start":177,"line_end":177,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":43},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":25913,"byte_end":25923,"line_start":194,"line_end":194,"column_start":8,"column_end":18},"name":"null_count","qualname":"::array::array::Array::null_count","value":"pub fn null_count(&Self) -> usize","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Returns the total number of null values in this array.","sig":null,"attributes":[{"value":"/ Returns the total number of null values in this array.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":25559,"byte_end":25617,"line_start":182,"line_end":182,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":25622,"byte_end":25625,"line_start":183,"line_end":183,"column_start":5,"column_end":8}},{"value":"/ # Example:","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":25630,"byte_end":25644,"line_start":184,"line_end":184,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":25649,"byte_end":25652,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":25657,"byte_end":25664,"line_start":186,"line_end":186,"column_start":5,"column_end":12}},{"value":"/ use arrow::array::{Array, Int32Array};","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":25669,"byte_end":25711,"line_start":187,"line_end":187,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":25716,"byte_end":25719,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ // Construct an array with values [1, NULL, NULL]","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":25724,"byte_end":25777,"line_start":189,"line_end":189,"column_start":5,"column_end":58}},{"value":"/ let array = Int32Array::from(vec![Some(1), None, None]);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":25782,"byte_end":25842,"line_start":190,"line_end":190,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":25847,"byte_end":25850,"line_start":191,"line_end":191,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(array.null_count(), 2);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":25855,"byte_end":25893,"line_start":192,"line_end":192,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":25898,"byte_end":25905,"line_start":193,"line_end":193,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":26090,"byte_end":26112,"line_start":199,"line_end":199,"column_start":8,"column_end":30},"name":"get_buffer_memory_size","qualname":"::array::array::Array::get_buffer_memory_size","value":"pub fn get_buffer_memory_size(&Self) -> usize","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Returns the total number of bytes of memory occupied by the buffers owned by this array.\n","sig":null,"attributes":[{"value":"/ Returns the total number of bytes of memory occupied by the buffers owned by this array.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":25990,"byte_end":26082,"line_start":198,"line_end":198,"column_start":5,"column_end":97}}]},{"kind":"Method","id":{"krate":0,"index":45},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":26225,"byte_end":26246,"line_start":202,"line_end":202,"column_start":8,"column_end":29},"name":"get_array_memory_size","qualname":"::array::array::Array::get_array_memory_size","value":"pub fn get_array_memory_size(&Self) -> usize","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Returns the total number of bytes of memory occupied physically by this array.\n","sig":null,"attributes":[{"value":"/ Returns the total number of bytes of memory occupied physically by this array.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":26135,"byte_end":26217,"line_start":201,"line_end":201,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":26357,"byte_end":26363,"line_start":205,"line_end":205,"column_start":8,"column_end":14},"name":"to_raw","qualname":"::array::array::Array::to_raw","value":"pub fn to_raw(&Self)\n-> Result<(*const ffi::FFI_ArrowArray, *const ffi::FFI_ArrowSchema)>","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" returns two pointers that represent this array in the C Data Interface (FFI)\n","sig":null,"attributes":[{"value":"/ returns two pointers that represent this array in the C Data Interface (FFI)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":26269,"byte_end":26349,"line_start":204,"line_end":204,"column_start":5,"column_end":85}}]},{"kind":"Type","id":{"krate":0,"index":47},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":26679,"byte_end":26687,"line_start":215,"line_end":215,"column_start":10,"column_end":18},"name":"ArrayRef","qualname":"::array::array::ArrayRef","value":"Arc<Array>","parent":null,"children":[],"decl_id":null,"docs":" A reference-counted reference to a generic `Array`.\n","sig":null,"attributes":[{"value":"/ A reference-counted reference to a generic `Array`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":26614,"byte_end":26669,"line_start":214,"line_end":214,"column_start":1,"column_end":56}}]},{"kind":"Function","id":{"krate":0,"index":48},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":26808,"byte_end":26818,"line_start":219,"line_end":219,"column_start":8,"column_end":18},"name":"make_array","qualname":"::array::array::make_array","value":"pub fn make_array(ArrayDataRef) -> ArrayRef","parent":null,"children":[],"decl_id":null,"docs":" Constructs an array using the input `data`.\n Returns a reference-counted `Array` instance.\n","sig":null,"attributes":[{"value":"/ Constructs an array using the input `data`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":26703,"byte_end":26750,"line_start":217,"line_end":217,"column_start":1,"column_end":48}},{"value":"/ Returns a reference-counted `Array` instance.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":26751,"byte_end":26800,"line_start":218,"line_end":218,"column_start":1,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":49},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":32366,"byte_end":32385,"line_start":330,"line_end":330,"column_start":15,"column_end":34},"name":"make_array_from_raw","qualname":"::array::array::make_array_from_raw","value":"pub unsafe fn make_array_from_raw(*const ffi::FFI_ArrowArray,\n                                  *const ffi::FFI_ArrowSchema)\n-> Result<ArrayRef>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new array from two FFI pointers. Used to import arrays from the C Data Interface\n # Safety\n Assumes that these pointers represent valid C Data Interfaces, both in memory\n representation and lifetime via the `release` mechanism.\n","sig":null,"attributes":[{"value":"/ Creates a new array from two FFI pointers. Used to import arrays from the C Data Interface","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":32101,"byte_end":32195,"line_start":326,"line_end":326,"column_start":1,"column_end":95}},{"value":"/ # Safety","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":32196,"byte_end":32208,"line_start":327,"line_end":327,"column_start":1,"column_end":13}},{"value":"/ Assumes that these pointers represent valid C Data Interfaces, both in memory","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":32209,"byte_end":32290,"line_start":328,"line_end":328,"column_start":1,"column_end":82}},{"value":"/ representation and lifetime via the `release` mechanism.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":32291,"byte_end":32351,"line_start":329,"line_end":329,"column_start":1,"column_end":61}}]},{"kind":"Trait","id":{"krate":0,"index":123},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":35028,"byte_end":35049,"line_start":36,"line_end":36,"column_start":11,"column_end":32},"name":"BinaryOffsetSizeTrait","qualname":"::array::array_binary::BinaryOffsetSizeTrait","value":"BinaryOffsetSizeTrait: OffsetSizeTrait","parent":null,"children":[{"krate":0,"index":124}],"decl_id":null,"docs":" Like OffsetSizeTrait, but specialized for Binary\n","sig":null,"attributes":[{"value":"/ Like OffsetSizeTrait, but specialized for Binary","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":34891,"byte_end":34943,"line_start":34,"line_end":34,"column_start":1,"column_end":53}}]},{"kind":"Const","id":{"krate":0,"index":124},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":35079,"byte_end":35088,"line_start":37,"line_end":37,"column_start":11,"column_end":20},"name":"DATA_TYPE","qualname":"::array::array_binary::BinaryOffsetSizeTrait::DATA_TYPE","value":"DataType","parent":{"krate":0,"index":123},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":129},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":35299,"byte_end":35317,"line_start":48,"line_end":48,"column_start":12,"column_end":30},"name":"GenericBinaryArray","qualname":"::array::array_binary::GenericBinaryArray","value":"GenericBinaryArray {  }","parent":null,"children":[{"krate":0,"index":131},{"krate":0,"index":132},{"krate":0,"index":133}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":136},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":35691,"byte_end":35703,"line_start":59,"line_end":59,"column_start":12,"column_end":24},"name":"value_offset","qualname":"<GenericBinaryArray<OffsetSize>>::value_offset","value":"pub fn value_offset(&Self, usize) -> OffsetSize","parent":null,"children":[],"decl_id":null,"docs":" Returns the offset for the element at index `i`.","sig":null,"attributes":[{"value":"/ Returns the offset for the element at index `i`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":35532,"byte_end":35584,"line_start":55,"line_end":55,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":35589,"byte_end":35592,"line_start":56,"line_end":56,"column_start":5,"column_end":8}},{"value":"/ Note this doesn't do any bound checking, for performance reason.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":35597,"byte_end":35665,"line_start":57,"line_end":57,"column_start":5,"column_end":73}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":35670,"byte_end":35679,"line_start":58,"line_end":58,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":137},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":35960,"byte_end":35972,"line_start":67,"line_end":67,"column_start":12,"column_end":24},"name":"value_length","qualname":"<GenericBinaryArray<OffsetSize>>::value_length","value":"pub fn value_length(&Self, usize) -> OffsetSize","parent":null,"children":[],"decl_id":null,"docs":" Returns the length for the element at index `i`.","sig":null,"attributes":[{"value":"/ Returns the length for the element at index `i`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":35801,"byte_end":35853,"line_start":63,"line_end":63,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":35858,"byte_end":35861,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ Note this doesn't do any bound checking, for performance reason.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":35866,"byte_end":35934,"line_start":65,"line_end":65,"column_start":5,"column_end":73}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":35939,"byte_end":35948,"line_start":66,"line_end":66,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":138},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":36174,"byte_end":36187,"line_start":73,"line_end":73,"column_start":12,"column_end":25},"name":"value_offsets","qualname":"<GenericBinaryArray<OffsetSize>>::value_offsets","value":"pub fn value_offsets(&Self) -> Buffer","parent":null,"children":[],"decl_id":null,"docs":" Returns a clone of the value offset buffer\n","sig":null,"attributes":[{"value":"/ Returns a clone of the value offset buffer","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":36116,"byte_end":36162,"line_start":72,"line_end":72,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":139},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":36313,"byte_end":36323,"line_start":78,"line_end":78,"column_start":12,"column_end":22},"name":"value_data","qualname":"<GenericBinaryArray<OffsetSize>>::value_data","value":"pub fn value_data(&Self) -> Buffer","parent":null,"children":[],"decl_id":null,"docs":" Returns a clone of the value data buffer\n","sig":null,"attributes":[{"value":"/ Returns a clone of the value data buffer","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":36257,"byte_end":36301,"line_start":77,"line_end":77,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":141},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":36590,"byte_end":36595,"line_start":88,"line_end":88,"column_start":12,"column_end":17},"name":"value","qualname":"<GenericBinaryArray<OffsetSize>>::value","value":"pub fn value(&Self, usize) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Returns the element at index `i` as a byte slice.\n","sig":null,"attributes":[{"value":"/ Returns the element at index `i` as a byte slice.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":36525,"byte_end":36578,"line_start":87,"line_end":87,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":142},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":37125,"byte_end":37133,"line_start":101,"line_end":101,"column_start":12,"column_end":20},"name":"from_vec","qualname":"<GenericBinaryArray<OffsetSize>>::from_vec","value":"pub fn from_vec(Vec<&[u8]>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a [GenericBinaryArray] from a vector of byte slices\n","sig":null,"attributes":[{"value":"/ Creates a [GenericBinaryArray] from a vector of byte slices","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":37050,"byte_end":37113,"line_start":100,"line_end":100,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":143},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":37931,"byte_end":37943,"line_start":120,"line_end":120,"column_start":12,"column_end":24},"name":"from_opt_vec","qualname":"<GenericBinaryArray<OffsetSize>>::from_opt_vec","value":"pub fn from_opt_vec(Vec<Option<&[u8]>>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a [GenericBinaryArray] from a vector of Optional (null) byte slices\n","sig":null,"attributes":[{"value":"/ Creates a [GenericBinaryArray] from a vector of Optional (null) byte slices","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":37840,"byte_end":37919,"line_start":119,"line_end":119,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":148},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":39053,"byte_end":39057,"line_start":152,"line_end":152,"column_start":12,"column_end":16},"name":"iter","qualname":"<GenericBinaryArray<T>>::iter","value":"pub fn iter(&'a Self) -> GenericBinaryIter","parent":null,"children":[],"decl_id":null,"docs":" constructs a new iterator\n","sig":null,"attributes":[{"value":"/ constructs a new iterator","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":39012,"byte_end":39041,"line_start":151,"line_end":151,"column_start":5,"column_end":34}}]},{"kind":"Type","id":{"krate":0,"index":168},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":42537,"byte_end":42548,"line_start":257,"line_end":257,"column_start":10,"column_end":21},"name":"BinaryArray","qualname":"::array::array_binary::BinaryArray","value":"GenericBinaryArray<i32>","parent":null,"children":[],"decl_id":null,"docs":" An array where each element is a byte whose maximum length is represented by a i32.\n","sig":null,"attributes":[{"value":"/ An array where each element is a byte whose maximum length is represented by a i32.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":42440,"byte_end":42527,"line_start":256,"line_end":256,"column_start":1,"column_end":88}}]},{"kind":"Type","id":{"krate":0,"index":169},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":42674,"byte_end":42690,"line_start":260,"line_end":260,"column_start":10,"column_end":26},"name":"LargeBinaryArray","qualname":"::array::array_binary::LargeBinaryArray","value":"GenericBinaryArray<i64>","parent":null,"children":[],"decl_id":null,"docs":" An array where each element is a byte whose maximum length is represented by a i64.\n","sig":null,"attributes":[{"value":"/ An array where each element is a byte whose maximum length is represented by a i64.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":42577,"byte_end":42664,"line_start":259,"line_end":259,"column_start":1,"column_end":88}}]},{"kind":"Struct","id":{"krate":0,"index":185},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":43655,"byte_end":43675,"line_start":294,"line_end":294,"column_start":12,"column_end":32},"name":"FixedSizeBinaryArray","qualname":"::array::array_binary::FixedSizeBinaryArray","value":"FixedSizeBinaryArray {  }","parent":null,"children":[{"krate":0,"index":186},{"krate":0,"index":187},{"krate":0,"index":188}],"decl_id":null,"docs":" A type of `FixedSizeListArray` whose elements are binaries.\n","sig":null,"attributes":[{"value":"/ A type of `FixedSizeListArray` whose elements are binaries.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":43580,"byte_end":43643,"line_start":293,"line_end":293,"column_start":1,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":190},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":43850,"byte_end":43855,"line_start":302,"line_end":302,"column_start":12,"column_end":17},"name":"value","qualname":"<FixedSizeBinaryArray>::value","value":"pub fn value(&Self, usize) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Returns the element at index `i` as a byte slice.\n","sig":null,"attributes":[{"value":"/ Returns the element at index `i` as a byte slice.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":43785,"byte_end":43838,"line_start":301,"line_end":301,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":191},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":44499,"byte_end":44511,"line_start":321,"line_end":321,"column_start":12,"column_end":24},"name":"value_offset","qualname":"<FixedSizeBinaryArray>::value_offset","value":"pub fn value_offset(&Self, usize) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Returns the offset for the element at index `i`.","sig":null,"attributes":[{"value":"/ Returns the offset for the element at index `i`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":44340,"byte_end":44392,"line_start":317,"line_end":317,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":44397,"byte_end":44400,"line_start":318,"line_end":318,"column_start":5,"column_end":8}},{"value":"/ Note this doesn't do any bound checking, for performance reason.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":44405,"byte_end":44473,"line_start":319,"line_end":319,"column_start":5,"column_end":73}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":44478,"byte_end":44487,"line_start":320,"line_end":320,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":192},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":44746,"byte_end":44758,"line_start":329,"line_end":329,"column_start":12,"column_end":24},"name":"value_length","qualname":"<FixedSizeBinaryArray>::value_length","value":"pub fn value_length(&Self) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Returns the length for an element.","sig":null,"attributes":[{"value":"/ Returns the length for an element.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":44602,"byte_end":44640,"line_start":325,"line_end":325,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":44645,"byte_end":44648,"line_start":326,"line_end":326,"column_start":5,"column_end":8}},{"value":"/ All elements have the same length as the array is a fixed size.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":44653,"byte_end":44720,"line_start":327,"line_end":327,"column_start":5,"column_end":72}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":44725,"byte_end":44734,"line_start":328,"line_end":328,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":193},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":44862,"byte_end":44872,"line_start":334,"line_end":334,"column_start":12,"column_end":22},"name":"value_data","qualname":"<FixedSizeBinaryArray>::value_data","value":"pub fn value_data(&Self) -> Buffer","parent":null,"children":[],"decl_id":null,"docs":" Returns a clone of the value data buffer\n","sig":null,"attributes":[{"value":"/ Returns a clone of the value data buffer","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":44806,"byte_end":44850,"line_start":333,"line_end":333,"column_start":5,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":216},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":49565,"byte_end":49577,"line_start":479,"line_end":479,"column_start":12,"column_end":24},"name":"DecimalArray","qualname":"::array::array_binary::DecimalArray","value":"DecimalArray {  }","parent":null,"children":[{"krate":0,"index":217},{"krate":0,"index":218},{"krate":0,"index":219},{"krate":0,"index":220},{"krate":0,"index":221}],"decl_id":null,"docs":" A type of `DecimalArray` whose elements are binaries.\n","sig":null,"attributes":[{"value":"/ A type of `DecimalArray` whose elements are binaries.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":49496,"byte_end":49553,"line_start":478,"line_end":478,"column_start":1,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":223},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":49776,"byte_end":49781,"line_start":489,"line_end":489,"column_start":12,"column_end":17},"name":"value","qualname":"<DecimalArray>::value","value":"pub fn value(&Self, usize) -> i128","parent":null,"children":[],"decl_id":null,"docs":" Returns the element at index `i` as i128.\n","sig":null,"attributes":[{"value":"/ Returns the element at index `i` as i128.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":49719,"byte_end":49764,"line_start":488,"line_end":488,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":224},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":50618,"byte_end":50630,"line_start":510,"line_end":510,"column_start":12,"column_end":24},"name":"value_offset","qualname":"<DecimalArray>::value_offset","value":"pub fn value_offset(&Self, usize) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Returns the offset for the element at index `i`.","sig":null,"attributes":[{"value":"/ Returns the offset for the element at index `i`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":50459,"byte_end":50511,"line_start":506,"line_end":506,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":50516,"byte_end":50519,"line_start":507,"line_end":507,"column_start":5,"column_end":8}},{"value":"/ Note this doesn't do any bound checking, for performance reason.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":50524,"byte_end":50592,"line_start":508,"line_end":508,"column_start":5,"column_end":73}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":50597,"byte_end":50606,"line_start":509,"line_end":509,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":225},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":50865,"byte_end":50877,"line_start":518,"line_end":518,"column_start":12,"column_end":24},"name":"value_length","qualname":"<DecimalArray>::value_length","value":"pub fn value_length(&Self) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Returns the length for an element.","sig":null,"attributes":[{"value":"/ Returns the length for an element.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":50721,"byte_end":50759,"line_start":514,"line_end":514,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":50764,"byte_end":50767,"line_start":515,"line_end":515,"column_start":5,"column_end":8}},{"value":"/ All elements have the same length as the array is a fixed size.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":50772,"byte_end":50839,"line_start":516,"line_end":516,"column_start":5,"column_end":72}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":50844,"byte_end":50853,"line_start":517,"line_end":517,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":226},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":50981,"byte_end":50991,"line_start":523,"line_end":523,"column_start":12,"column_end":22},"name":"value_data","qualname":"<DecimalArray>::value_data","value":"pub fn value_data(&Self) -> Buffer","parent":null,"children":[],"decl_id":null,"docs":" Returns a clone of the value data buffer\n","sig":null,"attributes":[{"value":"/ Returns a clone of the value data buffer","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":50925,"byte_end":50969,"line_start":522,"line_end":522,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":228},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":51169,"byte_end":51195,"line_start":532,"line_end":532,"column_start":12,"column_end":38},"name":"from_fixed_size_list_array","qualname":"<DecimalArray>::from_fixed_size_list_array","value":"pub fn from_fixed_size_list_array(FixedSizeListArray, usize, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":229},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":52148,"byte_end":52157,"line_start":559,"line_end":559,"column_start":12,"column_end":21},"name":"precision","qualname":"<DecimalArray>::precision","value":"pub fn precision(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":230},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":52217,"byte_end":52222,"line_start":563,"line_end":563,"column_start":12,"column_end":17},"name":"scale","qualname":"<DecimalArray>::scale","value":"pub fn scale(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":288},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_boolean.rs","byte_start":70165,"byte_end":70177,"line_start":30,"line_end":30,"column_start":12,"column_end":24},"name":"BooleanArray","qualname":"::array::array_boolean::BooleanArray","value":"BooleanArray {  }","parent":null,"children":[{"krate":0,"index":289},{"krate":0,"index":290}],"decl_id":null,"docs":" Array of bools\n","sig":null,"attributes":[{"value":"/ Array of bools","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_boolean.rs","byte_start":70135,"byte_end":70153,"line_start":29,"line_end":29,"column_start":1,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":295},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_boolean.rs","byte_start":70734,"byte_end":70737,"line_start":49,"line_end":49,"column_start":12,"column_end":15},"name":"len","qualname":"<BooleanArray>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the length of this array.\n","sig":null,"attributes":[{"value":"/ Returns the length of this array.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_boolean.rs","byte_start":70685,"byte_end":70722,"line_start":48,"line_end":48,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":296},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_boolean.rs","byte_start":70843,"byte_end":70851,"line_start":54,"line_end":54,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<BooleanArray>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether this array is empty.\n","sig":null,"attributes":[{"value":"/ Returns whether this array is empty.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_boolean.rs","byte_start":70791,"byte_end":70831,"line_start":53,"line_end":53,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":297},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_boolean.rs","byte_start":70959,"byte_end":70966,"line_start":59,"line_end":59,"column_start":12,"column_end":19},"name":"builder","qualname":"<BooleanArray>::builder","value":"pub fn builder(usize) -> BooleanBuilder","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":298},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_boolean.rs","byte_start":71203,"byte_end":71209,"line_start":66,"line_end":66,"column_start":12,"column_end":18},"name":"values","qualname":"<BooleanArray>::values","value":"pub fn values(&Self) -> &Buffer","parent":null,"children":[],"decl_id":null,"docs":" Returns a `Buffer` holding all the values of this array.","sig":null,"attributes":[{"value":"/ Returns a `Buffer` holding all the values of this array.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_boolean.rs","byte_start":71053,"byte_end":71113,"line_start":63,"line_end":63,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_boolean.rs","byte_start":71118,"byte_end":71121,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ Note this doesn't take the offset of this array into account.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_boolean.rs","byte_start":71126,"byte_end":71191,"line_start":65,"line_end":65,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":299},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_boolean.rs","byte_start":71409,"byte_end":71414,"line_start":73,"line_end":73,"column_start":12,"column_end":17},"name":"value","qualname":"<BooleanArray>::value","value":"pub fn value(&Self, usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns the boolean value at index `i`.","sig":null,"attributes":[{"value":"/ Returns the boolean value at index `i`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_boolean.rs","byte_start":71273,"byte_end":71316,"line_start":70,"line_end":70,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_boolean.rs","byte_start":71321,"byte_end":71324,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ Note this doesn't do any bound checking, for performance reason.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_boolean.rs","byte_start":71329,"byte_end":71397,"line_start":72,"line_end":72,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":319},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_boolean.rs","byte_start":73608,"byte_end":73612,"line_start":154,"line_end":154,"column_start":12,"column_end":16},"name":"iter","qualname":"<BooleanArray>::iter","value":"pub fn iter(&'a Self) -> BooleanIter","parent":null,"children":[],"decl_id":null,"docs":" constructs a new iterator\n","sig":null,"attributes":[{"value":"/ constructs a new iterator","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_boolean.rs","byte_start":73567,"byte_end":73596,"line_start":153,"line_end":153,"column_start":5,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":393},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_dictionary.rs","byte_start":80006,"byte_end":80021,"line_start":54,"line_end":54,"column_start":12,"column_end":27},"name":"DictionaryArray","qualname":"::array::array_dictionary::DictionaryArray","value":"DictionaryArray {  }","parent":null,"children":[{"krate":0,"index":395},{"krate":0,"index":396},{"krate":0,"index":397},{"krate":0,"index":398}],"decl_id":null,"docs":" A dictionary array where each element is a single value indexed by an integer key.\n This is mostly used to represent strings or a limited set of primitive types as integers,\n for example when doing NLP analysis or representing chromosomes by name.","sig":null,"attributes":[{"value":"/ A dictionary array where each element is a single value indexed by an integer key.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_dictionary.rs","byte_start":79020,"byte_end":79106,"line_start":31,"line_end":31,"column_start":1,"column_end":87}},{"value":"/ This is mostly used to represent strings or a limited set of primitive types as integers,","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_dictionary.rs","byte_start":79107,"byte_end":79200,"line_start":32,"line_end":32,"column_start":1,"column_end":94}},{"value":"/ for example when doing NLP analysis or representing chromosomes by name.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_dictionary.rs","byte_start":79201,"byte_end":79277,"line_start":33,"line_end":33,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_dictionary.rs","byte_start":79278,"byte_end":79281,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ Example **with nullable** data:","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_dictionary.rs","byte_start":79282,"byte_end":79317,"line_start":35,"line_end":35,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_dictionary.rs","byte_start":79318,"byte_end":79321,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_dictionary.rs","byte_start":79322,"byte_end":79329,"line_start":37,"line_end":37,"column_start":1,"column_end":8}},{"value":"/ use arrow::array::{DictionaryArray, Int8Array};","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_dictionary.rs","byte_start":79330,"byte_end":79381,"line_start":38,"line_end":38,"column_start":1,"column_end":52}},{"value":"/ use arrow::datatypes::Int8Type;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_dictionary.rs","byte_start":79382,"byte_end":79417,"line_start":39,"line_end":39,"column_start":1,"column_end":36}},{"value":"/ let test = vec![\"a\", \"a\", \"b\", \"c\"];","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_dictionary.rs","byte_start":79418,"byte_end":79458,"line_start":40,"line_end":40,"column_start":1,"column_end":41}},{"value":"/ let array : DictionaryArray<Int8Type> = test.iter().map(|&x| if x == \"b\" {None} else {Some(x)}).collect();","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_dictionary.rs","byte_start":79459,"byte_end":79569,"line_start":41,"line_end":41,"column_start":1,"column_end":111}},{"value":"/ assert_eq!(array.keys(), &Int8Array::from(vec![Some(0), Some(0), None, Some(1)]));","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_dictionary.rs","byte_start":79570,"byte_end":79656,"line_start":42,"line_end":42,"column_start":1,"column_end":87}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_dictionary.rs","byte_start":79657,"byte_end":79664,"line_start":43,"line_end":43,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_dictionary.rs","byte_start":79665,"byte_end":79668,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ Example **without nullable** data:","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_dictionary.rs","byte_start":79669,"byte_end":79707,"line_start":45,"line_end":45,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_dictionary.rs","byte_start":79708,"byte_end":79711,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_dictionary.rs","byte_start":79712,"byte_end":79719,"line_start":47,"line_end":47,"column_start":1,"column_end":8}},{"value":"/ use arrow::array::{DictionaryArray, Int8Array};","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_dictionary.rs","byte_start":79720,"byte_end":79771,"line_start":48,"line_end":48,"column_start":1,"column_end":52}},{"value":"/ use arrow::datatypes::Int8Type;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_dictionary.rs","byte_start":79772,"byte_end":79807,"line_start":49,"line_end":49,"column_start":1,"column_end":36}},{"value":"/ let test = vec![\"a\", \"a\", \"b\", \"c\"];","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_dictionary.rs","byte_start":79808,"byte_end":79848,"line_start":50,"line_end":50,"column_start":1,"column_end":41}},{"value":"/ let array : DictionaryArray<Int8Type> = test.into_iter().collect();","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_dictionary.rs","byte_start":79849,"byte_end":79920,"line_start":51,"line_end":51,"column_start":1,"column_end":72}},{"value":"/ assert_eq!(array.keys(), &Int8Array::from(vec![0, 0, 1, 2]));","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_dictionary.rs","byte_start":79921,"byte_end":79986,"line_start":52,"line_end":52,"column_start":1,"column_end":66}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_dictionary.rs","byte_start":79987,"byte_end":79994,"line_start":53,"line_end":53,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":402},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_dictionary.rs","byte_start":80785,"byte_end":80789,"line_start":74,"line_end":74,"column_start":12,"column_end":16},"name":"keys","qualname":"<DictionaryArray<K>>::keys","value":"pub fn keys(&Self) -> &PrimitiveArray<K>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator to the keys of this dictionary.\n","sig":null,"attributes":[{"value":"/ Return an iterator to the keys of this dictionary.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_dictionary.rs","byte_start":80719,"byte_end":80773,"line_start":73,"line_end":73,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":403},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_dictionary.rs","byte_start":80919,"byte_end":80929,"line_start":79,"line_end":79,"column_start":12,"column_end":22},"name":"keys_array","qualname":"<DictionaryArray<K>>::keys_array","value":"pub fn keys_array(&Self) -> PrimitiveArray<K>","parent":null,"children":[],"decl_id":null,"docs":" Returns an array view of the keys of this dictionary\n","sig":null,"attributes":[{"value":"/ Returns an array view of the keys of this dictionary","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_dictionary.rs","byte_start":80851,"byte_end":80907,"line_start":78,"line_end":78,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":404},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_dictionary.rs","byte_start":81398,"byte_end":81408,"line_start":94,"line_end":94,"column_start":12,"column_end":22},"name":"lookup_key","qualname":"<DictionaryArray<K>>::lookup_key","value":"pub fn lookup_key(&Self, &str) -> Option<K::Native>","parent":null,"children":[],"decl_id":null,"docs":" Returns the lookup key by doing reverse dictionary lookup\n","sig":null,"attributes":[{"value":"/ Returns the lookup key by doing reverse dictionary lookup","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_dictionary.rs","byte_start":81325,"byte_end":81386,"line_start":93,"line_end":93,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":406},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_dictionary.rs","byte_start":81776,"byte_end":81782,"line_start":105,"line_end":105,"column_start":12,"column_end":18},"name":"values","qualname":"<DictionaryArray<K>>::values","value":"pub fn values(&Self) -> ArrayRef","parent":null,"children":[],"decl_id":null,"docs":" Returns an `ArrayRef` to the dictionary values.\n","sig":null,"attributes":[{"value":"/ Returns an `ArrayRef` to the dictionary values.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_dictionary.rs","byte_start":81713,"byte_end":81764,"line_start":104,"line_end":104,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":407},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_dictionary.rs","byte_start":81906,"byte_end":81916,"line_start":110,"line_end":110,"column_start":12,"column_end":22},"name":"value_type","qualname":"<DictionaryArray<K>>::value_type","value":"pub fn value_type(&Self) -> DataType","parent":null,"children":[],"decl_id":null,"docs":" Returns a clone of the value type of this list.\n","sig":null,"attributes":[{"value":"/ Returns a clone of the value type of this list.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_dictionary.rs","byte_start":81843,"byte_end":81894,"line_start":109,"line_end":109,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":408},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_dictionary.rs","byte_start":82077,"byte_end":82080,"line_start":115,"line_end":115,"column_start":12,"column_end":15},"name":"len","qualname":"<DictionaryArray<K>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" The length of the dictionary is the length of the keys array.\n","sig":null,"attributes":[{"value":"/ The length of the dictionary is the length of the keys array.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_dictionary.rs","byte_start":82000,"byte_end":82065,"line_start":114,"line_end":114,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":409},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_dictionary.rs","byte_start":82182,"byte_end":82190,"line_start":120,"line_end":120,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<DictionaryArray<K>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Whether this dictionary is empty\n","sig":null,"attributes":[{"value":"/ Whether this dictionary is empty","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_dictionary.rs","byte_start":82134,"byte_end":82170,"line_start":119,"line_end":119,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":410},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_dictionary.rs","byte_start":82322,"byte_end":82332,"line_start":125,"line_end":125,"column_start":12,"column_end":22},"name":"is_ordered","qualname":"<DictionaryArray<K>>::is_ordered","value":"pub fn is_ordered(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":477},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_list.rs","byte_start":93866,"byte_end":93881,"line_start":33,"line_end":33,"column_start":11,"column_end":26},"name":"OffsetSizeTrait","qualname":"::array::array_list::OffsetSizeTrait","value":"OffsetSizeTrait: ArrowNativeType + Num + Ord + std::ops::AddAssign","parent":null,"children":[{"krate":0,"index":478},{"krate":0,"index":479}],"decl_id":null,"docs":" trait declaring an offset size, relevant for i32 vs i64 array types.\n","sig":null,"attributes":[{"value":"/ trait declaring an offset size, relevant for i32 vs i64 array types.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_list.rs","byte_start":93783,"byte_end":93855,"line_start":32,"line_end":32,"column_start":1,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":478},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_list.rs","byte_start":93942,"byte_end":93948,"line_start":34,"line_end":34,"column_start":8,"column_end":14},"name":"prefix","qualname":"::array::array_list::OffsetSizeTrait::prefix","value":"pub fn prefix() -> &'static str","parent":{"krate":0,"index":477},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":479},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_list.rs","byte_start":93976,"byte_end":93984,"line_start":36,"line_end":36,"column_start":8,"column_end":16},"name":"to_isize","qualname":"::array::array_list::OffsetSizeTrait::to_isize","value":"pub fn to_isize(&Self) -> isize","parent":{"krate":0,"index":477},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":486},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_list.rs","byte_start":94373,"byte_end":94389,"line_start":59,"line_end":59,"column_start":12,"column_end":28},"name":"GenericListArray","qualname":"::array::array_list::GenericListArray","value":"GenericListArray {  }","parent":null,"children":[{"krate":0,"index":488},{"krate":0,"index":489},{"krate":0,"index":490}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":493},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_list.rs","byte_start":94627,"byte_end":94633,"line_start":67,"line_end":67,"column_start":12,"column_end":18},"name":"values","qualname":"<GenericListArray<OffsetSize>>::values","value":"pub fn values(&Self) -> ArrayRef","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the values of this list.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the values of this list.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_list.rs","byte_start":94564,"byte_end":94615,"line_start":66,"line_end":66,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":494},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_list.rs","byte_start":94757,"byte_end":94767,"line_start":72,"line_end":72,"column_start":12,"column_end":22},"name":"value_type","qualname":"<GenericListArray<OffsetSize>>::value_type","value":"pub fn value_type(&Self) -> DataType","parent":null,"children":[],"decl_id":null,"docs":" Returns a clone of the value type of this list.\n","sig":null,"attributes":[{"value":"/ Returns a clone of the value type of this list.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_list.rs","byte_start":94694,"byte_end":94745,"line_start":71,"line_end":71,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":495},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_list.rs","byte_start":94904,"byte_end":94909,"line_start":77,"line_end":77,"column_start":12,"column_end":17},"name":"value","qualname":"<GenericListArray<OffsetSize>>::value","value":"pub fn value(&Self, usize) -> ArrayRef","parent":null,"children":[],"decl_id":null,"docs":" Returns ith value of this list array.\n","sig":null,"attributes":[{"value":"/ Returns ith value of this list array.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_list.rs","byte_start":94851,"byte_end":94892,"line_start":76,"line_end":76,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":496},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_list.rs","byte_start":95250,"byte_end":95262,"line_start":88,"line_end":88,"column_start":12,"column_end":24},"name":"value_offset","qualname":"<GenericListArray<OffsetSize>>::value_offset","value":"pub fn value_offset(&Self, usize) -> OffsetSize","parent":null,"children":[],"decl_id":null,"docs":" Returns the offset for value at index `i`.","sig":null,"attributes":[{"value":"/ Returns the offset for value at index `i`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_list.rs","byte_start":95097,"byte_end":95143,"line_start":84,"line_end":84,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_list.rs","byte_start":95148,"byte_end":95151,"line_start":85,"line_end":85,"column_start":5,"column_end":8}},{"value":"/ Note this doesn't do any bound checking, for performance reason.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_list.rs","byte_start":95156,"byte_end":95224,"line_start":86,"line_end":86,"column_start":5,"column_end":73}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_list.rs","byte_start":95229,"byte_end":95238,"line_start":87,"line_end":87,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":497},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_list.rs","byte_start":95513,"byte_end":95525,"line_start":96,"line_end":96,"column_start":12,"column_end":24},"name":"value_length","qualname":"<GenericListArray<OffsetSize>>::value_length","value":"pub fn value_length(&Self, usize) -> OffsetSize","parent":null,"children":[],"decl_id":null,"docs":" Returns the length for value at index `i`.","sig":null,"attributes":[{"value":"/ Returns the length for value at index `i`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_list.rs","byte_start":95360,"byte_end":95406,"line_start":92,"line_end":92,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_list.rs","byte_start":95411,"byte_end":95414,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ Note this doesn't do any bound checking, for performance reason.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_list.rs","byte_start":95419,"byte_end":95487,"line_start":94,"line_end":94,"column_start":5,"column_end":73}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_list.rs","byte_start":95492,"byte_end":95501,"line_start":95,"line_end":95,"column_start":5,"column_end":14}}]},{"kind":"Type","id":{"krate":0,"index":513},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_list.rs","byte_start":97938,"byte_end":97947,"line_start":173,"line_end":173,"column_start":10,"column_end":19},"name":"ListArray","qualname":"::array::array_list::ListArray","value":"GenericListArray<i32>","parent":null,"children":[],"decl_id":null,"docs":" A list array where each element is a variable-sized sequence of values with the same\n type whose memory offsets between elements are represented by a i32.\n","sig":null,"attributes":[{"value":"/ A list array where each element is a variable-sized sequence of values with the same","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_list.rs","byte_start":97767,"byte_end":97855,"line_start":171,"line_end":171,"column_start":1,"column_end":89}},{"value":"/ type whose memory offsets between elements are represented by a i32.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_list.rs","byte_start":97856,"byte_end":97928,"line_start":172,"line_end":172,"column_start":1,"column_end":73}}]},{"kind":"Type","id":{"krate":0,"index":514},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_list.rs","byte_start":98145,"byte_end":98159,"line_start":177,"line_end":177,"column_start":10,"column_end":24},"name":"LargeListArray","qualname":"::array::array_list::LargeListArray","value":"GenericListArray<i64>","parent":null,"children":[],"decl_id":null,"docs":" A list array where each element is a variable-sized sequence of values with the same\n type whose memory offsets between elements are represented by a i64.\n","sig":null,"attributes":[{"value":"/ A list array where each element is a variable-sized sequence of values with the same","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_list.rs","byte_start":97974,"byte_end":98062,"line_start":175,"line_end":175,"column_start":1,"column_end":89}},{"value":"/ type whose memory offsets between elements are represented by a i64.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_list.rs","byte_start":98063,"byte_end":98135,"line_start":176,"line_end":176,"column_start":1,"column_end":73}}]},{"kind":"Struct","id":{"krate":0,"index":515},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_list.rs","byte_start":98337,"byte_end":98355,"line_start":181,"line_end":181,"column_start":12,"column_end":30},"name":"FixedSizeListArray","qualname":"::array::array_list::FixedSizeListArray","value":"FixedSizeListArray {  }","parent":null,"children":[{"krate":0,"index":516},{"krate":0,"index":517},{"krate":0,"index":518}],"decl_id":null,"docs":" A list array where each element is a fixed-size sequence of values with the same\n type whose maximum length is represented by a i32.\n","sig":null,"attributes":[{"value":"/ A list array where each element is a fixed-size sequence of values with the same","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_list.rs","byte_start":98186,"byte_end":98270,"line_start":179,"line_end":179,"column_start":1,"column_end":85}},{"value":"/ type whose maximum length is represented by a i32.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_list.rs","byte_start":98271,"byte_end":98325,"line_start":180,"line_end":180,"column_start":1,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":520},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_list.rs","byte_start":98517,"byte_end":98523,"line_start":189,"line_end":189,"column_start":12,"column_end":18},"name":"values","qualname":"<FixedSizeListArray>::values","value":"pub fn values(&Self) -> ArrayRef","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the values of this list.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the values of this list.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_list.rs","byte_start":98454,"byte_end":98505,"line_start":188,"line_end":188,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":521},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_list.rs","byte_start":98647,"byte_end":98657,"line_start":194,"line_end":194,"column_start":12,"column_end":22},"name":"value_type","qualname":"<FixedSizeListArray>::value_type","value":"pub fn value_type(&Self) -> DataType","parent":null,"children":[],"decl_id":null,"docs":" Returns a clone of the value type of this list.\n","sig":null,"attributes":[{"value":"/ Returns a clone of the value type of this list.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_list.rs","byte_start":98584,"byte_end":98635,"line_start":193,"line_end":193,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":522},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_list.rs","byte_start":98794,"byte_end":98799,"line_start":199,"line_end":199,"column_start":12,"column_end":17},"name":"value","qualname":"<FixedSizeListArray>::value","value":"pub fn value(&Self, usize) -> ArrayRef","parent":null,"children":[],"decl_id":null,"docs":" Returns ith value of this list array.\n","sig":null,"attributes":[{"value":"/ Returns ith value of this list array.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_list.rs","byte_start":98741,"byte_end":98782,"line_start":198,"line_end":198,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":523},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_list.rs","byte_start":99095,"byte_end":99107,"line_start":208,"line_end":208,"column_start":12,"column_end":24},"name":"value_offset","qualname":"<FixedSizeListArray>::value_offset","value":"pub fn value_offset(&Self, usize) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Returns the offset for value at index `i`.","sig":null,"attributes":[{"value":"/ Returns the offset for value at index `i`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_list.rs","byte_start":98942,"byte_end":98988,"line_start":204,"line_end":204,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_list.rs","byte_start":98993,"byte_end":98996,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/ Note this doesn't do any bound checking, for performance reason.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_list.rs","byte_start":99001,"byte_end":99069,"line_start":206,"line_end":206,"column_start":5,"column_end":73}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_list.rs","byte_start":99074,"byte_end":99083,"line_start":207,"line_end":207,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":524},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_list.rs","byte_start":99357,"byte_end":99369,"line_start":216,"line_end":216,"column_start":18,"column_end":30},"name":"value_length","qualname":"<FixedSizeListArray>::value_length","value":"pub const fn value_length(&Self) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Returns the length for value at index `i`.","sig":null,"attributes":[{"value":"/ Returns the length for value at index `i`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_list.rs","byte_start":99198,"byte_end":99244,"line_start":212,"line_end":212,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_list.rs","byte_start":99249,"byte_end":99252,"line_start":213,"line_end":213,"column_start":5,"column_end":8}},{"value":"/ Note this doesn't do any bound checking, for performance reason.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_list.rs","byte_start":99257,"byte_end":99325,"line_start":214,"line_end":214,"column_start":5,"column_end":73}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_list.rs","byte_start":99330,"byte_end":99339,"line_start":215,"line_end":215,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":585},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_primitive.rs","byte_start":122009,"byte_end":122023,"line_start":44,"line_end":44,"column_start":12,"column_end":26},"name":"PrimitiveArray","qualname":"::array::array_primitive::PrimitiveArray","value":"PrimitiveArray {  }","parent":null,"children":[{"krate":0,"index":587},{"krate":0,"index":588}],"decl_id":null,"docs":" Array whose elements are of primitive types.\n","sig":null,"attributes":[{"value":"/ Array whose elements are of primitive types.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_primitive.rs","byte_start":121949,"byte_end":121997,"line_start":43,"line_end":43,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":591},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_primitive.rs","byte_start":122629,"byte_end":122632,"line_start":60,"line_end":60,"column_start":12,"column_end":15},"name":"len","qualname":"<PrimitiveArray<T>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the length of this array.\n","sig":null,"attributes":[{"value":"/ Returns the length of this array.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_primitive.rs","byte_start":122566,"byte_end":122603,"line_start":58,"line_end":58,"column_start":5,"column_end":42}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_primitive.rs","byte_start":122608,"byte_end":122617,"line_start":59,"line_end":59,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":592},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_primitive.rs","byte_start":122738,"byte_end":122746,"line_start":65,"line_end":65,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<PrimitiveArray<T>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether this array is empty.\n","sig":null,"attributes":[{"value":"/ Returns whether this array is empty.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_primitive.rs","byte_start":122686,"byte_end":122726,"line_start":64,"line_end":64,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":593},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_primitive.rs","byte_start":122877,"byte_end":122883,"line_start":71,"line_end":71,"column_start":12,"column_end":18},"name":"values","qualname":"<PrimitiveArray<T>>::values","value":"pub fn values(&Self) -> &[T::Native]","parent":null,"children":[],"decl_id":null,"docs":" Returns a slice of the values of this array\n","sig":null,"attributes":[{"value":"/ Returns a slice of the values of this array","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_primitive.rs","byte_start":122804,"byte_end":122851,"line_start":69,"line_end":69,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_primitive.rs","byte_start":122856,"byte_end":122865,"line_start":70,"line_end":70,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":594},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_primitive.rs","byte_start":123325,"byte_end":123332,"line_start":84,"line_end":84,"column_start":12,"column_end":19},"name":"builder","qualname":"<PrimitiveArray<T>>::builder","value":"pub fn builder(usize) -> PrimitiveBuilder<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":595},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_primitive.rs","byte_start":123668,"byte_end":123673,"line_start":93,"line_end":93,"column_start":12,"column_end":17},"name":"value","qualname":"<PrimitiveArray<T>>::value","value":"pub fn value(&Self, usize) -> T::Native","parent":null,"children":[],"decl_id":null,"docs":" Returns the primitive value at index `i`.","sig":null,"attributes":[{"value":"/ Returns the primitive value at index `i`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_primitive.rs","byte_start":123431,"byte_end":123476,"line_start":88,"line_end":88,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_primitive.rs","byte_start":123481,"byte_end":123484,"line_start":89,"line_end":89,"column_start":5,"column_end":8}},{"value":"/ Note this doesn't do any bound checking, for performance reason.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_primitive.rs","byte_start":123489,"byte_end":123557,"line_start":90,"line_end":90,"column_start":5,"column_end":73}},{"value":"/ # Safety","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_primitive.rs","byte_start":123562,"byte_end":123574,"line_start":91,"line_end":91,"column_start":5,"column_end":17}},{"value":"/ caller must ensure that the passed in offset is less than the array len()","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_primitive.rs","byte_start":123579,"byte_end":123656,"line_start":92,"line_end":92,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":613},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_primitive.rs","byte_start":128791,"byte_end":128808,"line_start":223,"line_end":223,"column_start":12,"column_end":29},"name":"value_as_datetime","qualname":"<PrimitiveArray<T>>::value_as_datetime","value":"pub fn value_as_datetime(&Self, usize) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Returns value as a chrono `NaiveDateTime`, handling time resolution","sig":null,"attributes":[{"value":"/ Returns value as a chrono `NaiveDateTime`, handling time resolution","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_primitive.rs","byte_start":128533,"byte_end":128604,"line_start":219,"line_end":219,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_primitive.rs","byte_start":128609,"byte_end":128612,"line_start":220,"line_end":220,"column_start":5,"column_end":8}},{"value":"/ If a data type cannot be converted to `NaiveDateTime`, a `None` is returned.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_primitive.rs","byte_start":128617,"byte_end":128697,"line_start":221,"line_end":221,"column_start":5,"column_end":85}},{"value":"/ A valid value is expected, thus the user should first check for validity.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_primitive.rs","byte_start":128702,"byte_end":128779,"line_start":222,"line_end":222,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":614},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_primitive.rs","byte_start":129084,"byte_end":129097,"line_start":230,"line_end":230,"column_start":12,"column_end":25},"name":"value_as_date","qualname":"<PrimitiveArray<T>>::value_as_date","value":"pub fn value_as_date(&Self, usize) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Returns value as a chrono `NaiveDate` by using `Self::datetime()`","sig":null,"attributes":[{"value":"/ Returns value as a chrono `NaiveDate` by using `Self::datetime()`","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_primitive.rs","byte_start":128915,"byte_end":128984,"line_start":227,"line_end":227,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_primitive.rs","byte_start":128989,"byte_end":128992,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ If a data type cannot be converted to `NaiveDate`, a `None` is returned","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_primitive.rs","byte_start":128997,"byte_end":129072,"line_start":229,"line_end":229,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":616},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_primitive.rs","byte_start":129364,"byte_end":129377,"line_start":237,"line_end":237,"column_start":12,"column_end":25},"name":"value_as_time","qualname":"<PrimitiveArray<T>>::value_as_time","value":"pub fn value_as_time(&Self, usize) -> Option<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Returns a value as a chrono `NaiveTime`","sig":null,"attributes":[{"value":"/ Returns a value as a chrono `NaiveTime`","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_primitive.rs","byte_start":129215,"byte_end":129258,"line_start":234,"line_end":234,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_primitive.rs","byte_start":129263,"byte_end":129266,"line_start":235,"line_end":235,"column_start":5,"column_end":8}},{"value":"/ `Date32` and `Date64` return UTC midnight as they do not have time resolution","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_primitive.rs","byte_start":129271,"byte_end":129352,"line_start":236,"line_end":236,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":630},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_primitive.rs","byte_start":131118,"byte_end":131122,"line_start":284,"line_end":284,"column_start":12,"column_end":16},"name":"iter","qualname":"<PrimitiveArray<T>>::iter","value":"pub fn iter(&'a Self) -> PrimitiveIter","parent":null,"children":[],"decl_id":null,"docs":" constructs a new iterator\n","sig":null,"attributes":[{"value":"/ constructs a new iterator","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_primitive.rs","byte_start":131077,"byte_end":131106,"line_start":283,"line_end":283,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":640},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_primitive.rs","byte_start":134762,"byte_end":134770,"line_start":382,"line_end":382,"column_start":12,"column_end":20},"name":"from_vec","qualname":"<PrimitiveArray<T>>::from_vec","value":"pub fn from_vec(Vec<i64>, Option<String>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a timestamp array from a vec of i64 values and an optional timezone\n","sig":null,"attributes":[{"value":"/ Construct a timestamp array from a vec of i64 values and an optional timezone","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_primitive.rs","byte_start":134669,"byte_end":134750,"line_start":381,"line_end":381,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":643},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_primitive.rs","byte_start":135256,"byte_end":135268,"line_start":394,"line_end":394,"column_start":12,"column_end":24},"name":"from_opt_vec","qualname":"<PrimitiveArray<T>>::from_opt_vec","value":"pub fn from_opt_vec(Vec<Option<i64>>, Option<String>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a timestamp array from a vec of Option<i64> values and an optional timezone\n","sig":null,"attributes":[{"value":"/ Construct a timestamp array from a vec of Option<i64> values and an optional timezone","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_primitive.rs","byte_start":135155,"byte_end":135244,"line_start":393,"line_end":393,"column_start":5,"column_end":94}}]},{"kind":"Trait","id":{"krate":0,"index":706},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_string.rs","byte_start":151800,"byte_end":151821,"line_start":33,"line_end":33,"column_start":11,"column_end":32},"name":"StringOffsetSizeTrait","qualname":"::array::array_string::StringOffsetSizeTrait","value":"StringOffsetSizeTrait: OffsetSizeTrait","parent":null,"children":[{"krate":0,"index":707}],"decl_id":null,"docs":" Like OffsetSizeTrait, but specialized for Strings\n","sig":null,"attributes":[{"value":"/ Like OffsetSizeTrait, but specialized for Strings","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_string.rs","byte_start":151662,"byte_end":151715,"line_start":31,"line_end":31,"column_start":1,"column_end":54}}]},{"kind":"Const","id":{"krate":0,"index":707},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_string.rs","byte_start":151851,"byte_end":151860,"line_start":34,"line_end":34,"column_start":11,"column_end":20},"name":"DATA_TYPE","qualname":"::array::array_string::StringOffsetSizeTrait::DATA_TYPE","value":"DataType","parent":{"krate":0,"index":706},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":712},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_string.rs","byte_start":152111,"byte_end":152129,"line_start":46,"line_end":46,"column_start":12,"column_end":30},"name":"GenericStringArray","qualname":"::array::array_string::GenericStringArray","value":"GenericStringArray {  }","parent":null,"children":[{"krate":0,"index":714},{"krate":0,"index":715},{"krate":0,"index":716}],"decl_id":null,"docs":" Generic struct for \\[Large\\]StringArray\n","sig":null,"attributes":[{"value":"/ Generic struct for \\[Large\\]StringArray","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_string.rs","byte_start":152056,"byte_end":152099,"line_start":45,"line_end":45,"column_start":1,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":719},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_string.rs","byte_start":152503,"byte_end":152515,"line_start":57,"line_end":57,"column_start":12,"column_end":24},"name":"value_offset","qualname":"<GenericStringArray<OffsetSize>>::value_offset","value":"pub fn value_offset(&Self, usize) -> OffsetSize","parent":null,"children":[],"decl_id":null,"docs":" Returns the offset for the element at index `i`.","sig":null,"attributes":[{"value":"/ Returns the offset for the element at index `i`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_string.rs","byte_start":152344,"byte_end":152396,"line_start":53,"line_end":53,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_string.rs","byte_start":152401,"byte_end":152404,"line_start":54,"line_end":54,"column_start":5,"column_end":8}},{"value":"/ Note this doesn't do any bound checking, for performance reason.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_string.rs","byte_start":152409,"byte_end":152477,"line_start":55,"line_end":55,"column_start":5,"column_end":73}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_string.rs","byte_start":152482,"byte_end":152491,"line_start":56,"line_end":56,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":720},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_string.rs","byte_start":152772,"byte_end":152784,"line_start":65,"line_end":65,"column_start":12,"column_end":24},"name":"value_length","qualname":"<GenericStringArray<OffsetSize>>::value_length","value":"pub fn value_length(&Self, usize) -> OffsetSize","parent":null,"children":[],"decl_id":null,"docs":" Returns the length for the element at index `i`.","sig":null,"attributes":[{"value":"/ Returns the length for the element at index `i`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_string.rs","byte_start":152613,"byte_end":152665,"line_start":61,"line_end":61,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_string.rs","byte_start":152670,"byte_end":152673,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ Note this doesn't do any bound checking, for performance reason.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_string.rs","byte_start":152678,"byte_end":152746,"line_start":63,"line_end":63,"column_start":5,"column_end":73}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_string.rs","byte_start":152751,"byte_end":152760,"line_start":64,"line_end":64,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":721},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_string.rs","byte_start":152986,"byte_end":152999,"line_start":71,"line_end":71,"column_start":12,"column_end":25},"name":"value_offsets","qualname":"<GenericStringArray<OffsetSize>>::value_offsets","value":"pub fn value_offsets(&Self) -> Buffer","parent":null,"children":[],"decl_id":null,"docs":" Returns a clone of the value offset buffer\n","sig":null,"attributes":[{"value":"/ Returns a clone of the value offset buffer","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_string.rs","byte_start":152928,"byte_end":152974,"line_start":70,"line_end":70,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":722},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_string.rs","byte_start":153125,"byte_end":153135,"line_start":76,"line_end":76,"column_start":12,"column_end":22},"name":"value_data","qualname":"<GenericStringArray<OffsetSize>>::value_data","value":"pub fn value_data(&Self) -> Buffer","parent":null,"children":[],"decl_id":null,"docs":" Returns a clone of the value data buffer\n","sig":null,"attributes":[{"value":"/ Returns a clone of the value data buffer","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_string.rs","byte_start":153069,"byte_end":153113,"line_start":75,"line_end":75,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":724},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_string.rs","byte_start":153393,"byte_end":153398,"line_start":86,"line_end":86,"column_start":12,"column_end":17},"name":"value","qualname":"<GenericStringArray<OffsetSize>>::value","value":"pub fn value(&Self, usize) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Returns the element at index `i` as &str\n","sig":null,"attributes":[{"value":"/ Returns the element at index `i` as &str","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_string.rs","byte_start":153337,"byte_end":153381,"line_start":85,"line_end":85,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":743},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_string.rs","byte_start":157636,"byte_end":157640,"line_start":204,"line_end":204,"column_start":12,"column_end":16},"name":"iter","qualname":"<GenericStringArray<T>>::iter","value":"pub fn iter(&'a Self) -> GenericStringIter","parent":null,"children":[],"decl_id":null,"docs":" constructs a new iterator\n","sig":null,"attributes":[{"value":"/ constructs a new iterator","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_string.rs","byte_start":157595,"byte_end":157624,"line_start":203,"line_end":203,"column_start":5,"column_end":34}}]},{"kind":"Type","id":{"krate":0,"index":764},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_string.rs","byte_start":160118,"byte_end":160129,"line_start":285,"line_end":285,"column_start":10,"column_end":21},"name":"StringArray","qualname":"::array::array_string::StringArray","value":"GenericStringArray<i32>","parent":null,"children":[],"decl_id":null,"docs":" An array where each element is a variable-sized sequence of bytes representing a string\n whose maximum length (in bytes) is represented by a i32.\n","sig":null,"attributes":[{"value":"/ An array where each element is a variable-sized sequence of bytes representing a string","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_string.rs","byte_start":159956,"byte_end":160047,"line_start":283,"line_end":283,"column_start":1,"column_end":92}},{"value":"/ whose maximum length (in bytes) is represented by a i32.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_string.rs","byte_start":160048,"byte_end":160108,"line_start":284,"line_end":284,"column_start":1,"column_end":61}}]},{"kind":"Type","id":{"krate":0,"index":765},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_string.rs","byte_start":160320,"byte_end":160336,"line_start":289,"line_end":289,"column_start":10,"column_end":26},"name":"LargeStringArray","qualname":"::array::array_string::LargeStringArray","value":"GenericStringArray<i64>","parent":null,"children":[],"decl_id":null,"docs":" An array where each element is a variable-sized sequence of bytes representing a string\n whose maximum length (in bytes) is represented by a i64.\n","sig":null,"attributes":[{"value":"/ An array where each element is a variable-sized sequence of bytes representing a string","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_string.rs","byte_start":160158,"byte_end":160249,"line_start":287,"line_end":287,"column_start":1,"column_end":92}},{"value":"/ whose maximum length (in bytes) is represented by a i64.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_string.rs","byte_start":160250,"byte_end":160310,"line_start":288,"line_end":288,"column_start":1,"column_end":61}}]},{"kind":"Struct","id":{"krate":0,"index":830},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_struct.rs","byte_start":166387,"byte_end":166398,"line_start":34,"line_end":34,"column_start":12,"column_end":23},"name":"StructArray","qualname":"::array::array_struct::StructArray","value":"StructArray {  }","parent":null,"children":[{"krate":0,"index":831},{"krate":0,"index":832}],"decl_id":null,"docs":" A nested array type where each child (called *field*) is represented by a separate\n array.\n","sig":null,"attributes":[{"value":"/ A nested array type where each child (called *field*) is represented by a separate","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_struct.rs","byte_start":166278,"byte_end":166364,"line_start":32,"line_end":32,"column_start":1,"column_end":87}},{"value":"/ array.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_struct.rs","byte_start":166365,"byte_end":166375,"line_start":33,"line_end":33,"column_start":1,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":834},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_struct.rs","byte_start":166538,"byte_end":166544,"line_start":41,"line_end":41,"column_start":12,"column_end":18},"name":"column","qualname":"<StructArray>::column","value":"pub fn column(&Self, usize) -> &ArrayRef","parent":null,"children":[],"decl_id":null,"docs":" Returns the field at `pos`.\n","sig":null,"attributes":[{"value":"/ Returns the field at `pos`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_struct.rs","byte_start":166495,"byte_end":166526,"line_start":40,"line_end":40,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":835},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_struct.rs","byte_start":166686,"byte_end":166697,"line_start":46,"line_end":46,"column_start":12,"column_end":23},"name":"num_columns","qualname":"<StructArray>::num_columns","value":"pub fn num_columns(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the number of fields in this struct array\n","sig":null,"attributes":[{"value":"/ Return the number of fields in this struct array","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_struct.rs","byte_start":166622,"byte_end":166674,"line_start":45,"line_end":45,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":836},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_struct.rs","byte_start":166813,"byte_end":166820,"line_start":51,"line_end":51,"column_start":12,"column_end":19},"name":"columns","qualname":"<StructArray>::columns","value":"pub fn columns(&Self) -> Vec<&ArrayRef>","parent":null,"children":[],"decl_id":null,"docs":" Returns the fields of the struct array\n","sig":null,"attributes":[{"value":"/ Returns the fields of the struct array","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_struct.rs","byte_start":166759,"byte_end":166801,"line_start":50,"line_end":50,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":837},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_struct.rs","byte_start":166962,"byte_end":166973,"line_start":56,"line_end":56,"column_start":12,"column_end":23},"name":"columns_ref","qualname":"<StructArray>::columns_ref","value":"pub fn columns_ref(&Self) -> Vec<ArrayRef>","parent":null,"children":[],"decl_id":null,"docs":" Returns child array refs of the struct array\n","sig":null,"attributes":[{"value":"/ Returns child array refs of the struct array","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_struct.rs","byte_start":166902,"byte_end":166950,"line_start":55,"line_end":55,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":838},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_struct.rs","byte_start":167100,"byte_end":167112,"line_start":61,"line_end":61,"column_start":12,"column_end":24},"name":"column_names","qualname":"<StructArray>::column_names","value":"pub fn column_names(&Self) -> Vec<&str>","parent":null,"children":[],"decl_id":null,"docs":" Return field names in this struct array\n","sig":null,"attributes":[{"value":"/ Return field names in this struct array","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_struct.rs","byte_start":167045,"byte_end":167088,"line_start":60,"line_end":60,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":840},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_struct.rs","byte_start":167497,"byte_end":167511,"line_start":72,"line_end":72,"column_start":12,"column_end":26},"name":"column_by_name","qualname":"<StructArray>::column_by_name","value":"pub fn column_by_name(&Self, &str) -> Option<&ArrayRef>","parent":null,"children":[],"decl_id":null,"docs":" Return child array whose field name equals to column_name\n","sig":null,"attributes":[{"value":"/ Return child array whose field name equals to column_name","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_struct.rs","byte_start":167424,"byte_end":167485,"line_start":71,"line_end":71,"column_start":5,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":906},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_union.rs","byte_start":186902,"byte_end":186912,"line_start":89,"line_end":89,"column_start":12,"column_end":22},"name":"UnionArray","qualname":"::array::array_union::UnionArray","value":"UnionArray {  }","parent":null,"children":[{"krate":0,"index":907},{"krate":0,"index":908}],"decl_id":null,"docs":" An Array that can represent slots of varying types.\n","sig":null,"attributes":[{"value":"/ An Array that can represent slots of varying types.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_union.rs","byte_start":186835,"byte_end":186890,"line_start":88,"line_end":88,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":910},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_union.rs","byte_start":188403,"byte_end":188406,"line_start":119,"line_end":119,"column_start":12,"column_end":15},"name":"new","qualname":"<UnionArray>::new","value":"pub fn new(Buffer, Option<Buffer>, Vec<(Field, ArrayRef)>, Option<Buffer>)\n-> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `UnionArray`.","sig":null,"attributes":[{"value":"/ Creates a new `UnionArray`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_union.rs","byte_start":186997,"byte_end":187028,"line_start":95,"line_end":95,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_union.rs","byte_start":187033,"byte_end":187036,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ Accepts type ids, child arrays and optionally offsets (for dense unions) to create","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_union.rs","byte_start":187041,"byte_end":187127,"line_start":97,"line_end":97,"column_start":5,"column_end":91}},{"value":"/ a new `UnionArray`.  This method makes no attempt to validate the data provided by the","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_union.rs","byte_start":187132,"byte_end":187222,"line_start":98,"line_end":98,"column_start":5,"column_end":95}},{"value":"/ caller and assumes that each of the components are correct and consistent with each other.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_union.rs","byte_start":187227,"byte_end":187321,"line_start":99,"line_end":99,"column_start":5,"column_end":99}},{"value":"/ See `try_new` for an alternative that validates the data provided.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_union.rs","byte_start":187326,"byte_end":187396,"line_start":100,"line_end":100,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_union.rs","byte_start":187401,"byte_end":187404,"line_start":101,"line_end":101,"column_start":5,"column_end":8}},{"value":"/ # Data Consistency","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_union.rs","byte_start":187409,"byte_end":187431,"line_start":102,"line_end":102,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_union.rs","byte_start":187436,"byte_end":187439,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ The `type_ids` `Buffer` should contain `i8` values.  These values should be greater than","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_union.rs","byte_start":187444,"byte_end":187536,"line_start":104,"line_end":104,"column_start":5,"column_end":97}},{"value":"/ zero and must be less than the number of children provided in `child_arrays`.  These values","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_union.rs","byte_start":187541,"byte_end":187636,"line_start":105,"line_end":105,"column_start":5,"column_end":100}},{"value":"/ are used to index into the `child_arrays`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_union.rs","byte_start":187641,"byte_end":187687,"line_start":106,"line_end":106,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_union.rs","byte_start":187692,"byte_end":187695,"line_start":107,"line_end":107,"column_start":5,"column_end":8}},{"value":"/ The `value_offsets` `Buffer` is only provided in the case of a dense union, sparse unions","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_union.rs","byte_start":187700,"byte_end":187793,"line_start":108,"line_end":108,"column_start":5,"column_end":98}},{"value":"/ should use `None`.  If provided the `value_offsets` `Buffer` should contain `i32` values.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_union.rs","byte_start":187798,"byte_end":187891,"line_start":109,"line_end":109,"column_start":5,"column_end":98}},{"value":"/ These values should be greater than zero and must be less than the length of the overall","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_union.rs","byte_start":187896,"byte_end":187988,"line_start":110,"line_end":110,"column_start":5,"column_end":97}},{"value":"/ array.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_union.rs","byte_start":187993,"byte_end":188003,"line_start":111,"line_end":111,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_union.rs","byte_start":188008,"byte_end":188011,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ In both cases above we use signed integer types to maintain compatibility with other","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_union.rs","byte_start":188016,"byte_end":188104,"line_start":113,"line_end":113,"column_start":5,"column_end":93}},{"value":"/ Arrow implementations.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_union.rs","byte_start":188109,"byte_end":188135,"line_start":114,"line_end":114,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_union.rs","byte_start":188140,"byte_end":188143,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ In both of the cases above we are accepting `Buffer`'s which are assumed to be representing","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_union.rs","byte_start":188148,"byte_end":188243,"line_start":116,"line_end":116,"column_start":5,"column_end":100}},{"value":"/ `i8` and `i32` values respectively.  `Buffer` objects are untyped and no attempt is made","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_union.rs","byte_start":188248,"byte_end":188340,"line_start":117,"line_end":117,"column_start":5,"column_end":97}},{"value":"/ to ensure that the data provided is valid.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_union.rs","byte_start":188345,"byte_end":188391,"line_start":118,"line_end":118,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":912},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_union.rs","byte_start":189296,"byte_end":189303,"line_start":142,"line_end":142,"column_start":12,"column_end":19},"name":"try_new","qualname":"<UnionArray>::try_new","value":"pub fn try_new(Buffer, Option<Buffer>, Vec<(Field, ArrayRef)>, Option<Buffer>)\n-> Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to create a new `UnionArray` and validates the inputs provided.\n","sig":null,"attributes":[{"value":"/ Attempts to create a new `UnionArray` and validates the inputs provided.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_union.rs","byte_start":189208,"byte_end":189284,"line_start":141,"line_end":141,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":915},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_union.rs","byte_start":191408,"byte_end":191413,"line_start":198,"line_end":198,"column_start":12,"column_end":17},"name":"child","qualname":"<UnionArray>::child","value":"pub fn child(&Self, i8) -> ArrayRef","parent":null,"children":[],"decl_id":null,"docs":" Accesses the child array for `type_id`.","sig":null,"attributes":[{"value":"/ Accesses the child array for `type_id`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_union.rs","byte_start":191201,"byte_end":191244,"line_start":192,"line_end":192,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_union.rs","byte_start":191249,"byte_end":191252,"line_start":193,"line_end":193,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_union.rs","byte_start":191257,"byte_end":191269,"line_start":194,"line_end":194,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_union.rs","byte_start":191274,"byte_end":191277,"line_start":195,"line_end":195,"column_start":5,"column_end":8}},{"value":"/ Panics if the `type_id` provided is less than zero or greater than the number of types","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_union.rs","byte_start":191282,"byte_end":191372,"line_start":196,"line_end":196,"column_start":5,"column_end":95}},{"value":"/ in the `Union`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_union.rs","byte_start":191377,"byte_end":191396,"line_start":197,"line_end":197,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":916},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_union.rs","byte_start":191773,"byte_end":191780,"line_start":209,"line_end":209,"column_start":12,"column_end":19},"name":"type_id","qualname":"<UnionArray>::type_id","value":"pub fn type_id(&Self, usize) -> i8","parent":null,"children":[],"decl_id":null,"docs":" Returns the `type_id` for the array slot at `index`.","sig":null,"attributes":[{"value":"/ Returns the `type_id` for the array slot at `index`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_union.rs","byte_start":191605,"byte_end":191661,"line_start":204,"line_end":204,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_union.rs","byte_start":191666,"byte_end":191669,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_union.rs","byte_start":191674,"byte_end":191686,"line_start":206,"line_end":206,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_union.rs","byte_start":191691,"byte_end":191694,"line_start":207,"line_end":207,"column_start":5,"column_end":8}},{"value":"/ Panics if `index` is greater than the length of the array.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_union.rs","byte_start":191699,"byte_end":191761,"line_start":208,"line_end":208,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":917},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_union.rs","byte_start":192129,"byte_end":192141,"line_start":219,"line_end":219,"column_start":12,"column_end":24},"name":"value_offset","qualname":"<UnionArray>::value_offset","value":"pub fn value_offset(&Self, usize) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Returns the offset into the underlying values array for the array slot at `index`.","sig":null,"attributes":[{"value":"/ Returns the offset into the underlying values array for the array slot at `index`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_union.rs","byte_start":191931,"byte_end":192017,"line_start":214,"line_end":214,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_union.rs","byte_start":192022,"byte_end":192025,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_union.rs","byte_start":192030,"byte_end":192042,"line_start":216,"line_end":216,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_union.rs","byte_start":192047,"byte_end":192050,"line_start":217,"line_end":217,"column_start":5,"column_end":8}},{"value":"/ Panics if `index` is greater than the length of the array.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_union.rs","byte_start":192055,"byte_end":192117,"line_start":218,"line_end":218,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":918},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_union.rs","byte_start":192971,"byte_end":192976,"line_start":239,"line_end":239,"column_start":12,"column_end":17},"name":"value","qualname":"<UnionArray>::value","value":"pub fn value(&Self, usize) -> ArrayRef","parent":null,"children":[],"decl_id":null,"docs":" Returns the array's value at `index`.","sig":null,"attributes":[{"value":"/ Returns the array's value at `index`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_union.rs","byte_start":192818,"byte_end":192859,"line_start":234,"line_end":234,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_union.rs","byte_start":192864,"byte_end":192867,"line_start":235,"line_end":235,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_union.rs","byte_start":192872,"byte_end":192884,"line_start":236,"line_end":236,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_union.rs","byte_start":192889,"byte_end":192892,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ Panics if `index` is greater than the length of the array.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_union.rs","byte_start":192897,"byte_end":192959,"line_start":238,"line_end":238,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":919},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_union.rs","byte_start":193332,"byte_end":193342,"line_start":247,"line_end":247,"column_start":12,"column_end":22},"name":"type_names","qualname":"<UnionArray>::type_names","value":"pub fn type_names(&Self) -> Vec<&str>","parent":null,"children":[],"decl_id":null,"docs":" Returns the names of the types in the union.\n","sig":null,"attributes":[{"value":"/ Returns the names of the types in the union.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_union.rs","byte_start":193272,"byte_end":193320,"line_start":246,"line_end":246,"column_start":5,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":7476},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":217633,"byte_end":217646,"line_start":83,"line_end":83,"column_start":12,"column_end":25},"name":"BufferBuilder","qualname":"::array::builder::BufferBuilder","value":"BufferBuilder {  }","parent":null,"children":[{"krate":0,"index":7478},{"krate":0,"index":7479},{"krate":0,"index":7480}],"decl_id":null,"docs":" Builder for creating a [`Buffer`](crate::buffer::Buffer) object.","sig":null,"attributes":[{"value":"/ Builder for creating a [`Buffer`](crate::buffer::Buffer) object.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":216892,"byte_end":216960,"line_start":59,"line_end":59,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":216961,"byte_end":216964,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ A [`Buffer`](crate::buffer::Buffer) is the underlying data","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":216965,"byte_end":217027,"line_start":61,"line_end":61,"column_start":1,"column_end":63}},{"value":"/ structure of Arrow's [`Arrays`](crate::array::Array).","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":217028,"byte_end":217085,"line_start":62,"line_end":62,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":217086,"byte_end":217089,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ For all supported types, there are type definitions for the","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":217090,"byte_end":217153,"line_start":64,"line_end":64,"column_start":1,"column_end":64}},{"value":"/ generic version of `BufferBuilder<T>`, e.g. `UInt8BufferBuilder`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":217154,"byte_end":217223,"line_start":65,"line_end":65,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":217224,"byte_end":217227,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ # Example:","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":217228,"byte_end":217242,"line_start":67,"line_end":67,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":217243,"byte_end":217246,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":217247,"byte_end":217254,"line_start":69,"line_end":69,"column_start":1,"column_end":8}},{"value":"/ use arrow::array::UInt8BufferBuilder;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":217255,"byte_end":217296,"line_start":70,"line_end":70,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":217297,"byte_end":217300,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ # fn main() -> arrow::error::Result<()> {","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":217301,"byte_end":217346,"line_start":72,"line_end":72,"column_start":1,"column_end":46}},{"value":"/ let mut builder = UInt8BufferBuilder::new(100);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":217347,"byte_end":217398,"line_start":73,"line_end":73,"column_start":1,"column_end":52}},{"value":"/ builder.append_slice(&[42, 43, 44]);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":217399,"byte_end":217439,"line_start":74,"line_end":74,"column_start":1,"column_end":41}},{"value":"/ builder.append(45);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":217440,"byte_end":217463,"line_start":75,"line_end":75,"column_start":1,"column_end":24}},{"value":"/ let buffer = builder.finish();","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":217464,"byte_end":217498,"line_start":76,"line_end":76,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":217499,"byte_end":217502,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(unsafe { buffer.typed_data::<u8>() }, &[42, 43, 44, 45]);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":217503,"byte_end":217575,"line_start":78,"line_end":78,"column_start":1,"column_end":73}},{"value":"/ # Ok(())","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":217576,"byte_end":217588,"line_start":79,"line_end":79,"column_start":1,"column_end":13}},{"value":"/ # }","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":217589,"byte_end":217596,"line_start":80,"line_end":80,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":217597,"byte_end":217604,"line_start":81,"line_end":81,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":976},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":218494,"byte_end":218497,"line_start":111,"line_end":111,"column_start":12,"column_end":15},"name":"new","qualname":"<BufferBuilder<T>>::new","value":"pub fn new(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new builder with initial capacity for _at least_ `capacity`\n elements of type `T`.","sig":null,"attributes":[{"value":"/ Creates a new builder with initial capacity for _at least_ `capacity`","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":217792,"byte_end":217865,"line_start":90,"line_end":90,"column_start":5,"column_end":78}},{"value":"/ elements of type `T`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":217870,"byte_end":217895,"line_start":91,"line_end":91,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":217900,"byte_end":217903,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ The capacity can later be manually adjusted with the","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":217908,"byte_end":217964,"line_start":93,"line_end":93,"column_start":5,"column_end":61}},{"value":"/ [`reserve()`](BufferBuilder::reserve) method.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":217969,"byte_end":218018,"line_start":94,"line_end":94,"column_start":5,"column_end":54}},{"value":"/ Also the","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":218023,"byte_end":218035,"line_start":95,"line_end":95,"column_start":5,"column_end":17}},{"value":"/ [`append()`](BufferBuilder::append),","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":218040,"byte_end":218080,"line_start":96,"line_end":96,"column_start":5,"column_end":45}},{"value":"/ [`append_slice()`](BufferBuilder::append_slice) and","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":218085,"byte_end":218140,"line_start":97,"line_end":97,"column_start":5,"column_end":60}},{"value":"/ [`advance()`](BufferBuilder::advance)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":218145,"byte_end":218186,"line_start":98,"line_end":98,"column_start":5,"column_end":46}},{"value":"/ methods automatically increase the capacity if needed.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":218191,"byte_end":218249,"line_start":99,"line_end":99,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":218254,"byte_end":218257,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ # Example:","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":218262,"byte_end":218276,"line_start":101,"line_end":101,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":218281,"byte_end":218284,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":218289,"byte_end":218296,"line_start":103,"line_end":103,"column_start":5,"column_end":12}},{"value":"/ use arrow::array::UInt8BufferBuilder;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":218301,"byte_end":218342,"line_start":104,"line_end":104,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":218347,"byte_end":218350,"line_start":105,"line_end":105,"column_start":5,"column_end":8}},{"value":"/ let mut builder = UInt8BufferBuilder::new(10);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":218355,"byte_end":218405,"line_start":106,"line_end":106,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":218410,"byte_end":218413,"line_start":107,"line_end":107,"column_start":5,"column_end":8}},{"value":"/ assert!(builder.capacity() >= 10);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":218418,"byte_end":218456,"line_start":108,"line_end":108,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":218461,"byte_end":218468,"line_start":109,"line_end":109,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":218473,"byte_end":218482,"line_start":110,"line_end":110,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":977},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":219035,"byte_end":219038,"line_start":133,"line_end":133,"column_start":12,"column_end":15},"name":"len","qualname":"<BufferBuilder<T>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the current number of array elements in the internal buffer.","sig":null,"attributes":[{"value":"/ Returns the current number of array elements in the internal buffer.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":218709,"byte_end":218781,"line_start":121,"line_end":121,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":218786,"byte_end":218789,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ # Example:","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":218794,"byte_end":218808,"line_start":123,"line_end":123,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":218813,"byte_end":218816,"line_start":124,"line_end":124,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":218821,"byte_end":218828,"line_start":125,"line_end":125,"column_start":5,"column_end":12}},{"value":"/ use arrow::array::UInt8BufferBuilder;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":218833,"byte_end":218874,"line_start":126,"line_end":126,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":218879,"byte_end":218882,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ let mut builder = UInt8BufferBuilder::new(10);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":218887,"byte_end":218937,"line_start":128,"line_end":128,"column_start":5,"column_end":55}},{"value":"/ builder.append(42);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":218942,"byte_end":218965,"line_start":129,"line_end":129,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":218970,"byte_end":218973,"line_start":130,"line_end":130,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(builder.len(), 1);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":218978,"byte_end":219011,"line_start":131,"line_end":131,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":219016,"byte_end":219023,"line_start":132,"line_end":132,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":978},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":219397,"byte_end":219405,"line_start":149,"line_end":149,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<BufferBuilder<T>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the internal buffer is empty.","sig":null,"attributes":[{"value":"/ Returns whether the internal buffer is empty.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":219085,"byte_end":219134,"line_start":137,"line_end":137,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":219139,"byte_end":219142,"line_start":138,"line_end":138,"column_start":5,"column_end":8}},{"value":"/ # Example:","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":219147,"byte_end":219161,"line_start":139,"line_end":139,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":219166,"byte_end":219169,"line_start":140,"line_end":140,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":219174,"byte_end":219181,"line_start":141,"line_end":141,"column_start":5,"column_end":12}},{"value":"/ use arrow::array::UInt8BufferBuilder;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":219186,"byte_end":219227,"line_start":142,"line_end":142,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":219232,"byte_end":219235,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ let mut builder = UInt8BufferBuilder::new(10);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":219240,"byte_end":219290,"line_start":144,"line_end":144,"column_start":5,"column_end":55}},{"value":"/ builder.append(42);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":219295,"byte_end":219318,"line_start":145,"line_end":145,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":219323,"byte_end":219326,"line_start":146,"line_end":146,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(builder.is_empty(), false);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":219331,"byte_end":219373,"line_start":147,"line_end":147,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":219378,"byte_end":219385,"line_start":148,"line_end":148,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":979},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":219735,"byte_end":219743,"line_start":158,"line_end":158,"column_start":12,"column_end":20},"name":"capacity","qualname":"<BufferBuilder<T>>::capacity","value":"pub fn capacity(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the actual capacity (number of elements) of the internal buffer.","sig":null,"attributes":[{"value":"/ Returns the actual capacity (number of elements) of the internal buffer.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":219456,"byte_end":219532,"line_start":153,"line_end":153,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":219537,"byte_end":219540,"line_start":154,"line_end":154,"column_start":5,"column_end":8}},{"value":"/ Note: the internal capacity returned by this method might be larger than","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":219545,"byte_end":219621,"line_start":155,"line_end":155,"column_start":5,"column_end":81}},{"value":"/ what you'd expect after setting the capacity in the `new()` or `reserve()`","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":219626,"byte_end":219704,"line_start":156,"line_end":156,"column_start":5,"column_end":83}},{"value":"/ functions.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":219709,"byte_end":219723,"line_start":157,"line_end":157,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":980},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":220444,"byte_end":220451,"line_start":181,"line_end":181,"column_start":12,"column_end":19},"name":"advance","qualname":"<BufferBuilder<T>>::advance","value":"pub fn advance(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Increases the number of elements in the internal buffer by `n`\n and resizes the buffer as needed.","sig":null,"attributes":[{"value":"/ Increases the number of elements in the internal buffer by `n`","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":219874,"byte_end":219940,"line_start":163,"line_end":163,"column_start":5,"column_end":71}},{"value":"/ and resizes the buffer as needed.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":219945,"byte_end":219982,"line_start":164,"line_end":164,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":219987,"byte_end":219990,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/ The values of the newly added elements are 0.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":219995,"byte_end":220044,"line_start":166,"line_end":166,"column_start":5,"column_end":54}},{"value":"/ This method is usually used when appending `NULL` values to the buffer","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":220049,"byte_end":220123,"line_start":167,"line_end":167,"column_start":5,"column_end":79}},{"value":"/ as they still require physical memory space.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":220128,"byte_end":220176,"line_start":168,"line_end":168,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":220181,"byte_end":220184,"line_start":169,"line_end":169,"column_start":5,"column_end":8}},{"value":"/ # Example:","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":220189,"byte_end":220203,"line_start":170,"line_end":170,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":220208,"byte_end":220211,"line_start":171,"line_end":171,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":220216,"byte_end":220223,"line_start":172,"line_end":172,"column_start":5,"column_end":12}},{"value":"/ use arrow::array::UInt8BufferBuilder;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":220228,"byte_end":220269,"line_start":173,"line_end":173,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":220274,"byte_end":220277,"line_start":174,"line_end":174,"column_start":5,"column_end":8}},{"value":"/ let mut builder = UInt8BufferBuilder::new(10);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":220282,"byte_end":220332,"line_start":175,"line_end":175,"column_start":5,"column_end":55}},{"value":"/ builder.advance(2);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":220337,"byte_end":220360,"line_start":176,"line_end":176,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":220365,"byte_end":220368,"line_start":177,"line_end":177,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(builder.len(), 2);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":220373,"byte_end":220406,"line_start":178,"line_end":178,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":220411,"byte_end":220418,"line_start":179,"line_end":179,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":220423,"byte_end":220432,"line_start":180,"line_end":180,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":981},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":220959,"byte_end":220966,"line_start":200,"line_end":200,"column_start":12,"column_end":19},"name":"reserve","qualname":"<BufferBuilder<T>>::reserve","value":"pub fn reserve(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Reserves memory for _at least_ `n` more elements of type `T`.","sig":null,"attributes":[{"value":"/ Reserves memory for _at least_ `n` more elements of type `T`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":220620,"byte_end":220685,"line_start":187,"line_end":187,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":220690,"byte_end":220693,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ # Example:","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":220698,"byte_end":220712,"line_start":189,"line_end":189,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":220717,"byte_end":220720,"line_start":190,"line_end":190,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":220725,"byte_end":220732,"line_start":191,"line_end":191,"column_start":5,"column_end":12}},{"value":"/ use arrow::array::UInt8BufferBuilder;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":220737,"byte_end":220778,"line_start":192,"line_end":192,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":220783,"byte_end":220786,"line_start":193,"line_end":193,"column_start":5,"column_end":8}},{"value":"/ let mut builder = UInt8BufferBuilder::new(10);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":220791,"byte_end":220841,"line_start":194,"line_end":194,"column_start":5,"column_end":55}},{"value":"/ builder.reserve(10);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":220846,"byte_end":220870,"line_start":195,"line_end":195,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":220875,"byte_end":220878,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ assert!(builder.capacity() >= 20);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":220883,"byte_end":220921,"line_start":197,"line_end":197,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":220926,"byte_end":220933,"line_start":198,"line_end":198,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":220938,"byte_end":220947,"line_start":199,"line_end":199,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":982},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":221514,"byte_end":221520,"line_start":220,"line_end":220,"column_start":12,"column_end":18},"name":"append","qualname":"<BufferBuilder<T>>::append","value":"pub fn append(&mut Self, T)","parent":null,"children":[],"decl_id":null,"docs":" Appends a value of type `T` into the builder,\n growing the internal buffer as needed.","sig":null,"attributes":[{"value":"/ Appends a value of type `T` into the builder,","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":221150,"byte_end":221199,"line_start":206,"line_end":206,"column_start":5,"column_end":54}},{"value":"/ growing the internal buffer as needed.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":221204,"byte_end":221246,"line_start":207,"line_end":207,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":221251,"byte_end":221254,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ # Example:","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":221259,"byte_end":221273,"line_start":209,"line_end":209,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":221278,"byte_end":221281,"line_start":210,"line_end":210,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":221286,"byte_end":221293,"line_start":211,"line_end":211,"column_start":5,"column_end":12}},{"value":"/ use arrow::array::UInt8BufferBuilder;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":221298,"byte_end":221339,"line_start":212,"line_end":212,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":221344,"byte_end":221347,"line_start":213,"line_end":213,"column_start":5,"column_end":8}},{"value":"/ let mut builder = UInt8BufferBuilder::new(10);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":221352,"byte_end":221402,"line_start":214,"line_end":214,"column_start":5,"column_end":55}},{"value":"/ builder.append(42);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":221407,"byte_end":221430,"line_start":215,"line_end":215,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":221435,"byte_end":221438,"line_start":216,"line_end":216,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(builder.len(), 1);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":221443,"byte_end":221476,"line_start":217,"line_end":217,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":221481,"byte_end":221488,"line_start":218,"line_end":218,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":221493,"byte_end":221502,"line_start":219,"line_end":219,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":984},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":222151,"byte_end":222159,"line_start":244,"line_end":244,"column_start":12,"column_end":20},"name":"append_n","qualname":"<BufferBuilder<T>>::append_n","value":"pub fn append_n(&mut Self, usize, T)","parent":null,"children":[],"decl_id":null,"docs":" Appends a value of type `T` into the builder N times,\n growing the internal buffer as needed.","sig":null,"attributes":[{"value":"/ Appends a value of type `T` into the builder N times,","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":221772,"byte_end":221829,"line_start":230,"line_end":230,"column_start":5,"column_end":62}},{"value":"/ growing the internal buffer as needed.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":221834,"byte_end":221876,"line_start":231,"line_end":231,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":221881,"byte_end":221884,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ # Example:","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":221889,"byte_end":221903,"line_start":233,"line_end":233,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":221908,"byte_end":221911,"line_start":234,"line_end":234,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":221916,"byte_end":221923,"line_start":235,"line_end":235,"column_start":5,"column_end":12}},{"value":"/ use arrow::array::UInt8BufferBuilder;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":221928,"byte_end":221969,"line_start":236,"line_end":236,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":221974,"byte_end":221977,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ let mut builder = UInt8BufferBuilder::new(10);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":221982,"byte_end":222032,"line_start":238,"line_end":238,"column_start":5,"column_end":55}},{"value":"/ builder.append_n(10, 42);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":222037,"byte_end":222066,"line_start":239,"line_end":239,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":222071,"byte_end":222074,"line_start":240,"line_end":240,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(builder.len(), 10);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":222079,"byte_end":222113,"line_start":241,"line_end":241,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":222118,"byte_end":222125,"line_start":242,"line_end":242,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":222130,"byte_end":222139,"line_start":243,"line_end":243,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":985},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":222667,"byte_end":222679,"line_start":264,"line_end":264,"column_start":12,"column_end":24},"name":"append_slice","qualname":"<BufferBuilder<T>>::append_slice","value":"pub fn append_slice(&mut Self, &[T])","parent":null,"children":[],"decl_id":null,"docs":" Appends a slice of type `T`, growing the internal buffer as needed.","sig":null,"attributes":[{"value":"/ Appends a slice of type `T`, growing the internal buffer as needed.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":222311,"byte_end":222382,"line_start":251,"line_end":251,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":222387,"byte_end":222390,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ # Example:","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":222395,"byte_end":222409,"line_start":253,"line_end":253,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":222414,"byte_end":222417,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":222422,"byte_end":222429,"line_start":255,"line_end":255,"column_start":5,"column_end":12}},{"value":"/ use arrow::array::UInt8BufferBuilder;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":222434,"byte_end":222475,"line_start":256,"line_end":256,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":222480,"byte_end":222483,"line_start":257,"line_end":257,"column_start":5,"column_end":8}},{"value":"/ let mut builder = UInt8BufferBuilder::new(10);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":222488,"byte_end":222538,"line_start":258,"line_end":258,"column_start":5,"column_end":55}},{"value":"/ builder.append_slice(&[42, 44, 46]);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":222543,"byte_end":222583,"line_start":259,"line_end":259,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":222588,"byte_end":222591,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(builder.len(), 3);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":222596,"byte_end":222629,"line_start":261,"line_end":261,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":222634,"byte_end":222641,"line_start":262,"line_end":262,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":222646,"byte_end":222655,"line_start":263,"line_end":263,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":986},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":223304,"byte_end":223310,"line_start":286,"line_end":286,"column_start":12,"column_end":18},"name":"finish","qualname":"<BufferBuilder<T>>::finish","value":"pub fn finish(&mut Self) -> Buffer","parent":null,"children":[],"decl_id":null,"docs":" Resets this builder and returns an immutable [`Buffer`](crate::buffer::Buffer).","sig":null,"attributes":[{"value":"/ Resets this builder and returns an immutable [`Buffer`](crate::buffer::Buffer).","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":222854,"byte_end":222937,"line_start":271,"line_end":271,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":222942,"byte_end":222945,"line_start":272,"line_end":272,"column_start":5,"column_end":8}},{"value":"/ # Example:","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":222950,"byte_end":222964,"line_start":273,"line_end":273,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":222969,"byte_end":222972,"line_start":274,"line_end":274,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":222977,"byte_end":222984,"line_start":275,"line_end":275,"column_start":5,"column_end":12}},{"value":"/ use arrow::array::UInt8BufferBuilder;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":222989,"byte_end":223030,"line_start":276,"line_end":276,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":223035,"byte_end":223038,"line_start":277,"line_end":277,"column_start":5,"column_end":8}},{"value":"/ let mut builder = UInt8BufferBuilder::new(10);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":223043,"byte_end":223093,"line_start":278,"line_end":278,"column_start":5,"column_end":55}},{"value":"/ builder.append_slice(&[42, 44, 46]);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":223098,"byte_end":223138,"line_start":279,"line_end":279,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":223143,"byte_end":223146,"line_start":280,"line_end":280,"column_start":5,"column_end":8}},{"value":"/ let buffer = builder.finish();","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":223151,"byte_end":223185,"line_start":281,"line_end":281,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":223190,"byte_end":223193,"line_start":282,"line_end":282,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(unsafe { buffer.typed_data::<u8>() }, &[42, 44, 46]);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":223198,"byte_end":223266,"line_start":283,"line_end":283,"column_start":5,"column_end":73}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":223271,"byte_end":223278,"line_start":284,"line_end":284,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":223283,"byte_end":223292,"line_start":285,"line_end":285,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":7484},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":223490,"byte_end":223510,"line_start":294,"line_end":294,"column_start":12,"column_end":32},"name":"BooleanBufferBuilder","qualname":"::array::builder::BooleanBufferBuilder","value":"BooleanBufferBuilder {  }","parent":null,"children":[{"krate":0,"index":7485},{"krate":0,"index":7486}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":988},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":223612,"byte_end":223615,"line_start":301,"line_end":301,"column_start":12,"column_end":15},"name":"new","qualname":"<BooleanBufferBuilder>::new","value":"pub fn new(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":223591,"byte_end":223600,"line_start":300,"line_end":300,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":989},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":223945,"byte_end":223948,"line_start":310,"line_end":310,"column_start":12,"column_end":15},"name":"len","qualname":"<BooleanBufferBuilder>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":990},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":224002,"byte_end":224010,"line_start":314,"line_end":314,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<BooleanBufferBuilder>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":991},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":224068,"byte_end":224076,"line_start":318,"line_end":318,"column_start":12,"column_end":20},"name":"capacity","qualname":"<BooleanBufferBuilder>::capacity","value":"pub fn capacity(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":992},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":224162,"byte_end":224169,"line_start":323,"line_end":323,"column_start":12,"column_end":19},"name":"advance","qualname":"<BooleanBufferBuilder>::advance","value":"pub fn advance(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":224141,"byte_end":224150,"line_start":322,"line_end":322,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":993},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":224354,"byte_end":224361,"line_start":330,"line_end":330,"column_start":12,"column_end":19},"name":"reserve","qualname":"<BooleanBufferBuilder>::reserve","value":"pub fn reserve(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":224333,"byte_end":224342,"line_start":329,"line_end":329,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":994},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":224821,"byte_end":224827,"line_start":342,"line_end":342,"column_start":12,"column_end":18},"name":"append","qualname":"<BooleanBufferBuilder>::append","value":"pub fn append(&mut Self, bool)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":224800,"byte_end":224809,"line_start":341,"line_end":341,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":995},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":225205,"byte_end":225213,"line_start":357,"line_end":357,"column_start":12,"column_end":20},"name":"append_n","qualname":"<BooleanBufferBuilder>::append_n","value":"pub fn append_n(&mut Self, usize, bool)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":225184,"byte_end":225193,"line_start":356,"line_end":356,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":997},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":225642,"byte_end":225654,"line_start":372,"line_end":372,"column_start":12,"column_end":24},"name":"append_slice","qualname":"<BooleanBufferBuilder>::append_slice","value":"pub fn append_slice(&mut Self, &[bool])","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":225621,"byte_end":225630,"line_start":371,"line_end":371,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":998},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":226181,"byte_end":226187,"line_start":390,"line_end":390,"column_start":12,"column_end":18},"name":"finish","qualname":"<BooleanBufferBuilder>::finish","value":"pub fn finish(&mut Self) -> Buffer","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":226160,"byte_end":226169,"line_start":389,"line_end":389,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":999},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":226659,"byte_end":226671,"line_start":402,"line_end":402,"column_start":11,"column_end":23},"name":"ArrayBuilder","qualname":"::array::builder::ArrayBuilder","value":"ArrayBuilder: Any","parent":null,"children":[{"krate":0,"index":1000},{"krate":0,"index":1001},{"krate":0,"index":1002},{"krate":0,"index":1003},{"krate":0,"index":1004},{"krate":0,"index":1005}],"decl_id":null,"docs":" Trait for dealing with different array builders at runtime\n","sig":null,"attributes":[{"value":"/ Trait for dealing with different array builders at runtime","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":226586,"byte_end":226648,"line_start":401,"line_end":401,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":1000},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":226743,"byte_end":226746,"line_start":404,"line_end":404,"column_start":8,"column_end":11},"name":"len","qualname":"::array::builder::ArrayBuilder::len","value":"pub fn len(&Self) -> usize","parent":{"krate":0,"index":999},"children":[],"decl_id":null,"docs":" Returns the number of array slots in the builder\n","sig":null,"attributes":[{"value":"/ Returns the number of array slots in the builder","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":226683,"byte_end":226735,"line_start":403,"line_end":403,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1001},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":226826,"byte_end":226834,"line_start":407,"line_end":407,"column_start":8,"column_end":16},"name":"is_empty","qualname":"::array::builder::ArrayBuilder::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":{"krate":0,"index":999},"children":[],"decl_id":null,"docs":" Returns whether number of array slots is zero\n","sig":null,"attributes":[{"value":"/ Returns whether number of array slots is zero","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":226769,"byte_end":226818,"line_start":406,"line_end":406,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1002},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":226884,"byte_end":226890,"line_start":410,"line_end":410,"column_start":8,"column_end":14},"name":"finish","qualname":"::array::builder::ArrayBuilder::finish","value":"pub fn finish(&mut Self) -> ArrayRef","parent":{"krate":0,"index":999},"children":[],"decl_id":null,"docs":" Builds the array\n","sig":null,"attributes":[{"value":"/ Builds the array","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":226856,"byte_end":226876,"line_start":409,"line_end":409,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":1003},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":227229,"byte_end":227235,"line_start":417,"line_end":417,"column_start":8,"column_end":14},"name":"as_any","qualname":"::array::builder::ArrayBuilder::as_any","value":"pub fn as_any(&Self) -> &Any","parent":{"krate":0,"index":999},"children":[],"decl_id":null,"docs":" Returns the builder as a non-mutable `Any` reference.","sig":null,"attributes":[{"value":"/ Returns the builder as a non-mutable `Any` reference.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":226920,"byte_end":226977,"line_start":412,"line_end":412,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":226982,"byte_end":226985,"line_start":413,"line_end":413,"column_start":5,"column_end":8}},{"value":"/ This is most useful when one wants to call non-mutable APIs on a specific builder","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":226990,"byte_end":227075,"line_start":414,"line_end":414,"column_start":5,"column_end":90}},{"value":"/ type. In this case, one can first cast this into a `Any`, and then use","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":227080,"byte_end":227154,"line_start":415,"line_end":415,"column_start":5,"column_end":79}},{"value":"/ `downcast_ref` to get a reference on the specific builder.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":227159,"byte_end":227221,"line_start":416,"line_end":416,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1004},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":227558,"byte_end":227568,"line_start":424,"line_end":424,"column_start":8,"column_end":18},"name":"as_any_mut","qualname":"::array::builder::ArrayBuilder::as_any_mut","value":"pub fn as_any_mut(&mut Self) -> &mut Any","parent":{"krate":0,"index":999},"children":[],"decl_id":null,"docs":" Returns the builder as a mutable `Any` reference.","sig":null,"attributes":[{"value":"/ Returns the builder as a mutable `Any` reference.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":227257,"byte_end":227310,"line_start":419,"line_end":419,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":227315,"byte_end":227318,"line_start":420,"line_end":420,"column_start":5,"column_end":8}},{"value":"/ This is most useful when one wants to call mutable APIs on a specific builder","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":227323,"byte_end":227404,"line_start":421,"line_end":421,"column_start":5,"column_end":86}},{"value":"/ type. In this case, one can first cast this into a `Any`, and then use","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":227409,"byte_end":227483,"line_start":422,"line_end":422,"column_start":5,"column_end":79}},{"value":"/ `downcast_mut` to get a reference on the specific builder.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":227488,"byte_end":227550,"line_start":423,"line_end":423,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1005},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":227654,"byte_end":227666,"line_start":427,"line_end":427,"column_start":8,"column_end":20},"name":"into_box_any","qualname":"::array::builder::ArrayBuilder::into_box_any","value":"pub fn into_box_any(Box<Self>) -> Box<Any>","parent":{"krate":0,"index":999},"children":[],"decl_id":null,"docs":" Returns the boxed builder as a box of `Any`.\n","sig":null,"attributes":[{"value":"/ Returns the boxed builder as a box of `Any`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":227598,"byte_end":227646,"line_start":426,"line_end":426,"column_start":5,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":7489},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":227779,"byte_end":227793,"line_start":432,"line_end":432,"column_start":12,"column_end":26},"name":"BooleanBuilder","qualname":"::array::builder::BooleanBuilder","value":"BooleanBuilder {  }","parent":null,"children":[{"krate":0,"index":7490},{"krate":0,"index":7491}],"decl_id":null,"docs":"  Array builder for fixed-width primitive types\n","sig":null,"attributes":[{"value":"/  Array builder for fixed-width primitive types","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":227700,"byte_end":227750,"line_start":430,"line_end":430,"column_start":1,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1007},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":227962,"byte_end":227965,"line_start":439,"line_end":439,"column_start":12,"column_end":15},"name":"new","qualname":"<BooleanBuilder>::new","value":"pub fn new(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new primitive array builder\n","sig":null,"attributes":[{"value":"/ Creates a new primitive array builder","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":227909,"byte_end":227950,"line_start":438,"line_end":438,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1008},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":228241,"byte_end":228249,"line_start":447,"line_end":447,"column_start":12,"column_end":20},"name":"capacity","qualname":"<BooleanBuilder>::capacity","value":"pub fn capacity(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the capacity of this builder measured in slots of type `T`\n","sig":null,"attributes":[{"value":"/ Returns the capacity of this builder measured in slots of type `T`","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":228159,"byte_end":228229,"line_start":446,"line_end":446,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":1009},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":228378,"byte_end":228390,"line_start":452,"line_end":452,"column_start":12,"column_end":24},"name":"append_value","qualname":"<BooleanBuilder>::append_value","value":"pub fn append_value(&mut Self, bool) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Appends a value of type `T` into the builder\n","sig":null,"attributes":[{"value":"/ Appends a value of type `T` into the builder","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":228318,"byte_end":228366,"line_start":451,"line_end":451,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":1010},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":228586,"byte_end":228597,"line_start":459,"line_end":459,"column_start":12,"column_end":23},"name":"append_null","qualname":"<BooleanBuilder>::append_null","value":"pub fn append_null(&mut Self) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Appends a null slot into the builder\n","sig":null,"attributes":[{"value":"/ Appends a null slot into the builder","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":228534,"byte_end":228574,"line_start":458,"line_end":458,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1011},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":228789,"byte_end":228802,"line_start":466,"line_end":466,"column_start":12,"column_end":25},"name":"append_option","qualname":"<BooleanBuilder>::append_option","value":"pub fn append_option(&mut Self, Option<bool>) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Appends an `Option<T>` into the builder\n","sig":null,"attributes":[{"value":"/ Appends an `Option<T>` into the builder","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":228734,"byte_end":228777,"line_start":465,"line_end":465,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1012},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":229049,"byte_end":229061,"line_start":475,"line_end":475,"column_start":12,"column_end":24},"name":"append_slice","qualname":"<BooleanBuilder>::append_slice","value":"pub fn append_slice(&mut Self, &[bool]) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Appends a slice of type `T` into the builder\n","sig":null,"attributes":[{"value":"/ Appends a slice of type `T` into the builder","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":228989,"byte_end":229037,"line_start":474,"line_end":474,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":1013},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":229309,"byte_end":229322,"line_start":482,"line_end":482,"column_start":12,"column_end":25},"name":"append_values","qualname":"<BooleanBuilder>::append_values","value":"pub fn append_values(&mut Self, &[bool], &[bool]) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Appends values from a slice of type `T` and a validity boolean slice\n","sig":null,"attributes":[{"value":"/ Appends values from a slice of type `T` and a validity boolean slice","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":229225,"byte_end":229297,"line_start":481,"line_end":481,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":1014},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":229778,"byte_end":229784,"line_start":494,"line_end":494,"column_start":12,"column_end":18},"name":"finish","qualname":"<BooleanBuilder>::finish","value":"pub fn finish(&mut Self) -> BooleanArray","parent":null,"children":[],"decl_id":null,"docs":" Builds the [BooleanArray] and reset this builder.\n","sig":null,"attributes":[{"value":"/ Builds the [BooleanArray] and reset this builder.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":229713,"byte_end":229766,"line_start":493,"line_end":493,"column_start":5,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":7494},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":231157,"byte_end":231173,"line_start":543,"line_end":543,"column_start":12,"column_end":28},"name":"PrimitiveBuilder","qualname":"::array::builder::PrimitiveBuilder","value":"PrimitiveBuilder {  }","parent":null,"children":[{"krate":0,"index":7496},{"krate":0,"index":7497}],"decl_id":null,"docs":"  Array builder for fixed-width primitive types\n","sig":null,"attributes":[{"value":"/  Array builder for fixed-width primitive types","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":231078,"byte_end":231128,"line_start":541,"line_end":541,"column_start":1,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1032},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":232213,"byte_end":232216,"line_start":582,"line_end":582,"column_start":12,"column_end":15},"name":"new","qualname":"<PrimitiveBuilder<T>>::new","value":"pub fn new(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new primitive array builder\n","sig":null,"attributes":[{"value":"/ Creates a new primitive array builder","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":232160,"byte_end":232201,"line_start":581,"line_end":581,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1033},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":232498,"byte_end":232506,"line_start":590,"line_end":590,"column_start":12,"column_end":20},"name":"capacity","qualname":"<PrimitiveBuilder<T>>::capacity","value":"pub fn capacity(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the capacity of this builder measured in slots of type `T`\n","sig":null,"attributes":[{"value":"/ Returns the capacity of this builder measured in slots of type `T`","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":232416,"byte_end":232486,"line_start":589,"line_end":589,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":1034},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":232635,"byte_end":232647,"line_start":595,"line_end":595,"column_start":12,"column_end":24},"name":"append_value","qualname":"<PrimitiveBuilder<T>>::append_value","value":"pub fn append_value(&mut Self, T::Native) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Appends a value of type `T` into the builder\n","sig":null,"attributes":[{"value":"/ Appends a value of type `T` into the builder","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":232575,"byte_end":232623,"line_start":594,"line_end":594,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":1035},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":232848,"byte_end":232859,"line_start":602,"line_end":602,"column_start":12,"column_end":23},"name":"append_null","qualname":"<PrimitiveBuilder<T>>::append_null","value":"pub fn append_null(&mut Self) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Appends a null slot into the builder\n","sig":null,"attributes":[{"value":"/ Appends a null slot into the builder","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":232796,"byte_end":232836,"line_start":601,"line_end":601,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1036},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":233051,"byte_end":233064,"line_start":609,"line_end":609,"column_start":12,"column_end":25},"name":"append_option","qualname":"<PrimitiveBuilder<T>>::append_option","value":"pub fn append_option(&mut Self, Option<T::Native>) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Appends an `Option<T>` into the builder\n","sig":null,"attributes":[{"value":"/ Appends an `Option<T>` into the builder","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":232996,"byte_end":233039,"line_start":608,"line_end":608,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1037},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":233316,"byte_end":233328,"line_start":618,"line_end":618,"column_start":12,"column_end":24},"name":"append_slice","qualname":"<PrimitiveBuilder<T>>::append_slice","value":"pub fn append_slice(&mut Self, &[T::Native]) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Appends a slice of type `T` into the builder\n","sig":null,"attributes":[{"value":"/ Appends a slice of type `T` into the builder","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":233256,"byte_end":233304,"line_start":617,"line_end":617,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":1038},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":233581,"byte_end":233594,"line_start":625,"line_end":625,"column_start":12,"column_end":25},"name":"append_values","qualname":"<PrimitiveBuilder<T>>::append_values","value":"pub fn append_values(&mut Self, &[T::Native], &[bool]) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Appends values from a slice of type `T` and a validity boolean slice\n","sig":null,"attributes":[{"value":"/ Appends values from a slice of type `T` and a validity boolean slice","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":233497,"byte_end":233569,"line_start":624,"line_end":624,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":1039},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":234088,"byte_end":234094,"line_start":641,"line_end":641,"column_start":12,"column_end":18},"name":"finish","qualname":"<PrimitiveBuilder<T>>::finish","value":"pub fn finish(&mut Self) -> PrimitiveArray<T>","parent":null,"children":[],"decl_id":null,"docs":" Builds the `PrimitiveArray` and reset this builder.\n","sig":null,"attributes":[{"value":"/ Builds the `PrimitiveArray` and reset this builder.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":234021,"byte_end":234076,"line_start":640,"line_end":640,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1040},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":234677,"byte_end":234688,"line_start":656,"line_end":656,"column_start":12,"column_end":23},"name":"finish_dict","qualname":"<PrimitiveBuilder<T>>::finish_dict","value":"pub fn finish_dict(&mut Self, ArrayRef) -> DictionaryArray<T>","parent":null,"children":[],"decl_id":null,"docs":" Builds the `DictionaryArray` and reset this builder.\n","sig":null,"attributes":[{"value":"/ Builds the `DictionaryArray` and reset this builder.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":234609,"byte_end":234665,"line_start":655,"line_end":655,"column_start":5,"column_end":61}}]},{"kind":"Struct","id":{"krate":0,"index":7501},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":235456,"byte_end":235474,"line_start":677,"line_end":677,"column_start":12,"column_end":30},"name":"GenericListBuilder","qualname":"::array::builder::GenericListBuilder","value":"GenericListBuilder {  }","parent":null,"children":[{"krate":0,"index":7504},{"krate":0,"index":7505},{"krate":0,"index":7506},{"krate":0,"index":7507}],"decl_id":null,"docs":"  Array builder for `ListArray`\n","sig":null,"attributes":[{"value":"/  Array builder for `ListArray`","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":235393,"byte_end":235427,"line_start":675,"line_end":675,"column_start":1,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1044},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":235833,"byte_end":235836,"line_start":686,"line_end":686,"column_start":12,"column_end":15},"name":"new","qualname":"<GenericListBuilder<OffsetSize, T>>::new","value":"pub fn new(T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `ListArrayBuilder` from a given values array builder\n","sig":null,"attributes":[{"value":"/ Creates a new `ListArrayBuilder` from a given values array builder","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":235751,"byte_end":235821,"line_start":685,"line_end":685,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":1045},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":236142,"byte_end":236155,"line_start":693,"line_end":693,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<GenericListBuilder<OffsetSize, T>>::with_capacity","value":"pub fn with_capacity(T, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `ListArrayBuilder` from a given values array builder\n `capacity` is the number of items to pre-allocate space for in this builder\n","sig":null,"attributes":[{"value":"/ Creates a new `ListArrayBuilder` from a given values array builder","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":235976,"byte_end":236046,"line_start":691,"line_end":691,"column_start":5,"column_end":75}},{"value":"/ `capacity` is the number of items to pre-allocate space for in this builder","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":236051,"byte_end":236130,"line_start":692,"line_end":692,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":1058},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":237770,"byte_end":237776,"line_start":750,"line_end":750,"column_start":12,"column_end":18},"name":"values","qualname":"<GenericListBuilder<OffsetSize, T>>::values","value":"pub fn values(&mut Self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns the child array builder as a mutable reference.","sig":null,"attributes":[{"value":"/ Returns the child array builder as a mutable reference.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":237529,"byte_end":237588,"line_start":746,"line_end":746,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":237593,"byte_end":237596,"line_start":747,"line_end":747,"column_start":5,"column_end":8}},{"value":"/ This mutable reference can be used to append values into the child array builder,","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":237601,"byte_end":237686,"line_start":748,"line_end":748,"column_start":5,"column_end":90}},{"value":"/ but you must call `append` to delimit each distinct list value.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":237691,"byte_end":237758,"line_start":749,"line_end":749,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":1059},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":237910,"byte_end":237916,"line_start":755,"line_end":755,"column_start":12,"column_end":18},"name":"append","qualname":"<GenericListBuilder<OffsetSize, T>>::append","value":"pub fn append(&mut Self, bool) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Finish the current variable-length list array slot\n","sig":null,"attributes":[{"value":"/ Finish the current variable-length list array slot","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":237844,"byte_end":237898,"line_start":754,"line_end":754,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1060},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":238243,"byte_end":238249,"line_start":764,"line_end":764,"column_start":12,"column_end":18},"name":"finish","qualname":"<GenericListBuilder<OffsetSize, T>>::finish","value":"pub fn finish(&mut Self) -> GenericListArray<OffsetSize>","parent":null,"children":[],"decl_id":null,"docs":" Builds the `ListArray` and reset this builder.\n","sig":null,"attributes":[{"value":"/ Builds the `ListArray` and reset this builder.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":238181,"byte_end":238231,"line_start":763,"line_end":763,"column_start":5,"column_end":55}}]},{"kind":"Type","id":{"krate":0,"index":1061},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":239372,"byte_end":239383,"line_start":799,"line_end":799,"column_start":10,"column_end":21},"name":"ListBuilder","qualname":"::array::builder::ListBuilder","value":"GenericListBuilder<i32, T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1063},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":239426,"byte_end":239442,"line_start":800,"line_end":800,"column_start":10,"column_end":26},"name":"LargeListBuilder","qualname":"::array::builder::LargeListBuilder","value":"GenericListBuilder<i64, T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7512},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":239540,"byte_end":239560,"line_start":804,"line_end":804,"column_start":12,"column_end":32},"name":"FixedSizeListBuilder","qualname":"::array::builder::FixedSizeListBuilder","value":"FixedSizeListBuilder {  }","parent":null,"children":[{"krate":0,"index":7514},{"krate":0,"index":7515},{"krate":0,"index":7516},{"krate":0,"index":7517}],"decl_id":null,"docs":"  Array builder for `ListArray`\n","sig":null,"attributes":[{"value":"/  Array builder for `ListArray`","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":239477,"byte_end":239511,"line_start":802,"line_end":802,"column_start":1,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1067},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":239880,"byte_end":239883,"line_start":814,"line_end":814,"column_start":12,"column_end":15},"name":"new","qualname":"<FixedSizeListBuilder<T>>::new","value":"pub fn new(T, i32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `FixedSizeListBuilder` from a given values array builder\n `length` is the number of values within each array\n","sig":null,"attributes":[{"value":"/ Creates a new `FixedSizeListBuilder` from a given values array builder","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":239735,"byte_end":239809,"line_start":812,"line_end":812,"column_start":5,"column_end":79}},{"value":"/ `length` is the number of values within each array","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":239814,"byte_end":239868,"line_start":813,"line_end":813,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1068},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":240273,"byte_end":240286,"line_start":822,"line_end":822,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<FixedSizeListBuilder<T>>::with_capacity","value":"pub fn with_capacity(T, i32, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `FixedSizeListBuilder` from a given values array builder\n `length` is the number of values within each array\n `capacity` is the number of items to pre-allocate space for in this builder\n","sig":null,"attributes":[{"value":"/ Creates a new `FixedSizeListBuilder` from a given values array builder","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":240044,"byte_end":240118,"line_start":819,"line_end":819,"column_start":5,"column_end":79}},{"value":"/ `length` is the number of values within each array","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":240123,"byte_end":240177,"line_start":820,"line_end":820,"column_start":5,"column_end":59}},{"value":"/ `capacity` is the number of items to pre-allocate space for in this builder","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":240182,"byte_end":240261,"line_start":821,"line_end":821,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":1079},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":241750,"byte_end":241756,"line_start":877,"line_end":877,"column_start":12,"column_end":18},"name":"values","qualname":"<FixedSizeListBuilder<T>>::values","value":"pub fn values(&mut Self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns the child array builder as a mutable reference.","sig":null,"attributes":[{"value":"/ Returns the child array builder as a mutable reference.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":241509,"byte_end":241568,"line_start":873,"line_end":873,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":241573,"byte_end":241576,"line_start":874,"line_end":874,"column_start":5,"column_end":8}},{"value":"/ This mutable reference can be used to append values into the child array builder,","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":241581,"byte_end":241666,"line_start":875,"line_end":875,"column_start":5,"column_end":90}},{"value":"/ but you must call `append` to delimit each distinct list value.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":241671,"byte_end":241738,"line_start":876,"line_end":876,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":1080},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":241831,"byte_end":241843,"line_start":881,"line_end":881,"column_start":12,"column_end":24},"name":"value_length","qualname":"<FixedSizeListBuilder<T>>::value_length","value":"pub fn value_length(&Self) -> i32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1081},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":241959,"byte_end":241965,"line_start":886,"line_end":886,"column_start":12,"column_end":18},"name":"append","qualname":"<FixedSizeListBuilder<T>>::append","value":"pub fn append(&mut Self, bool) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Finish the current variable-length list array slot\n","sig":null,"attributes":[{"value":"/ Finish the current variable-length list array slot","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":241893,"byte_end":241947,"line_start":885,"line_end":885,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1082},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":242177,"byte_end":242183,"line_start":893,"line_end":893,"column_start":12,"column_end":18},"name":"finish","qualname":"<FixedSizeListBuilder<T>>::finish","value":"pub fn finish(&mut Self) -> FixedSizeListArray","parent":null,"children":[],"decl_id":null,"docs":" Builds the `FixedSizeListBuilder` and reset this builder.\n","sig":null,"attributes":[{"value":"/ Builds the `FixedSizeListBuilder` and reset this builder.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":242104,"byte_end":242165,"line_start":892,"line_end":892,"column_start":5,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":7521},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":243339,"byte_end":243359,"line_start":930,"line_end":930,"column_start":12,"column_end":32},"name":"GenericBinaryBuilder","qualname":"::array::builder::GenericBinaryBuilder","value":"GenericBinaryBuilder {  }","parent":null,"children":[{"krate":0,"index":7523}],"decl_id":null,"docs":"  Array builder for `BinaryArray`\n","sig":null,"attributes":[{"value":"/  Array builder for `BinaryArray`","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":243274,"byte_end":243310,"line_start":928,"line_end":928,"column_start":1,"column_end":37}}]},{"kind":"Type","id":{"krate":0,"index":1083},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":243462,"byte_end":243475,"line_start":934,"line_end":934,"column_start":10,"column_end":23},"name":"BinaryBuilder","qualname":"::array::builder::BinaryBuilder","value":"GenericBinaryBuilder<i32>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1084},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":243514,"byte_end":243532,"line_start":935,"line_end":935,"column_start":10,"column_end":28},"name":"LargeBinaryBuilder","qualname":"::array::builder::LargeBinaryBuilder","value":"GenericBinaryBuilder<i64>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7527},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":243591,"byte_end":243611,"line_start":938,"line_end":938,"column_start":12,"column_end":32},"name":"GenericStringBuilder","qualname":"::array::builder::GenericStringBuilder","value":"GenericStringBuilder {  }","parent":null,"children":[{"krate":0,"index":7529}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1085},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":243714,"byte_end":243727,"line_start":942,"line_end":942,"column_start":10,"column_end":23},"name":"StringBuilder","qualname":"::array::builder::StringBuilder","value":"GenericStringBuilder<i32>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1086},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":243766,"byte_end":243784,"line_start":943,"line_end":943,"column_start":10,"column_end":28},"name":"LargeStringBuilder","qualname":"::array::builder::LargeStringBuilder","value":"GenericStringBuilder<i64>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7533},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":243843,"byte_end":243865,"line_start":946,"line_end":946,"column_start":12,"column_end":34},"name":"FixedSizeBinaryBuilder","qualname":"::array::builder::FixedSizeBinaryBuilder","value":"FixedSizeBinaryBuilder {  }","parent":null,"children":[{"krate":0,"index":7534}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7537},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":243948,"byte_end":243962,"line_start":951,"line_end":951,"column_start":12,"column_end":26},"name":"DecimalBuilder","qualname":"::array::builder::DecimalBuilder","value":"DecimalBuilder {  }","parent":null,"children":[{"krate":0,"index":7538},{"krate":0,"index":7539},{"krate":0,"index":7540}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1119},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":247531,"byte_end":247534,"line_start":1093,"line_end":1093,"column_start":12,"column_end":15},"name":"new","qualname":"<GenericBinaryBuilder<OffsetSize>>::new","value":"pub fn new(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `GenericBinaryBuilder`, `capacity` is the number of bytes in the values\n array\n","sig":null,"attributes":[{"value":"/ Creates a new `GenericBinaryBuilder`, `capacity` is the number of bytes in the values","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":247416,"byte_end":247505,"line_start":1091,"line_end":1091,"column_start":5,"column_end":94}},{"value":"/ array","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":247510,"byte_end":247519,"line_start":1092,"line_end":1092,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1120},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":247922,"byte_end":247933,"line_start":1104,"line_end":1104,"column_start":12,"column_end":23},"name":"append_byte","qualname":"<GenericBinaryBuilder<OffsetSize>>::append_byte","value":"pub fn append_byte(&mut Self, u8) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Appends a single byte value into the builder's values array.","sig":null,"attributes":[{"value":"/ Appends a single byte value into the builder's values array.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":247718,"byte_end":247782,"line_start":1100,"line_end":1100,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":247787,"byte_end":247790,"line_start":1101,"line_end":1101,"column_start":5,"column_end":8}},{"value":"/ Note, when appending individual byte values you must call `append` to delimit each","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":247795,"byte_end":247881,"line_start":1102,"line_end":1102,"column_start":5,"column_end":91}},{"value":"/ distinct list value.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":247886,"byte_end":247910,"line_start":1103,"line_end":1103,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1121},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":248230,"byte_end":248242,"line_start":1113,"line_end":1113,"column_start":12,"column_end":24},"name":"append_value","qualname":"<GenericBinaryBuilder<OffsetSize>>::append_value","value":"pub fn append_value(&mut Self, &[u8]) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Appends a byte slice into the builder.","sig":null,"attributes":[{"value":"/ Appends a byte slice into the builder.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":248050,"byte_end":248092,"line_start":1109,"line_end":1109,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":248097,"byte_end":248100,"line_start":1110,"line_end":1110,"column_start":5,"column_end":8}},{"value":"/ Automatically calls the `append` method to delimit the slice appended in as a","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":248105,"byte_end":248186,"line_start":1111,"line_end":1111,"column_start":5,"column_end":86}},{"value":"/ distinct array element.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":248191,"byte_end":248218,"line_start":1112,"line_end":1112,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1122},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":248465,"byte_end":248471,"line_start":1120,"line_end":1120,"column_start":12,"column_end":18},"name":"append","qualname":"<GenericBinaryBuilder<OffsetSize>>::append","value":"pub fn append(&mut Self, bool) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Finish the current variable-length list array slot.\n","sig":null,"attributes":[{"value":"/ Finish the current variable-length list array slot.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":248398,"byte_end":248453,"line_start":1119,"line_end":1119,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1123},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":248613,"byte_end":248624,"line_start":1125,"line_end":1125,"column_start":12,"column_end":23},"name":"append_null","qualname":"<GenericBinaryBuilder<OffsetSize>>::append_null","value":"pub fn append_null(&mut Self) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Append a null value to the array.\n","sig":null,"attributes":[{"value":"/ Append a null value to the array.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":248564,"byte_end":248601,"line_start":1124,"line_end":1124,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":1124},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":248754,"byte_end":248760,"line_start":1130,"line_end":1130,"column_start":12,"column_end":18},"name":"finish","qualname":"<GenericBinaryBuilder<OffsetSize>>::finish","value":"pub fn finish(&mut Self) -> GenericBinaryArray<OffsetSize>","parent":null,"children":[],"decl_id":null,"docs":" Builds the `BinaryArray` and reset this builder.\n","sig":null,"attributes":[{"value":"/ Builds the `BinaryArray` and reset this builder.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":248690,"byte_end":248742,"line_start":1129,"line_end":1129,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1127},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":249111,"byte_end":249114,"line_start":1138,"line_end":1138,"column_start":12,"column_end":15},"name":"new","qualname":"<GenericStringBuilder<OffsetSize>>::new","value":"pub fn new(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `StringBuilder`,\n `capacity` is the number of bytes of string data to pre-allocate space for in this builder\n","sig":null,"attributes":[{"value":"/ Creates a new `StringBuilder`,","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":248966,"byte_end":249000,"line_start":1136,"line_end":1136,"column_start":5,"column_end":39}},{"value":"/ `capacity` is the number of bytes of string data to pre-allocate space for in this builder","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":249005,"byte_end":249099,"line_start":1137,"line_end":1137,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":1128},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":249537,"byte_end":249550,"line_start":1148,"line_end":1148,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<GenericStringBuilder<OffsetSize>>::with_capacity","value":"pub fn with_capacity(usize, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `StringBuilder`,\n `data_capacity` is the number of bytes of string data to pre-allocate space for in this builder\n `item_capacity` is the number of items to pre-allocate space for in this builder\n","sig":null,"attributes":[{"value":"/ Creates a new `StringBuilder`,","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":249298,"byte_end":249332,"line_start":1145,"line_end":1145,"column_start":5,"column_end":39}},{"value":"/ `data_capacity` is the number of bytes of string data to pre-allocate space for in this builder","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":249337,"byte_end":249436,"line_start":1146,"line_end":1146,"column_start":5,"column_end":104}},{"value":"/ `item_capacity` is the number of items to pre-allocate space for in this builder","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":249441,"byte_end":249525,"line_start":1147,"line_end":1147,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":1129},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":249968,"byte_end":249980,"line_start":1159,"line_end":1159,"column_start":12,"column_end":24},"name":"append_value","qualname":"<GenericStringBuilder<OffsetSize>>::append_value","value":"pub fn append_value(&mut Self, &str) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Appends a string into the builder.","sig":null,"attributes":[{"value":"/ Appends a string into the builder.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":249791,"byte_end":249829,"line_start":1155,"line_end":1155,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":249834,"byte_end":249837,"line_start":1156,"line_end":1156,"column_start":5,"column_end":8}},{"value":"/ Automatically calls the `append` method to delimit the string appended in as a","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":249842,"byte_end":249924,"line_start":1157,"line_end":1157,"column_start":5,"column_end":87}},{"value":"/ distinct array element.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":249929,"byte_end":249956,"line_start":1158,"line_end":1158,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1130},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":250213,"byte_end":250219,"line_start":1166,"line_end":1166,"column_start":12,"column_end":18},"name":"append","qualname":"<GenericStringBuilder<OffsetSize>>::append","value":"pub fn append(&mut Self, bool) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Finish the current variable-length list array slot.\n","sig":null,"attributes":[{"value":"/ Finish the current variable-length list array slot.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":250146,"byte_end":250201,"line_start":1165,"line_end":1165,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1131},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":250361,"byte_end":250372,"line_start":1171,"line_end":1171,"column_start":12,"column_end":23},"name":"append_null","qualname":"<GenericStringBuilder<OffsetSize>>::append_null","value":"pub fn append_null(&mut Self) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Append a null value to the array.\n","sig":null,"attributes":[{"value":"/ Append a null value to the array.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":250312,"byte_end":250349,"line_start":1170,"line_end":1170,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":1132},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":250502,"byte_end":250508,"line_start":1176,"line_end":1176,"column_start":12,"column_end":18},"name":"finish","qualname":"<GenericStringBuilder<OffsetSize>>::finish","value":"pub fn finish(&mut Self) -> GenericStringArray<OffsetSize>","parent":null,"children":[],"decl_id":null,"docs":" Builds the `StringArray` and reset this builder.\n","sig":null,"attributes":[{"value":"/ Builds the `StringArray` and reset this builder.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":250438,"byte_end":250490,"line_start":1175,"line_end":1175,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1134},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":250777,"byte_end":250780,"line_start":1184,"line_end":1184,"column_start":12,"column_end":15},"name":"new","qualname":"<FixedSizeBinaryBuilder>::new","value":"pub fn new(usize, i32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `BinaryBuilder`, `capacity` is the number of bytes in the values\n array\n","sig":null,"attributes":[{"value":"/ Creates a new `BinaryBuilder`, `capacity` is the number of bytes in the values","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":250669,"byte_end":250751,"line_start":1182,"line_end":1182,"column_start":5,"column_end":87}},{"value":"/ array","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":250756,"byte_end":250765,"line_start":1183,"line_end":1183,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1135},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":251175,"byte_end":251187,"line_start":1195,"line_end":1195,"column_start":12,"column_end":24},"name":"append_value","qualname":"<FixedSizeBinaryBuilder>::append_value","value":"pub fn append_value(&mut Self, &[u8]) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Appends a byte slice into the builder.","sig":null,"attributes":[{"value":"/ Appends a byte slice into the builder.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":250995,"byte_end":251037,"line_start":1191,"line_end":1191,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":251042,"byte_end":251045,"line_start":1192,"line_end":1192,"column_start":5,"column_end":8}},{"value":"/ Automatically calls the `append` method to delimit the slice appended in as a","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":251050,"byte_end":251131,"line_start":1193,"line_end":1193,"column_start":5,"column_end":86}},{"value":"/ distinct array element.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":251136,"byte_end":251163,"line_start":1194,"line_end":1194,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1136},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":251632,"byte_end":251643,"line_start":1206,"line_end":1206,"column_start":12,"column_end":23},"name":"append_null","qualname":"<FixedSizeBinaryBuilder>::append_null","value":"pub fn append_null(&mut Self) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Append a null value to the array.\n","sig":null,"attributes":[{"value":"/ Append a null value to the array.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":251583,"byte_end":251620,"line_start":1205,"line_end":1205,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":1137},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":251925,"byte_end":251931,"line_start":1213,"line_end":1213,"column_start":12,"column_end":18},"name":"finish","qualname":"<FixedSizeBinaryBuilder>::finish","value":"pub fn finish(&mut Self) -> FixedSizeBinaryArray","parent":null,"children":[],"decl_id":null,"docs":" Builds the `FixedSizeBinaryArray` and reset this builder.\n","sig":null,"attributes":[{"value":"/ Builds the `FixedSizeBinaryArray` and reset this builder.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":251852,"byte_end":251913,"line_start":1212,"line_end":1212,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1139},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":252170,"byte_end":252173,"line_start":1221,"line_end":1221,"column_start":12,"column_end":15},"name":"new","qualname":"<DecimalBuilder>::new","value":"pub fn new(usize, usize, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `BinaryBuilder`, `capacity` is the number of bytes in the values\n array\n","sig":null,"attributes":[{"value":"/ Creates a new `BinaryBuilder`, `capacity` is the number of bytes in the values","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":252062,"byte_end":252144,"line_start":1219,"line_end":1219,"column_start":5,"column_end":87}},{"value":"/ array","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":252149,"byte_end":252158,"line_start":1220,"line_end":1220,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1140},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":252654,"byte_end":252666,"line_start":1235,"line_end":1235,"column_start":12,"column_end":24},"name":"append_value","qualname":"<DecimalBuilder>::append_value","value":"pub fn append_value(&mut Self, i128) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Appends a byte slice into the builder.","sig":null,"attributes":[{"value":"/ Appends a byte slice into the builder.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":252474,"byte_end":252516,"line_start":1231,"line_end":1231,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":252521,"byte_end":252524,"line_start":1232,"line_end":1232,"column_start":5,"column_end":8}},{"value":"/ Automatically calls the `append` method to delimit the slice appended in as a","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":252529,"byte_end":252610,"line_start":1233,"line_end":1233,"column_start":5,"column_end":86}},{"value":"/ distinct array element.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":252615,"byte_end":252642,"line_start":1234,"line_end":1234,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1142},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":253692,"byte_end":253703,"line_start":1263,"line_end":1263,"column_start":12,"column_end":23},"name":"append_null","qualname":"<DecimalBuilder>::append_null","value":"pub fn append_null(&mut Self) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Append a null value to the array.\n","sig":null,"attributes":[{"value":"/ Append a null value to the array.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":253643,"byte_end":253680,"line_start":1262,"line_end":1262,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":1143},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":253977,"byte_end":253983,"line_start":1270,"line_end":1270,"column_start":12,"column_end":18},"name":"finish","qualname":"<DecimalBuilder>::finish","value":"pub fn finish(&mut Self) -> DecimalArray","parent":null,"children":[],"decl_id":null,"docs":" Builds the `DecimalArray` and reset this builder.\n","sig":null,"attributes":[{"value":"/ Builds the `DecimalArray` and reset this builder.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":253912,"byte_end":253965,"line_start":1269,"line_end":1269,"column_start":5,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":1144},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":254379,"byte_end":254392,"line_start":1283,"line_end":1283,"column_start":12,"column_end":25},"name":"StructBuilder","qualname":"::array::builder::StructBuilder","value":"StructBuilder {  }","parent":null,"children":[{"krate":0,"index":1145},{"krate":0,"index":1146},{"krate":0,"index":1147},{"krate":0,"index":1148},{"krate":0,"index":1149}],"decl_id":null,"docs":" Array builder for Struct types.","sig":null,"attributes":[{"value":"/ Array builder for Struct types.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":254169,"byte_end":254204,"line_start":1279,"line_end":1279,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":254205,"byte_end":254208,"line_start":1280,"line_end":1280,"column_start":1,"column_end":4}},{"value":"/ Note that callers should make sure that methods of all the child field builders are","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":254209,"byte_end":254296,"line_start":1281,"line_end":1281,"column_start":1,"column_end":88}},{"value":"/ properly called to maintain the consistency of the data structure.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":254297,"byte_end":254367,"line_start":1282,"line_end":1282,"column_start":1,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":1161},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":260021,"byte_end":260024,"line_start":1423,"line_end":1423,"column_start":12,"column_end":15},"name":"new","qualname":"<StructBuilder>::new","value":"pub fn new(Vec<Field>, Vec<Box<ArrayBuilder>>) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1162},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":260951,"byte_end":260962,"line_start":1448,"line_end":1448,"column_start":12,"column_end":23},"name":"from_fields","qualname":"<StructBuilder>::from_fields","value":"pub fn from_fields(Vec<Field>, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1163},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":261429,"byte_end":261442,"line_start":1459,"line_end":1459,"column_start":12,"column_end":25},"name":"field_builder","qualname":"<StructBuilder>::field_builder","value":"pub fn field_builder<T: ArrayBuilder>(&mut Self, usize) -> Option<&mut T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the child field builder at index `i`.\n Result will be `None` if the input type `T` provided doesn't match the actual\n field builder's type.\n","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the child field builder at index `i`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":261229,"byte_end":261301,"line_start":1456,"line_end":1456,"column_start":5,"column_end":77}},{"value":"/ Result will be `None` if the input type `T` provided doesn't match the actual","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":261306,"byte_end":261387,"line_start":1457,"line_end":1457,"column_start":5,"column_end":86}},{"value":"/ field builder's type.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":261392,"byte_end":261417,"line_start":1458,"line_end":1458,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":1165},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":261644,"byte_end":261654,"line_start":1464,"line_end":1464,"column_start":12,"column_end":22},"name":"num_fields","qualname":"<StructBuilder>::num_fields","value":"pub fn num_fields(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of fields for the struct this builder is building.\n","sig":null,"attributes":[{"value":"/ Returns the number of fields for the struct this builder is building.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":261559,"byte_end":261632,"line_start":1463,"line_end":1463,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":1166},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":261886,"byte_end":261892,"line_start":1470,"line_end":1470,"column_start":12,"column_end":18},"name":"append","qualname":"<StructBuilder>::append","value":"pub fn append(&mut Self, bool) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Appends an element (either null or non-null) to the struct. The actual elements\n should be appended for each child sub-array in a consistent way.\n","sig":null,"attributes":[{"value":"/ Appends an element (either null or non-null) to the struct. The actual elements","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":261718,"byte_end":261801,"line_start":1468,"line_end":1468,"column_start":5,"column_end":88}},{"value":"/ should be appended for each child sub-array in a consistent way.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":261806,"byte_end":261874,"line_start":1469,"line_end":1469,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":1167},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":262084,"byte_end":262095,"line_start":1477,"line_end":1477,"column_start":12,"column_end":23},"name":"append_null","qualname":"<StructBuilder>::append_null","value":"pub fn append_null(&mut Self) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Appends a null element to the struct.\n","sig":null,"attributes":[{"value":"/ Appends a null element to the struct.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":262031,"byte_end":262072,"line_start":1476,"line_end":1476,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1168},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":262225,"byte_end":262231,"line_start":1482,"line_end":1482,"column_start":12,"column_end":18},"name":"finish","qualname":"<StructBuilder>::finish","value":"pub fn finish(&mut Self) -> StructArray","parent":null,"children":[],"decl_id":null,"docs":" Builds the `StructArray` and reset this builder.\n","sig":null,"attributes":[{"value":"/ Builds the `StructArray` and reset this builder.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":262161,"byte_end":262213,"line_start":1481,"line_end":1481,"column_start":5,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":7551},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":267539,"byte_end":267551,"line_start":1623,"line_end":1623,"column_start":12,"column_end":24},"name":"UnionBuilder","qualname":"::array::builder::UnionBuilder","value":"UnionBuilder {  }","parent":null,"children":[{"krate":0,"index":7552},{"krate":0,"index":7553},{"krate":0,"index":7554},{"krate":0,"index":7555},{"krate":0,"index":7556}],"decl_id":null,"docs":" Builder type for creating a new `UnionArray`.\n","sig":null,"attributes":[{"value":"/ Builder type for creating a new `UnionArray`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":267461,"byte_end":267510,"line_start":1621,"line_end":1621,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1179},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":268120,"byte_end":268129,"line_start":1638,"line_end":1638,"column_start":12,"column_end":21},"name":"new_dense","qualname":"<UnionBuilder>::new_dense","value":"pub fn new_dense(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new dense array builder.\n","sig":null,"attributes":[{"value":"/ Creates a new dense array builder.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":268070,"byte_end":268108,"line_start":1637,"line_end":1637,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":1180},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":268476,"byte_end":268486,"line_start":1649,"line_end":1649,"column_start":12,"column_end":22},"name":"new_sparse","qualname":"<UnionBuilder>::new_sparse","value":"pub fn new_sparse(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new sparse array builder.\n","sig":null,"attributes":[{"value":"/ Creates a new sparse array builder.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":268425,"byte_end":268464,"line_start":1648,"line_end":1648,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1181},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":268794,"byte_end":268805,"line_start":1660,"line_end":1660,"column_start":12,"column_end":23},"name":"append_null","qualname":"<UnionBuilder>::append_null","value":"pub fn append_null(&mut Self) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Appends a null to this builder.\n","sig":null,"attributes":[{"value":"/ Appends a null to this builder.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":268747,"byte_end":268782,"line_start":1659,"line_end":1659,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1182},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":269558,"byte_end":269564,"line_start":1686,"line_end":1686,"column_start":12,"column_end":18},"name":"append","qualname":"<UnionBuilder>::append","value":"pub fn append<T: ArrowPrimitiveType>(&mut Self, &str, T::Native) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Appends a value to this builder.\n","sig":null,"attributes":[{"value":"/ Appends a value to this builder.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":269510,"byte_end":269546,"line_start":1685,"line_end":1685,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":1184},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":271266,"byte_end":271271,"line_start":1738,"line_end":1738,"column_start":12,"column_end":17},"name":"build","qualname":"<UnionBuilder>::build","value":"pub fn build(Self) -> Result<UnionArray>","parent":null,"children":[],"decl_id":null,"docs":" Builds this builder creating a new `UnionArray`.\n","sig":null,"attributes":[{"value":"/ Builds this builder creating a new `UnionArray`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":271202,"byte_end":271254,"line_start":1737,"line_end":1737,"column_start":5,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":7559},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":273097,"byte_end":273123,"line_start":1783,"line_end":1783,"column_start":12,"column_end":38},"name":"PrimitiveDictionaryBuilder","qualname":"::array::builder::PrimitiveDictionaryBuilder","value":"PrimitiveDictionaryBuilder {  }","parent":null,"children":[{"krate":0,"index":7562},{"krate":0,"index":7563},{"krate":0,"index":7564}],"decl_id":null,"docs":" Array builder for `DictionaryArray`. For example to map a set of byte indices\n to f32 values. Note that the use of a `HashMap` here will not scale to very large\n arrays or result in an ordered dictionary.\n","sig":null,"attributes":[{"value":"/ Array builder for `DictionaryArray`. For example to map a set of byte indices","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":272854,"byte_end":272935,"line_start":1779,"line_end":1779,"column_start":1,"column_end":82}},{"value":"/ to f32 values. Note that the use of a `HashMap` here will not scale to very large","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":272936,"byte_end":273021,"line_start":1780,"line_end":1780,"column_start":1,"column_end":86}},{"value":"/ arrays or result in an ordered dictionary.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":273022,"byte_end":273068,"line_start":1781,"line_end":1781,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1192},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":273524,"byte_end":273527,"line_start":1799,"line_end":1799,"column_start":12,"column_end":15},"name":"new","qualname":"<PrimitiveDictionaryBuilder<K, V>>::new","value":"pub fn new(PrimitiveBuilder<K>, PrimitiveBuilder<V>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `PrimitiveDictionaryBuilder` from a keys builder and a value builder.\n","sig":null,"attributes":[{"value":"/ Creates a new `PrimitiveDictionaryBuilder` from a keys builder and a value builder.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":273425,"byte_end":273512,"line_start":1798,"line_end":1798,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":1205},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":274931,"byte_end":274937,"line_start":1855,"line_end":1855,"column_start":12,"column_end":18},"name":"append","qualname":"<PrimitiveDictionaryBuilder<K, V>>::append","value":"pub fn append(&mut Self, V::Native) -> Result<K::Native>","parent":null,"children":[],"decl_id":null,"docs":" Append a primitive value to the array. Return an existing index\n if already present in the values array or a new index if the\n value is appended to the values array.\n","sig":null,"attributes":[{"value":"/ Append a primitive value to the array. Return an existing index","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":274736,"byte_end":274803,"line_start":1852,"line_end":1852,"column_start":5,"column_end":72}},{"value":"/ if already present in the values array or a new index if the","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":274808,"byte_end":274872,"line_start":1853,"line_end":1853,"column_start":5,"column_end":69}},{"value":"/ value is appended to the values array.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":274877,"byte_end":274919,"line_start":1854,"line_end":1854,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1206},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":275579,"byte_end":275590,"line_start":1871,"line_end":1871,"column_start":12,"column_end":23},"name":"append_null","qualname":"<PrimitiveDictionaryBuilder<K, V>>::append_null","value":"pub fn append_null(&mut Self) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1207},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":275737,"byte_end":275743,"line_start":1876,"line_end":1876,"column_start":12,"column_end":18},"name":"finish","qualname":"<PrimitiveDictionaryBuilder<K, V>>::finish","value":"pub fn finish(&mut Self) -> DictionaryArray<K>","parent":null,"children":[],"decl_id":null,"docs":" Builds the `DictionaryArray` and reset this builder.\n","sig":null,"attributes":[{"value":"/ Builds the `DictionaryArray` and reset this builder.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":275669,"byte_end":275725,"line_start":1875,"line_end":1875,"column_start":5,"column_end":61}}]},{"kind":"Struct","id":{"krate":0,"index":7569},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":276180,"byte_end":276203,"line_start":1887,"line_end":1887,"column_start":12,"column_end":35},"name":"StringDictionaryBuilder","qualname":"::array::builder::StringDictionaryBuilder","value":"StringDictionaryBuilder {  }","parent":null,"children":[{"krate":0,"index":7571},{"krate":0,"index":7572},{"krate":0,"index":7573}],"decl_id":null,"docs":" Array builder for `DictionaryArray`. For example to map a set of byte indices\n to f32 values. Note that the use of a `HashMap` here will not scale to very large\n arrays or result in an ordered dictionary.\n","sig":null,"attributes":[{"value":"/ Array builder for `DictionaryArray`. For example to map a set of byte indices","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":275937,"byte_end":276018,"line_start":1883,"line_end":1883,"column_start":1,"column_end":82}},{"value":"/ to f32 values. Note that the use of a `HashMap` here will not scale to very large","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":276019,"byte_end":276104,"line_start":1884,"line_end":1884,"column_start":1,"column_end":86}},{"value":"/ arrays or result in an ordered dictionary.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":276105,"byte_end":276151,"line_start":1885,"line_end":1885,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1210},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":276537,"byte_end":276540,"line_start":1901,"line_end":1901,"column_start":12,"column_end":15},"name":"new","qualname":"<StringDictionaryBuilder<K>>::new","value":"pub fn new(PrimitiveBuilder<K>, StringBuilder) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `StringDictionaryBuilder` from a keys builder and a value builder.\n","sig":null,"attributes":[{"value":"/ Creates a new `StringDictionaryBuilder` from a keys builder and a value builder.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":276441,"byte_end":276525,"line_start":1900,"line_end":1900,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":1211},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":277736,"byte_end":277755,"line_start":1933,"line_end":1933,"column_start":12,"column_end":31},"name":"new_with_dictionary","qualname":"<StringDictionaryBuilder<K>>::new_with_dictionary","value":"pub fn new_with_dictionary(PrimitiveBuilder<K>, &StringArray) -> Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `StringDictionaryBuilder` from a keys builder and a dictionary\n which is initialized with the given values.\n The indices of those dictionary values are used as keys.","sig":null,"attributes":[{"value":"/ Creates a new `StringDictionaryBuilder` from a keys builder and a dictionary","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":276740,"byte_end":276820,"line_start":1909,"line_end":1909,"column_start":5,"column_end":85}},{"value":"/ which is initialized with the given values.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":276825,"byte_end":276872,"line_start":1910,"line_end":1910,"column_start":5,"column_end":52}},{"value":"/ The indices of those dictionary values are used as keys.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":276877,"byte_end":276937,"line_start":1911,"line_end":1911,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":276942,"byte_end":276945,"line_start":1912,"line_end":1912,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":276950,"byte_end":276963,"line_start":1913,"line_end":1913,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":276968,"byte_end":276971,"line_start":1914,"line_end":1914,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":276976,"byte_end":276983,"line_start":1915,"line_end":1915,"column_start":5,"column_end":12}},{"value":"/ use arrow::datatypes::Int16Type;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":276988,"byte_end":277024,"line_start":1916,"line_end":1916,"column_start":5,"column_end":41}},{"value":"/ use arrow::array::{StringArray, StringDictionaryBuilder, PrimitiveBuilder, Int16Array};","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":277029,"byte_end":277120,"line_start":1917,"line_end":1917,"column_start":5,"column_end":96}},{"value":"/ use std::convert::TryFrom;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":277125,"byte_end":277155,"line_start":1918,"line_end":1918,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":277160,"byte_end":277163,"line_start":1919,"line_end":1919,"column_start":5,"column_end":8}},{"value":"/ let dictionary_values = StringArray::from(vec![None, Some(\"abc\"), Some(\"def\")]);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":277168,"byte_end":277252,"line_start":1920,"line_end":1920,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":277257,"byte_end":277260,"line_start":1921,"line_end":1921,"column_start":5,"column_end":8}},{"value":"/ let mut builder = StringDictionaryBuilder::new_with_dictionary(PrimitiveBuilder::<Int16Type>::new(3), &dictionary_values).unwrap();","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":277265,"byte_end":277400,"line_start":1922,"line_end":1922,"column_start":5,"column_end":140}},{"value":"/ builder.append(\"def\").unwrap();","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":277405,"byte_end":277440,"line_start":1923,"line_end":1923,"column_start":5,"column_end":40}},{"value":"/ builder.append_null().unwrap();","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":277445,"byte_end":277480,"line_start":1924,"line_end":1924,"column_start":5,"column_end":40}},{"value":"/ builder.append(\"abc\").unwrap();","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":277485,"byte_end":277520,"line_start":1925,"line_end":1925,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":277525,"byte_end":277528,"line_start":1926,"line_end":1926,"column_start":5,"column_end":8}},{"value":"/ let dictionary_array = builder.finish();","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":277533,"byte_end":277577,"line_start":1927,"line_end":1927,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":277582,"byte_end":277585,"line_start":1928,"line_end":1928,"column_start":5,"column_end":8}},{"value":"/ let keys = dictionary_array.keys();","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":277590,"byte_end":277629,"line_start":1929,"line_end":1929,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":277634,"byte_end":277637,"line_start":1930,"line_end":1930,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(keys, &Int16Array::from(vec![Some(2), None, Some(1)]));","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":277642,"byte_end":277712,"line_start":1931,"line_end":1931,"column_start":5,"column_end":75}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":277717,"byte_end":277724,"line_start":1932,"line_end":1932,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1222},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":279834,"byte_end":279840,"line_start":2004,"line_end":2004,"column_start":12,"column_end":18},"name":"append","qualname":"<StringDictionaryBuilder<K>>::append","value":"pub fn append(&mut Self, &str) -> Result<K::Native>","parent":null,"children":[],"decl_id":null,"docs":" Append a primitive value to the array. Return an existing index\n if already present in the values array or a new index if the\n value is appended to the values array.\n","sig":null,"attributes":[{"value":"/ Append a primitive value to the array. Return an existing index","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":279639,"byte_end":279706,"line_start":2001,"line_end":2001,"column_start":5,"column_end":72}},{"value":"/ if already present in the values array or a new index if the","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":279711,"byte_end":279775,"line_start":2002,"line_end":2002,"column_start":5,"column_end":69}},{"value":"/ value is appended to the values array.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":279780,"byte_end":279822,"line_start":2003,"line_end":2003,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1223},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":280467,"byte_end":280478,"line_start":2020,"line_end":2020,"column_start":12,"column_end":23},"name":"append_null","qualname":"<StringDictionaryBuilder<K>>::append_null","value":"pub fn append_null(&mut Self) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1224},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":280625,"byte_end":280631,"line_start":2025,"line_end":2025,"column_start":12,"column_end":18},"name":"finish","qualname":"<StringDictionaryBuilder<K>>::finish","value":"pub fn finish(&mut Self) -> DictionaryArray<K>","parent":null,"children":[],"decl_id":null,"docs":" Builds the `DictionaryArray` and reset this builder.\n","sig":null,"attributes":[{"value":"/ Builds the `DictionaryArray` and reset this builder.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":280557,"byte_end":280613,"line_start":2024,"line_end":2024,"column_start":5,"column_end":61}}]},{"kind":"Function","id":{"krate":0,"index":1228},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/cast.rs","byte_start":320038,"byte_end":320056,"line_start":24,"line_end":24,"column_start":8,"column_end":26},"name":"as_primitive_array","qualname":"::array::cast::as_primitive_array","value":"pub fn as_primitive_array<T>(&ArrayRef) -> &PrimitiveArray<T> where\nT: ArrowPrimitiveType","parent":null,"children":[],"decl_id":null,"docs":" Force downcast ArrayRef to PrimitiveArray<T>\n","sig":null,"attributes":[{"value":"/ Force downcast ArrayRef to PrimitiveArray<T>","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/cast.rs","byte_start":319982,"byte_end":320030,"line_start":23,"line_end":23,"column_start":1,"column_end":49}}]},{"kind":"Function","id":{"krate":0,"index":1230},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/cast.rs","byte_start":320312,"byte_end":320331,"line_start":34,"line_end":34,"column_start":8,"column_end":27},"name":"as_dictionary_array","qualname":"::array::cast::as_dictionary_array","value":"pub fn as_dictionary_array<T>(&ArrayRef) -> &DictionaryArray<T> where\nT: ArrowDictionaryKeyType","parent":null,"children":[],"decl_id":null,"docs":" Force downcast ArrayRef to DictionaryArray<T>\n","sig":null,"attributes":[{"value":"/ Force downcast ArrayRef to DictionaryArray<T>","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/cast.rs","byte_start":320255,"byte_end":320304,"line_start":33,"line_end":33,"column_start":1,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":1232},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/cast.rs","byte_start":320544,"byte_end":320557,"line_start":43,"line_end":43,"column_start":8,"column_end":21},"name":"as_list_array","qualname":"::array::cast::as_list_array","value":"pub fn as_list_array<S: OffsetSizeTrait>(&ArrayRef) -> &GenericListArray<S>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":7577},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/cast.rs","byte_start":321354,"byte_end":321369,"line_start":67,"line_end":67,"column_start":20,"column_end":35},"name":"as_string_array","qualname":"::array::cast::as_string_array","value":"pub fn as_string_array(&ArrayRef) -> &StringArray","parent":null,"children":[],"decl_id":null,"docs":"Force downcast ArrayRef to \nStringArray\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":7578},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/cast.rs","byte_start":321404,"byte_end":321424,"line_start":68,"line_end":68,"column_start":20,"column_end":40},"name":"as_largestring_array","qualname":"::array::cast::as_largestring_array","value":"pub fn as_largestring_array(&ArrayRef) -> &LargeStringArray","parent":null,"children":[],"decl_id":null,"docs":"Force downcast ArrayRef to \nLargeStringArray\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":7579},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/cast.rs","byte_start":321464,"byte_end":321480,"line_start":69,"line_end":69,"column_start":20,"column_end":36},"name":"as_boolean_array","qualname":"::array::cast::as_boolean_array","value":"pub fn as_boolean_array(&ArrayRef) -> &BooleanArray","parent":null,"children":[],"decl_id":null,"docs":"Force downcast ArrayRef to \nBooleanArray\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":7580},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/cast.rs","byte_start":321516,"byte_end":321529,"line_start":70,"line_end":70,"column_start":20,"column_end":33},"name":"as_null_array","qualname":"::array::cast::as_null_array","value":"pub fn as_null_array(&ArrayRef) -> &NullArray","parent":null,"children":[],"decl_id":null,"docs":"Force downcast ArrayRef to \nNullArray\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":7581},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/cast.rs","byte_start":321562,"byte_end":321577,"line_start":71,"line_end":71,"column_start":20,"column_end":35},"name":"as_struct_array","qualname":"::array::cast::as_struct_array","value":"pub fn as_struct_array(&ArrayRef) -> &StructArray","parent":null,"children":[],"decl_id":null,"docs":"Force downcast ArrayRef to \nStructArray\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7582},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/data.rs","byte_start":323270,"byte_end":323279,"line_start":48,"line_end":48,"column_start":12,"column_end":21},"name":"ArrayData","qualname":"::array::data::ArrayData","value":"ArrayData {  }","parent":null,"children":[{"krate":0,"index":7583},{"krate":0,"index":7584},{"krate":0,"index":7585},{"krate":0,"index":7586},{"krate":0,"index":7587},{"krate":0,"index":7588},{"krate":0,"index":7589}],"decl_id":null,"docs":" An generic representation of Arrow array data which encapsulates common attributes and\n operations for Arrow array. Specific operations for different arrays types (e.g.,\n primitive, list, struct) are implemented in `Array`.\n","sig":null,"attributes":[{"value":"/ An generic representation of Arrow array data which encapsulates common attributes and","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/data.rs","byte_start":323001,"byte_end":323091,"line_start":44,"line_end":44,"column_start":1,"column_end":91}},{"value":"/ operations for Arrow array. Specific operations for different arrays types (e.g.,","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/data.rs","byte_start":323092,"byte_end":323177,"line_start":45,"line_end":45,"column_start":1,"column_end":86}},{"value":"/ primitive, list, struct) are implemented in `Array`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/data.rs","byte_start":323178,"byte_end":323234,"line_start":46,"line_end":46,"column_start":1,"column_end":57}}]},{"kind":"Type","id":{"krate":0,"index":1259},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/data.rs","byte_start":324116,"byte_end":324128,"line_start":75,"line_end":75,"column_start":10,"column_end":22},"name":"ArrayDataRef","qualname":"::array::data::ArrayDataRef","value":"Arc<ArrayData>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1261},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/data.rs","byte_start":324176,"byte_end":324179,"line_start":78,"line_end":78,"column_start":12,"column_end":15},"name":"new","qualname":"<ArrayData>::new","value":"pub fn new(DataType, usize, Option<usize>, Option<Buffer>, usize, Vec<Buffer>,\n           Vec<ArrayDataRef>) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1262},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/data.rs","byte_start":324926,"byte_end":324933,"line_start":105,"line_end":105,"column_start":18,"column_end":25},"name":"builder","qualname":"<ArrayData>::builder","value":"pub const fn builder(DataType) -> ArrayDataBuilder","parent":null,"children":[],"decl_id":null,"docs":" Returns a builder to construct a `ArrayData` instance.\n","sig":null,"attributes":[{"value":"/ Returns a builder to construct a `ArrayData` instance.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/data.rs","byte_start":324836,"byte_end":324894,"line_start":103,"line_end":103,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/data.rs","byte_start":324899,"byte_end":324908,"line_start":104,"line_end":104,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1263},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/data.rs","byte_start":325120,"byte_end":325129,"line_start":111,"line_end":111,"column_start":18,"column_end":27},"name":"data_type","qualname":"<ArrayData>::data_type","value":"pub const fn data_type(&Self) -> &DataType","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the data type of this array data\n","sig":null,"attributes":[{"value":"/ Returns a reference to the data type of this array data","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/data.rs","byte_start":325029,"byte_end":325088,"line_start":109,"line_end":109,"column_start":5,"column_end":64}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/data.rs","byte_start":325093,"byte_end":325102,"line_start":110,"line_end":110,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1264},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/data.rs","byte_start":325249,"byte_end":325256,"line_start":116,"line_end":116,"column_start":12,"column_end":19},"name":"buffers","qualname":"<ArrayData>::buffers","value":"pub fn buffers(&Self) -> &[Buffer]","parent":null,"children":[],"decl_id":null,"docs":" Returns a slice of buffers for this array data\n","sig":null,"attributes":[{"value":"/ Returns a slice of buffers for this array data","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/data.rs","byte_start":325187,"byte_end":325237,"line_start":115,"line_end":115,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1265},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/data.rs","byte_start":325371,"byte_end":325381,"line_start":121,"line_end":121,"column_start":12,"column_end":22},"name":"child_data","qualname":"<ArrayData>::child_data","value":"pub fn child_data(&Self) -> &[ArrayDataRef]","parent":null,"children":[],"decl_id":null,"docs":" Returns a slice of children data arrays\n","sig":null,"attributes":[{"value":"/ Returns a slice of children data arrays","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/data.rs","byte_start":325316,"byte_end":325359,"line_start":120,"line_end":120,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1266},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/data.rs","byte_start":325514,"byte_end":325521,"line_start":126,"line_end":126,"column_start":12,"column_end":19},"name":"is_null","qualname":"<ArrayData>::is_null","value":"pub fn is_null(&Self, usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the element at index `i` is null\n","sig":null,"attributes":[{"value":"/ Returns whether the element at index `i` is null","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/data.rs","byte_start":325450,"byte_end":325502,"line_start":125,"line_end":125,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1267},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/data.rs","byte_start":325772,"byte_end":325783,"line_start":135,"line_end":135,"column_start":18,"column_end":29},"name":"null_bitmap","qualname":"<ArrayData>::null_bitmap","value":"pub const fn null_bitmap(&Self) -> &Option<Bitmap>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the null bitmap of this array data\n","sig":null,"attributes":[{"value":"/ Returns a reference to the null bitmap of this array data","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/data.rs","byte_start":325679,"byte_end":325740,"line_start":133,"line_end":133,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/data.rs","byte_start":325745,"byte_end":325754,"line_start":134,"line_end":134,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1268},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/data.rs","byte_start":325923,"byte_end":325934,"line_start":140,"line_end":140,"column_start":12,"column_end":23},"name":"null_buffer","qualname":"<ArrayData>::null_buffer","value":"pub fn null_buffer(&Self) -> Option<&Buffer>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the null buffer of this array data.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the null buffer of this array data.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/data.rs","byte_start":325849,"byte_end":325911,"line_start":139,"line_end":139,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1270},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/data.rs","byte_start":326102,"byte_end":326110,"line_start":145,"line_end":145,"column_start":12,"column_end":20},"name":"is_valid","qualname":"<ArrayData>::is_valid","value":"pub fn is_valid(&Self, usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the element at index `i` is not null\n","sig":null,"attributes":[{"value":"/ Returns whether the element at index `i` is not null","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/data.rs","byte_start":326034,"byte_end":326090,"line_start":144,"line_end":144,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":1271},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/data.rs","byte_start":326361,"byte_end":326364,"line_start":154,"line_end":154,"column_start":18,"column_end":21},"name":"len","qualname":"<ArrayData>::len","value":"pub const fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the length (i.e., number of elements) of this array\n","sig":null,"attributes":[{"value":"/ Returns the length (i.e., number of elements) of this array","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/data.rs","byte_start":326266,"byte_end":326329,"line_start":152,"line_end":152,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/data.rs","byte_start":326334,"byte_end":326343,"line_start":153,"line_end":153,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1272},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/data.rs","byte_start":326481,"byte_end":326489,"line_start":160,"line_end":160,"column_start":18,"column_end":26},"name":"is_empty","qualname":"<ArrayData>::is_empty","value":"pub const fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/data.rs","byte_start":326454,"byte_end":326463,"line_start":159,"line_end":159,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1273},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/data.rs","byte_start":326608,"byte_end":326614,"line_start":166,"line_end":166,"column_start":18,"column_end":24},"name":"offset","qualname":"<ArrayData>::offset","value":"pub const fn offset(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the offset of this array\n","sig":null,"attributes":[{"value":"/ Returns the offset of this array","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/data.rs","byte_start":326540,"byte_end":326576,"line_start":164,"line_end":164,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/data.rs","byte_start":326581,"byte_end":326590,"line_start":165,"line_end":165,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1274},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/data.rs","byte_start":326747,"byte_end":326757,"line_start":172,"line_end":172,"column_start":18,"column_end":28},"name":"null_count","qualname":"<ArrayData>::null_count","value":"pub const fn null_count(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of nulls in this array\n","sig":null,"attributes":[{"value":"/ Returns the total number of nulls in this array","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/data.rs","byte_start":326664,"byte_end":326715,"line_start":170,"line_end":170,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/data.rs","byte_start":326720,"byte_end":326729,"line_start":171,"line_end":171,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1275},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/data.rs","byte_start":326921,"byte_end":326943,"line_start":177,"line_end":177,"column_start":12,"column_end":34},"name":"get_buffer_memory_size","qualname":"<ArrayData>::get_buffer_memory_size","value":"pub fn get_buffer_memory_size(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of bytes of memory occupied by the buffers owned by this [ArrayData].\n","sig":null,"attributes":[{"value":"/ Returns the total number of bytes of memory occupied by the buffers owned by this [ArrayData].","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/data.rs","byte_start":326811,"byte_end":326909,"line_start":176,"line_end":176,"column_start":5,"column_end":103}}]},{"kind":"Method","id":{"krate":0,"index":1276},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/data.rs","byte_start":327413,"byte_end":327434,"line_start":192,"line_end":192,"column_start":12,"column_end":33},"name":"get_array_memory_size","qualname":"<ArrayData>::get_array_memory_size","value":"pub fn get_array_memory_size(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of bytes of memory occupied physically by this [ArrayData].\n","sig":null,"attributes":[{"value":"/ Returns the total number of bytes of memory occupied physically by this [ArrayData].","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/data.rs","byte_start":327313,"byte_end":327401,"line_start":191,"line_end":191,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":1277},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/data.rs","byte_start":328440,"byte_end":328445,"line_start":221,"line_end":221,"column_start":12,"column_end":17},"name":"slice","qualname":"<ArrayData>::slice","value":"pub fn slice(&Self, usize, usize) -> ArrayData","parent":null,"children":[],"decl_id":null,"docs":" Creates a zero-copy slice of itself. This creates a new [ArrayData]\n with a different offset, len and a shifted null bitmap.","sig":null,"attributes":[{"value":"/ Creates a zero-copy slice of itself. This creates a new [ArrayData]","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/data.rs","byte_start":328210,"byte_end":328281,"line_start":215,"line_end":215,"column_start":5,"column_end":76}},{"value":"/ with a different offset, len and a shifted null bitmap.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/data.rs","byte_start":328286,"byte_end":328345,"line_start":216,"line_end":216,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/data.rs","byte_start":328350,"byte_end":328353,"line_start":217,"line_end":217,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/data.rs","byte_start":328358,"byte_end":328370,"line_start":218,"line_end":218,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/data.rs","byte_start":328375,"byte_end":328378,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ Panics if `offset + length > self.len()`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/data.rs","byte_start":328383,"byte_end":328428,"line_start":220,"line_end":220,"column_start":5,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":7594},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/data.rs","byte_start":329684,"byte_end":329700,"line_start":259,"line_end":259,"column_start":12,"column_end":28},"name":"ArrayDataBuilder","qualname":"::array::data::ArrayDataBuilder","value":"ArrayDataBuilder {  }","parent":null,"children":[{"krate":0,"index":7595},{"krate":0,"index":7596},{"krate":0,"index":7597},{"krate":0,"index":7598},{"krate":0,"index":7599},{"krate":0,"index":7600},{"krate":0,"index":7601}],"decl_id":null,"docs":" Builder for `ArrayData` type\n","sig":null,"attributes":[{"value":"/ Builder for `ArrayData` type","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/data.rs","byte_start":329623,"byte_end":329655,"line_start":257,"line_end":257,"column_start":1,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1283},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/data.rs","byte_start":329950,"byte_end":329953,"line_start":271,"line_end":271,"column_start":18,"column_end":21},"name":"new","qualname":"<ArrayDataBuilder>::new","value":"pub const fn new(DataType) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/data.rs","byte_start":329923,"byte_end":329932,"line_start":270,"line_end":270,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1284},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/data.rs","byte_start":330240,"byte_end":330243,"line_start":284,"line_end":284,"column_start":18,"column_end":21},"name":"len","qualname":"<ArrayDataBuilder>::len","value":"pub const fn len(Self, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/data.rs","byte_start":330213,"byte_end":330222,"line_start":283,"line_end":283,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1285},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/data.rs","byte_start":330327,"byte_end":330342,"line_start":289,"line_end":289,"column_start":12,"column_end":27},"name":"null_bit_buffer","qualname":"<ArrayDataBuilder>::null_bit_buffer","value":"pub fn null_bit_buffer(Self, Buffer) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1286},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/data.rs","byte_start":330469,"byte_end":330475,"line_start":295,"line_end":295,"column_start":18,"column_end":24},"name":"offset","qualname":"<ArrayDataBuilder>::offset","value":"pub const fn offset(Self, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/data.rs","byte_start":330442,"byte_end":330451,"line_start":294,"line_end":294,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1287},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/data.rs","byte_start":330562,"byte_end":330569,"line_start":300,"line_end":300,"column_start":12,"column_end":19},"name":"buffers","qualname":"<ArrayDataBuilder>::buffers","value":"pub fn buffers(Self, Vec<Buffer>) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1288},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/data.rs","byte_start":330663,"byte_end":330673,"line_start":305,"line_end":305,"column_start":12,"column_end":22},"name":"add_buffer","qualname":"<ArrayDataBuilder>::add_buffer","value":"pub fn add_buffer(Self, Buffer) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1289},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/data.rs","byte_start":330766,"byte_end":330776,"line_start":310,"line_end":310,"column_start":12,"column_end":22},"name":"child_data","qualname":"<ArrayDataBuilder>::child_data","value":"pub fn child_data(Self, Vec<ArrayDataRef>) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1290},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/data.rs","byte_start":330879,"byte_end":330893,"line_start":315,"line_end":315,"column_start":12,"column_end":26},"name":"add_child_data","qualname":"<ArrayDataBuilder>::add_child_data","value":"pub fn add_child_data(Self, ArrayDataRef) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1291},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/data.rs","byte_start":330995,"byte_end":331000,"line_start":320,"line_end":320,"column_start":12,"column_end":17},"name":"build","qualname":"<ArrayDataBuilder>::build","value":"pub fn build(Self) -> ArrayDataRef","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1706},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal_json.rs","byte_start":418098,"byte_end":418107,"line_start":26,"line_end":26,"column_start":11,"column_end":20},"name":"JsonEqual","qualname":"::array::equal_json::JsonEqual","value":"JsonEqual","parent":null,"children":[{"krate":0,"index":1707},{"krate":0,"index":1708}],"decl_id":null,"docs":" Trait for comparing arrow array with json array\n","sig":null,"attributes":[{"value":"/ Trait for comparing arrow array with json array","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal_json.rs","byte_start":418036,"byte_end":418087,"line_start":25,"line_end":25,"column_start":1,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":1707},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal_json.rs","byte_start":418174,"byte_end":418185,"line_start":28,"line_end":28,"column_start":8,"column_end":19},"name":"equals_json","qualname":"::array::equal_json::JsonEqual::equals_json","value":"pub fn equals_json(&Self, &[&Value]) -> bool","parent":{"krate":0,"index":1706},"children":[],"decl_id":null,"docs":" Checks whether arrow array equals to json array.\n","sig":null,"attributes":[{"value":"/ Checks whether arrow array equals to json array.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal_json.rs","byte_start":418114,"byte_end":418166,"line_start":27,"line_end":27,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1708},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal_json.rs","byte_start":418284,"byte_end":418302,"line_start":31,"line_end":31,"column_start":8,"column_end":26},"name":"equals_json_values","qualname":"::array::equal_json::JsonEqual::equals_json_values","value":"pub fn equals_json_values(&Self, &[Value]) -> bool","parent":{"krate":0,"index":1706},"children":[],"decl_id":null,"docs":" Checks whether arrow array equals to json array.\n","sig":null,"attributes":[{"value":"/ Checks whether arrow array equals to json array.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal_json.rs","byte_start":418224,"byte_end":418276,"line_start":30,"line_end":30,"column_start":5,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":7604},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/iterator.rs","byte_start":452983,"byte_end":452996,"line_start":28,"line_end":28,"column_start":12,"column_end":25},"name":"PrimitiveIter","qualname":"::array::iterator::PrimitiveIter","value":"PrimitiveIter {  }","parent":null,"children":[{"krate":0,"index":7607},{"krate":0,"index":7608},{"krate":0,"index":7609}],"decl_id":null,"docs":" an iterator that returns Some(T) or None, that can be used on any PrimitiveArray\n","sig":null,"attributes":[{"value":"/ an iterator that returns Some(T) or None, that can be used on any PrimitiveArray","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/iterator.rs","byte_start":452803,"byte_end":452887,"line_start":25,"line_end":25,"column_start":1,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":1855},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/iterator.rs","byte_start":453203,"byte_end":453206,"line_start":36,"line_end":36,"column_start":12,"column_end":15},"name":"new","qualname":"<PrimitiveIter>::new","value":"pub fn new(&'a PrimitiveArray<T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" create a new iterator\n","sig":null,"attributes":[{"value":"/ create a new iterator","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/iterator.rs","byte_start":453166,"byte_end":453191,"line_start":35,"line_end":35,"column_start":5,"column_end":30}}]},{"kind":"Struct","id":{"krate":0,"index":7614},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/iterator.rs","byte_start":454682,"byte_end":454693,"line_start":87,"line_end":87,"column_start":12,"column_end":23},"name":"BooleanIter","qualname":"::array::iterator::BooleanIter","value":"BooleanIter {  }","parent":null,"children":[{"krate":0,"index":7616},{"krate":0,"index":7617},{"krate":0,"index":7618}],"decl_id":null,"docs":" an iterator that returns Some(bool) or None.\n","sig":null,"attributes":[{"value":"/ an iterator that returns Some(bool) or None.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/iterator.rs","byte_start":454538,"byte_end":454586,"line_start":84,"line_end":84,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1871},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/iterator.rs","byte_start":454844,"byte_end":454847,"line_start":95,"line_end":95,"column_start":12,"column_end":15},"name":"new","qualname":"<BooleanIter>::new","value":"pub fn new(&'a BooleanArray) -> Self","parent":null,"children":[],"decl_id":null,"docs":" create a new iterator\n","sig":null,"attributes":[{"value":"/ create a new iterator","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/iterator.rs","byte_start":454807,"byte_end":454832,"line_start":94,"line_end":94,"column_start":5,"column_end":30}}]},{"kind":"Struct","id":{"krate":0,"index":7622},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/iterator.rs","byte_start":456177,"byte_end":456194,"line_start":145,"line_end":145,"column_start":12,"column_end":29},"name":"GenericStringIter","qualname":"::array::iterator::GenericStringIter","value":"GenericStringIter {  }","parent":null,"children":[{"krate":0,"index":7625},{"krate":0,"index":7626},{"krate":0,"index":7627}],"decl_id":null,"docs":" an iterator that returns `Some(&str)` or `None`, for string arrays\n","sig":null,"attributes":[{"value":"/ an iterator that returns `Some(&str)` or `None`, for string arrays","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/iterator.rs","byte_start":456078,"byte_end":456148,"line_start":143,"line_end":143,"column_start":1,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":1885},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/iterator.rs","byte_start":456414,"byte_end":456417,"line_start":156,"line_end":156,"column_start":12,"column_end":15},"name":"new","qualname":"<GenericStringIter>::new","value":"pub fn new(&'a GenericStringArray<T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" create a new iterator\n","sig":null,"attributes":[{"value":"/ create a new iterator","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/iterator.rs","byte_start":456377,"byte_end":456402,"line_start":155,"line_end":155,"column_start":5,"column_end":30}}]},{"kind":"Struct","id":{"krate":0,"index":7632},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/iterator.rs","byte_start":457339,"byte_end":457356,"line_start":194,"line_end":194,"column_start":12,"column_end":29},"name":"GenericBinaryIter","qualname":"::array::iterator::GenericBinaryIter","value":"GenericBinaryIter {  }","parent":null,"children":[{"krate":0,"index":7635},{"krate":0,"index":7636},{"krate":0,"index":7637}],"decl_id":null,"docs":" an iterator that returns `Some(&[u8])` or `None`, for binary arrays\n","sig":null,"attributes":[{"value":"/ an iterator that returns `Some(&[u8])` or `None`, for binary arrays","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/iterator.rs","byte_start":457239,"byte_end":457310,"line_start":192,"line_end":192,"column_start":1,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":1898},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/iterator.rs","byte_start":457576,"byte_end":457579,"line_start":205,"line_end":205,"column_start":12,"column_end":15},"name":"new","qualname":"<GenericBinaryIter>::new","value":"pub fn new(&'a GenericBinaryArray<T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" create a new iterator\n","sig":null,"attributes":[{"value":"/ create a new iterator","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/iterator.rs","byte_start":457539,"byte_end":457564,"line_start":204,"line_end":204,"column_start":5,"column_end":30}}]},{"kind":"Struct","id":{"krate":0,"index":1929},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/null.rs","byte_start":462365,"byte_end":462374,"line_start":45,"line_end":45,"column_start":12,"column_end":21},"name":"NullArray","qualname":"::array::null::NullArray","value":"NullArray {  }","parent":null,"children":[{"krate":0,"index":1930}],"decl_id":null,"docs":" An Array where all elements are nulls\n","sig":null,"attributes":[{"value":"/ An Array where all elements are nulls","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/null.rs","byte_start":462312,"byte_end":462353,"line_start":44,"line_end":44,"column_start":1,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":1932},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/null.rs","byte_start":462488,"byte_end":462491,"line_start":51,"line_end":51,"column_start":12,"column_end":15},"name":"new","qualname":"<NullArray>::new","value":"pub fn new(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new null array of the specified length\n","sig":null,"attributes":[{"value":"/ Create a new null array of the specified length","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/null.rs","byte_start":462425,"byte_end":462476,"line_start":50,"line_end":50,"column_start":5,"column_end":56}}]},{"kind":"Type","id":{"krate":0,"index":1965},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/ord.rs","byte_start":466461,"byte_end":466474,"line_start":30,"line_end":30,"column_start":10,"column_end":23},"name":"DynComparator","qualname":"::array::ord::DynComparator","value":"Box<dyn Fn(usize, usize) -> Ordering + 'a>","parent":null,"children":[],"decl_id":null,"docs":" Compare the values at two arbitrary indices in two arrays.\n","sig":null,"attributes":[{"value":"/ Compare the values at two arbitrary indices in two arrays.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/ord.rs","byte_start":466389,"byte_end":466451,"line_start":29,"line_end":29,"column_start":1,"column_end":63}}]},{"kind":"Function","id":{"krate":0,"index":1988},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/ord.rs","byte_start":469757,"byte_end":469770,"line_start":128,"line_end":128,"column_start":8,"column_end":21},"name":"build_compare","qualname":"::array::ord::build_compare","value":"pub fn build_compare<'a>(&'a Array, &'a Array) -> Result<DynComparator>","parent":null,"children":[],"decl_id":null,"docs":" returns a comparison function that compares two values at two different positions\n between the two arrays.\n The arrays' types must be equal.\n # Example\n ```\n use arrow::array::{build_compare, Int32Array};","sig":null,"attributes":[{"value":"/ returns a comparison function that compares two values at two different positions","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/ord.rs","byte_start":469043,"byte_end":469128,"line_start":108,"line_end":108,"column_start":1,"column_end":86}},{"value":"/ between the two arrays.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/ord.rs","byte_start":469129,"byte_end":469156,"line_start":109,"line_end":109,"column_start":1,"column_end":28}},{"value":"/ The arrays' types must be equal.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/ord.rs","byte_start":469157,"byte_end":469193,"line_start":110,"line_end":110,"column_start":1,"column_end":37}},{"value":"/ # Example","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/ord.rs","byte_start":469194,"byte_end":469207,"line_start":111,"line_end":111,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/ord.rs","byte_start":469208,"byte_end":469215,"line_start":112,"line_end":112,"column_start":1,"column_end":8}},{"value":"/ use arrow::array::{build_compare, Int32Array};","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/ord.rs","byte_start":469216,"byte_end":469266,"line_start":113,"line_end":113,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/ord.rs","byte_start":469267,"byte_end":469270,"line_start":114,"line_end":114,"column_start":1,"column_end":4}},{"value":"/ # fn main() -> arrow::error::Result<()> {","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/ord.rs","byte_start":469271,"byte_end":469316,"line_start":115,"line_end":115,"column_start":1,"column_end":46}},{"value":"/ let array1 = Int32Array::from(vec![1, 2]);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/ord.rs","byte_start":469317,"byte_end":469363,"line_start":116,"line_end":116,"column_start":1,"column_end":47}},{"value":"/ let array2 = Int32Array::from(vec![3, 4]);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/ord.rs","byte_start":469364,"byte_end":469410,"line_start":117,"line_end":117,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/ord.rs","byte_start":469411,"byte_end":469414,"line_start":118,"line_end":118,"column_start":1,"column_end":4}},{"value":"/ let cmp = build_compare(&array1, &array2)?;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/ord.rs","byte_start":469415,"byte_end":469462,"line_start":119,"line_end":119,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/ord.rs","byte_start":469463,"byte_end":469466,"line_start":120,"line_end":120,"column_start":1,"column_end":4}},{"value":"/ // 1 (index 0 of array1) is smaller than 4 (index 1 of array2)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/ord.rs","byte_start":469467,"byte_end":469533,"line_start":121,"line_end":121,"column_start":1,"column_end":67}},{"value":"/ assert_eq!(std::cmp::Ordering::Less, (cmp)(0, 1));","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/ord.rs","byte_start":469534,"byte_end":469588,"line_start":122,"line_end":122,"column_start":1,"column_end":55}},{"value":"/ # Ok(())","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/ord.rs","byte_start":469589,"byte_end":469601,"line_start":123,"line_end":123,"column_start":1,"column_end":13}},{"value":"/ # }","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/ord.rs","byte_start":469602,"byte_end":469609,"line_start":124,"line_end":124,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/ord.rs","byte_start":469610,"byte_end":469617,"line_start":125,"line_end":125,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":2240},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/transform/mod.rs","byte_start":484141,"byte_end":484157,"line_start":141,"line_end":141,"column_start":12,"column_end":28},"name":"MutableArrayData","qualname":"::array::transform::MutableArrayData","value":"MutableArrayData {  }","parent":null,"children":[{"krate":0,"index":2242},{"krate":0,"index":2243},{"krate":0,"index":2244},{"krate":0,"index":2245},{"krate":0,"index":2246},{"krate":0,"index":2247}],"decl_id":null,"docs":" Struct to efficiently and interactively create an [ArrayData] from an existing [ArrayData] by\n copying chunks.\n The main use case of this struct is to perform unary operations to arrays of arbitrary types, such as `filter` and `take`.\n # Example:","sig":null,"attributes":[{"value":"/ Struct to efficiently and interactively create an [ArrayData] from an existing [ArrayData] by","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/transform/mod.rs","byte_start":483118,"byte_end":483215,"line_start":121,"line_end":121,"column_start":1,"column_end":98}},{"value":"/ copying chunks.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/transform/mod.rs","byte_start":483216,"byte_end":483235,"line_start":122,"line_end":122,"column_start":1,"column_end":20}},{"value":"/ The main use case of this struct is to perform unary operations to arrays of arbitrary types, such as `filter` and `take`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/transform/mod.rs","byte_start":483236,"byte_end":483362,"line_start":123,"line_end":123,"column_start":1,"column_end":127}},{"value":"/ # Example:","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/transform/mod.rs","byte_start":483363,"byte_end":483377,"line_start":124,"line_end":124,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/transform/mod.rs","byte_start":483378,"byte_end":483381,"line_start":125,"line_end":125,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/transform/mod.rs","byte_start":483382,"byte_end":483389,"line_start":126,"line_end":126,"column_start":1,"column_end":8}},{"value":"/ use std::sync::Arc;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/transform/mod.rs","byte_start":483390,"byte_end":483413,"line_start":127,"line_end":127,"column_start":1,"column_end":24}},{"value":"/ use arrow::{array::{Int32Array, Array, MutableArrayData}};","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/transform/mod.rs","byte_start":483414,"byte_end":483476,"line_start":128,"line_end":128,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/transform/mod.rs","byte_start":483477,"byte_end":483480,"line_start":129,"line_end":129,"column_start":1,"column_end":4}},{"value":"/ let array = Int32Array::from(vec![1, 2, 3, 4, 5]).data();","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/transform/mod.rs","byte_start":483481,"byte_end":483542,"line_start":130,"line_end":130,"column_start":1,"column_end":62}},{"value":"/ // Create a new `MutableArrayData` from an array and with a capacity of 4.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/transform/mod.rs","byte_start":483543,"byte_end":483621,"line_start":131,"line_end":131,"column_start":1,"column_end":79}},{"value":"/ // Capacity here is equivalent to `Vec::with_capacity`","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/transform/mod.rs","byte_start":483622,"byte_end":483680,"line_start":132,"line_end":132,"column_start":1,"column_end":59}},{"value":"/ let arrays = vec![array.as_ref()];","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/transform/mod.rs","byte_start":483681,"byte_end":483719,"line_start":133,"line_end":133,"column_start":1,"column_end":39}},{"value":"/ let mut mutable = MutableArrayData::new(arrays, false, 4);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/transform/mod.rs","byte_start":483720,"byte_end":483782,"line_start":134,"line_end":134,"column_start":1,"column_end":63}},{"value":"/ mutable.extend(0, 1, 3); // extend from the slice [1..3], [2,3]","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/transform/mod.rs","byte_start":483783,"byte_end":483850,"line_start":135,"line_end":135,"column_start":1,"column_end":68}},{"value":"/ mutable.extend(0, 0, 3); // extend from the slice [0..3], [1,2,3]","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/transform/mod.rs","byte_start":483851,"byte_end":483920,"line_start":136,"line_end":136,"column_start":1,"column_end":70}},{"value":"/ // `.freeze()` to convert `MutableArrayData` into a `ArrayData`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/transform/mod.rs","byte_start":483921,"byte_end":483989,"line_start":137,"line_end":137,"column_start":1,"column_end":69}},{"value":"/ let new_array = Int32Array::from(Arc::new(mutable.freeze()));","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/transform/mod.rs","byte_start":483990,"byte_end":484055,"line_start":138,"line_end":138,"column_start":1,"column_end":66}},{"value":"/ assert_eq!(Int32Array::from(vec![2, 3, 1, 2, 3]), new_array);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/transform/mod.rs","byte_start":484056,"byte_end":484121,"line_start":139,"line_end":139,"column_start":1,"column_end":66}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/transform/mod.rs","byte_start":484122,"byte_end":484129,"line_start":140,"line_end":140,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":2257},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/transform/mod.rs","byte_start":491201,"byte_end":491204,"line_start":286,"line_end":286,"column_start":12,"column_end":15},"name":"new","qualname":"<MutableArrayData>::new","value":"pub fn new(Vec<&'a ArrayData>, bool, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" returns a new [MutableArrayData] with capacity to `capacity` slots and specialized to create an\n [ArrayData] from multiple `arrays`.","sig":null,"attributes":[{"value":"/ returns a new [MutableArrayData] with capacity to `capacity` slots and specialized to create an","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/transform/mod.rs","byte_start":490713,"byte_end":490812,"line_start":280,"line_end":280,"column_start":5,"column_end":104}},{"value":"/ [ArrayData] from multiple `arrays`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/transform/mod.rs","byte_start":490817,"byte_end":490856,"line_start":281,"line_end":281,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/transform/mod.rs","byte_start":490861,"byte_end":490864,"line_start":282,"line_end":282,"column_start":5,"column_end":8}},{"value":"/ `use_nulls` is a flag used to optimize insertions. It should be `false` if the only source of nulls","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/transform/mod.rs","byte_start":490869,"byte_end":490972,"line_start":283,"line_end":283,"column_start":5,"column_end":108}},{"value":"/ are the arrays themselves and `true` if the user plans to call [MutableArrayData::extend_nulls].","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/transform/mod.rs","byte_start":490977,"byte_end":491077,"line_start":284,"line_end":284,"column_start":5,"column_end":105}},{"value":"/ In other words, if `use_nulls` is `false`, calling [MutableArrayData::extend_nulls] should not be used.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/transform/mod.rs","byte_start":491082,"byte_end":491189,"line_start":285,"line_end":285,"column_start":5,"column_end":112}}]},{"kind":"Method","id":{"krate":0,"index":2265},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/transform/mod.rs","byte_start":500490,"byte_end":500496,"line_start":517,"line_end":517,"column_start":12,"column_end":18},"name":"extend","qualname":"<MutableArrayData>::extend","value":"pub fn extend(&mut Self, usize, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Extends this [MutableArrayData] with elements from the bounded [ArrayData] at `start`\n and for a size of `len`.\n # Panic\n This function panics if the range is out of bounds, i.e. if `start + len >= array.len()`.\n","sig":null,"attributes":[{"value":"/ Extends this [MutableArrayData] with elements from the bounded [ArrayData] at `start`","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/transform/mod.rs","byte_start":500242,"byte_end":500331,"line_start":513,"line_end":513,"column_start":5,"column_end":94}},{"value":"/ and for a size of `len`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/transform/mod.rs","byte_start":500336,"byte_end":500364,"line_start":514,"line_end":514,"column_start":5,"column_end":33}},{"value":"/ # Panic","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/transform/mod.rs","byte_start":500369,"byte_end":500380,"line_start":515,"line_end":515,"column_start":5,"column_end":16}},{"value":"/ This function panics if the range is out of bounds, i.e. if `start + len >= array.len()`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/transform/mod.rs","byte_start":500385,"byte_end":500478,"line_start":516,"line_end":516,"column_start":5,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":2266},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/transform/mod.rs","byte_start":500859,"byte_end":500871,"line_start":525,"line_end":525,"column_start":12,"column_end":24},"name":"extend_nulls","qualname":"<MutableArrayData>::extend_nulls","value":"pub fn extend_nulls(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Extends this [MutableArrayData] with null elements, disregarding the bound arrays\n","sig":null,"attributes":[{"value":"/ Extends this [MutableArrayData] with null elements, disregarding the bound arrays","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/transform/mod.rs","byte_start":500762,"byte_end":500847,"line_start":524,"line_end":524,"column_start":5,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":2267},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/transform/mod.rs","byte_start":501122,"byte_end":501128,"line_start":532,"line_end":532,"column_start":12,"column_end":18},"name":"freeze","qualname":"<MutableArrayData>::freeze","value":"pub fn freeze(Self) -> ArrayData","parent":null,"children":[],"decl_id":null,"docs":" Creates a [ArrayData] from the pushed regions up to this point, consuming `self`.\n","sig":null,"attributes":[{"value":"/ Creates a [ArrayData] from the pushed regions up to this point, consuming `self`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/transform/mod.rs","byte_start":501025,"byte_end":501110,"line_start":531,"line_end":531,"column_start":5,"column_end":90}}]},{"kind":"Type","id":{"krate":0,"index":2332},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":12506,"byte_end":12515,"line_start":134,"line_end":134,"column_start":10,"column_end":19},"name":"Int8Array","qualname":"::array::Int8Array","value":"PrimitiveArray<Int8Type>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2333},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":12553,"byte_end":12563,"line_start":135,"line_end":135,"column_start":10,"column_end":20},"name":"Int16Array","qualname":"::array::Int16Array","value":"PrimitiveArray<Int16Type>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2334},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":12602,"byte_end":12612,"line_start":136,"line_end":136,"column_start":10,"column_end":20},"name":"Int32Array","qualname":"::array::Int32Array","value":"PrimitiveArray<Int32Type>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2335},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":12651,"byte_end":12661,"line_start":137,"line_end":137,"column_start":10,"column_end":20},"name":"Int64Array","qualname":"::array::Int64Array","value":"PrimitiveArray<Int64Type>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2336},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":12700,"byte_end":12710,"line_start":138,"line_end":138,"column_start":10,"column_end":20},"name":"UInt8Array","qualname":"::array::UInt8Array","value":"PrimitiveArray<UInt8Type>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2337},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":12749,"byte_end":12760,"line_start":139,"line_end":139,"column_start":10,"column_end":21},"name":"UInt16Array","qualname":"::array::UInt16Array","value":"PrimitiveArray<UInt16Type>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2338},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":12800,"byte_end":12811,"line_start":140,"line_end":140,"column_start":10,"column_end":21},"name":"UInt32Array","qualname":"::array::UInt32Array","value":"PrimitiveArray<UInt32Type>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2339},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":12851,"byte_end":12862,"line_start":141,"line_end":141,"column_start":10,"column_end":21},"name":"UInt64Array","qualname":"::array::UInt64Array","value":"PrimitiveArray<UInt64Type>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2340},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":12902,"byte_end":12914,"line_start":142,"line_end":142,"column_start":10,"column_end":22},"name":"Float32Array","qualname":"::array::Float32Array","value":"PrimitiveArray<Float32Type>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2341},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":12955,"byte_end":12967,"line_start":143,"line_end":143,"column_start":10,"column_end":22},"name":"Float64Array","qualname":"::array::Float64Array","value":"PrimitiveArray<Float64Type>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2342},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":13009,"byte_end":13028,"line_start":145,"line_end":145,"column_start":10,"column_end":29},"name":"Int8DictionaryArray","qualname":"::array::Int8DictionaryArray","value":"DictionaryArray<Int8Type>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2343},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":13067,"byte_end":13087,"line_start":146,"line_end":146,"column_start":10,"column_end":30},"name":"Int16DictionaryArray","qualname":"::array::Int16DictionaryArray","value":"DictionaryArray<Int16Type>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2344},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":13127,"byte_end":13147,"line_start":147,"line_end":147,"column_start":10,"column_end":30},"name":"Int32DictionaryArray","qualname":"::array::Int32DictionaryArray","value":"DictionaryArray<Int32Type>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2345},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":13187,"byte_end":13207,"line_start":148,"line_end":148,"column_start":10,"column_end":30},"name":"Int64DictionaryArray","qualname":"::array::Int64DictionaryArray","value":"DictionaryArray<Int64Type>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2346},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":13247,"byte_end":13267,"line_start":149,"line_end":149,"column_start":10,"column_end":30},"name":"UInt8DictionaryArray","qualname":"::array::UInt8DictionaryArray","value":"DictionaryArray<UInt8Type>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2347},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":13307,"byte_end":13328,"line_start":150,"line_end":150,"column_start":10,"column_end":31},"name":"UInt16DictionaryArray","qualname":"::array::UInt16DictionaryArray","value":"DictionaryArray<UInt16Type>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2348},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":13369,"byte_end":13390,"line_start":151,"line_end":151,"column_start":10,"column_end":31},"name":"UInt32DictionaryArray","qualname":"::array::UInt32DictionaryArray","value":"DictionaryArray<UInt32Type>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2349},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":13431,"byte_end":13452,"line_start":152,"line_end":152,"column_start":10,"column_end":31},"name":"UInt64DictionaryArray","qualname":"::array::UInt64DictionaryArray","value":"DictionaryArray<UInt64Type>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2350},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":13494,"byte_end":13514,"line_start":154,"line_end":154,"column_start":10,"column_end":30},"name":"TimestampSecondArray","qualname":"::array::TimestampSecondArray","value":"PrimitiveArray<TimestampSecondType>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2351},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":13563,"byte_end":13588,"line_start":155,"line_end":155,"column_start":10,"column_end":35},"name":"TimestampMillisecondArray","qualname":"::array::TimestampMillisecondArray","value":"PrimitiveArray<TimestampMillisecondType>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2352},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":13642,"byte_end":13667,"line_start":156,"line_end":156,"column_start":10,"column_end":35},"name":"TimestampMicrosecondArray","qualname":"::array::TimestampMicrosecondArray","value":"PrimitiveArray<TimestampMicrosecondType>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2353},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":13721,"byte_end":13745,"line_start":157,"line_end":157,"column_start":10,"column_end":34},"name":"TimestampNanosecondArray","qualname":"::array::TimestampNanosecondArray","value":"PrimitiveArray<TimestampNanosecondType>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2354},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":13798,"byte_end":13809,"line_start":158,"line_end":158,"column_start":10,"column_end":21},"name":"Date32Array","qualname":"::array::Date32Array","value":"PrimitiveArray<Date32Type>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2355},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":13849,"byte_end":13860,"line_start":159,"line_end":159,"column_start":10,"column_end":21},"name":"Date64Array","qualname":"::array::Date64Array","value":"PrimitiveArray<Date64Type>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2356},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":13900,"byte_end":13917,"line_start":160,"line_end":160,"column_start":10,"column_end":27},"name":"Time32SecondArray","qualname":"::array::Time32SecondArray","value":"PrimitiveArray<Time32SecondType>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2357},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":13963,"byte_end":13985,"line_start":161,"line_end":161,"column_start":10,"column_end":32},"name":"Time32MillisecondArray","qualname":"::array::Time32MillisecondArray","value":"PrimitiveArray<Time32MillisecondType>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2358},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":14036,"byte_end":14058,"line_start":162,"line_end":162,"column_start":10,"column_end":32},"name":"Time64MicrosecondArray","qualname":"::array::Time64MicrosecondArray","value":"PrimitiveArray<Time64MicrosecondType>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2359},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":14109,"byte_end":14130,"line_start":163,"line_end":163,"column_start":10,"column_end":31},"name":"Time64NanosecondArray","qualname":"::array::Time64NanosecondArray","value":"PrimitiveArray<Time64NanosecondType>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2360},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":14180,"byte_end":14202,"line_start":164,"line_end":164,"column_start":10,"column_end":32},"name":"IntervalYearMonthArray","qualname":"::array::IntervalYearMonthArray","value":"PrimitiveArray<IntervalYearMonthType>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2361},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":14253,"byte_end":14273,"line_start":165,"line_end":165,"column_start":10,"column_end":30},"name":"IntervalDayTimeArray","qualname":"::array::IntervalDayTimeArray","value":"PrimitiveArray<IntervalDayTimeType>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2362},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":14322,"byte_end":14341,"line_start":166,"line_end":166,"column_start":10,"column_end":29},"name":"DurationSecondArray","qualname":"::array::DurationSecondArray","value":"PrimitiveArray<DurationSecondType>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2363},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":14389,"byte_end":14413,"line_start":167,"line_end":167,"column_start":10,"column_end":34},"name":"DurationMillisecondArray","qualname":"::array::DurationMillisecondArray","value":"PrimitiveArray<DurationMillisecondType>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2364},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":14466,"byte_end":14490,"line_start":168,"line_end":168,"column_start":10,"column_end":34},"name":"DurationMicrosecondArray","qualname":"::array::DurationMicrosecondArray","value":"PrimitiveArray<DurationMicrosecondType>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2365},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":14543,"byte_end":14566,"line_start":169,"line_end":169,"column_start":10,"column_end":33},"name":"DurationNanosecondArray","qualname":"::array::DurationNanosecondArray","value":"PrimitiveArray<DurationNanosecondType>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2390},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":15051,"byte_end":15068,"line_start":183,"line_end":183,"column_start":10,"column_end":27},"name":"Int8BufferBuilder","qualname":"::array::Int8BufferBuilder","value":"BufferBuilder<i8>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2391},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":15099,"byte_end":15117,"line_start":184,"line_end":184,"column_start":10,"column_end":28},"name":"Int16BufferBuilder","qualname":"::array::Int16BufferBuilder","value":"BufferBuilder<i16>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2392},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":15149,"byte_end":15167,"line_start":185,"line_end":185,"column_start":10,"column_end":28},"name":"Int32BufferBuilder","qualname":"::array::Int32BufferBuilder","value":"BufferBuilder<i32>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2393},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":15199,"byte_end":15217,"line_start":186,"line_end":186,"column_start":10,"column_end":28},"name":"Int64BufferBuilder","qualname":"::array::Int64BufferBuilder","value":"BufferBuilder<i64>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2394},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":15249,"byte_end":15267,"line_start":187,"line_end":187,"column_start":10,"column_end":28},"name":"UInt8BufferBuilder","qualname":"::array::UInt8BufferBuilder","value":"BufferBuilder<u8>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2395},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":15298,"byte_end":15317,"line_start":188,"line_end":188,"column_start":10,"column_end":29},"name":"UInt16BufferBuilder","qualname":"::array::UInt16BufferBuilder","value":"BufferBuilder<u16>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2396},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":15349,"byte_end":15368,"line_start":189,"line_end":189,"column_start":10,"column_end":29},"name":"UInt32BufferBuilder","qualname":"::array::UInt32BufferBuilder","value":"BufferBuilder<u32>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2397},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":15400,"byte_end":15419,"line_start":190,"line_end":190,"column_start":10,"column_end":29},"name":"UInt64BufferBuilder","qualname":"::array::UInt64BufferBuilder","value":"BufferBuilder<u64>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2398},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":15451,"byte_end":15471,"line_start":191,"line_end":191,"column_start":10,"column_end":30},"name":"Float32BufferBuilder","qualname":"::array::Float32BufferBuilder","value":"BufferBuilder<f32>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2399},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":15503,"byte_end":15523,"line_start":192,"line_end":192,"column_start":10,"column_end":30},"name":"Float64BufferBuilder","qualname":"::array::Float64BufferBuilder","value":"BufferBuilder<f64>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2400},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":15556,"byte_end":15584,"line_start":194,"line_end":194,"column_start":10,"column_end":38},"name":"TimestampSecondBufferBuilder","qualname":"::array::TimestampSecondBufferBuilder","value":"BufferBuilder<TimestampSecondType>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2401},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":15632,"byte_end":15665,"line_start":195,"line_end":195,"column_start":10,"column_end":43},"name":"TimestampMillisecondBufferBuilder","qualname":"::array::TimestampMillisecondBufferBuilder","value":"BufferBuilder<TimestampMillisecondType>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2402},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":15718,"byte_end":15751,"line_start":196,"line_end":196,"column_start":10,"column_end":43},"name":"TimestampMicrosecondBufferBuilder","qualname":"::array::TimestampMicrosecondBufferBuilder","value":"BufferBuilder<TimestampMicrosecondType>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2403},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":15804,"byte_end":15836,"line_start":197,"line_end":197,"column_start":10,"column_end":42},"name":"TimestampNanosecondBufferBuilder","qualname":"::array::TimestampNanosecondBufferBuilder","value":"BufferBuilder<TimestampNanosecondType>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2404},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":15888,"byte_end":15907,"line_start":198,"line_end":198,"column_start":10,"column_end":29},"name":"Date32BufferBuilder","qualname":"::array::Date32BufferBuilder","value":"BufferBuilder<Date32Type>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2405},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":15946,"byte_end":15965,"line_start":199,"line_end":199,"column_start":10,"column_end":29},"name":"Date64BufferBuilder","qualname":"::array::Date64BufferBuilder","value":"BufferBuilder<Date64Type>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2406},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":16004,"byte_end":16029,"line_start":200,"line_end":200,"column_start":10,"column_end":35},"name":"Time32SecondBufferBuilder","qualname":"::array::Time32SecondBufferBuilder","value":"BufferBuilder<Time32SecondType>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2407},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":16074,"byte_end":16104,"line_start":201,"line_end":201,"column_start":10,"column_end":40},"name":"Time32MillisecondBufferBuilder","qualname":"::array::Time32MillisecondBufferBuilder","value":"BufferBuilder<Time32MillisecondType>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2408},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":16154,"byte_end":16184,"line_start":202,"line_end":202,"column_start":10,"column_end":40},"name":"Time64MicrosecondBufferBuilder","qualname":"::array::Time64MicrosecondBufferBuilder","value":"BufferBuilder<Time64MicrosecondType>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2409},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":16234,"byte_end":16263,"line_start":203,"line_end":203,"column_start":10,"column_end":39},"name":"Time64NanosecondBufferBuilder","qualname":"::array::Time64NanosecondBufferBuilder","value":"BufferBuilder<Time64NanosecondType>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2410},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":16312,"byte_end":16342,"line_start":204,"line_end":204,"column_start":10,"column_end":40},"name":"IntervalYearMonthBufferBuilder","qualname":"::array::IntervalYearMonthBufferBuilder","value":"BufferBuilder<IntervalYearMonthType>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2411},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":16392,"byte_end":16420,"line_start":205,"line_end":205,"column_start":10,"column_end":38},"name":"IntervalDayTimeBufferBuilder","qualname":"::array::IntervalDayTimeBufferBuilder","value":"BufferBuilder<IntervalDayTimeType>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2412},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":16468,"byte_end":16495,"line_start":206,"line_end":206,"column_start":10,"column_end":37},"name":"DurationSecondBufferBuilder","qualname":"::array::DurationSecondBufferBuilder","value":"BufferBuilder<DurationSecondType>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2413},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":16542,"byte_end":16574,"line_start":207,"line_end":207,"column_start":10,"column_end":42},"name":"DurationMillisecondBufferBuilder","qualname":"::array::DurationMillisecondBufferBuilder","value":"BufferBuilder<DurationMillisecondType>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2414},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":16626,"byte_end":16658,"line_start":208,"line_end":208,"column_start":10,"column_end":42},"name":"DurationMicrosecondBufferBuilder","qualname":"::array::DurationMicrosecondBufferBuilder","value":"BufferBuilder<DurationMicrosecondType>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2415},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":16710,"byte_end":16741,"line_start":209,"line_end":209,"column_start":10,"column_end":41},"name":"DurationNanosecondBufferBuilder","qualname":"::array::DurationNanosecondBufferBuilder","value":"BufferBuilder<DurationNanosecondType>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2464},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":17455,"byte_end":17466,"line_start":228,"line_end":228,"column_start":10,"column_end":21},"name":"Int8Builder","qualname":"::array::Int8Builder","value":"PrimitiveBuilder<Int8Type>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2465},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":17506,"byte_end":17518,"line_start":229,"line_end":229,"column_start":10,"column_end":22},"name":"Int16Builder","qualname":"::array::Int16Builder","value":"PrimitiveBuilder<Int16Type>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2466},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":17559,"byte_end":17571,"line_start":230,"line_end":230,"column_start":10,"column_end":22},"name":"Int32Builder","qualname":"::array::Int32Builder","value":"PrimitiveBuilder<Int32Type>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2467},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":17612,"byte_end":17624,"line_start":231,"line_end":231,"column_start":10,"column_end":22},"name":"Int64Builder","qualname":"::array::Int64Builder","value":"PrimitiveBuilder<Int64Type>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2468},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":17665,"byte_end":17677,"line_start":232,"line_end":232,"column_start":10,"column_end":22},"name":"UInt8Builder","qualname":"::array::UInt8Builder","value":"PrimitiveBuilder<UInt8Type>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2469},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":17718,"byte_end":17731,"line_start":233,"line_end":233,"column_start":10,"column_end":23},"name":"UInt16Builder","qualname":"::array::UInt16Builder","value":"PrimitiveBuilder<UInt16Type>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2470},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":17773,"byte_end":17786,"line_start":234,"line_end":234,"column_start":10,"column_end":23},"name":"UInt32Builder","qualname":"::array::UInt32Builder","value":"PrimitiveBuilder<UInt32Type>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2471},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":17828,"byte_end":17841,"line_start":235,"line_end":235,"column_start":10,"column_end":23},"name":"UInt64Builder","qualname":"::array::UInt64Builder","value":"PrimitiveBuilder<UInt64Type>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2472},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":17883,"byte_end":17897,"line_start":236,"line_end":236,"column_start":10,"column_end":24},"name":"Float32Builder","qualname":"::array::Float32Builder","value":"PrimitiveBuilder<Float32Type>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2473},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":17940,"byte_end":17954,"line_start":237,"line_end":237,"column_start":10,"column_end":24},"name":"Float64Builder","qualname":"::array::Float64Builder","value":"PrimitiveBuilder<Float64Type>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2474},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":17998,"byte_end":18020,"line_start":239,"line_end":239,"column_start":10,"column_end":32},"name":"TimestampSecondBuilder","qualname":"::array::TimestampSecondBuilder","value":"PrimitiveBuilder<TimestampSecondType>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2475},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":18071,"byte_end":18098,"line_start":240,"line_end":240,"column_start":10,"column_end":37},"name":"TimestampMillisecondBuilder","qualname":"::array::TimestampMillisecondBuilder","value":"PrimitiveBuilder<TimestampMillisecondType>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2476},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":18154,"byte_end":18181,"line_start":241,"line_end":241,"column_start":10,"column_end":37},"name":"TimestampMicrosecondBuilder","qualname":"::array::TimestampMicrosecondBuilder","value":"PrimitiveBuilder<TimestampMicrosecondType>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2477},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":18237,"byte_end":18263,"line_start":242,"line_end":242,"column_start":10,"column_end":36},"name":"TimestampNanosecondBuilder","qualname":"::array::TimestampNanosecondBuilder","value":"PrimitiveBuilder<TimestampNanosecondType>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2478},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":18318,"byte_end":18331,"line_start":243,"line_end":243,"column_start":10,"column_end":23},"name":"Date32Builder","qualname":"::array::Date32Builder","value":"PrimitiveBuilder<Date32Type>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2479},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":18373,"byte_end":18386,"line_start":244,"line_end":244,"column_start":10,"column_end":23},"name":"Date64Builder","qualname":"::array::Date64Builder","value":"PrimitiveBuilder<Date64Type>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2480},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":18428,"byte_end":18447,"line_start":245,"line_end":245,"column_start":10,"column_end":29},"name":"Time32SecondBuilder","qualname":"::array::Time32SecondBuilder","value":"PrimitiveBuilder<Time32SecondType>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2481},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":18495,"byte_end":18519,"line_start":246,"line_end":246,"column_start":10,"column_end":34},"name":"Time32MillisecondBuilder","qualname":"::array::Time32MillisecondBuilder","value":"PrimitiveBuilder<Time32MillisecondType>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2482},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":18572,"byte_end":18596,"line_start":247,"line_end":247,"column_start":10,"column_end":34},"name":"Time64MicrosecondBuilder","qualname":"::array::Time64MicrosecondBuilder","value":"PrimitiveBuilder<Time64MicrosecondType>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2483},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":18649,"byte_end":18672,"line_start":248,"line_end":248,"column_start":10,"column_end":33},"name":"Time64NanosecondBuilder","qualname":"::array::Time64NanosecondBuilder","value":"PrimitiveBuilder<Time64NanosecondType>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2484},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":18724,"byte_end":18748,"line_start":249,"line_end":249,"column_start":10,"column_end":34},"name":"IntervalYearMonthBuilder","qualname":"::array::IntervalYearMonthBuilder","value":"PrimitiveBuilder<IntervalYearMonthType>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2485},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":18801,"byte_end":18823,"line_start":250,"line_end":250,"column_start":10,"column_end":32},"name":"IntervalDayTimeBuilder","qualname":"::array::IntervalDayTimeBuilder","value":"PrimitiveBuilder<IntervalDayTimeType>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2486},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":18874,"byte_end":18895,"line_start":251,"line_end":251,"column_start":10,"column_end":31},"name":"DurationSecondBuilder","qualname":"::array::DurationSecondBuilder","value":"PrimitiveBuilder<DurationSecondType>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2487},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":18945,"byte_end":18971,"line_start":252,"line_end":252,"column_start":10,"column_end":36},"name":"DurationMillisecondBuilder","qualname":"::array::DurationMillisecondBuilder","value":"PrimitiveBuilder<DurationMillisecondType>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2488},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":19026,"byte_end":19052,"line_start":253,"line_end":253,"column_start":10,"column_end":36},"name":"DurationMicrosecondBuilder","qualname":"::array::DurationMicrosecondBuilder","value":"PrimitiveBuilder<DurationMicrosecondType>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2489},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/mod.rs","byte_start":19107,"byte_end":19132,"line_start":254,"line_end":254,"column_start":10,"column_end":35},"name":"DurationNanosecondBuilder","qualname":"::array::DurationNanosecondBuilder","value":"PrimitiveBuilder<DurationNanosecondType>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":2532},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/bitmap.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"bitmap","qualname":"::bitmap","value":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/bitmap.rs","parent":null,"children":[{"krate":0,"index":2533},{"krate":0,"index":2536},{"krate":0,"index":2539},{"krate":0,"index":2542},{"krate":0,"index":2545},{"krate":0,"index":2546},{"krate":0,"index":2549},{"krate":0,"index":7654},{"krate":0,"index":7656},{"krate":0,"index":7658},{"krate":0,"index":2552},{"krate":0,"index":2561},{"krate":0,"index":2566},{"krate":0,"index":2571},{"krate":0,"index":2573}],"decl_id":null,"docs":" Defines a bitmap, which is used to track which values in an Arrow array are null.\n This is called a \"validity bitmap\" in the Arrow documentation.\n","sig":null,"attributes":[{"value":"/ Defines a bitmap, which is used to track which values in an Arrow array are null.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/bitmap.rs","byte_start":546055,"byte_end":546140,"line_start":18,"line_end":18,"column_start":1,"column_end":86}},{"value":"/ This is called a \"validity bitmap\" in the Arrow documentation.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/bitmap.rs","byte_start":546141,"byte_end":546207,"line_start":19,"line_end":19,"column_start":1,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":7654},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/bitmap.rs","byte_start":546371,"byte_end":546377,"line_start":29,"line_end":29,"column_start":12,"column_end":18},"name":"Bitmap","qualname":"::bitmap::Bitmap","value":"Bitmap {  }","parent":null,"children":[{"krate":0,"index":7655}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2553},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/bitmap.rs","byte_start":546437,"byte_end":546440,"line_start":34,"line_end":34,"column_start":12,"column_end":15},"name":"new","qualname":"<Bitmap>::new","value":"pub fn new(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2554},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/bitmap.rs","byte_start":546783,"byte_end":546786,"line_start":47,"line_end":47,"column_start":12,"column_end":15},"name":"len","qualname":"<Bitmap>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2555},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/bitmap.rs","byte_start":546847,"byte_end":546855,"line_start":51,"line_end":51,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Bitmap>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2556},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/bitmap.rs","byte_start":546920,"byte_end":546926,"line_start":55,"line_end":55,"column_start":12,"column_end":18},"name":"is_set","qualname":"<Bitmap>::is_set","value":"pub fn is_set(&Self, usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2557},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/bitmap.rs","byte_start":547081,"byte_end":547091,"line_start":60,"line_end":60,"column_start":12,"column_end":22},"name":"buffer_ref","qualname":"<Bitmap>::buffer_ref","value":"pub fn buffer_ref(&Self) -> &Buffer","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2558},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/bitmap.rs","byte_start":547149,"byte_end":547160,"line_start":64,"line_end":64,"column_start":12,"column_end":23},"name":"into_buffer","qualname":"<Bitmap>::into_buffer","value":"pub fn into_buffer(Self) -> Buffer","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2559},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/bitmap.rs","byte_start":547315,"byte_end":547337,"line_start":69,"line_end":69,"column_start":12,"column_end":34},"name":"get_buffer_memory_size","qualname":"<Bitmap>::get_buffer_memory_size","value":"pub fn get_buffer_memory_size(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of bytes of memory occupied by the buffers owned by this [Bitmap].\n","sig":null,"attributes":[{"value":"/ Returns the total number of bytes of memory occupied by the buffers owned by this [Bitmap].","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/bitmap.rs","byte_start":547208,"byte_end":547303,"line_start":68,"line_end":68,"column_start":5,"column_end":100}}]},{"kind":"Method","id":{"krate":0,"index":2560},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/bitmap.rs","byte_start":547493,"byte_end":547514,"line_start":74,"line_end":74,"column_start":12,"column_end":33},"name":"get_array_memory_size","qualname":"<Bitmap>::get_array_memory_size","value":"pub fn get_array_memory_size(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of bytes of memory occupied physically by this [Bitmap].\n","sig":null,"attributes":[{"value":"/ Returns the total number of bytes of memory occupied physically by this [Bitmap].","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/bitmap.rs","byte_start":547396,"byte_end":547481,"line_start":73,"line_end":73,"column_start":5,"column_end":90}}]},{"kind":"Mod","id":{"krate":0,"index":2575},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"buffer","qualname":"::buffer","value":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","parent":null,"children":[{"krate":0,"index":2576},{"krate":0,"index":2577},{"krate":0,"index":2578},{"krate":0,"index":2581},{"krate":0,"index":2584},{"krate":0,"index":2587},{"krate":0,"index":2590},{"krate":0,"index":2591},{"krate":0,"index":2593},{"krate":0,"index":2596},{"krate":0,"index":2597},{"krate":0,"index":2600},{"krate":0,"index":2603},{"krate":0,"index":2606},{"krate":0,"index":2609},{"krate":0,"index":2610},{"krate":0,"index":2613},{"krate":0,"index":2616},{"krate":0,"index":2619},{"krate":0,"index":2620},{"krate":0,"index":2623},{"krate":0,"index":2626},{"krate":0,"index":2629},{"krate":0,"index":2632},{"krate":0,"index":2635},{"krate":0,"index":7660},{"krate":0,"index":7663},{"krate":0,"index":7665},{"krate":0,"index":7666},{"krate":0,"index":7669},{"krate":0,"index":2638},{"krate":0,"index":2656},{"krate":0,"index":2659},{"krate":0,"index":2662},{"krate":0,"index":2665},{"krate":0,"index":2668},{"krate":0,"index":2670},{"krate":0,"index":2672},{"krate":0,"index":2674},{"krate":0,"index":2679},{"krate":0,"index":2684},{"krate":0,"index":2687},{"krate":0,"index":2688},{"krate":0,"index":2689},{"krate":0,"index":7671},{"krate":0,"index":7675},{"krate":0,"index":2691},{"krate":0,"index":2712},{"krate":0,"index":2715},{"krate":0,"index":2717},{"krate":0,"index":2719},{"krate":0,"index":2721},{"krate":0,"index":2722}],"decl_id":null,"docs":" The main type in the module is `Buffer`, a contiguous immutable memory region of\n fixed size aligned at a 64-byte boundary. `MutableBuffer` is like `Buffer`, but it can\n be mutated and grown.\n","sig":null,"attributes":[{"value":"/ The main type in the module is `Buffer`, a contiguous immutable memory region of","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":550646,"byte_end":550730,"line_start":18,"line_end":18,"column_start":1,"column_end":85}},{"value":"/ fixed size aligned at a 64-byte boundary. `MutableBuffer` is like `Buffer`, but it can","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":550731,"byte_end":550821,"line_start":19,"line_end":19,"column_start":1,"column_end":91}},{"value":"/ be mutated and grown.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":550822,"byte_end":550847,"line_start":20,"line_end":20,"column_start":1,"column_end":26}}]},{"kind":"Struct","id":{"krate":0,"index":7660},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":551609,"byte_end":551615,"line_start":50,"line_end":50,"column_start":12,"column_end":18},"name":"Buffer","qualname":"::buffer::Buffer","value":"Buffer {  }","parent":null,"children":[{"krate":0,"index":7661},{"krate":0,"index":7662}],"decl_id":null,"docs":" Buffer is a contiguous memory region of fixed size and is aligned at a 64-byte\n boundary. Buffer is immutable.\n","sig":null,"attributes":[{"value":"/ Buffer is a contiguous memory region of fixed size and is aligned at a 64-byte","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":551445,"byte_end":551527,"line_start":47,"line_end":47,"column_start":1,"column_end":83}},{"value":"/ boundary. Buffer is immutable.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":551528,"byte_end":551562,"line_start":48,"line_end":48,"column_start":1,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":2639},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":552379,"byte_end":552393,"line_start":72,"line_end":72,"column_start":19,"column_end":33},"name":"from_raw_parts","qualname":"<Buffer>::from_raw_parts","value":"pub unsafe fn from_raw_parts(NonNull<u8>, usize, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a buffer from an existing memory region (must already be byte-aligned), this\n `Buffer` will free this piece of memory when dropped.","sig":null,"attributes":[{"value":"/ Creates a buffer from an existing memory region (must already be byte-aligned), this","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":551780,"byte_end":551868,"line_start":59,"line_end":59,"column_start":5,"column_end":93}},{"value":"/ `Buffer` will free this piece of memory when dropped.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":551873,"byte_end":551930,"line_start":60,"line_end":60,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":551935,"byte_end":551938,"line_start":61,"line_end":61,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":551943,"byte_end":551958,"line_start":62,"line_end":62,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":551963,"byte_end":551966,"line_start":63,"line_end":63,"column_start":5,"column_end":8}},{"value":"/ * `ptr` - Pointer to raw parts","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":551971,"byte_end":552005,"line_start":64,"line_end":64,"column_start":5,"column_end":39}},{"value":"/ * `len` - Length of raw parts in **bytes**","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":552010,"byte_end":552056,"line_start":65,"line_end":65,"column_start":5,"column_end":51}},{"value":"/ * `capacity` - Total allocated memory for the pointer `ptr`, in **bytes**","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":552061,"byte_end":552138,"line_start":66,"line_end":66,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":552143,"byte_end":552146,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":552151,"byte_end":552163,"line_start":68,"line_end":68,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":552168,"byte_end":552171,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ This function is unsafe as there is no guarantee that the given pointer is valid for `len`","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":552176,"byte_end":552270,"line_start":70,"line_end":70,"column_start":5,"column_end":99}},{"value":"/ bytes. If the `ptr` and `capacity` come from a `Buffer`, then this is guaranteed.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":552275,"byte_end":552360,"line_start":71,"line_end":71,"column_start":5,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":2640},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":553133,"byte_end":553145,"line_start":90,"line_end":90,"column_start":19,"column_end":31},"name":"from_unowned","qualname":"<Buffer>::from_unowned","value":"pub unsafe fn from_unowned(NonNull<u8>, usize, Arc<ffi::FFI_ArrowArray>)\n-> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a buffer from an existing memory region (must already be byte-aligned), this\n `Buffer` **does not** free this piece of memory when dropped.","sig":null,"attributes":[{"value":"/ Creates a buffer from an existing memory region (must already be byte-aligned), this","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":552575,"byte_end":552663,"line_start":77,"line_end":77,"column_start":5,"column_end":93}},{"value":"/ `Buffer` **does not** free this piece of memory when dropped.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":552668,"byte_end":552733,"line_start":78,"line_end":78,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":552738,"byte_end":552741,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":552746,"byte_end":552761,"line_start":80,"line_end":80,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":552766,"byte_end":552769,"line_start":81,"line_end":81,"column_start":5,"column_end":8}},{"value":"/ * `ptr` - Pointer to raw parts","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":552774,"byte_end":552808,"line_start":82,"line_end":82,"column_start":5,"column_end":39}},{"value":"/ * `len` - Length of raw parts in **bytes**","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":552813,"byte_end":552859,"line_start":83,"line_end":83,"column_start":5,"column_end":51}},{"value":"/ * `data` - An [ffi::FFI_ArrowArray] with the data","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":552864,"byte_end":552917,"line_start":84,"line_end":84,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":552922,"byte_end":552925,"line_start":85,"line_end":85,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":552930,"byte_end":552942,"line_start":86,"line_end":86,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":552947,"byte_end":552950,"line_start":87,"line_end":87,"column_start":5,"column_end":8}},{"value":"/ This function is unsafe as there is no guarantee that the given pointer is valid for `len`","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":552955,"byte_end":553049,"line_start":88,"line_end":88,"column_start":5,"column_end":99}},{"value":"/ bytes and that the foreign deallocator frees the region.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":553054,"byte_end":553114,"line_start":89,"line_end":89,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":2642},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":553723,"byte_end":553726,"line_start":112,"line_end":112,"column_start":12,"column_end":15},"name":"len","qualname":"<Buffer>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes in the buffer\n","sig":null,"attributes":[{"value":"/ Returns the number of bytes in the buffer","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":553666,"byte_end":553711,"line_start":111,"line_end":111,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2643},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":553901,"byte_end":553909,"line_start":118,"line_end":118,"column_start":12,"column_end":20},"name":"capacity","qualname":"<Buffer>::capacity","value":"pub fn capacity(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the capacity of this buffer.\n For exernally owned buffers, this returns zero\n","sig":null,"attributes":[{"value":"/ Returns the capacity of this buffer.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":553794,"byte_end":553834,"line_start":116,"line_end":116,"column_start":5,"column_end":45}},{"value":"/ For exernally owned buffers, this returns zero","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":553839,"byte_end":553889,"line_start":117,"line_end":117,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":2644},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":554020,"byte_end":554028,"line_start":123,"line_end":123,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Buffer>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the buffer is empty.\n","sig":null,"attributes":[{"value":"/ Returns whether the buffer is empty.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":553968,"byte_end":554008,"line_start":122,"line_end":122,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":2645},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":554160,"byte_end":554168,"line_start":128,"line_end":128,"column_start":12,"column_end":20},"name":"as_slice","qualname":"<Buffer>::as_slice","value":"pub fn as_slice(&Self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Returns the byte slice stored in this buffer\n","sig":null,"attributes":[{"value":"/ Returns the byte slice stored in this buffer","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":554100,"byte_end":554148,"line_start":127,"line_end":127,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":2646},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":554467,"byte_end":554472,"line_start":136,"line_end":136,"column_start":12,"column_end":17},"name":"slice","qualname":"<Buffer>::slice","value":"pub fn slice(&Self, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a new [Buffer] that is a slice of this buffer starting at `offset`.\n Doing so allows the same memory region to be shared between buffers.\n # Panics\n Panics iff `offset` is larger than `len`.\n","sig":null,"attributes":[{"value":"/ Returns a new [Buffer] that is a slice of this buffer starting at `offset`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":554232,"byte_end":554311,"line_start":132,"line_end":132,"column_start":5,"column_end":84}},{"value":"/ Doing so allows the same memory region to be shared between buffers.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":554316,"byte_end":554388,"line_start":133,"line_end":133,"column_start":5,"column_end":77}},{"value":"/ # Panics","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":554393,"byte_end":554405,"line_start":134,"line_end":134,"column_start":5,"column_end":17}},{"value":"/ Panics iff `offset` is larger than `len`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":554410,"byte_end":554455,"line_start":135,"line_end":135,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2647},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":554971,"byte_end":554977,"line_start":151,"line_end":151,"column_start":12,"column_end":18},"name":"as_ptr","qualname":"<Buffer>::as_ptr","value":"pub fn as_ptr(&Self) -> *const u8","parent":null,"children":[],"decl_id":null,"docs":" Returns a pointer to the start of this buffer.","sig":null,"attributes":[{"value":"/ Returns a pointer to the start of this buffer.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":554759,"byte_end":554809,"line_start":147,"line_end":147,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":554814,"byte_end":554817,"line_start":148,"line_end":148,"column_start":5,"column_end":8}},{"value":"/ Note that this should be used cautiously, and the returned pointer should not be","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":554822,"byte_end":554906,"line_start":149,"line_end":149,"column_start":5,"column_end":89}},{"value":"/ stored anywhere, to avoid dangling pointers.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":554911,"byte_end":554959,"line_start":150,"line_end":150,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":2648},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":555614,"byte_end":555624,"line_start":165,"line_end":165,"column_start":19,"column_end":29},"name":"typed_data","qualname":"<Buffer>::typed_data","value":"pub unsafe fn typed_data<T: ArrowNativeType + num::Num>(&Self) -> &[T]","parent":null,"children":[],"decl_id":null,"docs":" View buffer as typed slice.","sig":null,"attributes":[{"value":"/ View buffer as typed slice.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":555072,"byte_end":555103,"line_start":155,"line_end":155,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":555108,"byte_end":555111,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":555116,"byte_end":555128,"line_start":157,"line_end":157,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":555133,"byte_end":555136,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ `ArrowNativeType` is public so that it can be used as a trait bound for other public","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":555141,"byte_end":555229,"line_start":159,"line_end":159,"column_start":5,"column_end":93}},{"value":"/ components, such as the `ToByteSlice` trait.  However, this means that it can be","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":555234,"byte_end":555318,"line_start":160,"line_end":160,"column_start":5,"column_end":89}},{"value":"/ implemented by user defined types, which it is not intended for.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":555323,"byte_end":555391,"line_start":161,"line_end":161,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":555396,"byte_end":555399,"line_start":162,"line_end":162,"column_start":5,"column_end":8}},{"value":"/ Also `typed_data::<bool>` is unsafe as `0x00` and `0x01` are the only valid values for","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":555404,"byte_end":555494,"line_start":163,"line_end":163,"column_start":5,"column_end":95}},{"value":"/ `bool` in Rust.  However, `bool` arrays in Arrow are bit-packed which breaks this condition.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":555499,"byte_end":555595,"line_start":164,"line_end":164,"column_start":5,"column_end":101}}]},{"kind":"Method","id":{"krate":0,"index":2650},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":556482,"byte_end":556491,"line_start":183,"line_end":183,"column_start":12,"column_end":21},"name":"bit_slice","qualname":"<Buffer>::bit_slice","value":"pub fn bit_slice(&Self, usize, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a slice of this buffer starting at a certain bit offset.\n If the offset is byte-aligned the returned buffer is a shallow clone,\n otherwise a new buffer is allocated and filled with a copy of the bits in the range.\n","sig":null,"attributes":[{"value":"/ Returns a slice of this buffer starting at a certain bit offset.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":556231,"byte_end":556299,"line_start":180,"line_end":180,"column_start":5,"column_end":73}},{"value":"/ If the offset is byte-aligned the returned buffer is a shallow clone,","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":556304,"byte_end":556377,"line_start":181,"line_end":181,"column_start":5,"column_end":78}},{"value":"/ otherwise a new buffer is allocated and filled with a copy of the bits in the range.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":556382,"byte_end":556470,"line_start":182,"line_end":182,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":2652},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":556934,"byte_end":556944,"line_start":194,"line_end":194,"column_start":12,"column_end":22},"name":"bit_chunks","qualname":"<Buffer>::bit_chunks","value":"pub fn bit_chunks(&Self, usize, usize) -> BitChunks","parent":null,"children":[],"decl_id":null,"docs":" Returns a `BitChunks` instance which can be used to iterate over this buffers bits\n in larger chunks and starting at arbitrary bit offsets.\n Note that both `offset` and `length` are measured in bits.\n","sig":null,"attributes":[{"value":"/ Returns a `BitChunks` instance which can be used to iterate over this buffers bits","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":556705,"byte_end":556791,"line_start":191,"line_end":191,"column_start":5,"column_end":91}},{"value":"/ in larger chunks and starting at arbitrary bit offsets.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":556796,"byte_end":556855,"line_start":192,"line_end":192,"column_start":5,"column_end":64}},{"value":"/ Note that both `offset` and `length` are measured in bits.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":556860,"byte_end":556922,"line_start":193,"line_end":193,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":2653},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":557119,"byte_end":557133,"line_start":199,"line_end":199,"column_start":12,"column_end":26},"name":"count_set_bits","qualname":"<Buffer>::count_set_bits","value":"pub fn count_set_bits(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of 1-bits in this buffer.\n","sig":null,"attributes":[{"value":"/ Returns the number of 1-bits in this buffer.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":557059,"byte_end":557107,"line_start":198,"line_end":198,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":2654},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":557528,"byte_end":557549,"line_start":207,"line_end":207,"column_start":12,"column_end":33},"name":"count_set_bits_offset","qualname":"<Buffer>::count_set_bits_offset","value":"pub fn count_set_bits_offset(&Self, usize, usize) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of 1-bits in this buffer, starting from `offset` with `length` bits\n inspected. Note that both `offset` and `length` are measured in bits.\n","sig":null,"attributes":[{"value":"/ Returns the number of 1-bits in this buffer, starting from `offset` with `length` bits","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":557348,"byte_end":557438,"line_start":205,"line_end":205,"column_start":5,"column_end":95}},{"value":"/ inspected. Note that both `offset` and `length` are measured in bits.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":557443,"byte_end":557516,"line_start":206,"line_end":206,"column_start":5,"column_end":78}}]},{"kind":"Struct","id":{"krate":0,"index":7671},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":572675,"byte_end":572688,"line_start":708,"line_end":708,"column_start":12,"column_end":25},"name":"MutableBuffer","qualname":"::buffer::MutableBuffer","value":"MutableBuffer {  }","parent":null,"children":[{"krate":0,"index":7672},{"krate":0,"index":7673},{"krate":0,"index":7674}],"decl_id":null,"docs":" Similar to `Buffer`, but is growable and can be mutated. A mutable buffer can be\n converted into a immutable buffer via the `into` method.\n","sig":null,"attributes":[{"value":"/ Similar to `Buffer`, but is growable and can be mutated. A mutable buffer can be","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":572501,"byte_end":572585,"line_start":705,"line_end":705,"column_start":1,"column_end":85}},{"value":"/ converted into a immutable buffer via the `into` method.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":572586,"byte_end":572646,"line_start":706,"line_end":706,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":2692},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":572897,"byte_end":572900,"line_start":717,"line_end":717,"column_start":12,"column_end":15},"name":"new","qualname":"<MutableBuffer>::new","value":"pub fn new(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allocate a new mutable buffer with initial capacity to be `capacity`.\n","sig":null,"attributes":[{"value":"/ Allocate a new mutable buffer with initial capacity to be `capacity`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":572812,"byte_end":572885,"line_start":716,"line_end":716,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":2693},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":573258,"byte_end":573266,"line_start":728,"line_end":728,"column_start":12,"column_end":20},"name":"new_null","qualname":"<MutableBuffer>::new_null","value":"pub fn new_null(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" creates a new [MutableBuffer] where every bit is initialized to `0`\n","sig":null,"attributes":[{"value":"/ creates a new [MutableBuffer] where every bit is initialized to `0`","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":573175,"byte_end":573246,"line_start":727,"line_end":727,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":2694},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":573789,"byte_end":573800,"line_start":739,"line_end":739,"column_start":12,"column_end":23},"name":"with_bitset","qualname":"<MutableBuffer>::with_bitset","value":"pub fn with_bitset(Self, usize, bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set the bits in the range of `[0, end)` to 0 (if `val` is false), or 1 (if `val`\n is true). Also extend the length of this buffer to be `end`.","sig":null,"attributes":[{"value":"/ Set the bits in the range of `[0, end)` to 0 (if `val` is false), or 1 (if `val`","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":573416,"byte_end":573500,"line_start":733,"line_end":733,"column_start":5,"column_end":89}},{"value":"/ is true). Also extend the length of this buffer to be `end`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":573505,"byte_end":573569,"line_start":734,"line_end":734,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":573574,"byte_end":573577,"line_start":735,"line_end":735,"column_start":5,"column_end":8}},{"value":"/ This is useful when one wants to clear (or set) the bits and then manipulate","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":573582,"byte_end":573662,"line_start":736,"line_end":736,"column_start":5,"column_end":85}},{"value":"/ the buffer directly (e.g., modifying the buffer by holding a mutable reference","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":573667,"byte_end":573749,"line_start":737,"line_end":737,"column_start":5,"column_end":87}},{"value":"/ from `data_mut()`).","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":573754,"byte_end":573777,"line_start":738,"line_end":738,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":2695},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":574351,"byte_end":574364,"line_start":754,"line_end":754,"column_start":12,"column_end":25},"name":"set_null_bits","qualname":"<MutableBuffer>::set_null_bits","value":"pub fn set_null_bits(&mut Self, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Ensure that `count` bytes from `start` contain zero bits","sig":null,"attributes":[{"value":"/ Ensure that `count` bytes from `start` contain zero bits","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":574068,"byte_end":574128,"line_start":749,"line_end":749,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":574133,"byte_end":574136,"line_start":750,"line_end":750,"column_start":5,"column_end":8}},{"value":"/ This is used to initialize the bits in a buffer, however, it has no impact on the","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":574141,"byte_end":574226,"line_start":751,"line_end":751,"column_start":5,"column_end":90}},{"value":"/ `len` of the buffer and so can be used to initialize the memory region from","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":574231,"byte_end":574310,"line_start":752,"line_end":752,"column_start":5,"column_end":84}},{"value":"/ `len` to `capacity`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":574315,"byte_end":574339,"line_start":753,"line_end":753,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":2696},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":574792,"byte_end":574799,"line_start":765,"line_end":765,"column_start":12,"column_end":19},"name":"reserve","qualname":"<MutableBuffer>::reserve","value":"pub fn reserve(&mut Self, usize) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Ensures that this buffer has at least `capacity` slots in this buffer. This will\n also ensure the new capacity will be a multiple of 64 bytes.","sig":null,"attributes":[{"value":"/ Ensures that this buffer has at least `capacity` slots in this buffer. This will","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":574569,"byte_end":574653,"line_start":761,"line_end":761,"column_start":5,"column_end":89}},{"value":"/ also ensure the new capacity will be a multiple of 64 bytes.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":574658,"byte_end":574722,"line_start":762,"line_end":762,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":574727,"byte_end":574730,"line_start":763,"line_end":763,"column_start":5,"column_end":8}},{"value":"/ Returns the new capacity for this buffer.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":574735,"byte_end":574780,"line_start":764,"line_end":764,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2697},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":575602,"byte_end":575608,"line_start":783,"line_end":783,"column_start":12,"column_end":18},"name":"resize","qualname":"<MutableBuffer>::resize","value":"pub fn resize(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Resizes the buffer so that the `len` will equal to the `new_len`.","sig":null,"attributes":[{"value":"/ Resizes the buffer so that the `len` will equal to the `new_len`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":575225,"byte_end":575294,"line_start":776,"line_end":776,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":575299,"byte_end":575302,"line_start":777,"line_end":777,"column_start":5,"column_end":8}},{"value":"/ If `new_len` is greater than `len`, the buffer's length is simply adjusted to be","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":575307,"byte_end":575391,"line_start":778,"line_end":778,"column_start":5,"column_end":89}},{"value":"/ the former, optionally extending the capacity. The data between `len` and","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":575396,"byte_end":575473,"line_start":779,"line_end":779,"column_start":5,"column_end":82}},{"value":"/ `new_len` will be zeroed out.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":575478,"byte_end":575511,"line_start":780,"line_end":780,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":575516,"byte_end":575519,"line_start":781,"line_end":781,"column_start":5,"column_end":8}},{"value":"/ If `new_len` is less than `len`, the buffer will be truncated.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":575524,"byte_end":575590,"line_start":782,"line_end":782,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":2698},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":576153,"byte_end":576161,"line_start":799,"line_end":799,"column_start":18,"column_end":26},"name":"is_empty","qualname":"<MutableBuffer>::is_empty","value":"pub const fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether this buffer is empty or not.\n","sig":null,"attributes":[{"value":"/ Returns whether this buffer is empty or not.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":576073,"byte_end":576121,"line_start":797,"line_end":797,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":576126,"byte_end":576135,"line_start":798,"line_end":798,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2699},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":576312,"byte_end":576315,"line_start":805,"line_end":805,"column_start":18,"column_end":21},"name":"len","qualname":"<MutableBuffer>::len","value":"pub const fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the length (the number of bytes written) in this buffer.\n","sig":null,"attributes":[{"value":"/ Returns the length (the number of bytes written) in this buffer.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":576212,"byte_end":576280,"line_start":803,"line_end":803,"column_start":5,"column_end":73}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":576285,"byte_end":576294,"line_start":804,"line_end":804,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2700},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":576440,"byte_end":576448,"line_start":811,"line_end":811,"column_start":18,"column_end":26},"name":"capacity","qualname":"<MutableBuffer>::capacity","value":"pub const fn capacity(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the total capacity in this buffer.\n","sig":null,"attributes":[{"value":"/ Returns the total capacity in this buffer.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":576362,"byte_end":576408,"line_start":809,"line_end":809,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":576413,"byte_end":576422,"line_start":810,"line_end":810,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2701},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":576557,"byte_end":576562,"line_start":816,"line_end":816,"column_start":12,"column_end":17},"name":"clear","qualname":"<MutableBuffer>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Clear all existing data from this buffer.\n","sig":null,"attributes":[{"value":"/ Clear all existing data from this buffer.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":576500,"byte_end":576545,"line_start":815,"line_end":815,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2702},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":576674,"byte_end":576682,"line_start":821,"line_end":821,"column_start":12,"column_end":20},"name":"as_slice","qualname":"<MutableBuffer>::as_slice","value":"pub fn as_slice(&Self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Returns the data stored in this buffer as a slice.\n","sig":null,"attributes":[{"value":"/ Returns the data stored in this buffer as a slice.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":576608,"byte_end":576662,"line_start":820,"line_end":820,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":2703},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":576799,"byte_end":576811,"line_start":826,"line_end":826,"column_start":12,"column_end":24},"name":"as_slice_mut","qualname":"<MutableBuffer>::as_slice_mut","value":"pub fn as_slice_mut(&mut Self) -> &mut [u8]","parent":null,"children":[],"decl_id":null,"docs":" Returns the data stored in this buffer as a mutable slice.\n","sig":null,"attributes":[{"value":"/ Returns the data stored in this buffer as a mutable slice.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":576725,"byte_end":576787,"line_start":825,"line_end":825,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":2704},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":577086,"byte_end":577092,"line_start":835,"line_end":835,"column_start":18,"column_end":24},"name":"as_ptr","qualname":"<MutableBuffer>::as_ptr","value":"pub const fn as_ptr(&Self) -> *const u8","parent":null,"children":[],"decl_id":null,"docs":" Returns a raw pointer for this buffer.","sig":null,"attributes":[{"value":"/ Returns a raw pointer for this buffer.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":576862,"byte_end":576904,"line_start":830,"line_end":830,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":576909,"byte_end":576912,"line_start":831,"line_end":831,"column_start":5,"column_end":8}},{"value":"/ Note that this should be used cautiously, and the returned pointer should not be","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":576917,"byte_end":577001,"line_start":832,"line_end":832,"column_start":5,"column_end":89}},{"value":"/ stored anywhere, to avoid dangling pointers.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":577006,"byte_end":577054,"line_start":833,"line_end":833,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":577059,"byte_end":577068,"line_start":834,"line_end":834,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2705},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":577174,"byte_end":577184,"line_start":840,"line_end":840,"column_start":12,"column_end":22},"name":"as_mut_ptr","qualname":"<MutableBuffer>::as_mut_ptr","value":"pub fn as_mut_ptr(&mut Self) -> *mut u8","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":577153,"byte_end":577162,"line_start":839,"line_end":839,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2706},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":577457,"byte_end":577463,"line_start":849,"line_end":849,"column_start":12,"column_end":18},"name":"freeze","qualname":"<MutableBuffer>::freeze","value":"pub fn freeze(Self) -> Buffer","parent":null,"children":[],"decl_id":null,"docs":" Freezes this buffer and return an immutable version of it.\n","sig":null,"attributes":[{"value":"deprecated(since = \"2.0.0\", note =\n             \"This method is deprecated in favour of `into` from the trait `Into`.\")","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":577247,"byte_end":577378,"line_start":844,"line_end":847,"column_start":5,"column_end":7}},{"value":"/ Freezes this buffer and return an immutable version of it.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":577383,"byte_end":577445,"line_start":848,"line_end":848,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":2708},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":577857,"byte_end":577871,"line_start":865,"line_end":865,"column_start":12,"column_end":26},"name":"typed_data_mut","qualname":"<MutableBuffer>::typed_data_mut","value":"pub fn typed_data_mut<T: ArrowNativeType>(&mut Self) -> &mut [T]","parent":null,"children":[],"decl_id":null,"docs":" View buffer as typed slice.\n","sig":null,"attributes":[{"value":"/ View buffer as typed slice.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":577814,"byte_end":577845,"line_start":864,"line_end":864,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":2710},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":578618,"byte_end":578635,"line_start":884,"line_end":884,"column_start":12,"column_end":29},"name":"extend_from_slice","qualname":"<MutableBuffer>::extend_from_slice","value":"pub fn extend_from_slice(&mut Self, &[u8])","parent":null,"children":[],"decl_id":null,"docs":" Extends the buffer from a byte slice, incrementing its capacity if needed.\n","sig":null,"attributes":[{"value":"/ Extends the buffer from a byte slice, incrementing its capacity if needed.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":578514,"byte_end":578592,"line_start":882,"line_end":882,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":578597,"byte_end":578606,"line_start":883,"line_end":883,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2711},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":579172,"byte_end":579178,"line_start":898,"line_end":898,"column_start":12,"column_end":18},"name":"extend","qualname":"<MutableBuffer>::extend","value":"pub fn extend(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Extends the buffer by `len` with all bytes equal to `0u8`, incrementing its capacity if needed.\n","sig":null,"attributes":[{"value":"/ Extends the buffer by `len` with all bytes equal to `0u8`, incrementing its capacity if needed.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":579061,"byte_end":579160,"line_start":897,"line_end":897,"column_start":5,"column_end":104}}]},{"kind":"Mod","id":{"krate":0,"index":2723},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/bytes.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"bytes","qualname":"::bytes","value":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/bytes.rs","parent":null,"children":[{"krate":0,"index":2724},{"krate":0,"index":2727},{"krate":0,"index":2730},{"krate":0,"index":2733},{"krate":0,"index":2734},{"krate":0,"index":2735},{"krate":0,"index":2737},{"krate":0,"index":2740},{"krate":0,"index":2741},{"krate":0,"index":2744},{"krate":0,"index":2747},{"krate":0,"index":2754},{"krate":0,"index":2756},{"krate":0,"index":2760},{"krate":0,"index":2767},{"krate":0,"index":2769},{"krate":0,"index":2772},{"krate":0,"index":2774}],"decl_id":null,"docs":" This module contains an implementation of a contiguous immutable memory region that knows\n how to de-allocate itself, [`Bytes`].\n Note that this is a low-level functionality of this crate.\n","sig":null,"attributes":[{"value":"/ This module contains an implementation of a contiguous immutable memory region that knows","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/bytes.rs","byte_start":592375,"byte_end":592468,"line_start":18,"line_end":18,"column_start":1,"column_end":94}},{"value":"/ how to de-allocate itself, [`Bytes`].","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/bytes.rs","byte_start":592469,"byte_end":592510,"line_start":19,"line_end":19,"column_start":1,"column_end":42}},{"value":"/ Note that this is a low-level functionality of this crate.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/bytes.rs","byte_start":592511,"byte_end":592573,"line_start":20,"line_end":20,"column_start":1,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2748},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/bytes.rs","byte_start":592858,"byte_end":592864,"line_start":32,"line_end":32,"column_start":5,"column_end":11},"name":"Native","qualname":"::bytes::Deallocation::Native","value":"Deallocation::Native(usize)","parent":{"krate":0,"index":2747},"children":[],"decl_id":null,"docs":" Native deallocation, using Rust deallocator with Arrow-specific memory aligment\n","sig":null,"attributes":[{"value":"/ Native deallocation, using Rust deallocator with Arrow-specific memory aligment","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/bytes.rs","byte_start":592770,"byte_end":592853,"line_start":31,"line_end":31,"column_start":5,"column_end":88}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2751},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/bytes.rs","byte_start":592919,"byte_end":592926,"line_start":34,"line_end":34,"column_start":5,"column_end":12},"name":"Foreign","qualname":"::bytes::Deallocation::Foreign","value":"Deallocation::Foreign(Arc<ffi::FFI_ArrowArray>)","parent":{"krate":0,"index":2747},"children":[],"decl_id":null,"docs":" Foreign interface, via a callback\n","sig":null,"attributes":[{"value":"/ Foreign interface, via a callback","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/bytes.rs","byte_start":592877,"byte_end":592914,"line_start":33,"line_end":33,"column_start":5,"column_end":42}}]},{"kind":"Enum","id":{"krate":0,"index":2747},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/bytes.rs","byte_start":592751,"byte_end":592763,"line_start":30,"line_end":30,"column_start":10,"column_end":22},"name":"Deallocation","qualname":"::bytes::Deallocation","value":"pub enum Deallocation { Native(usize), Foreign(Arc<ffi::FFI_ArrowArray>), }","parent":null,"children":[{"krate":0,"index":2748},{"krate":0,"index":2751}],"decl_id":null,"docs":" Mode of deallocating memory regions\n","sig":null,"attributes":[{"value":"/ Mode of deallocating memory regions","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/bytes.rs","byte_start":592702,"byte_end":592741,"line_start":29,"line_end":29,"column_start":1,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":2756},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/bytes.rs","byte_start":593954,"byte_end":593959,"line_start":58,"line_end":58,"column_start":12,"column_end":17},"name":"Bytes","qualname":"::bytes::Bytes","value":"Bytes {  }","parent":null,"children":[{"krate":0,"index":2757},{"krate":0,"index":2758},{"krate":0,"index":2759}],"decl_id":null,"docs":" A continuous, fixed-size, immutable memory region that knows how to de-allocate itself.\n This structs' API is inspired by the `bytes::Bytes`, but it is not limited to using rust's\n global allocator nor u8 aligmnent.","sig":null,"attributes":[{"value":"/ A continuous, fixed-size, immutable memory region that knows how to de-allocate itself.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/bytes.rs","byte_start":593358,"byte_end":593449,"line_start":50,"line_end":50,"column_start":1,"column_end":92}},{"value":"/ This structs' API is inspired by the `bytes::Bytes`, but it is not limited to using rust's","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/bytes.rs","byte_start":593450,"byte_end":593544,"line_start":51,"line_end":51,"column_start":1,"column_end":95}},{"value":"/ global allocator nor u8 aligmnent.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/bytes.rs","byte_start":593545,"byte_end":593583,"line_start":52,"line_end":52,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/bytes.rs","byte_start":593584,"byte_end":593587,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ In the most common case, this buffer is allocated using [`allocate_aligned`](memory::allocate_aligned)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/bytes.rs","byte_start":593588,"byte_end":593694,"line_start":54,"line_end":54,"column_start":1,"column_end":107}},{"value":"/ and deallocated accordingly [`free_aligned`](memory::free_aligned).","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/bytes.rs","byte_start":593695,"byte_end":593766,"line_start":55,"line_end":55,"column_start":1,"column_end":72}},{"value":"/ When the region is allocated by an foreign allocator, [Deallocation::Foreign], this calls the","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/bytes.rs","byte_start":593767,"byte_end":593864,"line_start":56,"line_end":56,"column_start":1,"column_end":98}},{"value":"/ foreign deallocator to deallocate the region when it is no longer needed.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/bytes.rs","byte_start":593865,"byte_end":593942,"line_start":57,"line_end":57,"column_start":1,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":2761},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/bytes.rs","byte_start":594755,"byte_end":594758,"line_start":82,"line_end":82,"column_start":19,"column_end":22},"name":"new","qualname":"<Bytes>::new","value":"pub unsafe fn new(std::ptr::NonNull<u8>, usize, Deallocation) -> Bytes","parent":null,"children":[],"decl_id":null,"docs":" Takes ownership of an allocated memory region,","sig":null,"attributes":[{"value":"/ Takes ownership of an allocated memory region,","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/bytes.rs","byte_start":594256,"byte_end":594306,"line_start":70,"line_end":70,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/bytes.rs","byte_start":594311,"byte_end":594314,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/bytes.rs","byte_start":594319,"byte_end":594334,"line_start":72,"line_end":72,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/bytes.rs","byte_start":594339,"byte_end":594342,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ * `ptr` - Pointer to raw parts","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/bytes.rs","byte_start":594347,"byte_end":594381,"line_start":74,"line_end":74,"column_start":5,"column_end":39}},{"value":"/ * `len` - Length of raw parts in **bytes**","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/bytes.rs","byte_start":594386,"byte_end":594432,"line_start":75,"line_end":75,"column_start":5,"column_end":51}},{"value":"/ * `capacity` - Total allocated memory for the pointer `ptr`, in **bytes**","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/bytes.rs","byte_start":594437,"byte_end":594514,"line_start":76,"line_end":76,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/bytes.rs","byte_start":594519,"byte_end":594522,"line_start":77,"line_end":77,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/bytes.rs","byte_start":594527,"byte_end":594539,"line_start":78,"line_end":78,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/bytes.rs","byte_start":594544,"byte_end":594547,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ This function is unsafe as there is no guarantee that the given pointer is valid for `len`","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/bytes.rs","byte_start":594552,"byte_end":594646,"line_start":80,"line_end":80,"column_start":5,"column_end":99}},{"value":"/ bytes. If the `ptr` and `capacity` come from a `Buffer`, then this is guaranteed.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/bytes.rs","byte_start":594651,"byte_end":594736,"line_start":81,"line_end":81,"column_start":5,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":2763},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/bytes.rs","byte_start":595041,"byte_end":595044,"line_start":99,"line_end":99,"column_start":12,"column_end":15},"name":"len","qualname":"<Bytes>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/bytes.rs","byte_start":595020,"byte_end":595029,"line_start":98,"line_end":98,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2764},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/bytes.rs","byte_start":595112,"byte_end":595120,"line_start":104,"line_end":104,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Bytes>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/bytes.rs","byte_start":595091,"byte_end":595100,"line_start":103,"line_end":103,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2765},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/bytes.rs","byte_start":595192,"byte_end":595195,"line_start":109,"line_end":109,"column_start":12,"column_end":15},"name":"ptr","qualname":"<Bytes>::ptr","value":"pub fn ptr(&Self) -> NonNull<u8>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/bytes.rs","byte_start":595171,"byte_end":595180,"line_start":108,"line_end":108,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2766},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/bytes.rs","byte_start":595255,"byte_end":595263,"line_start":113,"line_end":113,"column_start":12,"column_end":20},"name":"capacity","qualname":"<Bytes>::capacity","value":"pub fn capacity(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":2776},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"compute","qualname":"::compute","value":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/mod.rs","parent":null,"children":[{"krate":0,"index":2777},{"krate":0,"index":3482},{"krate":0,"index":3525},{"krate":0,"index":3526},{"krate":0,"index":3527},{"krate":0,"index":3528},{"krate":0,"index":3529},{"krate":0,"index":3530},{"krate":0,"index":3531},{"krate":0,"index":3532},{"krate":0,"index":3533},{"krate":0,"index":3534},{"krate":0,"index":3535}],"decl_id":null,"docs":" Computation kernels on Arrow Arrays\n","sig":null,"attributes":[{"value":"/ Computation kernels on Arrow Arrays","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/mod.rs","byte_start":597609,"byte_end":597648,"line_start":18,"line_end":18,"column_start":1,"column_end":40}}]},{"kind":"Mod","id":{"krate":0,"index":2777},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"kernels","qualname":"::compute::kernels","value":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/mod.rs","parent":null,"children":[{"krate":0,"index":2778},{"krate":0,"index":2836},{"krate":0,"index":2915},{"krate":0,"index":2984},{"krate":0,"index":3089},{"krate":0,"index":3186},{"krate":0,"index":3202},{"krate":0,"index":3240},{"krate":0,"index":3268},{"krate":0,"index":3273},{"krate":0,"index":3358},{"krate":0,"index":3387},{"krate":0,"index":3471}],"decl_id":null,"docs":" Computation kernels on Arrow Arrays\n","sig":null,"attributes":[{"value":"/ Computation kernels on Arrow Arrays","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/mod.rs","byte_start":598863,"byte_end":598902,"line_start":18,"line_end":18,"column_start":1,"column_end":40}}]},{"kind":"Mod","id":{"krate":0,"index":2778},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/aggregate.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"aggregate","qualname":"::compute::kernels::aggregate","value":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/aggregate.rs","parent":null,"children":[{"krate":0,"index":2779},{"krate":0,"index":2782},{"krate":0,"index":2783},{"krate":0,"index":2786},{"krate":0,"index":2789},{"krate":0,"index":2792},{"krate":0,"index":2795},{"krate":0,"index":2798},{"krate":0,"index":2799},{"krate":0,"index":2802},{"krate":0,"index":2805},{"krate":0,"index":2807},{"krate":0,"index":2810},{"krate":0,"index":2813},{"krate":0,"index":2816},{"krate":0,"index":2819},{"krate":0,"index":2822},{"krate":0,"index":2826},{"krate":0,"index":2828},{"krate":0,"index":2830}],"decl_id":null,"docs":" Defines aggregations over Arrow arrays.\n","sig":null,"attributes":[{"value":"/ Defines aggregations over Arrow arrays.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/aggregate.rs","byte_start":599925,"byte_end":599968,"line_start":18,"line_end":18,"column_start":1,"column_end":44}}]},{"kind":"Function","id":{"krate":0,"index":2810},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/aggregate.rs","byte_start":601421,"byte_end":601424,"line_start":72,"line_end":72,"column_start":8,"column_end":11},"name":"min","qualname":"::compute::kernels::aggregate::min","value":"pub fn min<T>(&PrimitiveArray<T>) -> Option<T::Native> where\nT: ArrowNumericType, T::Native: ArrowNativeType","parent":null,"children":[],"decl_id":null,"docs":" Returns the minimum value in the array, according to the natural order.\n For floating point arrays any NaN values are considered to be greater than any other non-null value\n","sig":null,"attributes":[{"value":"/ Returns the minimum value in the array, according to the natural order.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/aggregate.rs","byte_start":601216,"byte_end":601291,"line_start":69,"line_end":69,"column_start":1,"column_end":76}},{"value":"/ For floating point arrays any NaN values are considered to be greater than any other non-null value","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/aggregate.rs","byte_start":601292,"byte_end":601395,"line_start":70,"line_end":70,"column_start":1,"column_end":104}},{"value":"cfg(not(simd))","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/aggregate.rs","byte_start":601396,"byte_end":601413,"line_start":71,"line_end":71,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":2813},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/aggregate.rs","byte_start":601819,"byte_end":601822,"line_start":83,"line_end":83,"column_start":8,"column_end":11},"name":"max","qualname":"::compute::kernels::aggregate::max","value":"pub fn max<T>(&PrimitiveArray<T>) -> Option<T::Native> where\nT: ArrowNumericType, T::Native: ArrowNativeType","parent":null,"children":[],"decl_id":null,"docs":" Returns the maximum value in the array, according to the natural order.\n For floating point arrays any NaN values are considered to be greater than any other non-null value\n","sig":null,"attributes":[{"value":"/ Returns the maximum value in the array, according to the natural order.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/aggregate.rs","byte_start":601614,"byte_end":601689,"line_start":80,"line_end":80,"column_start":1,"column_end":76}},{"value":"/ For floating point arrays any NaN values are considered to be greater than any other non-null value","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/aggregate.rs","byte_start":601690,"byte_end":601793,"line_start":81,"line_end":81,"column_start":1,"column_end":104}},{"value":"cfg(not(simd))","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/aggregate.rs","byte_start":601794,"byte_end":601811,"line_start":82,"line_end":82,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":2816},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/aggregate.rs","byte_start":602102,"byte_end":602112,"line_start":92,"line_end":92,"column_start":8,"column_end":18},"name":"max_string","qualname":"::compute::kernels::aggregate::max_string","value":"pub fn max_string<T: StringOffsetSizeTrait>(&GenericStringArray<T>)\n-> Option<&str>","parent":null,"children":[],"decl_id":null,"docs":" Returns the maximum value in the string array, according to the natural order.\n","sig":null,"attributes":[{"value":"/ Returns the maximum value in the string array, according to the natural order.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/aggregate.rs","byte_start":602012,"byte_end":602094,"line_start":91,"line_end":91,"column_start":1,"column_end":83}}]},{"kind":"Function","id":{"krate":0,"index":2819},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/aggregate.rs","byte_start":602328,"byte_end":602338,"line_start":99,"line_end":99,"column_start":8,"column_end":18},"name":"min_string","qualname":"::compute::kernels::aggregate::min_string","value":"pub fn min_string<T: StringOffsetSizeTrait>(&GenericStringArray<T>)\n-> Option<&str>","parent":null,"children":[],"decl_id":null,"docs":" Returns the minimum value in the string array, according to the natural order.\n","sig":null,"attributes":[{"value":"/ Returns the minimum value in the string array, according to the natural order.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/aggregate.rs","byte_start":602238,"byte_end":602320,"line_start":98,"line_end":98,"column_start":1,"column_end":83}}]},{"kind":"Function","id":{"krate":0,"index":2826},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/aggregate.rs","byte_start":603700,"byte_end":603711,"line_start":151,"line_end":151,"column_start":8,"column_end":19},"name":"min_boolean","qualname":"::compute::kernels::aggregate::min_boolean","value":"pub fn min_boolean(&BooleanArray) -> Option<bool>","parent":null,"children":[],"decl_id":null,"docs":" Returns the minimum value in the boolean array.","sig":null,"attributes":[{"value":"/ Returns the minimum value in the boolean array.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/aggregate.rs","byte_start":603424,"byte_end":603475,"line_start":140,"line_end":140,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/aggregate.rs","byte_start":603476,"byte_end":603479,"line_start":141,"line_end":141,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/aggregate.rs","byte_start":603480,"byte_end":603487,"line_start":142,"line_end":142,"column_start":1,"column_end":8}},{"value":"/ use arrow::{","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/aggregate.rs","byte_start":603488,"byte_end":603504,"line_start":143,"line_end":143,"column_start":1,"column_end":17}},{"value":"/   array::BooleanArray,","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/aggregate.rs","byte_start":603505,"byte_end":603531,"line_start":144,"line_end":144,"column_start":1,"column_end":27}},{"value":"/   compute::min_boolean,","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/aggregate.rs","byte_start":603532,"byte_end":603559,"line_start":145,"line_end":145,"column_start":1,"column_end":28}},{"value":"/ };","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/aggregate.rs","byte_start":603560,"byte_end":603566,"line_start":146,"line_end":146,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/aggregate.rs","byte_start":603567,"byte_end":603570,"line_start":147,"line_end":147,"column_start":1,"column_end":4}},{"value":"/ let a = BooleanArray::from(vec![Some(true), None, Some(false)]);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/aggregate.rs","byte_start":603571,"byte_end":603639,"line_start":148,"line_end":148,"column_start":1,"column_end":69}},{"value":"/ assert_eq!(min_boolean(&a), Some(false))","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/aggregate.rs","byte_start":603640,"byte_end":603684,"line_start":149,"line_end":149,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/aggregate.rs","byte_start":603685,"byte_end":603692,"line_start":150,"line_end":150,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":2828},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/aggregate.rs","byte_start":604337,"byte_end":604348,"line_start":176,"line_end":176,"column_start":8,"column_end":19},"name":"max_boolean","qualname":"::compute::kernels::aggregate::max_boolean","value":"pub fn max_boolean(&BooleanArray) -> Option<bool>","parent":null,"children":[],"decl_id":null,"docs":" Returns the maximum value in the boolean array","sig":null,"attributes":[{"value":"/ Returns the maximum value in the boolean array","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/aggregate.rs","byte_start":604063,"byte_end":604113,"line_start":165,"line_end":165,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/aggregate.rs","byte_start":604114,"byte_end":604117,"line_start":166,"line_end":166,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/aggregate.rs","byte_start":604118,"byte_end":604125,"line_start":167,"line_end":167,"column_start":1,"column_end":8}},{"value":"/ use arrow::{","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/aggregate.rs","byte_start":604126,"byte_end":604142,"line_start":168,"line_end":168,"column_start":1,"column_end":17}},{"value":"/   array::BooleanArray,","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/aggregate.rs","byte_start":604143,"byte_end":604169,"line_start":169,"line_end":169,"column_start":1,"column_end":27}},{"value":"/   compute::max_boolean,","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/aggregate.rs","byte_start":604170,"byte_end":604197,"line_start":170,"line_end":170,"column_start":1,"column_end":28}},{"value":"/ };","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/aggregate.rs","byte_start":604198,"byte_end":604204,"line_start":171,"line_end":171,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/aggregate.rs","byte_start":604205,"byte_end":604208,"line_start":172,"line_end":172,"column_start":1,"column_end":4}},{"value":"/ let a = BooleanArray::from(vec![Some(true), None, Some(false)]);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/aggregate.rs","byte_start":604209,"byte_end":604277,"line_start":173,"line_end":173,"column_start":1,"column_end":69}},{"value":"/ assert_eq!(max_boolean(&a), Some(true))","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/aggregate.rs","byte_start":604278,"byte_end":604321,"line_start":174,"line_end":174,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/aggregate.rs","byte_start":604322,"byte_end":604329,"line_start":175,"line_end":175,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":2830},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/aggregate.rs","byte_start":604843,"byte_end":604846,"line_start":194,"line_end":194,"column_start":8,"column_end":11},"name":"sum","qualname":"::compute::kernels::aggregate::sum","value":"pub fn sum<T>(&PrimitiveArray<T>) -> Option<T::Native> where\nT: ArrowNumericType, T::Native: Add<Output = T::Native>","parent":null,"children":[],"decl_id":null,"docs":" Returns the sum of values in the array.","sig":null,"attributes":[{"value":"/ Returns the sum of values in the array.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/aggregate.rs","byte_start":604699,"byte_end":604742,"line_start":190,"line_end":190,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/aggregate.rs","byte_start":604743,"byte_end":604746,"line_start":191,"line_end":191,"column_start":1,"column_end":4}},{"value":"/ Returns `None` if the array is empty or only contains null values.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/aggregate.rs","byte_start":604747,"byte_end":604817,"line_start":192,"line_end":192,"column_start":1,"column_end":71}},{"value":"cfg(not(simd))","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/aggregate.rs","byte_start":604818,"byte_end":604835,"line_start":193,"line_end":193,"column_start":1,"column_end":18}}]},{"kind":"Mod","id":{"krate":0,"index":2836},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/arithmetic.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"arithmetic","qualname":"::compute::kernels::arithmetic","value":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/arithmetic.rs","parent":null,"children":[{"krate":0,"index":2837},{"krate":0,"index":2838},{"krate":0,"index":2841},{"krate":0,"index":2844},{"krate":0,"index":2847},{"krate":0,"index":2850},{"krate":0,"index":2853},{"krate":0,"index":2856},{"krate":0,"index":2857},{"krate":0,"index":2860},{"krate":0,"index":2863},{"krate":0,"index":2866},{"krate":0,"index":2869},{"krate":0,"index":2872},{"krate":0,"index":2873},{"krate":0,"index":2876},{"krate":0,"index":2879},{"krate":0,"index":2880},{"krate":0,"index":2883},{"krate":0,"index":2886},{"krate":0,"index":2887},{"krate":0,"index":2888},{"krate":0,"index":2891},{"krate":0,"index":2895},{"krate":0,"index":2899},{"krate":0,"index":2901},{"krate":0,"index":2904},{"krate":0,"index":2907},{"krate":0,"index":2910},{"krate":0,"index":2913}],"decl_id":null,"docs":" Defines basic arithmetic kernels for `PrimitiveArrays`.","sig":null,"attributes":[{"value":"/ Defines basic arithmetic kernels for `PrimitiveArrays`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/arithmetic.rs","byte_start":631979,"byte_end":632038,"line_start":18,"line_end":18,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/arithmetic.rs","byte_start":632039,"byte_end":632042,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ These kernels can leverage SIMD if available on your system.  Currently no runtime","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/arithmetic.rs","byte_start":632043,"byte_end":632129,"line_start":20,"line_end":20,"column_start":1,"column_end":87}},{"value":"/ detection is provided, you should enable the specific SIMD intrinsics using","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/arithmetic.rs","byte_start":632130,"byte_end":632209,"line_start":21,"line_end":21,"column_start":1,"column_end":80}},{"value":"/ `RUSTFLAGS=\"-C target-feature=+avx2\"` for example.  See the documentation","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/arithmetic.rs","byte_start":632210,"byte_end":632287,"line_start":22,"line_end":22,"column_start":1,"column_end":78}},{"value":"/ [here](https://doc.rust-lang.org/stable/core/arch/) for more information.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/arithmetic.rs","byte_start":632288,"byte_end":632365,"line_start":23,"line_end":23,"column_start":1,"column_end":78}}]},{"kind":"Function","id":{"krate":0,"index":2891},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/arithmetic.rs","byte_start":633035,"byte_end":633055,"line_start":45,"line_end":45,"column_start":8,"column_end":28},"name":"signed_unary_math_op","qualname":"::compute::kernels::arithmetic::signed_unary_math_op","value":"pub fn signed_unary_math_op<T, F>(&PrimitiveArray<T>, F)\n-> Result<PrimitiveArray<T>> where T: datatypes::ArrowSignedNumericType,\nT::Native: Neg<Output = T::Native>, F: Fn(T::Native) -> T::Native","parent":null,"children":[],"decl_id":null,"docs":" Helper function to perform math lambda function on values from single array of signed numeric\n type. If value is null then the output value is also null, so `-null` is `null`.\n","sig":null,"attributes":[{"value":"/ Helper function to perform math lambda function on values from single array of signed numeric","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/arithmetic.rs","byte_start":632845,"byte_end":632942,"line_start":43,"line_end":43,"column_start":1,"column_end":98}},{"value":"/ type. If value is null then the output value is also null, so `-null` is `null`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/arithmetic.rs","byte_start":632943,"byte_end":633027,"line_start":44,"line_end":44,"column_start":1,"column_end":85}}]},{"kind":"Function","id":{"krate":0,"index":2895},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/arithmetic.rs","byte_start":635513,"byte_end":635520,"line_start":128,"line_end":128,"column_start":8,"column_end":15},"name":"math_op","qualname":"::compute::kernels::arithmetic::math_op","value":"pub fn math_op<T, F>(&PrimitiveArray<T>, &PrimitiveArray<T>, F)\n-> Result<PrimitiveArray<T>> where T: ArrowNumericType,\nF: Fn(T::Native, T::Native) -> T::Native","parent":null,"children":[],"decl_id":null,"docs":" Helper function to perform math lambda function on values from two arrays. If either\n left or right value is null then the output value is also null, so `1 + null` is\n `null`.","sig":null,"attributes":[{"value":"/ Helper function to perform math lambda function on values from two arrays. If either","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/arithmetic.rs","byte_start":635237,"byte_end":635325,"line_start":121,"line_end":121,"column_start":1,"column_end":89}},{"value":"/ left or right value is null then the output value is also null, so `1 + null` is","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/arithmetic.rs","byte_start":635326,"byte_end":635410,"line_start":122,"line_end":122,"column_start":1,"column_end":85}},{"value":"/ `null`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/arithmetic.rs","byte_start":635411,"byte_end":635422,"line_start":123,"line_end":123,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/arithmetic.rs","byte_start":635423,"byte_end":635426,"line_start":124,"line_end":124,"column_start":1,"column_end":4}},{"value":"/ # Errors","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/arithmetic.rs","byte_start":635427,"byte_end":635439,"line_start":125,"line_end":125,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/arithmetic.rs","byte_start":635440,"byte_end":635443,"line_start":126,"line_end":126,"column_start":1,"column_end":4}},{"value":"/ This function errors if the arrays have different lengths","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/arithmetic.rs","byte_start":635444,"byte_end":635505,"line_start":127,"line_end":127,"column_start":1,"column_end":62}}]},{"kind":"Function","id":{"krate":0,"index":2901},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/arithmetic.rs","byte_start":647309,"byte_end":647312,"line_start":481,"line_end":481,"column_start":8,"column_end":11},"name":"add","qualname":"::compute::kernels::arithmetic::add","value":"pub fn add<T>(&PrimitiveArray<T>, &PrimitiveArray<T>)\n-> Result<PrimitiveArray<T>> where T: ArrowNumericType, T::Native: Add<Output\n= T::Native> + Sub<Output = T::Native> + Mul<Output = T::Native> + Div<Output\n= T::Native> + Zero","parent":null,"children":[],"decl_id":null,"docs":" Perform `left + right` operation on two arrays. If either left or right value is null\n then the result is also null.\n","sig":null,"attributes":[{"value":"/ Perform `left + right` operation on two arrays. If either left or right value is null","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/arithmetic.rs","byte_start":647178,"byte_end":647267,"line_start":479,"line_end":479,"column_start":1,"column_end":90}},{"value":"/ then the result is also null.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/arithmetic.rs","byte_start":647268,"byte_end":647301,"line_start":480,"line_end":480,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":2904},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/arithmetic.rs","byte_start":647887,"byte_end":647895,"line_start":501,"line_end":501,"column_start":8,"column_end":16},"name":"subtract","qualname":"::compute::kernels::arithmetic::subtract","value":"pub fn subtract<T>(&PrimitiveArray<T>, &PrimitiveArray<T>)\n-> Result<PrimitiveArray<T>> where T: datatypes::ArrowNumericType,\nT::Native: Add<Output = T::Native> + Sub<Output = T::Native> + Mul<Output =\nT::Native> + Div<Output = T::Native> + Zero","parent":null,"children":[],"decl_id":null,"docs":" Perform `left - right` operation on two arrays. If either left or right value is null\n then the result is also null.\n","sig":null,"attributes":[{"value":"/ Perform `left - right` operation on two arrays. If either left or right value is null","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/arithmetic.rs","byte_start":647756,"byte_end":647845,"line_start":499,"line_end":499,"column_start":1,"column_end":90}},{"value":"/ then the result is also null.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/arithmetic.rs","byte_start":647846,"byte_end":647879,"line_start":500,"line_end":500,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":2907},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/arithmetic.rs","byte_start":648443,"byte_end":648449,"line_start":520,"line_end":520,"column_start":8,"column_end":14},"name":"negate","qualname":"::compute::kernels::arithmetic::negate","value":"pub fn negate<T>(&PrimitiveArray<T>) -> Result<PrimitiveArray<T>> where\nT: datatypes::ArrowSignedNumericType, T::Native: Neg<Output = T::Native>","parent":null,"children":[],"decl_id":null,"docs":" Perform `-` operation on an array. If value is null then the result is also null.\n","sig":null,"attributes":[{"value":"/ Perform `-` operation on an array. If value is null then the result is also null.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/arithmetic.rs","byte_start":648350,"byte_end":648435,"line_start":519,"line_end":519,"column_start":1,"column_end":86}}]},{"kind":"Function","id":{"krate":0,"index":2910},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/arithmetic.rs","byte_start":648881,"byte_end":648889,"line_start":533,"line_end":533,"column_start":8,"column_end":16},"name":"multiply","qualname":"::compute::kernels::arithmetic::multiply","value":"pub fn multiply<T>(&PrimitiveArray<T>, &PrimitiveArray<T>)\n-> Result<PrimitiveArray<T>> where T: datatypes::ArrowNumericType,\nT::Native: Add<Output = T::Native> + Sub<Output = T::Native> + Mul<Output =\nT::Native> + Div<Output = T::Native> + Zero","parent":null,"children":[],"decl_id":null,"docs":" Perform `left * right` operation on two arrays. If either left or right value is null\n then the result is also null.\n","sig":null,"attributes":[{"value":"/ Perform `left * right` operation on two arrays. If either left or right value is null","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/arithmetic.rs","byte_start":648750,"byte_end":648839,"line_start":531,"line_end":531,"column_start":1,"column_end":90}},{"value":"/ then the result is also null.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/arithmetic.rs","byte_start":648840,"byte_end":648873,"line_start":532,"line_end":532,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":2913},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/arithmetic.rs","byte_start":649586,"byte_end":649592,"line_start":554,"line_end":554,"column_start":8,"column_end":14},"name":"divide","qualname":"::compute::kernels::arithmetic::divide","value":"pub fn divide<T>(&PrimitiveArray<T>, &PrimitiveArray<T>)\n-> Result<PrimitiveArray<T>> where T: datatypes::ArrowNumericType,\nT::Native: Add<Output = T::Native> + Sub<Output = T::Native> + Mul<Output =\nT::Native> + Div<Output = T::Native> + Zero + One","parent":null,"children":[],"decl_id":null,"docs":" Perform `left / right` operation on two arrays. If either left or right value is null\n then the result is also null. If any right hand value is zero then the result of this\n operation will be `Err(ArrowError::DivideByZero)`.\n","sig":null,"attributes":[{"value":"/ Perform `left / right` operation on two arrays. If either left or right value is null","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/arithmetic.rs","byte_start":649344,"byte_end":649433,"line_start":551,"line_end":551,"column_start":1,"column_end":90}},{"value":"/ then the result is also null. If any right hand value is zero then the result of this","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/arithmetic.rs","byte_start":649434,"byte_end":649523,"line_start":552,"line_end":552,"column_start":1,"column_end":90}},{"value":"/ operation will be `Err(ArrowError::DivideByZero)`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/arithmetic.rs","byte_start":649524,"byte_end":649578,"line_start":553,"line_end":553,"column_start":1,"column_end":55}}]},{"kind":"Mod","id":{"krate":0,"index":2915},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"boolean","qualname":"::compute::kernels::boolean","value":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","parent":null,"children":[{"krate":0,"index":2916},{"krate":0,"index":2919},{"krate":0,"index":2922},{"krate":0,"index":2923},{"krate":0,"index":2926},{"krate":0,"index":2929},{"krate":0,"index":2932},{"krate":0,"index":2935},{"krate":0,"index":2936},{"krate":0,"index":2939},{"krate":0,"index":2942},{"krate":0,"index":2945},{"krate":0,"index":2948},{"krate":0,"index":2951},{"krate":0,"index":2954},{"krate":0,"index":2955},{"krate":0,"index":2958},{"krate":0,"index":2961},{"krate":0,"index":2962},{"krate":0,"index":2965},{"krate":0,"index":2968},{"krate":0,"index":2971},{"krate":0,"index":2973},{"krate":0,"index":2974},{"krate":0,"index":2975},{"krate":0,"index":2977},{"krate":0,"index":2978},{"krate":0,"index":2979}],"decl_id":null,"docs":" Defines boolean kernels on Arrow `BooleanArray`'s, e.g. `AND`, `OR` and `NOT`.","sig":null,"attributes":[{"value":"/ Defines boolean kernels on Arrow `BooleanArray`'s, e.g. `AND`, `OR` and `NOT`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":658060,"byte_end":658142,"line_start":18,"line_end":18,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":658143,"byte_end":658146,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ These kernels can leverage SIMD if available on your system.  Currently no runtime","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":658147,"byte_end":658233,"line_start":20,"line_end":20,"column_start":1,"column_end":87}},{"value":"/ detection is provided, you should enable the specific SIMD intrinsics using","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":658234,"byte_end":658313,"line_start":21,"line_end":21,"column_start":1,"column_end":80}},{"value":"/ `RUSTFLAGS=\"-C target-feature=+avx2\"` for example.  See the documentation","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":658314,"byte_end":658391,"line_start":22,"line_end":22,"column_start":1,"column_end":78}},{"value":"/ [here](https://doc.rust-lang.org/stable/core/arch/) for more information.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":658392,"byte_end":658469,"line_start":23,"line_end":23,"column_start":1,"column_end":78}}]},{"kind":"Function","id":{"krate":0,"index":2973},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":660584,"byte_end":660587,"line_start":94,"line_end":94,"column_start":8,"column_end":11},"name":"and","qualname":"::compute::kernels::boolean::and","value":"pub fn and(&BooleanArray, &BooleanArray) -> Result<BooleanArray>","parent":null,"children":[],"decl_id":null,"docs":" Performs `AND` operation on two arrays. If either left or right value is null then the\n result is also null.\n # Error\n This function errors when the arrays have different lengths.\n # Example\n ```rust\n use arrow::array::BooleanArray;\n use arrow::error::Result;\n use arrow::compute::kernels::boolean::and;\n # fn main() -> Result<()> {\n let a = BooleanArray::from(vec![Some(false), Some(true), None]);\n let b = BooleanArray::from(vec![Some(true), Some(true), Some(false)]);\n let and_ab = and(&a, &b)?;\n assert_eq!(and_ab, BooleanArray::from(vec![Some(false), Some(true), None]));\n # Ok(())\n # }\n ```\n","sig":null,"attributes":[{"value":"/ Performs `AND` operation on two arrays. If either left or right value is null then the","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":659928,"byte_end":660018,"line_start":77,"line_end":77,"column_start":1,"column_end":91}},{"value":"/ result is also null.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":660019,"byte_end":660043,"line_start":78,"line_end":78,"column_start":1,"column_end":25}},{"value":"/ # Error","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":660044,"byte_end":660055,"line_start":79,"line_end":79,"column_start":1,"column_end":12}},{"value":"/ This function errors when the arrays have different lengths.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":660056,"byte_end":660120,"line_start":80,"line_end":80,"column_start":1,"column_end":65}},{"value":"/ # Example","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":660121,"byte_end":660134,"line_start":81,"line_end":81,"column_start":1,"column_end":14}},{"value":"/ ```rust","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":660135,"byte_end":660146,"line_start":82,"line_end":82,"column_start":1,"column_end":12}},{"value":"/ use arrow::array::BooleanArray;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":660147,"byte_end":660182,"line_start":83,"line_end":83,"column_start":1,"column_end":36}},{"value":"/ use arrow::error::Result;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":660183,"byte_end":660212,"line_start":84,"line_end":84,"column_start":1,"column_end":30}},{"value":"/ use arrow::compute::kernels::boolean::and;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":660213,"byte_end":660259,"line_start":85,"line_end":85,"column_start":1,"column_end":47}},{"value":"/ # fn main() -> Result<()> {","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":660260,"byte_end":660291,"line_start":86,"line_end":86,"column_start":1,"column_end":32}},{"value":"/ let a = BooleanArray::from(vec![Some(false), Some(true), None]);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":660292,"byte_end":660360,"line_start":87,"line_end":87,"column_start":1,"column_end":69}},{"value":"/ let b = BooleanArray::from(vec![Some(true), Some(true), Some(false)]);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":660361,"byte_end":660435,"line_start":88,"line_end":88,"column_start":1,"column_end":75}},{"value":"/ let and_ab = and(&a, &b)?;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":660436,"byte_end":660466,"line_start":89,"line_end":89,"column_start":1,"column_end":31}},{"value":"/ assert_eq!(and_ab, BooleanArray::from(vec![Some(false), Some(true), None]));","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":660467,"byte_end":660547,"line_start":90,"line_end":90,"column_start":1,"column_end":81}},{"value":"/ # Ok(())","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":660548,"byte_end":660560,"line_start":91,"line_end":91,"column_start":1,"column_end":13}},{"value":"/ # }","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":660561,"byte_end":660568,"line_start":92,"line_end":92,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":660569,"byte_end":660576,"line_start":93,"line_end":93,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":2974},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":661367,"byte_end":661369,"line_start":115,"line_end":115,"column_start":8,"column_end":10},"name":"or","qualname":"::compute::kernels::boolean::or","value":"pub fn or(&BooleanArray, &BooleanArray) -> Result<BooleanArray>","parent":null,"children":[],"decl_id":null,"docs":" Performs `OR` operation on two arrays. If either left or right value is null then the\n result is also null.\n # Error\n This function errors when the arrays have different lengths.\n # Example\n ```rust\n use arrow::array::BooleanArray;\n use arrow::error::Result;\n use arrow::compute::kernels::boolean::or;\n # fn main() -> Result<()> {\n let a = BooleanArray::from(vec![Some(false), Some(true), None]);\n let b = BooleanArray::from(vec![Some(true), Some(true), Some(false)]);\n let or_ab = or(&a, &b)?;\n assert_eq!(or_ab, BooleanArray::from(vec![Some(true), Some(true), None]));\n # Ok(())\n # }\n ```\n","sig":null,"attributes":[{"value":"/ Performs `OR` operation on two arrays. If either left or right value is null then the","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":660717,"byte_end":660806,"line_start":98,"line_end":98,"column_start":1,"column_end":90}},{"value":"/ result is also null.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":660807,"byte_end":660831,"line_start":99,"line_end":99,"column_start":1,"column_end":25}},{"value":"/ # Error","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":660832,"byte_end":660843,"line_start":100,"line_end":100,"column_start":1,"column_end":12}},{"value":"/ This function errors when the arrays have different lengths.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":660844,"byte_end":660908,"line_start":101,"line_end":101,"column_start":1,"column_end":65}},{"value":"/ # Example","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":660909,"byte_end":660922,"line_start":102,"line_end":102,"column_start":1,"column_end":14}},{"value":"/ ```rust","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":660923,"byte_end":660934,"line_start":103,"line_end":103,"column_start":1,"column_end":12}},{"value":"/ use arrow::array::BooleanArray;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":660935,"byte_end":660970,"line_start":104,"line_end":104,"column_start":1,"column_end":36}},{"value":"/ use arrow::error::Result;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":660971,"byte_end":661000,"line_start":105,"line_end":105,"column_start":1,"column_end":30}},{"value":"/ use arrow::compute::kernels::boolean::or;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":661001,"byte_end":661046,"line_start":106,"line_end":106,"column_start":1,"column_end":46}},{"value":"/ # fn main() -> Result<()> {","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":661047,"byte_end":661078,"line_start":107,"line_end":107,"column_start":1,"column_end":32}},{"value":"/ let a = BooleanArray::from(vec![Some(false), Some(true), None]);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":661079,"byte_end":661147,"line_start":108,"line_end":108,"column_start":1,"column_end":69}},{"value":"/ let b = BooleanArray::from(vec![Some(true), Some(true), Some(false)]);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":661148,"byte_end":661222,"line_start":109,"line_end":109,"column_start":1,"column_end":75}},{"value":"/ let or_ab = or(&a, &b)?;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":661223,"byte_end":661251,"line_start":110,"line_end":110,"column_start":1,"column_end":29}},{"value":"/ assert_eq!(or_ab, BooleanArray::from(vec![Some(true), Some(true), None]));","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":661252,"byte_end":661330,"line_start":111,"line_end":111,"column_start":1,"column_end":79}},{"value":"/ # Ok(())","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":661331,"byte_end":661343,"line_start":112,"line_end":112,"column_start":1,"column_end":13}},{"value":"/ # }","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":661344,"byte_end":661351,"line_start":113,"line_end":113,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":661352,"byte_end":661359,"line_start":114,"line_end":114,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":2975},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":662061,"byte_end":662064,"line_start":135,"line_end":135,"column_start":8,"column_end":11},"name":"not","qualname":"::compute::kernels::boolean::not","value":"pub fn not(&BooleanArray) -> Result<BooleanArray>","parent":null,"children":[],"decl_id":null,"docs":" Performs unary `NOT` operation on an arrays. If value is null then the result is also\n null.\n # Error\n This function never errors. It returns an error for consistency.\n # Example\n ```rust\n use arrow::array::BooleanArray;\n use arrow::error::Result;\n use arrow::compute::kernels::boolean::not;\n # fn main() -> Result<()> {\n let a = BooleanArray::from(vec![Some(false), Some(true), None]);\n let not_a = not(&a)?;\n assert_eq!(not_a, BooleanArray::from(vec![Some(true), Some(false), None]));\n # Ok(())\n # }\n ```\n","sig":null,"attributes":[{"value":"/ Performs unary `NOT` operation on an arrays. If value is null then the result is also","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":661498,"byte_end":661587,"line_start":119,"line_end":119,"column_start":1,"column_end":90}},{"value":"/ null.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":661588,"byte_end":661597,"line_start":120,"line_end":120,"column_start":1,"column_end":10}},{"value":"/ # Error","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":661598,"byte_end":661609,"line_start":121,"line_end":121,"column_start":1,"column_end":12}},{"value":"/ This function never errors. It returns an error for consistency.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":661610,"byte_end":661678,"line_start":122,"line_end":122,"column_start":1,"column_end":69}},{"value":"/ # Example","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":661679,"byte_end":661692,"line_start":123,"line_end":123,"column_start":1,"column_end":14}},{"value":"/ ```rust","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":661693,"byte_end":661704,"line_start":124,"line_end":124,"column_start":1,"column_end":12}},{"value":"/ use arrow::array::BooleanArray;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":661705,"byte_end":661740,"line_start":125,"line_end":125,"column_start":1,"column_end":36}},{"value":"/ use arrow::error::Result;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":661741,"byte_end":661770,"line_start":126,"line_end":126,"column_start":1,"column_end":30}},{"value":"/ use arrow::compute::kernels::boolean::not;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":661771,"byte_end":661817,"line_start":127,"line_end":127,"column_start":1,"column_end":47}},{"value":"/ # fn main() -> Result<()> {","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":661818,"byte_end":661849,"line_start":128,"line_end":128,"column_start":1,"column_end":32}},{"value":"/ let a = BooleanArray::from(vec![Some(false), Some(true), None]);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":661850,"byte_end":661918,"line_start":129,"line_end":129,"column_start":1,"column_end":69}},{"value":"/ let not_a = not(&a)?;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":661919,"byte_end":661944,"line_start":130,"line_end":130,"column_start":1,"column_end":26}},{"value":"/ assert_eq!(not_a, BooleanArray::from(vec![Some(true), Some(false), None]));","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":661945,"byte_end":662024,"line_start":131,"line_end":131,"column_start":1,"column_end":80}},{"value":"/ # Ok(())","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":662025,"byte_end":662037,"line_start":132,"line_end":132,"column_start":1,"column_end":13}},{"value":"/ # }","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":662038,"byte_end":662045,"line_start":133,"line_end":133,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":662046,"byte_end":662053,"line_start":134,"line_end":134,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":2977},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":663129,"byte_end":663136,"line_start":174,"line_end":174,"column_start":8,"column_end":15},"name":"is_null","qualname":"::compute::kernels::boolean::is_null","value":"pub fn is_null(&Array) -> Result<BooleanArray>","parent":null,"children":[],"decl_id":null,"docs":" Returns a non-null [BooleanArray] with whether each value of the array is null.\n # Error\n This function never errors.\n # Example\n ```rust\n # use arrow::error::Result;\n use arrow::array::BooleanArray;\n use arrow::compute::kernels::boolean::is_null;\n # fn main() -> Result<()> {\n let a = BooleanArray::from(vec![Some(false), Some(true), None]);\n let a_is_null = is_null(&a)?;\n assert_eq!(a_is_null, BooleanArray::from(vec![false, false, true]));\n # Ok(())\n # }\n ```\n","sig":null,"attributes":[{"value":"/ Returns a non-null [BooleanArray] with whether each value of the array is null.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":662612,"byte_end":662695,"line_start":159,"line_end":159,"column_start":1,"column_end":84}},{"value":"/ # Error","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":662696,"byte_end":662707,"line_start":160,"line_end":160,"column_start":1,"column_end":12}},{"value":"/ This function never errors.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":662708,"byte_end":662739,"line_start":161,"line_end":161,"column_start":1,"column_end":32}},{"value":"/ # Example","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":662740,"byte_end":662753,"line_start":162,"line_end":162,"column_start":1,"column_end":14}},{"value":"/ ```rust","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":662754,"byte_end":662765,"line_start":163,"line_end":163,"column_start":1,"column_end":12}},{"value":"/ # use arrow::error::Result;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":662766,"byte_end":662797,"line_start":164,"line_end":164,"column_start":1,"column_end":32}},{"value":"/ use arrow::array::BooleanArray;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":662798,"byte_end":662833,"line_start":165,"line_end":165,"column_start":1,"column_end":36}},{"value":"/ use arrow::compute::kernels::boolean::is_null;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":662834,"byte_end":662884,"line_start":166,"line_end":166,"column_start":1,"column_end":51}},{"value":"/ # fn main() -> Result<()> {","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":662885,"byte_end":662916,"line_start":167,"line_end":167,"column_start":1,"column_end":32}},{"value":"/ let a = BooleanArray::from(vec![Some(false), Some(true), None]);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":662917,"byte_end":662985,"line_start":168,"line_end":168,"column_start":1,"column_end":69}},{"value":"/ let a_is_null = is_null(&a)?;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":662986,"byte_end":663019,"line_start":169,"line_end":169,"column_start":1,"column_end":34}},{"value":"/ assert_eq!(a_is_null, BooleanArray::from(vec![false, false, true]));","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":663020,"byte_end":663092,"line_start":170,"line_end":170,"column_start":1,"column_end":73}},{"value":"/ # Ok(())","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":663093,"byte_end":663105,"line_start":171,"line_end":171,"column_start":1,"column_end":13}},{"value":"/ # }","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":663106,"byte_end":663113,"line_start":172,"line_end":172,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":663114,"byte_end":663121,"line_start":173,"line_end":173,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":2978},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":664207,"byte_end":664218,"line_start":208,"line_end":208,"column_start":8,"column_end":19},"name":"is_not_null","qualname":"::compute::kernels::boolean::is_not_null","value":"pub fn is_not_null(&Array) -> Result<BooleanArray>","parent":null,"children":[],"decl_id":null,"docs":" Returns a non-null [BooleanArray] with whether each value of the array is not null.\n # Error\n This function never errors.\n # Example\n ```rust\n # use arrow::error::Result;\n use arrow::array::BooleanArray;\n use arrow::compute::kernels::boolean::is_not_null;\n # fn main() -> Result<()> {\n let a = BooleanArray::from(vec![Some(false), Some(true), None]);\n let a_is_not_null = is_not_null(&a)?;\n assert_eq!(a_is_not_null, BooleanArray::from(vec![true, true, false]));\n # Ok(())\n # }\n ```\n","sig":null,"attributes":[{"value":"/ Returns a non-null [BooleanArray] with whether each value of the array is not null.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":663671,"byte_end":663758,"line_start":193,"line_end":193,"column_start":1,"column_end":88}},{"value":"/ # Error","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":663759,"byte_end":663770,"line_start":194,"line_end":194,"column_start":1,"column_end":12}},{"value":"/ This function never errors.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":663771,"byte_end":663802,"line_start":195,"line_end":195,"column_start":1,"column_end":32}},{"value":"/ # Example","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":663803,"byte_end":663816,"line_start":196,"line_end":196,"column_start":1,"column_end":14}},{"value":"/ ```rust","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":663817,"byte_end":663828,"line_start":197,"line_end":197,"column_start":1,"column_end":12}},{"value":"/ # use arrow::error::Result;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":663829,"byte_end":663860,"line_start":198,"line_end":198,"column_start":1,"column_end":32}},{"value":"/ use arrow::array::BooleanArray;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":663861,"byte_end":663896,"line_start":199,"line_end":199,"column_start":1,"column_end":36}},{"value":"/ use arrow::compute::kernels::boolean::is_not_null;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":663897,"byte_end":663951,"line_start":200,"line_end":200,"column_start":1,"column_end":55}},{"value":"/ # fn main() -> Result<()> {","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":663952,"byte_end":663983,"line_start":201,"line_end":201,"column_start":1,"column_end":32}},{"value":"/ let a = BooleanArray::from(vec![Some(false), Some(true), None]);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":663984,"byte_end":664052,"line_start":202,"line_end":202,"column_start":1,"column_end":69}},{"value":"/ let a_is_not_null = is_not_null(&a)?;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":664053,"byte_end":664094,"line_start":203,"line_end":203,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(a_is_not_null, BooleanArray::from(vec![true, true, false]));","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":664095,"byte_end":664170,"line_start":204,"line_end":204,"column_start":1,"column_end":76}},{"value":"/ # Ok(())","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":664171,"byte_end":664183,"line_start":205,"line_end":205,"column_start":1,"column_end":13}},{"value":"/ # }","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":664184,"byte_end":664191,"line_start":206,"line_end":206,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":664192,"byte_end":664199,"line_start":207,"line_end":207,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":2979},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":665389,"byte_end":665395,"line_start":234,"line_end":234,"column_start":8,"column_end":14},"name":"nullif","qualname":"::compute::kernels::boolean::nullif","value":"pub fn nullif<T>(&PrimitiveArray<T>, &BooleanArray)\n-> Result<PrimitiveArray<T>> where T: ArrowNumericType","parent":null,"children":[],"decl_id":null,"docs":" Copies original array, setting null bit to true if a secondary comparison boolean array is set to true.\n Typically used to implement NULLIF.\n","sig":null,"attributes":[{"value":"/ Copies original array, setting null bit to true if a secondary comparison boolean array is set to true.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":664744,"byte_end":664851,"line_start":227,"line_end":227,"column_start":1,"column_end":108}},{"value":"/ Typically used to implement NULLIF.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/boolean.rs","byte_start":664852,"byte_end":664891,"line_start":228,"line_end":228,"column_start":1,"column_end":40}}]},{"kind":"Mod","id":{"krate":0,"index":2984},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/cast.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"cast","qualname":"::compute::kernels::cast","value":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/cast.rs","parent":null,"children":[{"krate":0,"index":2985},{"krate":0,"index":2988},{"krate":0,"index":2991},{"krate":0,"index":2992},{"krate":0,"index":2995},{"krate":0,"index":2998},{"krate":0,"index":2999},{"krate":0,"index":3000},{"krate":0,"index":3003},{"krate":0,"index":3006},{"krate":0,"index":3007},{"krate":0,"index":3008},{"krate":0,"index":3011},{"krate":0,"index":3012},{"krate":0,"index":3015},{"krate":0,"index":3018},{"krate":0,"index":3020},{"krate":0,"index":3035},{"krate":0,"index":3036},{"krate":0,"index":3037},{"krate":0,"index":3038},{"krate":0,"index":3039},{"krate":0,"index":3040},{"krate":0,"index":3041},{"krate":0,"index":3042},{"krate":0,"index":3045},{"krate":0,"index":3048},{"krate":0,"index":3052},{"krate":0,"index":3054},{"krate":0,"index":3057},{"krate":0,"index":3059},{"krate":0,"index":3062},{"krate":0,"index":3065},{"krate":0,"index":3067},{"krate":0,"index":3069},{"krate":0,"index":3072},{"krate":0,"index":3077},{"krate":0,"index":3081},{"krate":0,"index":3084},{"krate":0,"index":3087}],"decl_id":null,"docs":" Defines cast kernels for `ArrayRef`, to convert `Array`s between\n supported datatypes.","sig":null,"attributes":[{"value":"/ Defines cast kernels for `ArrayRef`, to convert `Array`s between","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/cast.rs","byte_start":680687,"byte_end":680755,"line_start":18,"line_end":18,"column_start":1,"column_end":69}},{"value":"/ supported datatypes.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/cast.rs","byte_start":680756,"byte_end":680780,"line_start":19,"line_end":19,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/cast.rs","byte_start":680781,"byte_end":680784,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ Example:","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/cast.rs","byte_start":680785,"byte_end":680797,"line_start":21,"line_end":21,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/cast.rs","byte_start":680798,"byte_end":680801,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/cast.rs","byte_start":680802,"byte_end":680809,"line_start":23,"line_end":23,"column_start":1,"column_end":8}},{"value":"/ use arrow::array::*;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/cast.rs","byte_start":680810,"byte_end":680834,"line_start":24,"line_end":24,"column_start":1,"column_end":25}},{"value":"/ use arrow::compute::cast;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/cast.rs","byte_start":680835,"byte_end":680864,"line_start":25,"line_end":25,"column_start":1,"column_end":30}},{"value":"/ use arrow::datatypes::DataType;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/cast.rs","byte_start":680865,"byte_end":680900,"line_start":26,"line_end":26,"column_start":1,"column_end":36}},{"value":"/ use std::sync::Arc;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/cast.rs","byte_start":680901,"byte_end":680924,"line_start":27,"line_end":27,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/cast.rs","byte_start":680925,"byte_end":680928,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ let a = Int32Array::from(vec![5, 6, 7]);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/cast.rs","byte_start":680929,"byte_end":680973,"line_start":29,"line_end":29,"column_start":1,"column_end":45}},{"value":"/ let array = Arc::new(a) as ArrayRef;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/cast.rs","byte_start":680974,"byte_end":681014,"line_start":30,"line_end":30,"column_start":1,"column_end":41}},{"value":"/ let b = cast(&array, &DataType::Float64).unwrap();","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/cast.rs","byte_start":681015,"byte_end":681069,"line_start":31,"line_end":31,"column_start":1,"column_end":55}},{"value":"/ let c = b.as_any().downcast_ref::<Float64Array>().unwrap();","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/cast.rs","byte_start":681070,"byte_end":681133,"line_start":32,"line_end":32,"column_start":1,"column_end":64}},{"value":"/ assert_eq!(5.0, c.value(0));","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/cast.rs","byte_start":681134,"byte_end":681166,"line_start":33,"line_end":33,"column_start":1,"column_end":33}},{"value":"/ assert_eq!(6.0, c.value(1));","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/cast.rs","byte_start":681167,"byte_end":681199,"line_start":34,"line_end":34,"column_start":1,"column_end":33}},{"value":"/ assert_eq!(7.0, c.value(2));","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/cast.rs","byte_start":681200,"byte_end":681232,"line_start":35,"line_end":35,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/cast.rs","byte_start":681233,"byte_end":681240,"line_start":36,"line_end":36,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":3018},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/cast.rs","byte_start":681732,"byte_end":681746,"line_start":51,"line_end":51,"column_start":8,"column_end":22},"name":"can_cast_types","qualname":"::compute::kernels::cast::can_cast_types","value":"pub fn can_cast_types(&DataType, &DataType) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if a value of type `from_type` can be cast into a\n value of `to_type`. Note that such as cast may be lossy.","sig":null,"attributes":[{"value":"/ Return true if a value of type `from_type` can be cast into a","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/cast.rs","byte_start":681511,"byte_end":681576,"line_start":47,"line_end":47,"column_start":1,"column_end":66}},{"value":"/ value of `to_type`. Note that such as cast may be lossy.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/cast.rs","byte_start":681577,"byte_end":681637,"line_start":48,"line_end":48,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/cast.rs","byte_start":681638,"byte_end":681641,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ If this function returns true to stay consistent with the `cast` kernel below.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/cast.rs","byte_start":681642,"byte_end":681724,"line_start":50,"line_end":50,"column_start":1,"column_end":83}}]},{"kind":"Function","id":{"krate":0,"index":3020},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/cast.rs","byte_start":688193,"byte_end":688197,"line_start":232,"line_end":232,"column_start":8,"column_end":12},"name":"cast","qualname":"::compute::kernels::cast::cast","value":"pub fn cast(&ArrayRef, &DataType) -> Result<ArrayRef>","parent":null,"children":[],"decl_id":null,"docs":" Cast `array` to the provided data type and return a new Array with\n type `to_type`, if possible.","sig":null,"attributes":[{"value":"/ Cast `array` to the provided data type and return a new Array with","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/cast.rs","byte_start":687263,"byte_end":687333,"line_start":212,"line_end":212,"column_start":1,"column_end":71}},{"value":"/ type `to_type`, if possible.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/cast.rs","byte_start":687334,"byte_end":687366,"line_start":213,"line_end":213,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/cast.rs","byte_start":687367,"byte_end":687370,"line_start":214,"line_end":214,"column_start":1,"column_end":4}},{"value":"/ Behavior:","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/cast.rs","byte_start":687371,"byte_end":687384,"line_start":215,"line_end":215,"column_start":1,"column_end":14}},{"value":"/ * Boolean to Utf8: `true` => '1', `false` => `0`","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/cast.rs","byte_start":687385,"byte_end":687437,"line_start":216,"line_end":216,"column_start":1,"column_end":53}},{"value":"/ * Utf8 to numeric: strings that can't be parsed to numbers return null, float strings","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/cast.rs","byte_start":687438,"byte_end":687527,"line_start":217,"line_end":217,"column_start":1,"column_end":90}},{"value":"/   in integer casts return null","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/cast.rs","byte_start":687528,"byte_end":687562,"line_start":218,"line_end":218,"column_start":1,"column_end":35}},{"value":"/ * Numeric to boolean: 0 returns `false`, any other value returns `true`","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/cast.rs","byte_start":687563,"byte_end":687638,"line_start":219,"line_end":219,"column_start":1,"column_end":76}},{"value":"/ * List to List: the underlying data type is cast","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/cast.rs","byte_start":687639,"byte_end":687691,"line_start":220,"line_end":220,"column_start":1,"column_end":53}},{"value":"/ * Primitive to List: a list array with 1 value per slot is created","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/cast.rs","byte_start":687692,"byte_end":687762,"line_start":221,"line_end":221,"column_start":1,"column_end":71}},{"value":"/ * Date32 and Date64: precision lost when going to higher interval","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/cast.rs","byte_start":687763,"byte_end":687832,"line_start":222,"line_end":222,"column_start":1,"column_end":70}},{"value":"/ * Time32 and Time64: precision lost when going to higher interval","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/cast.rs","byte_start":687833,"byte_end":687902,"line_start":223,"line_end":223,"column_start":1,"column_end":70}},{"value":"/ * Timestamp and Date{32|64}: precision lost when going to higher interval","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/cast.rs","byte_start":687903,"byte_end":687980,"line_start":224,"line_end":224,"column_start":1,"column_end":78}},{"value":"/ * Temporal to/from backing primitive: zero-copy with data type change","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/cast.rs","byte_start":687981,"byte_end":688054,"line_start":225,"line_end":225,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/cast.rs","byte_start":688055,"byte_end":688058,"line_start":226,"line_end":226,"column_start":1,"column_end":4}},{"value":"/ Unsupported Casts","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/cast.rs","byte_start":688059,"byte_end":688080,"line_start":227,"line_end":227,"column_start":1,"column_end":22}},{"value":"/ * To or from `StructArray`","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/cast.rs","byte_start":688081,"byte_end":688111,"line_start":228,"line_end":228,"column_start":1,"column_end":31}},{"value":"/ * List to primitive","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/cast.rs","byte_start":688112,"byte_end":688135,"line_start":229,"line_end":229,"column_start":1,"column_end":24}},{"value":"/ * Utf8 to boolean","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/cast.rs","byte_start":688136,"byte_end":688157,"line_start":230,"line_end":230,"column_start":1,"column_end":22}},{"value":"/ * Interval and duration","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/cast.rs","byte_start":688158,"byte_end":688185,"line_start":231,"line_end":231,"column_start":1,"column_end":28}}]},{"kind":"Mod","id":{"krate":0,"index":3089},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/comparison.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"comparison","qualname":"::compute::kernels::comparison","value":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/comparison.rs","parent":null,"children":[{"krate":0,"index":3090},{"krate":0,"index":3093},{"krate":0,"index":3096},{"krate":0,"index":3099},{"krate":0,"index":3100},{"krate":0,"index":3101},{"krate":0,"index":3104},{"krate":0,"index":3107},{"krate":0,"index":3110},{"krate":0,"index":3111},{"krate":0,"index":3114},{"krate":0,"index":3117},{"krate":0,"index":3118},{"krate":0,"index":3121},{"krate":0,"index":3124},{"krate":0,"index":3129},{"krate":0,"index":3132},{"krate":0,"index":3135},{"krate":0,"index":3137},{"krate":0,"index":3138},{"krate":0,"index":3140},{"krate":0,"index":3142},{"krate":0,"index":3144},{"krate":0,"index":3145},{"krate":0,"index":3146},{"krate":0,"index":3147},{"krate":0,"index":3148},{"krate":0,"index":3149},{"krate":0,"index":3150},{"krate":0,"index":3151},{"krate":0,"index":3152},{"krate":0,"index":3153},{"krate":0,"index":3154},{"krate":0,"index":3155},{"krate":0,"index":3156},{"krate":0,"index":3158},{"krate":0,"index":3160},{"krate":0,"index":3162},{"krate":0,"index":3164},{"krate":0,"index":3166},{"krate":0,"index":3168},{"krate":0,"index":3170},{"krate":0,"index":3172},{"krate":0,"index":3174},{"krate":0,"index":3176},{"krate":0,"index":3178},{"krate":0,"index":3180},{"krate":0,"index":3183},{"krate":0,"index":3185}],"decl_id":null,"docs":" Defines basic comparison kernels for `PrimitiveArrays`.","sig":null,"attributes":[{"value":"/ Defines basic comparison kernels for `PrimitiveArrays`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/comparison.rs","byte_start":796339,"byte_end":796398,"line_start":18,"line_end":18,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/comparison.rs","byte_start":796399,"byte_end":796402,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ These kernels can leverage SIMD if available on your system.  Currently no runtime","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/comparison.rs","byte_start":796403,"byte_end":796489,"line_start":20,"line_end":20,"column_start":1,"column_end":87}},{"value":"/ detection is provided, you should enable the specific SIMD intrinsics using","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/comparison.rs","byte_start":796490,"byte_end":796569,"line_start":21,"line_end":21,"column_start":1,"column_end":80}},{"value":"/ `RUSTFLAGS=\"-C target-feature=+avx2\"` for example.  See the documentation","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/comparison.rs","byte_start":796570,"byte_end":796647,"line_start":22,"line_end":22,"column_start":1,"column_end":78}},{"value":"/ [here](https://doc.rust-lang.org/stable/core/arch/) for more information.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/comparison.rs","byte_start":796648,"byte_end":796725,"line_start":23,"line_end":23,"column_start":1,"column_end":78}}]},{"kind":"Function","id":{"krate":0,"index":3129},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/comparison.rs","byte_start":799534,"byte_end":799552,"line_start":112,"line_end":112,"column_start":8,"column_end":26},"name":"no_simd_compare_op","qualname":"::compute::kernels::comparison::no_simd_compare_op","value":"pub fn no_simd_compare_op<T, F>(&PrimitiveArray<T>, &PrimitiveArray<T>, F)\n-> Result<BooleanArray> where T: ArrowNumericType, F: Fn(T::Native, T::Native)\n-> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":3132},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/comparison.rs","byte_start":799775,"byte_end":799800,"line_start":124,"line_end":124,"column_start":8,"column_end":33},"name":"no_simd_compare_op_scalar","qualname":"::compute::kernels::comparison::no_simd_compare_op_scalar","value":"pub fn no_simd_compare_op_scalar<T, F>(&PrimitiveArray<T>, T::Native, F)\n-> Result<BooleanArray> where T: ArrowNumericType, F: Fn(T::Native, T::Native)\n-> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":3135},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/comparison.rs","byte_start":800021,"byte_end":800030,"line_start":136,"line_end":136,"column_start":8,"column_end":17},"name":"like_utf8","qualname":"::compute::kernels::comparison::like_utf8","value":"pub fn like_utf8(&StringArray, &StringArray) -> Result<BooleanArray>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":3138},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/comparison.rs","byte_start":801455,"byte_end":801471,"line_start":185,"line_end":185,"column_start":8,"column_end":24},"name":"like_utf8_scalar","qualname":"::compute::kernels::comparison::like_utf8_scalar","value":"pub fn like_utf8_scalar(&StringArray, &str) -> Result<BooleanArray>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":3140},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/comparison.rs","byte_start":803005,"byte_end":803015,"line_start":232,"line_end":232,"column_start":8,"column_end":18},"name":"nlike_utf8","qualname":"::compute::kernels::comparison::nlike_utf8","value":"pub fn nlike_utf8(&StringArray, &StringArray) -> Result<BooleanArray>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":3142},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/comparison.rs","byte_start":804375,"byte_end":804392,"line_start":277,"line_end":277,"column_start":8,"column_end":25},"name":"nlike_utf8_scalar","qualname":"::compute::kernels::comparison::nlike_utf8_scalar","value":"pub fn nlike_utf8_scalar(&StringArray, &str) -> Result<BooleanArray>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":3144},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/comparison.rs","byte_start":805927,"byte_end":805934,"line_start":323,"line_end":323,"column_start":8,"column_end":15},"name":"eq_utf8","qualname":"::compute::kernels::comparison::eq_utf8","value":"pub fn eq_utf8(&StringArray, &StringArray) -> Result<BooleanArray>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":3145},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/comparison.rs","byte_start":806056,"byte_end":806070,"line_start":327,"line_end":327,"column_start":8,"column_end":22},"name":"eq_utf8_scalar","qualname":"::compute::kernels::comparison::eq_utf8_scalar","value":"pub fn eq_utf8_scalar(&StringArray, &str) -> Result<BooleanArray>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":3146},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/comparison.rs","byte_start":806191,"byte_end":806199,"line_start":331,"line_end":331,"column_start":8,"column_end":16},"name":"neq_utf8","qualname":"::compute::kernels::comparison::neq_utf8","value":"pub fn neq_utf8(&StringArray, &StringArray) -> Result<BooleanArray>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":3147},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/comparison.rs","byte_start":806321,"byte_end":806336,"line_start":335,"line_end":335,"column_start":8,"column_end":23},"name":"neq_utf8_scalar","qualname":"::compute::kernels::comparison::neq_utf8_scalar","value":"pub fn neq_utf8_scalar(&StringArray, &str) -> Result<BooleanArray>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":3148},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/comparison.rs","byte_start":806457,"byte_end":806464,"line_start":339,"line_end":339,"column_start":8,"column_end":15},"name":"lt_utf8","qualname":"::compute::kernels::comparison::lt_utf8","value":"pub fn lt_utf8(&StringArray, &StringArray) -> Result<BooleanArray>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":3149},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/comparison.rs","byte_start":806585,"byte_end":806599,"line_start":343,"line_end":343,"column_start":8,"column_end":22},"name":"lt_utf8_scalar","qualname":"::compute::kernels::comparison::lt_utf8_scalar","value":"pub fn lt_utf8_scalar(&StringArray, &str) -> Result<BooleanArray>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":3150},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/comparison.rs","byte_start":806719,"byte_end":806729,"line_start":347,"line_end":347,"column_start":8,"column_end":18},"name":"lt_eq_utf8","qualname":"::compute::kernels::comparison::lt_eq_utf8","value":"pub fn lt_eq_utf8(&StringArray, &StringArray) -> Result<BooleanArray>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":3151},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/comparison.rs","byte_start":806851,"byte_end":806868,"line_start":351,"line_end":351,"column_start":8,"column_end":25},"name":"lt_eq_utf8_scalar","qualname":"::compute::kernels::comparison::lt_eq_utf8_scalar","value":"pub fn lt_eq_utf8_scalar(&StringArray, &str) -> Result<BooleanArray>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":3152},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/comparison.rs","byte_start":806989,"byte_end":806996,"line_start":355,"line_end":355,"column_start":8,"column_end":15},"name":"gt_utf8","qualname":"::compute::kernels::comparison::gt_utf8","value":"pub fn gt_utf8(&StringArray, &StringArray) -> Result<BooleanArray>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":3153},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/comparison.rs","byte_start":807117,"byte_end":807131,"line_start":359,"line_end":359,"column_start":8,"column_end":22},"name":"gt_utf8_scalar","qualname":"::compute::kernels::comparison::gt_utf8_scalar","value":"pub fn gt_utf8_scalar(&StringArray, &str) -> Result<BooleanArray>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":3154},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/comparison.rs","byte_start":807251,"byte_end":807261,"line_start":363,"line_end":363,"column_start":8,"column_end":18},"name":"gt_eq_utf8","qualname":"::compute::kernels::comparison::gt_eq_utf8","value":"pub fn gt_eq_utf8(&StringArray, &StringArray) -> Result<BooleanArray>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":3155},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/comparison.rs","byte_start":807383,"byte_end":807400,"line_start":367,"line_end":367,"column_start":8,"column_end":25},"name":"gt_eq_utf8_scalar","qualname":"::compute::kernels::comparison::gt_eq_utf8_scalar","value":"pub fn gt_eq_utf8_scalar(&StringArray, &str) -> Result<BooleanArray>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":3156},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/comparison.rs","byte_start":813005,"byte_end":813007,"line_start":545,"line_end":545,"column_start":8,"column_end":10},"name":"eq","qualname":"::compute::kernels::comparison::eq","value":"pub fn eq<T>(&PrimitiveArray<T>, &PrimitiveArray<T>) -> Result<BooleanArray>\nwhere T: ArrowNumericType","parent":null,"children":[],"decl_id":null,"docs":" Perform `left == right` operation on two arrays.\n","sig":null,"attributes":[{"value":"/ Perform `left == right` operation on two arrays.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/comparison.rs","byte_start":812945,"byte_end":812997,"line_start":544,"line_end":544,"column_start":1,"column_end":53}}]},{"kind":"Function","id":{"krate":0,"index":3158},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/comparison.rs","byte_start":813355,"byte_end":813364,"line_start":556,"line_end":556,"column_start":8,"column_end":17},"name":"eq_scalar","qualname":"::compute::kernels::comparison::eq_scalar","value":"pub fn eq_scalar<T>(&PrimitiveArray<T>, T::Native) -> Result<BooleanArray>\nwhere T: ArrowNumericType","parent":null,"children":[],"decl_id":null,"docs":" Perform `left == right` operation on an array and a scalar value.\n","sig":null,"attributes":[{"value":"/ Perform `left == right` operation on an array and a scalar value.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/comparison.rs","byte_start":813278,"byte_end":813347,"line_start":555,"line_end":555,"column_start":1,"column_end":70}}]},{"kind":"Function","id":{"krate":0,"index":3160},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/comparison.rs","byte_start":813700,"byte_end":813703,"line_start":567,"line_end":567,"column_start":8,"column_end":11},"name":"neq","qualname":"::compute::kernels::comparison::neq","value":"pub fn neq<T>(&PrimitiveArray<T>, &PrimitiveArray<T>) -> Result<BooleanArray>\nwhere T: ArrowNumericType","parent":null,"children":[],"decl_id":null,"docs":" Perform `left != right` operation on two arrays.\n","sig":null,"attributes":[{"value":"/ Perform `left != right` operation on two arrays.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/comparison.rs","byte_start":813640,"byte_end":813692,"line_start":566,"line_end":566,"column_start":1,"column_end":53}}]},{"kind":"Function","id":{"krate":0,"index":3162},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/comparison.rs","byte_start":814051,"byte_end":814061,"line_start":578,"line_end":578,"column_start":8,"column_end":18},"name":"neq_scalar","qualname":"::compute::kernels::comparison::neq_scalar","value":"pub fn neq_scalar<T>(&PrimitiveArray<T>, T::Native) -> Result<BooleanArray>\nwhere T: ArrowNumericType","parent":null,"children":[],"decl_id":null,"docs":" Perform `left != right` operation on an array and a scalar value.\n","sig":null,"attributes":[{"value":"/ Perform `left != right` operation on an array and a scalar value.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/comparison.rs","byte_start":813974,"byte_end":814043,"line_start":577,"line_end":577,"column_start":1,"column_end":70}}]},{"kind":"Function","id":{"krate":0,"index":3164},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/comparison.rs","byte_start":814443,"byte_end":814445,"line_start":590,"line_end":590,"column_start":8,"column_end":10},"name":"lt","qualname":"::compute::kernels::comparison::lt","value":"pub fn lt<T>(&PrimitiveArray<T>, &PrimitiveArray<T>) -> Result<BooleanArray>\nwhere T: ArrowNumericType","parent":null,"children":[],"decl_id":null,"docs":" Perform `left < right` operation on two arrays. Null values are less than non-null\n values.\n","sig":null,"attributes":[{"value":"/ Perform `left < right` operation on two arrays. Null values are less than non-null","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/comparison.rs","byte_start":814337,"byte_end":814423,"line_start":588,"line_end":588,"column_start":1,"column_end":87}},{"value":"/ values.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/comparison.rs","byte_start":814424,"byte_end":814435,"line_start":589,"line_end":589,"column_start":1,"column_end":12}}]},{"kind":"Function","id":{"krate":0,"index":3166},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/comparison.rs","byte_start":814837,"byte_end":814846,"line_start":602,"line_end":602,"column_start":8,"column_end":17},"name":"lt_scalar","qualname":"::compute::kernels::comparison::lt_scalar","value":"pub fn lt_scalar<T>(&PrimitiveArray<T>, T::Native) -> Result<BooleanArray>\nwhere T: ArrowNumericType","parent":null,"children":[],"decl_id":null,"docs":" Perform `left < right` operation on an array and a scalar value.\n Null values are less than non-null values.\n","sig":null,"attributes":[{"value":"/ Perform `left < right` operation on an array and a scalar value.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/comparison.rs","byte_start":814714,"byte_end":814782,"line_start":600,"line_end":600,"column_start":1,"column_end":69}},{"value":"/ Null values are less than non-null values.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/comparison.rs","byte_start":814783,"byte_end":814829,"line_start":601,"line_end":601,"column_start":1,"column_end":47}}]},{"kind":"Function","id":{"krate":0,"index":3168},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/comparison.rs","byte_start":815227,"byte_end":815232,"line_start":614,"line_end":614,"column_start":8,"column_end":13},"name":"lt_eq","qualname":"::compute::kernels::comparison::lt_eq","value":"pub fn lt_eq<T>(&PrimitiveArray<T>, &PrimitiveArray<T>)\n-> Result<BooleanArray> where T: ArrowNumericType","parent":null,"children":[],"decl_id":null,"docs":" Perform `left <= right` operation on two arrays. Null values are less than non-null\n values.\n","sig":null,"attributes":[{"value":"/ Perform `left <= right` operation on two arrays. Null values are less than non-null","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/comparison.rs","byte_start":815120,"byte_end":815207,"line_start":612,"line_end":612,"column_start":1,"column_end":88}},{"value":"/ values.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/comparison.rs","byte_start":815208,"byte_end":815219,"line_start":613,"line_end":613,"column_start":1,"column_end":12}}]},{"kind":"Function","id":{"krate":0,"index":3170},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/comparison.rs","byte_start":815638,"byte_end":815650,"line_start":629,"line_end":629,"column_start":8,"column_end":20},"name":"lt_eq_scalar","qualname":"::compute::kernels::comparison::lt_eq_scalar","value":"pub fn lt_eq_scalar<T>(&PrimitiveArray<T>, T::Native) -> Result<BooleanArray>\nwhere T: ArrowNumericType","parent":null,"children":[],"decl_id":null,"docs":" Perform `left <= right` operation on an array and a scalar value.\n Null values are less than non-null values.\n","sig":null,"attributes":[{"value":"/ Perform `left <= right` operation on an array and a scalar value.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/comparison.rs","byte_start":815514,"byte_end":815583,"line_start":627,"line_end":627,"column_start":1,"column_end":70}},{"value":"/ Null values are less than non-null values.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/comparison.rs","byte_start":815584,"byte_end":815630,"line_start":628,"line_end":628,"column_start":1,"column_end":47}}]},{"kind":"Function","id":{"krate":0,"index":3172},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/comparison.rs","byte_start":816035,"byte_end":816037,"line_start":641,"line_end":641,"column_start":8,"column_end":10},"name":"gt","qualname":"::compute::kernels::comparison::gt","value":"pub fn gt<T>(&PrimitiveArray<T>, &PrimitiveArray<T>) -> Result<BooleanArray>\nwhere T: ArrowNumericType","parent":null,"children":[],"decl_id":null,"docs":" Perform `left > right` operation on two arrays. Non-null values are greater than null\n values.\n","sig":null,"attributes":[{"value":"/ Perform `left > right` operation on two arrays. Non-null values are greater than null","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/comparison.rs","byte_start":815926,"byte_end":816015,"line_start":639,"line_end":639,"column_start":1,"column_end":90}},{"value":"/ values.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/comparison.rs","byte_start":816016,"byte_end":816027,"line_start":640,"line_end":640,"column_start":1,"column_end":12}}]},{"kind":"Function","id":{"krate":0,"index":3174},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/comparison.rs","byte_start":816432,"byte_end":816441,"line_start":653,"line_end":653,"column_start":8,"column_end":17},"name":"gt_scalar","qualname":"::compute::kernels::comparison::gt_scalar","value":"pub fn gt_scalar<T>(&PrimitiveArray<T>, T::Native) -> Result<BooleanArray>\nwhere T: ArrowNumericType","parent":null,"children":[],"decl_id":null,"docs":" Perform `left > right` operation on an array and a scalar value.\n Non-null values are greater than null values.\n","sig":null,"attributes":[{"value":"/ Perform `left > right` operation on an array and a scalar value.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/comparison.rs","byte_start":816306,"byte_end":816374,"line_start":651,"line_end":651,"column_start":1,"column_end":69}},{"value":"/ Non-null values are greater than null values.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/comparison.rs","byte_start":816375,"byte_end":816424,"line_start":652,"line_end":652,"column_start":1,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":3176},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/comparison.rs","byte_start":816825,"byte_end":816830,"line_start":665,"line_end":665,"column_start":8,"column_end":13},"name":"gt_eq","qualname":"::compute::kernels::comparison::gt_eq","value":"pub fn gt_eq<T>(&PrimitiveArray<T>, &PrimitiveArray<T>)\n-> Result<BooleanArray> where T: ArrowNumericType","parent":null,"children":[],"decl_id":null,"docs":" Perform `left >= right` operation on two arrays. Non-null values are greater than null\n values.\n","sig":null,"attributes":[{"value":"/ Perform `left >= right` operation on two arrays. Non-null values are greater than null","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/comparison.rs","byte_start":816715,"byte_end":816805,"line_start":663,"line_end":663,"column_start":1,"column_end":91}},{"value":"/ values.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/comparison.rs","byte_start":816806,"byte_end":816817,"line_start":664,"line_end":664,"column_start":1,"column_end":12}}]},{"kind":"Function","id":{"krate":0,"index":3178},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/comparison.rs","byte_start":817239,"byte_end":817251,"line_start":680,"line_end":680,"column_start":8,"column_end":20},"name":"gt_eq_scalar","qualname":"::compute::kernels::comparison::gt_eq_scalar","value":"pub fn gt_eq_scalar<T>(&PrimitiveArray<T>, T::Native) -> Result<BooleanArray>\nwhere T: ArrowNumericType","parent":null,"children":[],"decl_id":null,"docs":" Perform `left >= right` operation on an array and a scalar value.\n Non-null values are greater than null values.\n","sig":null,"attributes":[{"value":"/ Perform `left >= right` operation on an array and a scalar value.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/comparison.rs","byte_start":817112,"byte_end":817181,"line_start":678,"line_end":678,"column_start":1,"column_end":70}},{"value":"/ Non-null values are greater than null values.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/comparison.rs","byte_start":817182,"byte_end":817231,"line_start":679,"line_end":679,"column_start":1,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":3180},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/comparison.rs","byte_start":817610,"byte_end":817618,"line_start":691,"line_end":691,"column_start":8,"column_end":16},"name":"contains","qualname":"::compute::kernels::comparison::contains","value":"pub fn contains<T,\n                OffsetSize>(&PrimitiveArray<T>, &GenericListArray<OffsetSize>)\n-> Result<BooleanArray> where T: ArrowNumericType, OffsetSize: OffsetSizeTrait","parent":null,"children":[],"decl_id":null,"docs":" Checks if a `GenericListArray` contains a value in the `PrimitiveArray`\n","sig":null,"attributes":[{"value":"/ Checks if a `GenericListArray` contains a value in the `PrimitiveArray`","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/comparison.rs","byte_start":817527,"byte_end":817602,"line_start":690,"line_end":690,"column_start":1,"column_end":76}}]},{"kind":"Function","id":{"krate":0,"index":3183},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/comparison.rs","byte_start":819325,"byte_end":819338,"line_start":747,"line_end":747,"column_start":8,"column_end":21},"name":"contains_utf8","qualname":"::compute::kernels::comparison::contains_utf8","value":"pub fn contains_utf8<OffsetSize>(&GenericStringArray<OffsetSize>, &ListArray)\n-> Result<BooleanArray> where OffsetSize: StringOffsetSizeTrait","parent":null,"children":[],"decl_id":null,"docs":" Checks if a `GenericListArray` contains a value in the `GenericStringArray`\n","sig":null,"attributes":[{"value":"/ Checks if a `GenericListArray` contains a value in the `GenericStringArray`","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/comparison.rs","byte_start":819238,"byte_end":819317,"line_start":746,"line_end":746,"column_start":1,"column_end":80}}]},{"kind":"Mod","id":{"krate":0,"index":3186},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/concat.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"concat","qualname":"::compute::kernels::concat","value":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/concat.rs","parent":null,"children":[{"krate":0,"index":3187},{"krate":0,"index":3190},{"krate":0,"index":3191},{"krate":0,"index":3192},{"krate":0,"index":3195},{"krate":0,"index":3198}],"decl_id":null,"docs":" Defines concat kernel for `ArrayRef`","sig":null,"attributes":[{"value":"/ Defines concat kernel for `ArrayRef`","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/concat.rs","byte_start":842032,"byte_end":842072,"line_start":18,"line_end":18,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/concat.rs","byte_start":842073,"byte_end":842076,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ Example:","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/concat.rs","byte_start":842077,"byte_end":842089,"line_start":20,"line_end":20,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/concat.rs","byte_start":842090,"byte_end":842093,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/concat.rs","byte_start":842094,"byte_end":842101,"line_start":22,"line_end":22,"column_start":1,"column_end":8}},{"value":"/ use arrow::array::{ArrayRef, StringArray};","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/concat.rs","byte_start":842102,"byte_end":842148,"line_start":23,"line_end":23,"column_start":1,"column_end":47}},{"value":"/ use arrow::compute::concat;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/concat.rs","byte_start":842149,"byte_end":842180,"line_start":24,"line_end":24,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/concat.rs","byte_start":842181,"byte_end":842184,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ let arr = concat(&[","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/concat.rs","byte_start":842185,"byte_end":842208,"line_start":26,"line_end":26,"column_start":1,"column_end":24}},{"value":"/     &StringArray::from(vec![\"hello\", \"world\"]),","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/concat.rs","byte_start":842209,"byte_end":842260,"line_start":27,"line_end":27,"column_start":1,"column_end":52}},{"value":"/     &StringArray::from(vec![\"!\"]),","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/concat.rs","byte_start":842261,"byte_end":842299,"line_start":28,"line_end":28,"column_start":1,"column_end":39}},{"value":"/ ]).unwrap();","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/concat.rs","byte_start":842300,"byte_end":842316,"line_start":29,"line_end":29,"column_start":1,"column_end":17}},{"value":"/ assert_eq!(arr.len(), 3);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/concat.rs","byte_start":842317,"byte_end":842346,"line_start":30,"line_end":30,"column_start":1,"column_end":30}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/concat.rs","byte_start":842347,"byte_end":842354,"line_start":31,"line_end":31,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":3198},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/concat.rs","byte_start":842522,"byte_end":842528,"line_start":39,"line_end":39,"column_start":8,"column_end":14},"name":"concat","qualname":"::compute::kernels::concat::concat","value":"pub fn concat(&[&Array]) -> Result<ArrayRef>","parent":null,"children":[],"decl_id":null,"docs":" Concatenate multiple [Array] of the same type into a single [ArrayRef].\n","sig":null,"attributes":[{"value":"/ Concatenate multiple [Array] of the same type into a single [ArrayRef].","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/concat.rs","byte_start":842439,"byte_end":842514,"line_start":38,"line_end":38,"column_start":1,"column_end":76}}]},{"kind":"Mod","id":{"krate":0,"index":3202},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/filter.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"filter","qualname":"::compute::kernels::filter","value":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/filter.rs","parent":null,"children":[{"krate":0,"index":3203},{"krate":0,"index":3206},{"krate":0,"index":3209},{"krate":0,"index":3210},{"krate":0,"index":3211},{"krate":0,"index":3214},{"krate":0,"index":3215},{"krate":0,"index":3218},{"krate":0,"index":3221},{"krate":0,"index":7701},{"krate":0,"index":7711},{"krate":0,"index":7713},{"krate":0,"index":7714},{"krate":0,"index":7717},{"krate":0,"index":7730},{"krate":0,"index":3223},{"krate":0,"index":3229},{"krate":0,"index":3233},{"krate":0,"index":3236},{"krate":0,"index":3238}],"decl_id":null,"docs":" Defines miscellaneous array kernels.\n","sig":null,"attributes":[{"value":"/ Defines miscellaneous array kernels.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/filter.rs","byte_start":849473,"byte_end":849513,"line_start":18,"line_end":18,"column_start":1,"column_end":41}}]},{"kind":"Type","id":{"krate":0,"index":3221},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/filter.rs","byte_start":849741,"byte_end":849747,"line_start":26,"line_end":26,"column_start":10,"column_end":16},"name":"Filter","qualname":"::compute::kernels::filter::Filter","value":"Box<Fn(&ArrayData) -> ArrayData + 'a>","parent":null,"children":[],"decl_id":null,"docs":" Function that can filter arbitrary arrays\n","sig":null,"attributes":[{"value":"/ Function that can filter arbitrary arrays","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/filter.rs","byte_start":849686,"byte_end":849731,"line_start":25,"line_end":25,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":3233},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/filter.rs","byte_start":855472,"byte_end":855484,"line_start":192,"line_end":192,"column_start":8,"column_end":20},"name":"build_filter","qualname":"::compute::kernels::filter::build_filter","value":"pub fn build_filter(&BooleanArray) -> Result<Filter>","parent":null,"children":[],"decl_id":null,"docs":" Returns a prepared function optimized to filter multiple arrays.\n Creating this function requires time, but using it is faster than [filter] when the\n same filter needs to be applied to multiple arrays (e.g. a multi-column `RecordBatch`).\n WARNING: the nulls of `filter` are ignored and the value on its slot is considered.\n Therefore, it is considered undefined behavior to pass `filter` with null values.\n","sig":null,"attributes":[{"value":"/ Returns a prepared function optimized to filter multiple arrays.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/filter.rs","byte_start":855042,"byte_end":855110,"line_start":187,"line_end":187,"column_start":1,"column_end":69}},{"value":"/ Creating this function requires time, but using it is faster than [filter] when the","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/filter.rs","byte_start":855111,"byte_end":855198,"line_start":188,"line_end":188,"column_start":1,"column_end":88}},{"value":"/ same filter needs to be applied to multiple arrays (e.g. a multi-column `RecordBatch`).","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/filter.rs","byte_start":855199,"byte_end":855290,"line_start":189,"line_end":189,"column_start":1,"column_end":92}},{"value":"/ WARNING: the nulls of `filter` are ignored and the value on its slot is considered.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/filter.rs","byte_start":855291,"byte_end":855378,"line_start":190,"line_end":190,"column_start":1,"column_end":88}},{"value":"/ Therefore, it is considered undefined behavior to pass `filter` with null values.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/filter.rs","byte_start":855379,"byte_end":855464,"line_start":191,"line_end":191,"column_start":1,"column_end":86}}]},{"kind":"Function","id":{"krate":0,"index":3236},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/filter.rs","byte_start":856719,"byte_end":856725,"line_start":223,"line_end":223,"column_start":8,"column_end":14},"name":"filter","qualname":"::compute::kernels::filter::filter","value":"pub fn filter(&Array, &BooleanArray) -> Result<ArrayRef>","parent":null,"children":[],"decl_id":null,"docs":" Filters an [Array], returning elements matching the filter (i.e. where the values are true).\n WARNING: the nulls of `filter` are ignored and the value on its slot is considered.\n Therefore, it is considered undefined behavior to pass `filter` with null values.\n # Example\n ```rust\n # use arrow::array::{Int32Array, BooleanArray};\n # use arrow::error::Result;\n # use arrow::compute::kernels::filter::filter;\n # fn main() -> Result<()> {\n let array = Int32Array::from(vec![5, 6, 7, 8, 9]);\n let filter_array = BooleanArray::from(vec![true, false, false, true, false]);\n let c = filter(&array, &filter_array)?;\n let c = c.as_any().downcast_ref::<Int32Array>().unwrap();\n assert_eq!(c, &Int32Array::from(vec![5, 8]));\n # Ok(())\n # }\n ```\n","sig":null,"attributes":[{"value":"/ Filters an [Array], returning elements matching the filter (i.e. where the values are true).","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/filter.rs","byte_start":855926,"byte_end":856022,"line_start":206,"line_end":206,"column_start":1,"column_end":97}},{"value":"/ WARNING: the nulls of `filter` are ignored and the value on its slot is considered.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/filter.rs","byte_start":856023,"byte_end":856110,"line_start":207,"line_end":207,"column_start":1,"column_end":88}},{"value":"/ Therefore, it is considered undefined behavior to pass `filter` with null values.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/filter.rs","byte_start":856111,"byte_end":856196,"line_start":208,"line_end":208,"column_start":1,"column_end":86}},{"value":"/ # Example","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/filter.rs","byte_start":856197,"byte_end":856210,"line_start":209,"line_end":209,"column_start":1,"column_end":14}},{"value":"/ ```rust","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/filter.rs","byte_start":856211,"byte_end":856222,"line_start":210,"line_end":210,"column_start":1,"column_end":12}},{"value":"/ # use arrow::array::{Int32Array, BooleanArray};","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/filter.rs","byte_start":856223,"byte_end":856274,"line_start":211,"line_end":211,"column_start":1,"column_end":52}},{"value":"/ # use arrow::error::Result;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/filter.rs","byte_start":856275,"byte_end":856306,"line_start":212,"line_end":212,"column_start":1,"column_end":32}},{"value":"/ # use arrow::compute::kernels::filter::filter;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/filter.rs","byte_start":856307,"byte_end":856357,"line_start":213,"line_end":213,"column_start":1,"column_end":51}},{"value":"/ # fn main() -> Result<()> {","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/filter.rs","byte_start":856358,"byte_end":856389,"line_start":214,"line_end":214,"column_start":1,"column_end":32}},{"value":"/ let array = Int32Array::from(vec![5, 6, 7, 8, 9]);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/filter.rs","byte_start":856390,"byte_end":856444,"line_start":215,"line_end":215,"column_start":1,"column_end":55}},{"value":"/ let filter_array = BooleanArray::from(vec![true, false, false, true, false]);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/filter.rs","byte_start":856445,"byte_end":856526,"line_start":216,"line_end":216,"column_start":1,"column_end":82}},{"value":"/ let c = filter(&array, &filter_array)?;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/filter.rs","byte_start":856527,"byte_end":856570,"line_start":217,"line_end":217,"column_start":1,"column_end":44}},{"value":"/ let c = c.as_any().downcast_ref::<Int32Array>().unwrap();","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/filter.rs","byte_start":856571,"byte_end":856632,"line_start":218,"line_end":218,"column_start":1,"column_end":62}},{"value":"/ assert_eq!(c, &Int32Array::from(vec![5, 8]));","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/filter.rs","byte_start":856633,"byte_end":856682,"line_start":219,"line_end":219,"column_start":1,"column_end":50}},{"value":"/ # Ok(())","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/filter.rs","byte_start":856683,"byte_end":856695,"line_start":220,"line_end":220,"column_start":1,"column_end":13}},{"value":"/ # }","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/filter.rs","byte_start":856696,"byte_end":856703,"line_start":221,"line_end":221,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/filter.rs","byte_start":856704,"byte_end":856711,"line_start":222,"line_end":222,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":3238},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/filter.rs","byte_start":857339,"byte_end":857358,"line_start":236,"line_end":236,"column_start":8,"column_end":27},"name":"filter_record_batch","qualname":"::compute::kernels::filter::filter_record_batch","value":"pub fn filter_record_batch(&RecordBatch, &BooleanArray) -> Result<RecordBatch>","parent":null,"children":[],"decl_id":null,"docs":" Returns a new [RecordBatch] with arrays containing only values matching the filter.\n WARNING: the nulls of `filter` are ignored and the value on its slot is considered.\n Therefore, it is considered undefined behavior to pass `filter` with null values.\n","sig":null,"attributes":[{"value":"/ Returns a new [RecordBatch] with arrays containing only values matching the filter.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/filter.rs","byte_start":857070,"byte_end":857157,"line_start":233,"line_end":233,"column_start":1,"column_end":88}},{"value":"/ WARNING: the nulls of `filter` are ignored and the value on its slot is considered.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/filter.rs","byte_start":857158,"byte_end":857245,"line_start":234,"line_end":234,"column_start":1,"column_end":88}},{"value":"/ Therefore, it is considered undefined behavior to pass `filter` with null values.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/filter.rs","byte_start":857246,"byte_end":857331,"line_start":235,"line_end":235,"column_start":1,"column_end":86}}]},{"kind":"Mod","id":{"krate":0,"index":3240},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/length.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"length","qualname":"::compute::kernels::length","value":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/length.rs","parent":null,"children":[{"krate":0,"index":3241},{"krate":0,"index":3244},{"krate":0,"index":3245},{"krate":0,"index":3246},{"krate":0,"index":3249},{"krate":0,"index":3250},{"krate":0,"index":3253},{"krate":0,"index":3254},{"krate":0,"index":3257},{"krate":0,"index":3260},{"krate":0,"index":3263},{"krate":0,"index":3267}],"decl_id":null,"docs":" Defines kernel for length of a string array\n","sig":null,"attributes":[{"value":"/ Defines kernel for length of a string array","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/length.rs","byte_start":870904,"byte_end":870951,"line_start":18,"line_end":18,"column_start":1,"column_end":48}}]},{"kind":"Function","id":{"krate":0,"index":3267},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/length.rs","byte_start":872360,"byte_end":872366,"line_start":67,"line_end":67,"column_start":8,"column_end":14},"name":"length","qualname":"::compute::kernels::length::length","value":"pub fn length(&Array) -> Result<ArrayRef>","parent":null,"children":[],"decl_id":null,"docs":" Returns an array of Int32/Int64 denoting the number of characters in each string in the array.","sig":null,"attributes":[{"value":"/ Returns an array of Int32/Int64 denoting the number of characters in each string in the array.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/length.rs","byte_start":872118,"byte_end":872216,"line_start":62,"line_end":62,"column_start":1,"column_end":99}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/length.rs","byte_start":872217,"byte_end":872220,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ * this only accepts StringArray/Utf8 and LargeString/LargeUtf8","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/length.rs","byte_start":872221,"byte_end":872287,"line_start":64,"line_end":64,"column_start":1,"column_end":67}},{"value":"/ * length of null is null.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/length.rs","byte_start":872288,"byte_end":872317,"line_start":65,"line_end":65,"column_start":1,"column_end":30}},{"value":"/ * length is in number of bytes","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/length.rs","byte_start":872318,"byte_end":872352,"line_start":66,"line_end":66,"column_start":1,"column_end":35}}]},{"kind":"Mod","id":{"krate":0,"index":3268},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/limit.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"limit","qualname":"::compute::kernels::limit","value":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/limit.rs","parent":null,"children":[{"krate":0,"index":3269},{"krate":0,"index":3272}],"decl_id":null,"docs":" Defines miscellaneous array kernels.\n","sig":null,"attributes":[{"value":"/ Defines miscellaneous array kernels.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/limit.rs","byte_start":877517,"byte_end":877557,"line_start":18,"line_end":18,"column_start":1,"column_end":41}}]},{"kind":"Function","id":{"krate":0,"index":3272},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/limit.rs","byte_start":877842,"byte_end":877847,"line_start":28,"line_end":28,"column_start":8,"column_end":13},"name":"limit","qualname":"::compute::kernels::limit::limit","value":"pub fn limit(&ArrayRef, usize) -> ArrayRef","parent":null,"children":[],"decl_id":null,"docs":" Returns the array, taking only the number of elements specified","sig":null,"attributes":[{"value":"/ Returns the array, taking only the number of elements specified","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/limit.rs","byte_start":877588,"byte_end":877655,"line_start":22,"line_end":22,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/limit.rs","byte_start":877656,"byte_end":877659,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ Limit performs a zero-copy slice of the array, and is a convenience method on slice","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/limit.rs","byte_start":877660,"byte_end":877747,"line_start":24,"line_end":24,"column_start":1,"column_end":88}},{"value":"/ where:","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/limit.rs","byte_start":877748,"byte_end":877758,"line_start":25,"line_end":25,"column_start":1,"column_end":11}},{"value":"/ * it performs a bounds-check on the array","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/limit.rs","byte_start":877759,"byte_end":877804,"line_start":26,"line_end":26,"column_start":1,"column_end":46}},{"value":"/ * it slices from offset 0","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/limit.rs","byte_start":877805,"byte_end":877834,"line_start":27,"line_end":27,"column_start":1,"column_end":30}}]},{"kind":"Mod","id":{"krate":0,"index":3273},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/sort.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"sort","qualname":"::compute::kernels::sort","value":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/sort.rs","parent":null,"children":[{"krate":0,"index":3274},{"krate":0,"index":3275},{"krate":0,"index":3278},{"krate":0,"index":3279},{"krate":0,"index":3281},{"krate":0,"index":3282},{"krate":0,"index":3285},{"krate":0,"index":3286},{"krate":0,"index":3287},{"krate":0,"index":3290},{"krate":0,"index":3293},{"krate":0,"index":3296},{"krate":0,"index":3299},{"krate":0,"index":3302},{"krate":0,"index":3303},{"krate":0,"index":3304},{"krate":0,"index":3305},{"krate":0,"index":3306},{"krate":0,"index":3308},{"krate":0,"index":3310},{"krate":0,"index":7733},{"krate":0,"index":7736},{"krate":0,"index":7738},{"krate":0,"index":7739},{"krate":0,"index":3311},{"krate":0,"index":3313},{"krate":0,"index":3317},{"krate":0,"index":3323},{"krate":0,"index":3327},{"krate":0,"index":3329},{"krate":0,"index":3332},{"krate":0,"index":3340},{"krate":0,"index":3350},{"krate":0,"index":7741},{"krate":0,"index":7744},{"krate":0,"index":7746},{"krate":0,"index":3351},{"krate":0,"index":3353}],"decl_id":null,"docs":" Defines sort kernel for `ArrayRef`\n","sig":null,"attributes":[{"value":"/ Defines sort kernel for `ArrayRef`","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/sort.rs","byte_start":885191,"byte_end":885229,"line_start":18,"line_end":18,"column_start":1,"column_end":39}}]},{"kind":"Function","id":{"krate":0,"index":3303},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/sort.rs","byte_start":885826,"byte_end":885830,"line_start":39,"line_end":39,"column_start":8,"column_end":12},"name":"sort","qualname":"::compute::kernels::sort::sort","value":"pub fn sort(&ArrayRef, Option<SortOptions>) -> Result<ArrayRef>","parent":null,"children":[],"decl_id":null,"docs":" Sort the `ArrayRef` using `SortOptions`.","sig":null,"attributes":[{"value":"/ Sort the `ArrayRef` using `SortOptions`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/sort.rs","byte_start":885474,"byte_end":885518,"line_start":32,"line_end":32,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/sort.rs","byte_start":885519,"byte_end":885522,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ Performs a stable sort on values and indices. Nulls are ordered according to the `nulls_first` flag in `options`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/sort.rs","byte_start":885523,"byte_end":885640,"line_start":34,"line_end":34,"column_start":1,"column_end":118}},{"value":"/ Floats are sorted using IEEE 754 totalOrder","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/sort.rs","byte_start":885641,"byte_end":885688,"line_start":35,"line_end":35,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/sort.rs","byte_start":885689,"byte_end":885692,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ Returns an `ArrowError::ComputeError(String)` if the array type is either unsupported by `sort_to_indices` or `take`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/sort.rs","byte_start":885693,"byte_end":885814,"line_start":37,"line_end":37,"column_start":1,"column_end":122}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/sort.rs","byte_start":885815,"byte_end":885818,"line_start":38,"line_end":38,"column_start":1,"column_end":4}}]},{"kind":"Function","id":{"krate":0,"index":3310},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/sort.rs","byte_start":887462,"byte_end":887477,"line_start":85,"line_end":85,"column_start":8,"column_end":23},"name":"sort_to_indices","qualname":"::compute::kernels::sort::sort_to_indices","value":"pub fn sort_to_indices(&ArrayRef, Option<SortOptions>) -> Result<UInt32Array>","parent":null,"children":[],"decl_id":null,"docs":" Sort elements from `ArrayRef` into an unsigned integer (`UInt32Array`) of indices.\n For floating point arrays any NaN values are considered to be greater than any other non-null value\n","sig":null,"attributes":[{"value":"/ Sort elements from `ArrayRef` into an unsigned integer (`UInt32Array`) of indices.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/sort.rs","byte_start":887264,"byte_end":887350,"line_start":83,"line_end":83,"column_start":1,"column_end":87}},{"value":"/ For floating point arrays any NaN values are considered to be greater than any other non-null value","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/sort.rs","byte_start":887351,"byte_end":887454,"line_start":84,"line_end":84,"column_start":1,"column_end":104}}]},{"kind":"Struct","id":{"krate":0,"index":7733},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/sort.rs","byte_start":895373,"byte_end":895384,"line_start":243,"line_end":243,"column_start":12,"column_end":23},"name":"SortOptions","qualname":"::compute::kernels::sort::SortOptions","value":"SortOptions { descending, nulls_first }","parent":null,"children":[{"krate":0,"index":7734},{"krate":0,"index":7735}],"decl_id":null,"docs":" Options that define how sort kernels should behave\n","sig":null,"attributes":[{"value":"/ Options that define how sort kernels should behave","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/sort.rs","byte_start":895277,"byte_end":895331,"line_start":241,"line_end":241,"column_start":1,"column_end":55}}]},{"kind":"Field","id":{"krate":0,"index":7734},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/sort.rs","byte_start":895439,"byte_end":895449,"line_start":245,"line_end":245,"column_start":9,"column_end":19},"name":"descending","qualname":"::compute::kernels::sort::SortOptions::descending","value":"bool","parent":{"krate":0,"index":7733},"children":[],"decl_id":null,"docs":" Whether to sort in descending order\n","sig":null,"attributes":[{"value":"/ Whether to sort in descending order","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/sort.rs","byte_start":895391,"byte_end":895430,"line_start":244,"line_end":244,"column_start":5,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":7735},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/sort.rs","byte_start":895501,"byte_end":895512,"line_start":247,"line_end":247,"column_start":9,"column_end":20},"name":"nulls_first","qualname":"::compute::kernels::sort::SortOptions::nulls_first","value":"bool","parent":{"krate":0,"index":7733},"children":[],"decl_id":null,"docs":" Whether to sort nulls first\n","sig":null,"attributes":[{"value":"/ Whether to sort nulls first","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/sort.rs","byte_start":895461,"byte_end":895492,"line_start":246,"line_end":246,"column_start":5,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":7741},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/sort.rs","byte_start":904213,"byte_end":904223,"line_start":553,"line_end":553,"column_start":12,"column_end":22},"name":"SortColumn","qualname":"::compute::kernels::sort::SortColumn","value":"SortColumn { values, options }","parent":null,"children":[{"krate":0,"index":7742},{"krate":0,"index":7743}],"decl_id":null,"docs":" One column to be used in lexicographical sort\n","sig":null,"attributes":[{"value":"/ One column to be used in lexicographical sort","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/sort.rs","byte_start":904128,"byte_end":904177,"line_start":551,"line_end":551,"column_start":1,"column_end":50}}]},{"kind":"Field","id":{"krate":0,"index":7742},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/sort.rs","byte_start":904234,"byte_end":904240,"line_start":554,"line_end":554,"column_start":9,"column_end":15},"name":"values","qualname":"::compute::kernels::sort::SortColumn::values","value":"std::sync::Arc<(dyn array::array::Array + 'static)>","parent":{"krate":0,"index":7741},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":7743},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/sort.rs","byte_start":904260,"byte_end":904267,"line_start":555,"line_end":555,"column_start":9,"column_end":16},"name":"options","qualname":"::compute::kernels::sort::SortColumn::options","value":"std::option::Option<compute::kernels::sort::SortOptions>","parent":{"krate":0,"index":7741},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":3351},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/sort.rs","byte_start":905733,"byte_end":905740,"line_start":603,"line_end":603,"column_start":8,"column_end":15},"name":"lexsort","qualname":"::compute::kernels::sort::lexsort","value":"pub fn lexsort(&[SortColumn]) -> Result<Vec<ArrayRef>>","parent":null,"children":[],"decl_id":null,"docs":" Sort a list of `ArrayRef` using `SortOptions` provided for each array.","sig":null,"attributes":[{"value":"/ Sort a list of `ArrayRef` using `SortOptions` provided for each array.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/sort.rs","byte_start":904293,"byte_end":904367,"line_start":558,"line_end":558,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/sort.rs","byte_start":904368,"byte_end":904371,"line_start":559,"line_end":559,"column_start":1,"column_end":4}},{"value":"/ Performs a stable lexicographical sort on values and indices.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/sort.rs","byte_start":904372,"byte_end":904437,"line_start":560,"line_end":560,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/sort.rs","byte_start":904438,"byte_end":904441,"line_start":561,"line_end":561,"column_start":1,"column_end":4}},{"value":"/ Returns an `ArrowError::ComputeError(String)` if any of the array type is either unsupported by","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/sort.rs","byte_start":904442,"byte_end":904541,"line_start":562,"line_end":562,"column_start":1,"column_end":100}},{"value":"/ `lexsort_to_indices` or `take`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/sort.rs","byte_start":904542,"byte_end":904577,"line_start":563,"line_end":563,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/sort.rs","byte_start":904578,"byte_end":904581,"line_start":564,"line_end":564,"column_start":1,"column_end":4}},{"value":"/ Example:","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/sort.rs","byte_start":904582,"byte_end":904594,"line_start":565,"line_end":565,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/sort.rs","byte_start":904595,"byte_end":904598,"line_start":566,"line_end":566,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/sort.rs","byte_start":904599,"byte_end":904606,"line_start":567,"line_end":567,"column_start":1,"column_end":8}},{"value":"/ use std::convert::From;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/sort.rs","byte_start":904607,"byte_end":904634,"line_start":568,"line_end":568,"column_start":1,"column_end":28}},{"value":"/ use std::sync::Arc;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/sort.rs","byte_start":904635,"byte_end":904658,"line_start":569,"line_end":569,"column_start":1,"column_end":24}},{"value":"/ use arrow::array::{ArrayRef, StringArray, PrimitiveArray, as_primitive_array};","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/sort.rs","byte_start":904659,"byte_end":904741,"line_start":570,"line_end":570,"column_start":1,"column_end":83}},{"value":"/ use arrow::compute::kernels::sort::{SortColumn, SortOptions, lexsort};","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/sort.rs","byte_start":904742,"byte_end":904816,"line_start":571,"line_end":571,"column_start":1,"column_end":75}},{"value":"/ use arrow::datatypes::Int64Type;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/sort.rs","byte_start":904817,"byte_end":904853,"line_start":572,"line_end":572,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/sort.rs","byte_start":904854,"byte_end":904857,"line_start":573,"line_end":573,"column_start":1,"column_end":4}},{"value":"/ let sorted_columns = lexsort(&vec![","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/sort.rs","byte_start":904858,"byte_end":904897,"line_start":574,"line_end":574,"column_start":1,"column_end":40}},{"value":"/     SortColumn {","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/sort.rs","byte_start":904898,"byte_end":904918,"line_start":575,"line_end":575,"column_start":1,"column_end":21}},{"value":"/         values: Arc::new(PrimitiveArray::<Int64Type>::from(vec![","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/sort.rs","byte_start":904919,"byte_end":904987,"line_start":576,"line_end":576,"column_start":1,"column_end":69}},{"value":"/             None,","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/sort.rs","byte_start":904988,"byte_end":905009,"line_start":577,"line_end":577,"column_start":1,"column_end":22}},{"value":"/             Some(-2),","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/sort.rs","byte_start":905010,"byte_end":905035,"line_start":578,"line_end":578,"column_start":1,"column_end":26}},{"value":"/             Some(89),","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/sort.rs","byte_start":905036,"byte_end":905061,"line_start":579,"line_end":579,"column_start":1,"column_end":26}},{"value":"/             Some(-64),","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/sort.rs","byte_start":905062,"byte_end":905088,"line_start":580,"line_end":580,"column_start":1,"column_end":27}},{"value":"/             Some(101),","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/sort.rs","byte_start":905089,"byte_end":905115,"line_start":581,"line_end":581,"column_start":1,"column_end":27}},{"value":"/         ])) as ArrayRef,","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/sort.rs","byte_start":905116,"byte_end":905144,"line_start":582,"line_end":582,"column_start":1,"column_end":29}},{"value":"/         options: None,","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/sort.rs","byte_start":905145,"byte_end":905171,"line_start":583,"line_end":583,"column_start":1,"column_end":27}},{"value":"/     },","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/sort.rs","byte_start":905172,"byte_end":905182,"line_start":584,"line_end":584,"column_start":1,"column_end":11}},{"value":"/     SortColumn {","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/sort.rs","byte_start":905183,"byte_end":905203,"line_start":585,"line_end":585,"column_start":1,"column_end":21}},{"value":"/         values: Arc::new(StringArray::from(vec![","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/sort.rs","byte_start":905204,"byte_end":905256,"line_start":586,"line_end":586,"column_start":1,"column_end":53}},{"value":"/             Some(\"hello\"),","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/sort.rs","byte_start":905257,"byte_end":905287,"line_start":587,"line_end":587,"column_start":1,"column_end":31}},{"value":"/             Some(\"world\"),","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/sort.rs","byte_start":905288,"byte_end":905318,"line_start":588,"line_end":588,"column_start":1,"column_end":31}},{"value":"/             Some(\",\"),","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/sort.rs","byte_start":905319,"byte_end":905345,"line_start":589,"line_end":589,"column_start":1,"column_end":27}},{"value":"/             Some(\"foobar\"),","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/sort.rs","byte_start":905346,"byte_end":905377,"line_start":590,"line_end":590,"column_start":1,"column_end":32}},{"value":"/             Some(\"!\"),","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/sort.rs","byte_start":905378,"byte_end":905404,"line_start":591,"line_end":591,"column_start":1,"column_end":27}},{"value":"/         ])) as ArrayRef,","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/sort.rs","byte_start":905405,"byte_end":905433,"line_start":592,"line_end":592,"column_start":1,"column_end":29}},{"value":"/         options: Some(SortOptions {","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/sort.rs","byte_start":905434,"byte_end":905473,"line_start":593,"line_end":593,"column_start":1,"column_end":40}},{"value":"/             descending: true,","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/sort.rs","byte_start":905474,"byte_end":905507,"line_start":594,"line_end":594,"column_start":1,"column_end":34}},{"value":"/             nulls_first: false,","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/sort.rs","byte_start":905508,"byte_end":905543,"line_start":595,"line_end":595,"column_start":1,"column_end":36}},{"value":"/         }),","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/sort.rs","byte_start":905544,"byte_end":905559,"line_start":596,"line_end":596,"column_start":1,"column_end":16}},{"value":"/     },","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/sort.rs","byte_start":905560,"byte_end":905570,"line_start":597,"line_end":597,"column_start":1,"column_end":11}},{"value":"/ ]).unwrap();","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/sort.rs","byte_start":905571,"byte_end":905587,"line_start":598,"line_end":598,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/sort.rs","byte_start":905588,"byte_end":905591,"line_start":599,"line_end":599,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(as_primitive_array::<Int64Type>(&sorted_columns[0]).value(1), -64);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/sort.rs","byte_start":905592,"byte_end":905674,"line_start":600,"line_end":600,"column_start":1,"column_end":83}},{"value":"/ assert!(sorted_columns[0].is_null(0));","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/sort.rs","byte_start":905675,"byte_end":905717,"line_start":601,"line_end":601,"column_start":1,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/sort.rs","byte_start":905718,"byte_end":905725,"line_start":602,"line_end":602,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":3353},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/sort.rs","byte_start":906074,"byte_end":906092,"line_start":613,"line_end":613,"column_start":8,"column_end":26},"name":"lexsort_to_indices","qualname":"::compute::kernels::sort::lexsort_to_indices","value":"pub fn lexsort_to_indices(&[SortColumn]) -> Result<UInt32Array>","parent":null,"children":[],"decl_id":null,"docs":" Sort elements lexicographically from a list of `ArrayRef` into an unsigned integer\n (`UInt32Array`) of indices.\n","sig":null,"attributes":[{"value":"/ Sort elements lexicographically from a list of `ArrayRef` into an unsigned integer","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/sort.rs","byte_start":905948,"byte_end":906034,"line_start":611,"line_end":611,"column_start":1,"column_end":87}},{"value":"/ (`UInt32Array`) of indices.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/sort.rs","byte_start":906035,"byte_end":906066,"line_start":612,"line_end":612,"column_start":1,"column_end":32}}]},{"kind":"Mod","id":{"krate":0,"index":3358},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/substring.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"substring","qualname":"::compute::kernels::substring","value":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/substring.rs","parent":null,"children":[{"krate":0,"index":3359},{"krate":0,"index":3360},{"krate":0,"index":3361},{"krate":0,"index":3364},{"krate":0,"index":3367},{"krate":0,"index":3368},{"krate":0,"index":3371},{"krate":0,"index":3372},{"krate":0,"index":3375},{"krate":0,"index":3378},{"krate":0,"index":3381},{"krate":0,"index":3384}],"decl_id":null,"docs":" Defines kernel to extract a substring of a \\[Large\\]StringArray\n","sig":null,"attributes":[{"value":"/ Defines kernel to extract a substring of a \\[Large\\]StringArray","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/substring.rs","byte_start":944812,"byte_end":944879,"line_start":18,"line_end":18,"column_start":1,"column_end":68}}]},{"kind":"Function","id":{"krate":0,"index":3384},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/substring.rs","byte_start":947480,"byte_end":947489,"line_start":95,"line_end":95,"column_start":8,"column_end":17},"name":"substring","qualname":"::compute::kernels::substring::substring","value":"pub fn substring(&Array, i64, &Option<u64>) -> Result<ArrayRef>","parent":null,"children":[],"decl_id":null,"docs":" Returns an ArrayRef with a substring starting from `start` and with optional length `length` of each of the elements in `array`.\n `start` can be negative, in which case the start counts from the end of the string.\n this function errors when the passed array is not a \\[Large\\]String array.\n","sig":null,"attributes":[{"value":"/ Returns an ArrayRef with a substring starting from `start` and with optional length `length` of each of the elements in `array`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/substring.rs","byte_start":947173,"byte_end":947305,"line_start":92,"line_end":92,"column_start":1,"column_end":133}},{"value":"/ `start` can be negative, in which case the start counts from the end of the string.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/substring.rs","byte_start":947306,"byte_end":947393,"line_start":93,"line_end":93,"column_start":1,"column_end":88}},{"value":"/ this function errors when the passed array is not a \\[Large\\]String array.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/substring.rs","byte_start":947394,"byte_end":947472,"line_start":94,"line_end":94,"column_start":1,"column_end":79}}]},{"kind":"Mod","id":{"krate":0,"index":3387},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/take.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"take","qualname":"::compute::kernels::take","value":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/take.rs","parent":null,"children":[{"krate":0,"index":3388},{"krate":0,"index":3389},{"krate":0,"index":3392},{"krate":0,"index":3395},{"krate":0,"index":3396},{"krate":0,"index":3399},{"krate":0,"index":3402},{"krate":0,"index":3403},{"krate":0,"index":3406},{"krate":0,"index":3409},{"krate":0,"index":3410},{"krate":0,"index":3411},{"krate":0,"index":3414},{"krate":0,"index":3417},{"krate":0,"index":3420},{"krate":0,"index":3421},{"krate":0,"index":3422},{"krate":0,"index":3425},{"krate":0,"index":3426},{"krate":0,"index":3429},{"krate":0,"index":3432},{"krate":0,"index":3435},{"krate":0,"index":3437},{"krate":0,"index":7748},{"krate":0,"index":7750},{"krate":0,"index":7752},{"krate":0,"index":3441},{"krate":0,"index":3443},{"krate":0,"index":3448},{"krate":0,"index":3454},{"krate":0,"index":3461},{"krate":0,"index":3465},{"krate":0,"index":3468}],"decl_id":null,"docs":" Defines take kernel for [Array]\n","sig":null,"attributes":[{"value":"/ Defines take kernel for [Array]","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/take.rs","byte_start":953867,"byte_end":953902,"line_start":18,"line_end":18,"column_start":1,"column_end":36}}]},{"kind":"Function","id":{"krate":0,"index":3435},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/take.rs","byte_start":955885,"byte_end":955889,"line_start":79,"line_end":79,"column_start":8,"column_end":12},"name":"take","qualname":"::compute::kernels::take::take","value":"pub fn take<IndexType>(&Array, &PrimitiveArray<IndexType>,\n                       Option<TakeOptions>) -> Result<ArrayRef> where\nIndexType: ArrowNumericType, IndexType::Native: ToPrimitive","parent":null,"children":[],"decl_id":null,"docs":" Take elements by index from [Array], creating a new [Array] from those indexes.","sig":null,"attributes":[{"value":"/ Take elements by index from [Array], creating a new [Array] from those indexes.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/take.rs","byte_start":954942,"byte_end":955025,"line_start":54,"line_end":54,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/take.rs","byte_start":955026,"byte_end":955029,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ # Errors","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/take.rs","byte_start":955030,"byte_end":955042,"line_start":56,"line_end":56,"column_start":1,"column_end":13}},{"value":"/ This function errors whenever:","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/take.rs","byte_start":955043,"byte_end":955077,"line_start":57,"line_end":57,"column_start":1,"column_end":35}},{"value":"/ * An index cannot be casted to `usize` (typically 32 bit architectures)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/take.rs","byte_start":955078,"byte_end":955153,"line_start":58,"line_end":58,"column_start":1,"column_end":76}},{"value":"/ * An index is out of bounds and `options` is set to check bounds.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/take.rs","byte_start":955154,"byte_end":955223,"line_start":59,"line_end":59,"column_start":1,"column_end":70}},{"value":"/ # Safety","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/take.rs","byte_start":955224,"byte_end":955236,"line_start":60,"line_end":60,"column_start":1,"column_end":13}},{"value":"/ When `options` is not set to check bounds (default), taking indexes after `len` is undefined behavior.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/take.rs","byte_start":955237,"byte_end":955343,"line_start":61,"line_end":61,"column_start":1,"column_end":107}},{"value":"/ # Examples","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/take.rs","byte_start":955344,"byte_end":955358,"line_start":62,"line_end":62,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/take.rs","byte_start":955359,"byte_end":955366,"line_start":63,"line_end":63,"column_start":1,"column_end":8}},{"value":"/ use arrow::array::{StringArray, UInt32Array};","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/take.rs","byte_start":955367,"byte_end":955416,"line_start":64,"line_end":64,"column_start":1,"column_end":50}},{"value":"/ use arrow::error::Result;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/take.rs","byte_start":955417,"byte_end":955446,"line_start":65,"line_end":65,"column_start":1,"column_end":30}},{"value":"/ use arrow::compute::take;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/take.rs","byte_start":955447,"byte_end":955476,"line_start":66,"line_end":66,"column_start":1,"column_end":30}},{"value":"/ # fn main() -> Result<()> {","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/take.rs","byte_start":955477,"byte_end":955508,"line_start":67,"line_end":67,"column_start":1,"column_end":32}},{"value":"/ let values = StringArray::from(vec![\"zero\", \"one\", \"two\"]);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/take.rs","byte_start":955509,"byte_end":955572,"line_start":68,"line_end":68,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/take.rs","byte_start":955573,"byte_end":955576,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ // Take items at index 2, and 1:","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/take.rs","byte_start":955577,"byte_end":955613,"line_start":70,"line_end":70,"column_start":1,"column_end":37}},{"value":"/ let indices = UInt32Array::from(vec![2, 1]);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/take.rs","byte_start":955614,"byte_end":955662,"line_start":71,"line_end":71,"column_start":1,"column_end":49}},{"value":"/ let taken = take(&values, &indices, None)?;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/take.rs","byte_start":955663,"byte_end":955710,"line_start":72,"line_end":72,"column_start":1,"column_end":48}},{"value":"/ let taken = taken.as_any().downcast_ref::<StringArray>().unwrap();","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/take.rs","byte_start":955711,"byte_end":955781,"line_start":73,"line_end":73,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/take.rs","byte_start":955782,"byte_end":955785,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(*taken, StringArray::from(vec![\"two\", \"one\"]));","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/take.rs","byte_start":955786,"byte_end":955848,"line_start":75,"line_end":75,"column_start":1,"column_end":63}},{"value":"/ # Ok(())","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/take.rs","byte_start":955849,"byte_end":955861,"line_start":76,"line_end":76,"column_start":1,"column_end":13}},{"value":"/ # }","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/take.rs","byte_start":955862,"byte_end":955869,"line_start":77,"line_end":77,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/take.rs","byte_start":955870,"byte_end":955877,"line_start":78,"line_end":78,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":7748},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/take.rs","byte_start":962731,"byte_end":962742,"line_start":242,"line_end":242,"column_start":12,"column_end":23},"name":"TakeOptions","qualname":"::compute::kernels::take::TakeOptions","value":"TakeOptions { check_bounds }","parent":null,"children":[{"krate":0,"index":7749}],"decl_id":null,"docs":" Options that define how `take` should behave\n","sig":null,"attributes":[{"value":"/ Options that define how `take` should behave","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/take.rs","byte_start":962647,"byte_end":962695,"line_start":240,"line_end":240,"column_start":1,"column_end":49}}]},{"kind":"Field","id":{"krate":0,"index":7749},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/take.rs","byte_start":962973,"byte_end":962985,"line_start":246,"line_end":246,"column_start":9,"column_end":21},"name":"check_bounds","qualname":"::compute::kernels::take::TakeOptions::check_bounds","value":"bool","parent":{"krate":0,"index":7748},"children":[],"decl_id":null,"docs":" Perform bounds check before taking indices from values.\n If enabled, an `ArrowError` is returned if the indices are out of bounds.\n If not enabled, and indices exceed bounds, the kernel will panic.\n","sig":null,"attributes":[{"value":"/ Perform bounds check before taking indices from values.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/take.rs","byte_start":962749,"byte_end":962808,"line_start":243,"line_end":243,"column_start":5,"column_end":64}},{"value":"/ If enabled, an `ArrowError` is returned if the indices are out of bounds.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/take.rs","byte_start":962813,"byte_end":962890,"line_start":244,"line_end":244,"column_start":5,"column_end":82}},{"value":"/ If not enabled, and indices exceed bounds, the kernel will panic.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/take.rs","byte_start":962895,"byte_end":962964,"line_start":245,"line_end":245,"column_start":5,"column_end":74}}]},{"kind":"Mod","id":{"krate":0,"index":3471},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/temporal.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"temporal","qualname":"::compute::kernels::temporal","value":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/temporal.rs","parent":null,"children":[{"krate":0,"index":3472},{"krate":0,"index":3475},{"krate":0,"index":3476},{"krate":0,"index":3477},{"krate":0,"index":3480}],"decl_id":null,"docs":" Defines temporal kernels for time and date related functions.\n","sig":null,"attributes":[{"value":"/ Defines temporal kernels for time and date related functions.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/temporal.rs","byte_start":1004663,"byte_end":1004728,"line_start":18,"line_end":18,"column_start":1,"column_end":66}}]},{"kind":"Function","id":{"krate":0,"index":3480},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/temporal.rs","byte_start":1004906,"byte_end":1004910,"line_start":27,"line_end":27,"column_start":8,"column_end":12},"name":"hour","qualname":"::compute::kernels::temporal::hour","value":"pub fn hour<T>(&PrimitiveArray<T>) -> Result<Int32Array> where\nT: ArrowTemporalType + ArrowNumericType, i64: std::convert::From<T::Native>","parent":null,"children":[],"decl_id":null,"docs":" Extracts the hours of a given temporal array as an array of integers\n","sig":null,"attributes":[{"value":"/ Extracts the hours of a given temporal array as an array of integers","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/temporal.rs","byte_start":1004826,"byte_end":1004898,"line_start":26,"line_end":26,"column_start":1,"column_end":73}}]},{"kind":"Mod","id":{"krate":0,"index":3536},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"csv","qualname":"::csv","value":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/mod.rs","parent":null,"children":[{"krate":0,"index":3537},{"krate":0,"index":3690},{"krate":0,"index":3739},{"krate":0,"index":3742},{"krate":0,"index":3745},{"krate":0,"index":3748},{"krate":0,"index":3751}],"decl_id":null,"docs":" Transfer data between the Arrow memory format and CSV (comma-separated values).\n","sig":null,"attributes":[{"value":"/ Transfer data between the Arrow memory format and CSV (comma-separated values).","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/mod.rs","byte_start":1023171,"byte_end":1023254,"line_start":18,"line_end":18,"column_start":1,"column_end":84}}]},{"kind":"Mod","id":{"krate":0,"index":3537},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"reader","qualname":"::csv::reader","value":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","parent":null,"children":[{"krate":0,"index":3538},{"krate":0,"index":3541},{"krate":0,"index":3544},{"krate":0,"index":3545},{"krate":0,"index":3548},{"krate":0,"index":3551},{"krate":0,"index":3554},{"krate":0,"index":3557},{"krate":0,"index":3560},{"krate":0,"index":3561},{"krate":0,"index":3564},{"krate":0,"index":3567},{"krate":0,"index":3570},{"krate":0,"index":3573},{"krate":0,"index":3576},{"krate":0,"index":3577},{"krate":0,"index":3580},{"krate":0,"index":3583},{"krate":0,"index":3586},{"krate":0,"index":3589},{"krate":0,"index":3590},{"krate":0,"index":3591},{"krate":0,"index":3594},{"krate":0,"index":3597},{"krate":0,"index":3600},{"krate":0,"index":3601},{"krate":0,"index":3604},{"krate":0,"index":7754},{"krate":0,"index":7756},{"krate":0,"index":7757},{"krate":0,"index":7762},{"krate":0,"index":7765},{"krate":0,"index":7767},{"krate":0,"index":7768},{"krate":0,"index":7773},{"krate":0,"index":7776},{"krate":0,"index":7778},{"krate":0,"index":7779},{"krate":0,"index":7784},{"krate":0,"index":7787},{"krate":0,"index":7789},{"krate":0,"index":7790},{"krate":0,"index":7795},{"krate":0,"index":7798},{"krate":0,"index":7800},{"krate":0,"index":7801},{"krate":0,"index":7806},{"krate":0,"index":3607},{"krate":0,"index":3608},{"krate":0,"index":3612},{"krate":0,"index":3613},{"krate":0,"index":3614},{"krate":0,"index":3623},{"krate":0,"index":3626},{"krate":0,"index":3632},{"krate":0,"index":3636},{"krate":0,"index":3642},{"krate":0,"index":3644},{"krate":0,"index":3646},{"krate":0,"index":3648},{"krate":0,"index":3649},{"krate":0,"index":3650},{"krate":0,"index":3651},{"krate":0,"index":3652},{"krate":0,"index":3653},{"krate":0,"index":3654},{"krate":0,"index":3655},{"krate":0,"index":3656},{"krate":0,"index":3657},{"krate":0,"index":3662},{"krate":0,"index":3664},{"krate":0,"index":3666},{"krate":0,"index":3668},{"krate":0,"index":3670},{"krate":0,"index":3671},{"krate":0,"index":3675},{"krate":0,"index":7809},{"krate":0,"index":7817},{"krate":0,"index":3678},{"krate":0,"index":3680}],"decl_id":null,"docs":" CSV Reader","sig":null,"attributes":[{"value":"/ CSV Reader","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1024273,"byte_end":1024287,"line_start":18,"line_end":18,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1024288,"byte_end":1024291,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ This CSV reader allows CSV files to be read into the Arrow memory model. Records are","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1024292,"byte_end":1024380,"line_start":20,"line_end":20,"column_start":1,"column_end":89}},{"value":"/ loaded in batches and are then converted from row-based data to columnar data.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1024381,"byte_end":1024463,"line_start":21,"line_end":21,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1024464,"byte_end":1024467,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ Example:","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1024468,"byte_end":1024480,"line_start":23,"line_end":23,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1024481,"byte_end":1024484,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1024485,"byte_end":1024492,"line_start":25,"line_end":25,"column_start":1,"column_end":8}},{"value":"/ use arrow::csv;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1024493,"byte_end":1024512,"line_start":26,"line_end":26,"column_start":1,"column_end":20}},{"value":"/ use arrow::datatypes::{DataType, Field, Schema};","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1024513,"byte_end":1024565,"line_start":27,"line_end":27,"column_start":1,"column_end":53}},{"value":"/ use std::fs::File;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1024566,"byte_end":1024588,"line_start":28,"line_end":28,"column_start":1,"column_end":23}},{"value":"/ use std::sync::Arc;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1024589,"byte_end":1024612,"line_start":29,"line_end":29,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1024613,"byte_end":1024616,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ let schema = Schema::new(vec![","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1024617,"byte_end":1024651,"line_start":31,"line_end":31,"column_start":1,"column_end":35}},{"value":"/     Field::new(\"city\", DataType::Utf8, false),","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1024652,"byte_end":1024702,"line_start":32,"line_end":32,"column_start":1,"column_end":51}},{"value":"/     Field::new(\"lat\", DataType::Float64, false),","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1024703,"byte_end":1024755,"line_start":33,"line_end":33,"column_start":1,"column_end":53}},{"value":"/     Field::new(\"lng\", DataType::Float64, false),","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1024756,"byte_end":1024808,"line_start":34,"line_end":34,"column_start":1,"column_end":53}},{"value":"/ ]);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1024809,"byte_end":1024816,"line_start":35,"line_end":35,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1024817,"byte_end":1024820,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ let file = File::open(\"test/data/uk_cities.csv\").unwrap();","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1024821,"byte_end":1024883,"line_start":37,"line_end":37,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1024884,"byte_end":1024887,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ let mut csv = csv::Reader::new(file, Arc::new(schema), false, None, 1024, None, None);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1024888,"byte_end":1024978,"line_start":39,"line_end":39,"column_start":1,"column_end":91}},{"value":"/ let batch = csv.next().unwrap().unwrap();","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1024979,"byte_end":1025024,"line_start":40,"line_end":40,"column_start":1,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1025025,"byte_end":1025032,"line_start":41,"line_end":41,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":3612},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1030531,"byte_end":1030554,"line_start":199,"line_end":199,"column_start":8,"column_end":31},"name":"infer_schema_from_files","qualname":"::csv::reader::infer_schema_from_files","value":"pub fn infer_schema_from_files(&[String], u8, Option<usize>, bool)\n-> Result<Schema>","parent":null,"children":[],"decl_id":null,"docs":" Infer schema from a list of CSV files by reading through first n records\n with `max_read_records` controlling the maximum number of records to read.","sig":null,"attributes":[{"value":"/ Infer schema from a list of CSV files by reading through first n records","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1030194,"byte_end":1030270,"line_start":193,"line_end":193,"column_start":1,"column_end":77}},{"value":"/ with `max_read_records` controlling the maximum number of records to read.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1030271,"byte_end":1030349,"line_start":194,"line_end":194,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1030350,"byte_end":1030353,"line_start":195,"line_end":195,"column_start":1,"column_end":4}},{"value":"/ Files will be read in the given order untill n records have been reached.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1030354,"byte_end":1030431,"line_start":196,"line_end":196,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1030432,"byte_end":1030435,"line_start":197,"line_end":197,"column_start":1,"column_end":4}},{"value":"/ If `max_read_records` is not set, all files will be read fully to infer the schema.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1030436,"byte_end":1030523,"line_start":198,"line_end":198,"column_start":1,"column_end":88}}]},{"kind":"Struct","id":{"krate":0,"index":3614},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1031388,"byte_end":1031394,"line_start":232,"line_end":232,"column_start":12,"column_end":18},"name":"Reader","qualname":"::csv::reader::Reader","value":"Reader {  }","parent":null,"children":[{"krate":0,"index":3616},{"krate":0,"index":3617},{"krate":0,"index":3618},{"krate":0,"index":3619},{"krate":0,"index":3620},{"krate":0,"index":3621},{"krate":0,"index":3622}],"decl_id":null,"docs":" CSV file reader\n","sig":null,"attributes":[{"value":"/ CSV file reader","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1031357,"byte_end":1031376,"line_start":231,"line_end":231,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":3628},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1032560,"byte_end":1032563,"line_start":268,"line_end":268,"column_start":12,"column_end":15},"name":"new","qualname":"<Reader<R>>::new","value":"pub fn new(R, SchemaRef, bool, Option<u8>, usize, Bounds, Option<Vec<usize>>)\n-> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new CsvReader from any value that implements the `Read` trait.","sig":null,"attributes":[{"value":"/ Create a new CsvReader from any value that implements the `Read` trait.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1032271,"byte_end":1032346,"line_start":263,"line_end":263,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1032351,"byte_end":1032354,"line_start":264,"line_end":264,"column_start":5,"column_end":8}},{"value":"/ If reading a `File` or an input that supports `std::io::Read` and `std::io::Seek`;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1032359,"byte_end":1032445,"line_start":265,"line_end":265,"column_start":5,"column_end":91}},{"value":"/ you can customise the Reader, such as to enable schema inference, use","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1032450,"byte_end":1032523,"line_start":266,"line_end":266,"column_start":5,"column_end":78}},{"value":"/ `ReaderBuilder`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1032528,"byte_end":1032548,"line_start":267,"line_end":267,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":3629},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1033024,"byte_end":1033030,"line_start":284,"line_end":284,"column_start":12,"column_end":18},"name":"schema","qualname":"<Reader<R>>::schema","value":"pub fn schema(&Self) -> SchemaRef","parent":null,"children":[],"decl_id":null,"docs":" Returns the schema of the reader, useful for getting the schema without reading\n record batches\n","sig":null,"attributes":[{"value":"/ Returns the schema of the reader, useful for getting the schema without reading","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1032906,"byte_end":1032989,"line_start":282,"line_end":282,"column_start":5,"column_end":88}},{"value":"/ record batches","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1032994,"byte_end":1033012,"line_start":283,"line_end":283,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":3631},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1033602,"byte_end":1033613,"line_start":301,"line_end":301,"column_start":12,"column_end":23},"name":"from_reader","qualname":"<Reader<R>>::from_reader","value":"pub fn from_reader(R, SchemaRef, bool, Option<u8>, usize, Bounds,\n                   Option<Vec<usize>>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new CsvReader from a Reader","sig":null,"attributes":[{"value":"/ Create a new CsvReader from a Reader","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1033432,"byte_end":1033472,"line_start":297,"line_end":297,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1033477,"byte_end":1033480,"line_start":298,"line_end":298,"column_start":5,"column_end":8}},{"value":"/ This constructor allows you more flexibility in what records are processed by the","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1033485,"byte_end":1033570,"line_start":299,"line_end":299,"column_start":5,"column_end":90}},{"value":"/ csv reader.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1033575,"byte_end":1033590,"line_start":300,"line_end":300,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":7809},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1044764,"byte_end":1044777,"line_start":652,"line_end":652,"column_start":12,"column_end":25},"name":"ReaderBuilder","qualname":"::csv::reader::ReaderBuilder","value":"ReaderBuilder {  }","parent":null,"children":[{"krate":0,"index":7810},{"krate":0,"index":7811},{"krate":0,"index":7812},{"krate":0,"index":7813},{"krate":0,"index":7814},{"krate":0,"index":7815},{"krate":0,"index":7816}],"decl_id":null,"docs":" CSV file reader builder\n","sig":null,"attributes":[{"value":"/ CSV file reader builder","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1044708,"byte_end":1044735,"line_start":650,"line_end":650,"column_start":1,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":3681},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1046835,"byte_end":1046838,"line_start":717,"line_end":717,"column_start":12,"column_end":15},"name":"new","qualname":"<ReaderBuilder>::new","value":"pub fn new() -> ReaderBuilder","parent":null,"children":[],"decl_id":null,"docs":" Create a new builder for configuring CSV parsing options.","sig":null,"attributes":[{"value":"/ Create a new builder for configuring CSV parsing options.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1046135,"byte_end":1046196,"line_start":694,"line_end":694,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1046201,"byte_end":1046204,"line_start":695,"line_end":695,"column_start":5,"column_end":8}},{"value":"/ To convert a builder into a reader, call `ReaderBuilder::build`","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1046209,"byte_end":1046276,"line_start":696,"line_end":696,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1046281,"byte_end":1046284,"line_start":697,"line_end":697,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1046289,"byte_end":1046302,"line_start":698,"line_end":698,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1046307,"byte_end":1046310,"line_start":699,"line_end":699,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1046315,"byte_end":1046322,"line_start":700,"line_end":700,"column_start":5,"column_end":12}},{"value":"/ extern crate arrow;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1046327,"byte_end":1046350,"line_start":701,"line_end":701,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1046355,"byte_end":1046358,"line_start":702,"line_end":702,"column_start":5,"column_end":8}},{"value":"/ use arrow::csv;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1046363,"byte_end":1046382,"line_start":703,"line_end":703,"column_start":5,"column_end":24}},{"value":"/ use std::fs::File;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1046387,"byte_end":1046409,"line_start":704,"line_end":704,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1046414,"byte_end":1046417,"line_start":705,"line_end":705,"column_start":5,"column_end":8}},{"value":"/ fn example() -> csv::Reader<File> {","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1046422,"byte_end":1046461,"line_start":706,"line_end":706,"column_start":5,"column_end":44}},{"value":"/     let file = File::open(\"test/data/uk_cities_with_headers.csv\").unwrap();","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1046466,"byte_end":1046545,"line_start":707,"line_end":707,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1046550,"byte_end":1046553,"line_start":708,"line_end":708,"column_start":5,"column_end":8}},{"value":"/     // create a builder, inferring the schema with the first 100 records","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1046558,"byte_end":1046634,"line_start":709,"line_end":709,"column_start":5,"column_end":81}},{"value":"/     let builder = csv::ReaderBuilder::new().infer_schema(Some(100));","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1046639,"byte_end":1046711,"line_start":710,"line_end":710,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1046716,"byte_end":1046719,"line_start":711,"line_end":711,"column_start":5,"column_end":8}},{"value":"/     let reader = builder.build(file).unwrap();","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1046724,"byte_end":1046774,"line_start":712,"line_end":712,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1046779,"byte_end":1046782,"line_start":713,"line_end":713,"column_start":5,"column_end":8}},{"value":"/     reader","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1046787,"byte_end":1046801,"line_start":714,"line_end":714,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1046806,"byte_end":1046811,"line_start":715,"line_end":715,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1046816,"byte_end":1046823,"line_start":716,"line_end":716,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3682},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1046945,"byte_end":1046956,"line_start":722,"line_end":722,"column_start":12,"column_end":23},"name":"with_schema","qualname":"<ReaderBuilder>::with_schema","value":"pub fn with_schema(Self, SchemaRef) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set the CSV file's schema\n","sig":null,"attributes":[{"value":"/ Set the CSV file's schema","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1046904,"byte_end":1046933,"line_start":721,"line_end":721,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":3683},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1047108,"byte_end":1047118,"line_start":728,"line_end":728,"column_start":12,"column_end":22},"name":"has_header","qualname":"<ReaderBuilder>::has_header","value":"pub fn has_header(Self, bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set whether the CSV file has headers\n","sig":null,"attributes":[{"value":"/ Set whether the CSV file has headers","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1047056,"byte_end":1047096,"line_start":727,"line_end":727,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":3684},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1047290,"byte_end":1047304,"line_start":734,"line_end":734,"column_start":12,"column_end":26},"name":"with_delimiter","qualname":"<ReaderBuilder>::with_delimiter","value":"pub fn with_delimiter(Self, u8) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set the CSV file's column delimiter as a byte character\n","sig":null,"attributes":[{"value":"/ Set the CSV file's column delimiter as a byte character","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1047219,"byte_end":1047278,"line_start":733,"line_end":733,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":3685},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1047472,"byte_end":1047484,"line_start":740,"line_end":740,"column_start":12,"column_end":24},"name":"infer_schema","qualname":"<ReaderBuilder>::infer_schema","value":"pub fn infer_schema(Self, Option<usize>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set the CSV reader to infer the schema of the file\n","sig":null,"attributes":[{"value":"/ Set the CSV reader to infer the schema of the file","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1047406,"byte_end":1047460,"line_start":739,"line_end":739,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":3686},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1047740,"byte_end":1047755,"line_start":748,"line_end":748,"column_start":12,"column_end":27},"name":"with_batch_size","qualname":"<ReaderBuilder>::with_batch_size","value":"pub fn with_batch_size(Self, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set the batch size (number of records to load at one time)\n","sig":null,"attributes":[{"value":"/ Set the batch size (number of records to load at one time)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1047666,"byte_end":1047728,"line_start":747,"line_end":747,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":3687},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1047907,"byte_end":1047922,"line_start":754,"line_end":754,"column_start":12,"column_end":27},"name":"with_projection","qualname":"<ReaderBuilder>::with_projection","value":"pub fn with_projection(Self, Vec<usize>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set the reader's column projection\n","sig":null,"attributes":[{"value":"/ Set the reader's column projection","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1047857,"byte_end":1047895,"line_start":753,"line_end":753,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":3688},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1048097,"byte_end":1048102,"line_start":760,"line_end":760,"column_start":12,"column_end":17},"name":"build","qualname":"<ReaderBuilder>::build","value":"pub fn build<R: Read + Seek>(Self, R) -> Result<Reader<R>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Reader` from the `ReaderBuilder`\n","sig":null,"attributes":[{"value":"/ Create a new `Reader` from the `ReaderBuilder`","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1048035,"byte_end":1048085,"line_start":759,"line_end":759,"column_start":5,"column_end":55}}]},{"kind":"Mod","id":{"krate":0,"index":3690},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"writer","qualname":"::csv::writer","value":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","parent":null,"children":[{"krate":0,"index":3691},{"krate":0,"index":3694},{"krate":0,"index":3697},{"krate":0,"index":3698},{"krate":0,"index":3699},{"krate":0,"index":3702},{"krate":0,"index":3705},{"krate":0,"index":3708},{"krate":0,"index":3709},{"krate":0,"index":3710},{"krate":0,"index":3713},{"krate":0,"index":3714},{"krate":0,"index":3715},{"krate":0,"index":3716},{"krate":0,"index":7819},{"krate":0,"index":7828},{"krate":0,"index":3718},{"krate":0,"index":7831},{"krate":0,"index":7837},{"krate":0,"index":3725},{"krate":0,"index":3727}],"decl_id":null,"docs":" CSV Writer","sig":null,"attributes":[{"value":"/ CSV Writer","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1065530,"byte_end":1065544,"line_start":18,"line_end":18,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1065545,"byte_end":1065548,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ This CSV writer allows Arrow data (in record batches) to be written as CSV files.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1065549,"byte_end":1065634,"line_start":20,"line_end":20,"column_start":1,"column_end":86}},{"value":"/ The writer does not support writing `ListArray` and `StructArray`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1065635,"byte_end":1065705,"line_start":21,"line_end":21,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1065706,"byte_end":1065709,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ Example:","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1065710,"byte_end":1065722,"line_start":23,"line_end":23,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1065723,"byte_end":1065726,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1065727,"byte_end":1065734,"line_start":25,"line_end":25,"column_start":1,"column_end":8}},{"value":"/ use arrow::array::*;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1065735,"byte_end":1065759,"line_start":26,"line_end":26,"column_start":1,"column_end":25}},{"value":"/ use arrow::csv;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1065760,"byte_end":1065779,"line_start":27,"line_end":27,"column_start":1,"column_end":20}},{"value":"/ use arrow::datatypes::*;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1065780,"byte_end":1065808,"line_start":28,"line_end":28,"column_start":1,"column_end":29}},{"value":"/ use arrow::record_batch::RecordBatch;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1065809,"byte_end":1065850,"line_start":29,"line_end":29,"column_start":1,"column_end":42}},{"value":"/ use arrow::util::test_util::get_temp_file;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1065851,"byte_end":1065897,"line_start":30,"line_end":30,"column_start":1,"column_end":47}},{"value":"/ use std::fs::File;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1065898,"byte_end":1065920,"line_start":31,"line_end":31,"column_start":1,"column_end":23}},{"value":"/ use std::sync::Arc;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1065921,"byte_end":1065944,"line_start":32,"line_end":32,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1065945,"byte_end":1065948,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ let schema = Schema::new(vec![","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1065949,"byte_end":1065983,"line_start":34,"line_end":34,"column_start":1,"column_end":35}},{"value":"/     Field::new(\"c1\", DataType::Utf8, false),","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1065984,"byte_end":1066032,"line_start":35,"line_end":35,"column_start":1,"column_end":49}},{"value":"/     Field::new(\"c2\", DataType::Float64, true),","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1066033,"byte_end":1066083,"line_start":36,"line_end":36,"column_start":1,"column_end":51}},{"value":"/     Field::new(\"c3\", DataType::UInt32, false),","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1066084,"byte_end":1066134,"line_start":37,"line_end":37,"column_start":1,"column_end":51}},{"value":"/     Field::new(\"c3\", DataType::Boolean, true),","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1066135,"byte_end":1066185,"line_start":38,"line_end":38,"column_start":1,"column_end":51}},{"value":"/ ]);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1066186,"byte_end":1066193,"line_start":39,"line_end":39,"column_start":1,"column_end":8}},{"value":"/ let c1 = StringArray::from(vec![","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1066194,"byte_end":1066230,"line_start":40,"line_end":40,"column_start":1,"column_end":37}},{"value":"/     \"Lorem ipsum dolor sit amet\",","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1066231,"byte_end":1066268,"line_start":41,"line_end":41,"column_start":1,"column_end":38}},{"value":"/     \"consectetur adipiscing elit\",","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1066269,"byte_end":1066307,"line_start":42,"line_end":42,"column_start":1,"column_end":39}},{"value":"/     \"sed do eiusmod tempor\",","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1066308,"byte_end":1066340,"line_start":43,"line_end":43,"column_start":1,"column_end":33}},{"value":"/ ]);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1066341,"byte_end":1066348,"line_start":44,"line_end":44,"column_start":1,"column_end":8}},{"value":"/ let c2 = PrimitiveArray::<Float64Type>::from(vec![","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1066349,"byte_end":1066403,"line_start":45,"line_end":45,"column_start":1,"column_end":55}},{"value":"/     Some(123.564532),","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1066404,"byte_end":1066429,"line_start":46,"line_end":46,"column_start":1,"column_end":26}},{"value":"/     None,","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1066430,"byte_end":1066443,"line_start":47,"line_end":47,"column_start":1,"column_end":14}},{"value":"/     Some(-556132.25),","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1066444,"byte_end":1066469,"line_start":48,"line_end":48,"column_start":1,"column_end":26}},{"value":"/ ]);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1066470,"byte_end":1066477,"line_start":49,"line_end":49,"column_start":1,"column_end":8}},{"value":"/ let c3 = PrimitiveArray::<UInt32Type>::from(vec![3, 2, 1]);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1066478,"byte_end":1066541,"line_start":50,"line_end":50,"column_start":1,"column_end":64}},{"value":"/ let c4 = BooleanArray::from(vec![Some(true), Some(false), None]);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1066542,"byte_end":1066611,"line_start":51,"line_end":51,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1066612,"byte_end":1066615,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ let batch = RecordBatch::try_new(","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1066616,"byte_end":1066653,"line_start":53,"line_end":53,"column_start":1,"column_end":38}},{"value":"/     Arc::new(schema),","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1066654,"byte_end":1066679,"line_start":54,"line_end":54,"column_start":1,"column_end":26}},{"value":"/     vec![Arc::new(c1), Arc::new(c2), Arc::new(c3), Arc::new(c4)],","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1066680,"byte_end":1066749,"line_start":55,"line_end":55,"column_start":1,"column_end":70}},{"value":"/ )","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1066750,"byte_end":1066755,"line_start":56,"line_end":56,"column_start":1,"column_end":6}},{"value":"/ .unwrap();","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1066756,"byte_end":1066770,"line_start":57,"line_end":57,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1066771,"byte_end":1066774,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ let file = get_temp_file(\"out.csv\", &[]);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1066775,"byte_end":1066820,"line_start":59,"line_end":59,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1066821,"byte_end":1066824,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ let mut writer = csv::Writer::new(file);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1066825,"byte_end":1066869,"line_start":61,"line_end":61,"column_start":1,"column_end":45}},{"value":"/ let batches = vec![&batch, &batch];","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1066870,"byte_end":1066909,"line_start":62,"line_end":62,"column_start":1,"column_end":40}},{"value":"/ for batch in batches {","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1066910,"byte_end":1066936,"line_start":63,"line_end":63,"column_start":1,"column_end":27}},{"value":"/     writer.write(batch).unwrap();","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1066937,"byte_end":1066974,"line_start":64,"line_end":64,"column_start":1,"column_end":38}},{"value":"/ }","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1066975,"byte_end":1066980,"line_start":65,"line_end":65,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1066981,"byte_end":1066988,"line_start":66,"line_end":66,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":7819},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1067633,"byte_end":1067639,"line_start":91,"line_end":91,"column_start":12,"column_end":18},"name":"Writer","qualname":"::csv::writer::Writer","value":"Writer {  }","parent":null,"children":[{"krate":0,"index":7821},{"krate":0,"index":7822},{"krate":0,"index":7823},{"krate":0,"index":7824},{"krate":0,"index":7825},{"krate":0,"index":7826},{"krate":0,"index":7827}],"decl_id":null,"docs":" A CSV writer\n","sig":null,"attributes":[{"value":"/ A CSV writer","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1067588,"byte_end":1067604,"line_start":89,"line_end":89,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":3720},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1068259,"byte_end":1068262,"line_start":110,"line_end":110,"column_start":12,"column_end":15},"name":"new","qualname":"<Writer<W>>::new","value":"pub fn new(W) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new CsvWriter from a writable object, with default options\n","sig":null,"attributes":[{"value":"/ Create a new CsvWriter from a writable object, with default options","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1068176,"byte_end":1068247,"line_start":109,"line_end":109,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":3723},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1074741,"byte_end":1074746,"line_start":255,"line_end":255,"column_start":12,"column_end":17},"name":"write","qualname":"<Writer<W>>::write","value":"pub fn write(&mut Self, &RecordBatch) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Write a vector of record batches to a writable object\n","sig":null,"attributes":[{"value":"/ Write a vector of record batches to a writable object","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1074672,"byte_end":1074729,"line_start":254,"line_end":254,"column_start":5,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":7831},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1075631,"byte_end":1075644,"line_start":284,"line_end":284,"column_start":12,"column_end":25},"name":"WriterBuilder","qualname":"::csv::writer::WriterBuilder","value":"WriterBuilder {  }","parent":null,"children":[{"krate":0,"index":7832},{"krate":0,"index":7833},{"krate":0,"index":7834},{"krate":0,"index":7835},{"krate":0,"index":7836}],"decl_id":null,"docs":" A CSV writer builder\n","sig":null,"attributes":[{"value":"/ A CSV writer builder","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1075578,"byte_end":1075602,"line_start":282,"line_end":282,"column_start":1,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":3728},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1077094,"byte_end":1077097,"line_start":332,"line_end":332,"column_start":12,"column_end":15},"name":"new","qualname":"<WriterBuilder>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new builder for configuring CSV writing options.","sig":null,"attributes":[{"value":"/ Create a new builder for configuring CSV writing options.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1076458,"byte_end":1076519,"line_start":310,"line_end":310,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1076524,"byte_end":1076527,"line_start":311,"line_end":311,"column_start":5,"column_end":8}},{"value":"/ To convert a builder into a writer, call `WriterBuilder::build`","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1076532,"byte_end":1076599,"line_start":312,"line_end":312,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1076604,"byte_end":1076607,"line_start":313,"line_end":313,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1076612,"byte_end":1076625,"line_start":314,"line_end":314,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1076630,"byte_end":1076633,"line_start":315,"line_end":315,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1076638,"byte_end":1076645,"line_start":316,"line_end":316,"column_start":5,"column_end":12}},{"value":"/ extern crate arrow;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1076650,"byte_end":1076673,"line_start":317,"line_end":317,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1076678,"byte_end":1076681,"line_start":318,"line_end":318,"column_start":5,"column_end":8}},{"value":"/ use arrow::csv;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1076686,"byte_end":1076705,"line_start":319,"line_end":319,"column_start":5,"column_end":24}},{"value":"/ use std::fs::File;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1076710,"byte_end":1076732,"line_start":320,"line_end":320,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1076737,"byte_end":1076740,"line_start":321,"line_end":321,"column_start":5,"column_end":8}},{"value":"/ fn example() -> csv::Writer<File> {","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1076745,"byte_end":1076784,"line_start":322,"line_end":322,"column_start":5,"column_end":44}},{"value":"/     let file = File::create(\"target/out.csv\").unwrap();","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1076789,"byte_end":1076848,"line_start":323,"line_end":323,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1076853,"byte_end":1076856,"line_start":324,"line_end":324,"column_start":5,"column_end":8}},{"value":"/     // create a builder that doesn't write headers","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1076861,"byte_end":1076915,"line_start":325,"line_end":325,"column_start":5,"column_end":59}},{"value":"/     let builder = csv::WriterBuilder::new().has_headers(false);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1076920,"byte_end":1076987,"line_start":326,"line_end":326,"column_start":5,"column_end":72}},{"value":"/     let writer = builder.build(file);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1076992,"byte_end":1077033,"line_start":327,"line_end":327,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1077038,"byte_end":1077041,"line_start":328,"line_end":328,"column_start":5,"column_end":8}},{"value":"/     writer","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1077046,"byte_end":1077060,"line_start":329,"line_end":329,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1077065,"byte_end":1077070,"line_start":330,"line_end":330,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1077075,"byte_end":1077082,"line_start":331,"line_end":331,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3729},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1077189,"byte_end":1077200,"line_start":337,"line_end":337,"column_start":12,"column_end":23},"name":"has_headers","qualname":"<WriterBuilder>::has_headers","value":"pub fn has_headers(Self, bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set whether to write headers\n","sig":null,"attributes":[{"value":"/ Set whether to write headers","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1077145,"byte_end":1077177,"line_start":336,"line_end":336,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":3730},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1077375,"byte_end":1077389,"line_start":343,"line_end":343,"column_start":12,"column_end":26},"name":"with_delimiter","qualname":"<WriterBuilder>::with_delimiter","value":"pub fn with_delimiter(Self, u8) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set the CSV file's column delimiter as a byte character\n","sig":null,"attributes":[{"value":"/ Set the CSV file's column delimiter as a byte character","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1077304,"byte_end":1077363,"line_start":342,"line_end":342,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":3731},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1077537,"byte_end":1077553,"line_start":349,"line_end":349,"column_start":12,"column_end":28},"name":"with_date_format","qualname":"<WriterBuilder>::with_date_format","value":"pub fn with_date_format(Self, String) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set the CSV file's date format\n","sig":null,"attributes":[{"value":"/ Set the CSV file's date format","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1077491,"byte_end":1077525,"line_start":348,"line_end":348,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":3732},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1077701,"byte_end":1077717,"line_start":355,"line_end":355,"column_start":12,"column_end":28},"name":"with_time_format","qualname":"<WriterBuilder>::with_time_format","value":"pub fn with_time_format(Self, String) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set the CSV file's time format\n","sig":null,"attributes":[{"value":"/ Set the CSV file's time format","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1077655,"byte_end":1077689,"line_start":354,"line_end":354,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":3733},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1077870,"byte_end":1077891,"line_start":361,"line_end":361,"column_start":12,"column_end":33},"name":"with_timestamp_format","qualname":"<WriterBuilder>::with_timestamp_format","value":"pub fn with_timestamp_format(Self, String) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set the CSV file's timestamp format\n","sig":null,"attributes":[{"value":"/ Set the CSV file's timestamp format","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1077819,"byte_end":1077858,"line_start":360,"line_end":360,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":3734},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1078035,"byte_end":1078040,"line_start":367,"line_end":367,"column_start":12,"column_end":17},"name":"build","qualname":"<WriterBuilder>::build","value":"pub fn build<W: Write>(Self, W) -> Writer<W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Writer`\n","sig":null,"attributes":[{"value":"/ Create a new `Writer`","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1077998,"byte_end":1078023,"line_start":366,"line_end":366,"column_start":5,"column_end":30}}]},{"kind":"Mod","id":{"krate":0,"index":3754},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"datatypes","qualname":"::datatypes","value":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","parent":null,"children":[{"krate":0,"index":3755},{"krate":0,"index":3758},{"krate":0,"index":3761},{"krate":0,"index":3762},{"krate":0,"index":3764},{"krate":0,"index":3767},{"krate":0,"index":3770},{"krate":0,"index":3773},{"krate":0,"index":3776},{"krate":0,"index":3779},{"krate":0,"index":3782},{"krate":0,"index":3783},{"krate":0,"index":3786},{"krate":0,"index":3789},{"krate":0,"index":3790},{"krate":0,"index":3793},{"krate":0,"index":3796},{"krate":0,"index":3799},{"krate":0,"index":3800},{"krate":0,"index":3802},{"krate":0,"index":3803},{"krate":0,"index":3805},{"krate":0,"index":3806},{"krate":0,"index":3809},{"krate":0,"index":7839},{"krate":0,"index":7923},{"krate":0,"index":7929},{"krate":0,"index":8068},{"krate":0,"index":8070},{"krate":0,"index":8072},{"krate":0,"index":8073},{"krate":0,"index":8076},{"krate":0,"index":8077},{"krate":0,"index":8079},{"krate":0,"index":8082},{"krate":0,"index":8084},{"krate":0,"index":8086},{"krate":0,"index":8091},{"krate":0,"index":8097},{"krate":0,"index":8136},{"krate":0,"index":8138},{"krate":0,"index":8140},{"krate":0,"index":8141},{"krate":0,"index":8143},{"krate":0,"index":8144},{"krate":0,"index":8146},{"krate":0,"index":8149},{"krate":0,"index":8151},{"krate":0,"index":8153},{"krate":0,"index":8162},{"krate":0,"index":8168},{"krate":0,"index":8211},{"krate":0,"index":8213},{"krate":0,"index":8215},{"krate":0,"index":8216},{"krate":0,"index":8218},{"krate":0,"index":8219},{"krate":0,"index":8221},{"krate":0,"index":8224},{"krate":0,"index":8226},{"krate":0,"index":8228},{"krate":0,"index":8233},{"krate":0,"index":8239},{"krate":0,"index":8278},{"krate":0,"index":8280},{"krate":0,"index":8282},{"krate":0,"index":8283},{"krate":0,"index":8285},{"krate":0,"index":8286},{"krate":0,"index":8288},{"krate":0,"index":8291},{"krate":0,"index":8293},{"krate":0,"index":8295},{"krate":0,"index":8301},{"krate":0,"index":8307},{"krate":0,"index":8358},{"krate":0,"index":8360},{"krate":0,"index":8362},{"krate":0,"index":8363},{"krate":0,"index":8366},{"krate":0,"index":8367},{"krate":0,"index":8369},{"krate":0,"index":8372},{"krate":0,"index":8374},{"krate":0,"index":3812},{"krate":0,"index":3818},{"krate":0,"index":3823},{"krate":0,"index":3825},{"krate":0,"index":3829},{"krate":0,"index":3833},{"krate":0,"index":3838},{"krate":0,"index":3843},{"krate":0,"index":3847},{"krate":0,"index":3851},{"krate":0,"index":3855},{"krate":0,"index":3859},{"krate":0,"index":3861},{"krate":0,"index":8377},{"krate":0,"index":8378},{"krate":0,"index":3863},{"krate":0,"index":8383},{"krate":0,"index":8384},{"krate":0,"index":8380},{"krate":0,"index":8389},{"krate":0,"index":8390},{"krate":0,"index":8386},{"krate":0,"index":8395},{"krate":0,"index":8396},{"krate":0,"index":8392},{"krate":0,"index":8401},{"krate":0,"index":8402},{"krate":0,"index":8398},{"krate":0,"index":8407},{"krate":0,"index":8408},{"krate":0,"index":8404},{"krate":0,"index":8413},{"krate":0,"index":8414},{"krate":0,"index":8410},{"krate":0,"index":8419},{"krate":0,"index":8420},{"krate":0,"index":8416},{"krate":0,"index":8425},{"krate":0,"index":8426},{"krate":0,"index":8422},{"krate":0,"index":8431},{"krate":0,"index":8432},{"krate":0,"index":8428},{"krate":0,"index":8437},{"krate":0,"index":8438},{"krate":0,"index":8434},{"krate":0,"index":8443},{"krate":0,"index":8444},{"krate":0,"index":8440},{"krate":0,"index":8449},{"krate":0,"index":8450},{"krate":0,"index":8446},{"krate":0,"index":8455},{"krate":0,"index":8456},{"krate":0,"index":8452},{"krate":0,"index":8461},{"krate":0,"index":8462},{"krate":0,"index":8458},{"krate":0,"index":8467},{"krate":0,"index":8468},{"krate":0,"index":8464},{"krate":0,"index":8473},{"krate":0,"index":8474},{"krate":0,"index":8470},{"krate":0,"index":8479},{"krate":0,"index":8480},{"krate":0,"index":8476},{"krate":0,"index":8485},{"krate":0,"index":8486},{"krate":0,"index":8482},{"krate":0,"index":8491},{"krate":0,"index":8492},{"krate":0,"index":8488},{"krate":0,"index":8497},{"krate":0,"index":8498},{"krate":0,"index":8494},{"krate":0,"index":8503},{"krate":0,"index":8504},{"krate":0,"index":8500},{"krate":0,"index":8509},{"krate":0,"index":8510},{"krate":0,"index":8506},{"krate":0,"index":8515},{"krate":0,"index":8516},{"krate":0,"index":8512},{"krate":0,"index":8521},{"krate":0,"index":8522},{"krate":0,"index":8518},{"krate":0,"index":8527},{"krate":0,"index":8528},{"krate":0,"index":8524},{"krate":0,"index":8533},{"krate":0,"index":8534},{"krate":0,"index":8530},{"krate":0,"index":3866},{"krate":0,"index":3867},{"krate":0,"index":3868},{"krate":0,"index":3869},{"krate":0,"index":3870},{"krate":0,"index":3871},{"krate":0,"index":3872},{"krate":0,"index":3873},{"krate":0,"index":3874},{"krate":0,"index":3875},{"krate":0,"index":8536},{"krate":0,"index":8537},{"krate":0,"index":8538},{"krate":0,"index":8539},{"krate":0,"index":8540},{"krate":0,"index":8541},{"krate":0,"index":8542},{"krate":0,"index":8543},{"krate":0,"index":8544},{"krate":0,"index":8545},{"krate":0,"index":8546},{"krate":0,"index":8547},{"krate":0,"index":8548},{"krate":0,"index":8549},{"krate":0,"index":8550},{"krate":0,"index":8551},{"krate":0,"index":8552},{"krate":0,"index":8553},{"krate":0,"index":8554},{"krate":0,"index":8555},{"krate":0,"index":8556},{"krate":0,"index":8557},{"krate":0,"index":8558},{"krate":0,"index":8559},{"krate":0,"index":8560},{"krate":0,"index":8561},{"krate":0,"index":3877},{"krate":0,"index":8562},{"krate":0,"index":8563},{"krate":0,"index":8564},{"krate":0,"index":8565},{"krate":0,"index":8566},{"krate":0,"index":8567},{"krate":0,"index":3879},{"krate":0,"index":3880},{"krate":0,"index":3881},{"krate":0,"index":3882},{"krate":0,"index":3883},{"krate":0,"index":3884},{"krate":0,"index":3885},{"krate":0,"index":3886},{"krate":0,"index":3887},{"krate":0,"index":3888},{"krate":0,"index":3889},{"krate":0,"index":3890},{"krate":0,"index":3892},{"krate":0,"index":3894},{"krate":0,"index":3896},{"krate":0,"index":3898},{"krate":0,"index":3900},{"krate":0,"index":3902},{"krate":0,"index":3905},{"krate":0,"index":3908},{"krate":0,"index":3910},{"krate":0,"index":3917},{"krate":0,"index":3932},{"krate":0,"index":8568},{"krate":0,"index":8570},{"krate":0,"index":8576},{"krate":0,"index":8619},{"krate":0,"index":8621},{"krate":0,"index":8623},{"krate":0,"index":8624},{"krate":0,"index":8627},{"krate":0,"index":8628},{"krate":0,"index":3934},{"krate":0,"index":3955},{"krate":0,"index":3958},{"krate":0,"index":8632},{"krate":0,"index":8635}],"decl_id":null,"docs":" Defines the logical data types of Arrow arrays.","sig":null,"attributes":[{"value":"/ Defines the logical data types of Arrow arrays.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1086747,"byte_end":1086798,"line_start":18,"line_end":18,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1086799,"byte_end":1086802,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ The most important things you might be looking for are:","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1086803,"byte_end":1086862,"line_start":20,"line_end":20,"column_start":1,"column_end":60}},{"value":"/  * [`Schema`](crate::datatypes::Schema) to describe a schema.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1086863,"byte_end":1086928,"line_start":21,"line_end":21,"column_start":1,"column_end":66}},{"value":"/  * [`Field`](crate::datatypes::Field) to describe one field within a schema.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1086929,"byte_end":1087009,"line_start":22,"line_end":22,"column_start":1,"column_end":81}},{"value":"/  * [`DataType`](crate::datatypes::DataType) to describe the type of a field.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1087010,"byte_end":1087090,"line_start":23,"line_end":23,"column_start":1,"column_end":81}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7840},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1088535,"byte_end":1088539,"line_start":64,"line_end":64,"column_start":5,"column_end":9},"name":"Null","qualname":"::datatypes::DataType::Null","value":"DataType::Null","parent":{"krate":0,"index":7839},"children":[],"decl_id":null,"docs":" Null type\n","sig":null,"attributes":[{"value":"/ Null type","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1088517,"byte_end":1088530,"line_start":63,"line_end":63,"column_start":5,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7842},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1088616,"byte_end":1088623,"line_start":66,"line_end":66,"column_start":5,"column_end":12},"name":"Boolean","qualname":"::datatypes::DataType::Boolean","value":"DataType::Boolean","parent":{"krate":0,"index":7839},"children":[],"decl_id":null,"docs":" A boolean datatype representing the values `true` and `false`.\n","sig":null,"attributes":[{"value":"/ A boolean datatype representing the values `true` and `false`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1088545,"byte_end":1088611,"line_start":65,"line_end":65,"column_start":5,"column_end":71}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7844},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1088661,"byte_end":1088665,"line_start":68,"line_end":68,"column_start":5,"column_end":9},"name":"Int8","qualname":"::datatypes::DataType::Int8","value":"DataType::Int8","parent":{"krate":0,"index":7839},"children":[],"decl_id":null,"docs":" A signed 8-bit integer.\n","sig":null,"attributes":[{"value":"/ A signed 8-bit integer.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1088629,"byte_end":1088656,"line_start":67,"line_end":67,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7846},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1088704,"byte_end":1088709,"line_start":70,"line_end":70,"column_start":5,"column_end":10},"name":"Int16","qualname":"::datatypes::DataType::Int16","value":"DataType::Int16","parent":{"krate":0,"index":7839},"children":[],"decl_id":null,"docs":" A signed 16-bit integer.\n","sig":null,"attributes":[{"value":"/ A signed 16-bit integer.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1088671,"byte_end":1088699,"line_start":69,"line_end":69,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7848},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1088748,"byte_end":1088753,"line_start":72,"line_end":72,"column_start":5,"column_end":10},"name":"Int32","qualname":"::datatypes::DataType::Int32","value":"DataType::Int32","parent":{"krate":0,"index":7839},"children":[],"decl_id":null,"docs":" A signed 32-bit integer.\n","sig":null,"attributes":[{"value":"/ A signed 32-bit integer.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1088715,"byte_end":1088743,"line_start":71,"line_end":71,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7850},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1088792,"byte_end":1088797,"line_start":74,"line_end":74,"column_start":5,"column_end":10},"name":"Int64","qualname":"::datatypes::DataType::Int64","value":"DataType::Int64","parent":{"krate":0,"index":7839},"children":[],"decl_id":null,"docs":" A signed 64-bit integer.\n","sig":null,"attributes":[{"value":"/ A signed 64-bit integer.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1088759,"byte_end":1088787,"line_start":73,"line_end":73,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7852},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1088838,"byte_end":1088843,"line_start":76,"line_end":76,"column_start":5,"column_end":10},"name":"UInt8","qualname":"::datatypes::DataType::UInt8","value":"DataType::UInt8","parent":{"krate":0,"index":7839},"children":[],"decl_id":null,"docs":" An unsigned 8-bit integer.\n","sig":null,"attributes":[{"value":"/ An unsigned 8-bit integer.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1088803,"byte_end":1088833,"line_start":75,"line_end":75,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7854},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1088885,"byte_end":1088891,"line_start":78,"line_end":78,"column_start":5,"column_end":11},"name":"UInt16","qualname":"::datatypes::DataType::UInt16","value":"DataType::UInt16","parent":{"krate":0,"index":7839},"children":[],"decl_id":null,"docs":" An unsigned 16-bit integer.\n","sig":null,"attributes":[{"value":"/ An unsigned 16-bit integer.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1088849,"byte_end":1088880,"line_start":77,"line_end":77,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7856},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1088933,"byte_end":1088939,"line_start":80,"line_end":80,"column_start":5,"column_end":11},"name":"UInt32","qualname":"::datatypes::DataType::UInt32","value":"DataType::UInt32","parent":{"krate":0,"index":7839},"children":[],"decl_id":null,"docs":" An unsigned 32-bit integer.\n","sig":null,"attributes":[{"value":"/ An unsigned 32-bit integer.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1088897,"byte_end":1088928,"line_start":79,"line_end":79,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7858},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1088981,"byte_end":1088987,"line_start":82,"line_end":82,"column_start":5,"column_end":11},"name":"UInt64","qualname":"::datatypes::DataType::UInt64","value":"DataType::UInt64","parent":{"krate":0,"index":7839},"children":[],"decl_id":null,"docs":" An unsigned 64-bit integer.\n","sig":null,"attributes":[{"value":"/ An unsigned 64-bit integer.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1088945,"byte_end":1088976,"line_start":81,"line_end":81,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7860},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1089033,"byte_end":1089040,"line_start":84,"line_end":84,"column_start":5,"column_end":12},"name":"Float16","qualname":"::datatypes::DataType::Float16","value":"DataType::Float16","parent":{"krate":0,"index":7839},"children":[],"decl_id":null,"docs":" A 16-bit floating point number.\n","sig":null,"attributes":[{"value":"/ A 16-bit floating point number.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1088993,"byte_end":1089028,"line_start":83,"line_end":83,"column_start":5,"column_end":40}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7862},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1089086,"byte_end":1089093,"line_start":86,"line_end":86,"column_start":5,"column_end":12},"name":"Float32","qualname":"::datatypes::DataType::Float32","value":"DataType::Float32","parent":{"krate":0,"index":7839},"children":[],"decl_id":null,"docs":" A 32-bit floating point number.\n","sig":null,"attributes":[{"value":"/ A 32-bit floating point number.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1089046,"byte_end":1089081,"line_start":85,"line_end":85,"column_start":5,"column_end":40}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7864},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1089139,"byte_end":1089146,"line_start":88,"line_end":88,"column_start":5,"column_end":12},"name":"Float64","qualname":"::datatypes::DataType::Float64","value":"DataType::Float64","parent":{"krate":0,"index":7839},"children":[],"decl_id":null,"docs":" A 64-bit floating point number.\n","sig":null,"attributes":[{"value":"/ A 64-bit floating point number.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1089099,"byte_end":1089134,"line_start":87,"line_end":87,"column_start":5,"column_end":40}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7866},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1089666,"byte_end":1089675,"line_start":100,"line_end":100,"column_start":5,"column_end":14},"name":"Timestamp","qualname":"::datatypes::DataType::Timestamp","value":"DataType::Timestamp(TimeUnit, Option<String>)","parent":{"krate":0,"index":7839},"children":[],"decl_id":null,"docs":" A timestamp with an optional timezone.","sig":null,"attributes":[{"value":"/ A timestamp with an optional timezone.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1089152,"byte_end":1089194,"line_start":89,"line_end":89,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1089199,"byte_end":1089202,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ Time is measured as a Unix epoch, counting the seconds from","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1089207,"byte_end":1089270,"line_start":91,"line_end":91,"column_start":5,"column_end":68}},{"value":"/ 00:00:00.000 on 1 January 1970, excluding leap seconds,","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1089275,"byte_end":1089334,"line_start":92,"line_end":92,"column_start":5,"column_end":64}},{"value":"/ as a 64-bit integer.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1089339,"byte_end":1089363,"line_start":93,"line_end":93,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1089368,"byte_end":1089371,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ The time zone is a string indicating the name of a time zone, one of:","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1089376,"byte_end":1089449,"line_start":95,"line_end":95,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1089454,"byte_end":1089457,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ * As used in the Olson time zone database (the \"tz database\" or","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1089462,"byte_end":1089529,"line_start":97,"line_end":97,"column_start":5,"column_end":72}},{"value":"/   \"tzdata\"), such as \"America/New_York\"","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1089534,"byte_end":1089577,"line_start":98,"line_end":98,"column_start":5,"column_end":48}},{"value":"/ * An absolute time zone offset of the form +XX:XX or -XX:XX, such as +07:30","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1089582,"byte_end":1089661,"line_start":99,"line_end":99,"column_start":5,"column_end":84}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7870},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1089816,"byte_end":1089822,"line_start":103,"line_end":103,"column_start":5,"column_end":11},"name":"Date32","qualname":"::datatypes::DataType::Date32","value":"DataType::Date32(DateUnit)","parent":{"krate":0,"index":7839},"children":[],"decl_id":null,"docs":" A 32-bit date representing the elapsed time since UNIX epoch (1970-01-01)\n in days (32 bits).\n","sig":null,"attributes":[{"value":"/ A 32-bit date representing the elapsed time since UNIX epoch (1970-01-01)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1089707,"byte_end":1089784,"line_start":101,"line_end":101,"column_start":5,"column_end":82}},{"value":"/ in days (32 bits).","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1089789,"byte_end":1089811,"line_start":102,"line_end":102,"column_start":5,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7873},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1089955,"byte_end":1089961,"line_start":106,"line_end":106,"column_start":5,"column_end":11},"name":"Date64","qualname":"::datatypes::DataType::Date64","value":"DataType::Date64(DateUnit)","parent":{"krate":0,"index":7839},"children":[],"decl_id":null,"docs":" A 64-bit date representing the elapsed time since UNIX epoch (1970-01-01)\n in milliseconds (64 bits).\n","sig":null,"attributes":[{"value":"/ A 64-bit date representing the elapsed time since UNIX epoch (1970-01-01)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1089838,"byte_end":1089915,"line_start":104,"line_end":104,"column_start":5,"column_end":82}},{"value":"/ in milliseconds (64 bits).","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1089920,"byte_end":1089950,"line_start":105,"line_end":105,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7876},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1090071,"byte_end":1090077,"line_start":108,"line_end":108,"column_start":5,"column_end":11},"name":"Time32","qualname":"::datatypes::DataType::Time32","value":"DataType::Time32(TimeUnit)","parent":{"krate":0,"index":7839},"children":[],"decl_id":null,"docs":" A 32-bit time representing the elapsed time since midnight in the unit of `TimeUnit`.\n","sig":null,"attributes":[{"value":"/ A 32-bit time representing the elapsed time since midnight in the unit of `TimeUnit`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1089977,"byte_end":1090066,"line_start":107,"line_end":107,"column_start":5,"column_end":94}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7879},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1090187,"byte_end":1090193,"line_start":110,"line_end":110,"column_start":5,"column_end":11},"name":"Time64","qualname":"::datatypes::DataType::Time64","value":"DataType::Time64(TimeUnit)","parent":{"krate":0,"index":7839},"children":[],"decl_id":null,"docs":" A 64-bit time representing the elapsed time since midnight in the unit of `TimeUnit`.\n","sig":null,"attributes":[{"value":"/ A 64-bit time representing the elapsed time since midnight in the unit of `TimeUnit`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1090093,"byte_end":1090182,"line_start":109,"line_end":109,"column_start":5,"column_end":94}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7882},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1090303,"byte_end":1090311,"line_start":112,"line_end":112,"column_start":5,"column_end":13},"name":"Duration","qualname":"::datatypes::DataType::Duration","value":"DataType::Duration(TimeUnit)","parent":{"krate":0,"index":7839},"children":[],"decl_id":null,"docs":" Measure of elapsed time in either seconds, milliseconds, microseconds or nanoseconds.\n","sig":null,"attributes":[{"value":"/ Measure of elapsed time in either seconds, milliseconds, microseconds or nanoseconds.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1090209,"byte_end":1090298,"line_start":111,"line_end":111,"column_start":5,"column_end":94}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7885},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1090555,"byte_end":1090563,"line_start":116,"line_end":116,"column_start":5,"column_end":13},"name":"Interval","qualname":"::datatypes::DataType::Interval","value":"DataType::Interval(IntervalUnit)","parent":{"krate":0,"index":7839},"children":[],"decl_id":null,"docs":" A \"calendar\" interval which models types that don't necessarily\n have a precise duration without the context of a base timestamp (e.g.\n days can differ in length during day light savings time transitions).\n","sig":null,"attributes":[{"value":"/ A \"calendar\" interval which models types that don't necessarily","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1090327,"byte_end":1090394,"line_start":113,"line_end":113,"column_start":5,"column_end":72}},{"value":"/ have a precise duration without the context of a base timestamp (e.g.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1090399,"byte_end":1090472,"line_start":114,"line_end":114,"column_start":5,"column_end":78}},{"value":"/ days can differ in length during day light savings time transitions).","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1090477,"byte_end":1090550,"line_start":115,"line_end":115,"column_start":5,"column_end":78}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7888},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1090630,"byte_end":1090636,"line_start":118,"line_end":118,"column_start":5,"column_end":11},"name":"Binary","qualname":"::datatypes::DataType::Binary","value":"DataType::Binary","parent":{"krate":0,"index":7839},"children":[],"decl_id":null,"docs":" Opaque binary data of variable length.\n","sig":null,"attributes":[{"value":"/ Opaque binary data of variable length.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1090583,"byte_end":1090625,"line_start":117,"line_end":117,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7890},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1090748,"byte_end":1090763,"line_start":121,"line_end":121,"column_start":5,"column_end":20},"name":"FixedSizeBinary","qualname":"::datatypes::DataType::FixedSizeBinary","value":"DataType::FixedSizeBinary(i32)","parent":{"krate":0,"index":7839},"children":[],"decl_id":null,"docs":" Opaque binary data of fixed size.\n Enum parameter specifies the number of bytes per value.\n","sig":null,"attributes":[{"value":"/ Opaque binary data of fixed size.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1090642,"byte_end":1090679,"line_start":119,"line_end":119,"column_start":5,"column_end":42}},{"value":"/ Enum parameter specifies the number of bytes per value.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1090684,"byte_end":1090743,"line_start":120,"line_end":120,"column_start":5,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7893},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1090840,"byte_end":1090851,"line_start":123,"line_end":123,"column_start":5,"column_end":16},"name":"LargeBinary","qualname":"::datatypes::DataType::LargeBinary","value":"DataType::LargeBinary","parent":{"krate":0,"index":7839},"children":[],"decl_id":null,"docs":" Opaque binary data of variable length and 64-bit offsets.\n","sig":null,"attributes":[{"value":"/ Opaque binary data of variable length and 64-bit offsets.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1090774,"byte_end":1090835,"line_start":122,"line_end":122,"column_start":5,"column_end":66}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7895},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1090922,"byte_end":1090926,"line_start":125,"line_end":125,"column_start":5,"column_end":9},"name":"Utf8","qualname":"::datatypes::DataType::Utf8","value":"DataType::Utf8","parent":{"krate":0,"index":7839},"children":[],"decl_id":null,"docs":" A variable-length string in Unicode with UTF-8 encoding.\n","sig":null,"attributes":[{"value":"/ A variable-length string in Unicode with UTF-8 encoding.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1090857,"byte_end":1090917,"line_start":124,"line_end":124,"column_start":5,"column_end":65}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7897},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1091016,"byte_end":1091025,"line_start":127,"line_end":127,"column_start":5,"column_end":14},"name":"LargeUtf8","qualname":"::datatypes::DataType::LargeUtf8","value":"DataType::LargeUtf8","parent":{"krate":0,"index":7839},"children":[],"decl_id":null,"docs":" A variable-length string in Unicode with UFT-8 encoding and 64-bit offsets.\n","sig":null,"attributes":[{"value":"/ A variable-length string in Unicode with UFT-8 encoding and 64-bit offsets.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1090932,"byte_end":1091011,"line_start":126,"line_end":126,"column_start":5,"column_end":84}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7899},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1091094,"byte_end":1091098,"line_start":129,"line_end":129,"column_start":5,"column_end":9},"name":"List","qualname":"::datatypes::DataType::List","value":"DataType::List(Box<Field>)","parent":{"krate":0,"index":7839},"children":[],"decl_id":null,"docs":" A list of some logical data type with variable length.\n","sig":null,"attributes":[{"value":"/ A list of some logical data type with variable length.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1091031,"byte_end":1091089,"line_start":128,"line_end":128,"column_start":5,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7902},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1091176,"byte_end":1091189,"line_start":131,"line_end":131,"column_start":5,"column_end":18},"name":"FixedSizeList","qualname":"::datatypes::DataType::FixedSizeList","value":"DataType::FixedSizeList(Box<Field>, i32)","parent":{"krate":0,"index":7839},"children":[],"decl_id":null,"docs":" A list of some logical data type with fixed length.\n","sig":null,"attributes":[{"value":"/ A list of some logical data type with fixed length.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1091116,"byte_end":1091171,"line_start":130,"line_end":130,"column_start":5,"column_end":60}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7906},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1091294,"byte_end":1091303,"line_start":133,"line_end":133,"column_start":5,"column_end":14},"name":"LargeList","qualname":"::datatypes::DataType::LargeList","value":"DataType::LargeList(Box<Field>)","parent":{"krate":0,"index":7839},"children":[],"decl_id":null,"docs":" A list of some logical data type with variable length and 64-bit offsets.\n","sig":null,"attributes":[{"value":"/ A list of some logical data type with variable length and 64-bit offsets.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1091212,"byte_end":1091289,"line_start":132,"line_end":132,"column_start":5,"column_end":82}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7909},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1091385,"byte_end":1091391,"line_start":135,"line_end":135,"column_start":5,"column_end":11},"name":"Struct","qualname":"::datatypes::DataType::Struct","value":"DataType::Struct(Vec<Field>)","parent":{"krate":0,"index":7839},"children":[],"decl_id":null,"docs":" A nested datatype that contains a number of sub-fields.\n","sig":null,"attributes":[{"value":"/ A nested datatype that contains a number of sub-fields.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1091321,"byte_end":1091380,"line_start":134,"line_end":134,"column_start":5,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7912},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1091480,"byte_end":1091485,"line_start":137,"line_end":137,"column_start":5,"column_end":10},"name":"Union","qualname":"::datatypes::DataType::Union","value":"DataType::Union(Vec<Field>)","parent":{"krate":0,"index":7839},"children":[],"decl_id":null,"docs":" A nested datatype that can represent slots of differing types.\n","sig":null,"attributes":[{"value":"/ A nested datatype that can represent slots of differing types.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1091409,"byte_end":1091475,"line_start":136,"line_end":136,"column_start":5,"column_end":71}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7915},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1092015,"byte_end":1092025,"line_start":148,"line_end":148,"column_start":5,"column_end":15},"name":"Dictionary","qualname":"::datatypes::DataType::Dictionary","value":"DataType::Dictionary(Box<DataType>, Box<DataType>)","parent":{"krate":0,"index":7839},"children":[],"decl_id":null,"docs":" A dictionary encoded array (`key_type`, `value_type`), where\n each array element is an index of `key_type` into an\n associated dictionary of `value_type`.","sig":null,"attributes":[{"value":"/ A dictionary encoded array (`key_type`, `value_type`), where","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1091503,"byte_end":1091567,"line_start":138,"line_end":138,"column_start":5,"column_end":69}},{"value":"/ each array element is an index of `key_type` into an","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1091572,"byte_end":1091628,"line_start":139,"line_end":139,"column_start":5,"column_end":61}},{"value":"/ associated dictionary of `value_type`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1091633,"byte_end":1091675,"line_start":140,"line_end":140,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1091680,"byte_end":1091683,"line_start":141,"line_end":141,"column_start":5,"column_end":8}},{"value":"/ Dictionary arrays are used to store columns of `value_type`","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1091688,"byte_end":1091751,"line_start":142,"line_end":142,"column_start":5,"column_end":68}},{"value":"/ that contain many repeated values using less memory, but with","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1091756,"byte_end":1091821,"line_start":143,"line_end":143,"column_start":5,"column_end":70}},{"value":"/ a higher CPU overhead for some operations.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1091826,"byte_end":1091872,"line_start":144,"line_end":144,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1091877,"byte_end":1091880,"line_start":145,"line_end":145,"column_start":5,"column_end":8}},{"value":"/ This type mostly used to represent low cardinality string","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1091885,"byte_end":1091946,"line_start":146,"line_end":146,"column_start":5,"column_end":66}},{"value":"/ arrays or a limited set of primitive types as integers.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1091951,"byte_end":1092010,"line_start":147,"line_end":147,"column_start":5,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7919},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1092108,"byte_end":1092115,"line_start":150,"line_end":150,"column_start":5,"column_end":12},"name":"Decimal","qualname":"::datatypes::DataType::Decimal","value":"DataType::Decimal(usize, usize)","parent":{"krate":0,"index":7839},"children":[],"decl_id":null,"docs":" Decimal value with precision and scale\n","sig":null,"attributes":[{"value":"/ Decimal value with precision and scale","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1092061,"byte_end":1092103,"line_start":149,"line_end":149,"column_start":5,"column_end":47}}]},{"kind":"Enum","id":{"krate":0,"index":7839},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1088502,"byte_end":1088510,"line_start":62,"line_end":62,"column_start":10,"column_end":18},"name":"DataType","qualname":"::datatypes::DataType","value":"pub enum DataType {\n    Null,\n    Boolean,\n    Int8,\n    Int16,\n    Int32,\n    Int64,\n    UInt8,\n    UInt16,\n    UInt32,\n    UInt64,\n    Float16,\n    Float32,\n    Float64,\n    Timestamp(TimeUnit, Option<String>),\n    Date32(DateUnit),\n    Date64(DateUnit),\n    Time32(TimeUnit),\n    Time64(TimeUnit),\n    Duration(TimeUnit),\n    Interval(IntervalUnit),\n    Binary,\n    FixedSizeBinary(i32),\n    LargeBinary,\n    Utf8,\n    LargeUtf8,\n    List(Box<Field>),\n    FixedSizeList(Box<Field>, i32),\n    LargeList(Box<Field>),\n    Struct(Vec<Field>),\n    Union(Vec<Field>),\n    Dictionary(Box<DataType>, Box<DataType>),\n    Decimal(usize, usize),\n}","parent":null,"children":[{"krate":0,"index":7840},{"krate":0,"index":7842},{"krate":0,"index":7844},{"krate":0,"index":7846},{"krate":0,"index":7848},{"krate":0,"index":7850},{"krate":0,"index":7852},{"krate":0,"index":7854},{"krate":0,"index":7856},{"krate":0,"index":7858},{"krate":0,"index":7860},{"krate":0,"index":7862},{"krate":0,"index":7864},{"krate":0,"index":7866},{"krate":0,"index":7870},{"krate":0,"index":7873},{"krate":0,"index":7876},{"krate":0,"index":7879},{"krate":0,"index":7882},{"krate":0,"index":7885},{"krate":0,"index":7888},{"krate":0,"index":7890},{"krate":0,"index":7893},{"krate":0,"index":7895},{"krate":0,"index":7897},{"krate":0,"index":7899},{"krate":0,"index":7902},{"krate":0,"index":7906},{"krate":0,"index":7909},{"krate":0,"index":7912},{"krate":0,"index":7915},{"krate":0,"index":7919}],"decl_id":null,"docs":" The set of datatypes that are supported by this implementation of Apache Arrow.","sig":null,"attributes":[{"value":"/ The set of datatypes that are supported by this implementation of Apache Arrow.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1087651,"byte_end":1087734,"line_start":46,"line_end":46,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1087735,"byte_end":1087738,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ The Arrow specification on data types includes some more types.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1087739,"byte_end":1087806,"line_start":48,"line_end":48,"column_start":1,"column_end":68}},{"value":"/ See also [`Schema.fbs`](https://github.com/apache/arrow/blob/master/format/Schema.fbs)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1087807,"byte_end":1087897,"line_start":49,"line_end":49,"column_start":1,"column_end":91}},{"value":"/ for Arrow's specification.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1087898,"byte_end":1087928,"line_start":50,"line_end":50,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1087929,"byte_end":1087932,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ The variants of this enum include primitive fixed size types as well as parametric or","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1087933,"byte_end":1088022,"line_start":52,"line_end":52,"column_start":1,"column_end":90}},{"value":"/ nested types.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1088023,"byte_end":1088040,"line_start":53,"line_end":53,"column_start":1,"column_end":18}},{"value":"/ Currently the Rust implementation supports the following  nested types:","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1088041,"byte_end":1088116,"line_start":54,"line_end":54,"column_start":1,"column_end":76}},{"value":"/  - `List<T>`","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1088117,"byte_end":1088133,"line_start":55,"line_end":55,"column_start":1,"column_end":17}},{"value":"/  - `Struct<T, U, V, ...>`","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1088134,"byte_end":1088163,"line_start":56,"line_end":56,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1088164,"byte_end":1088167,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ Nested types can themselves be nested within other arrays.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1088168,"byte_end":1088230,"line_start":58,"line_end":58,"column_start":1,"column_end":63}},{"value":"/ For more information on these types please see","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1088231,"byte_end":1088281,"line_start":59,"line_end":59,"column_start":1,"column_end":51}},{"value":"/ [the physical memory layout of Apache Arrow](https://arrow.apache.org/docs/format/Columnar.html#physical-memory-layout).","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1088282,"byte_end":1088406,"line_start":60,"line_end":60,"column_start":1,"column_end":125}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8087},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1092407,"byte_end":1092410,"line_start":158,"line_end":158,"column_start":5,"column_end":8},"name":"Day","qualname":"::datatypes::DateUnit::Day","value":"DateUnit::Day","parent":{"krate":0,"index":8086},"children":[],"decl_id":null,"docs":" Days since the UNIX epoch.\n","sig":null,"attributes":[{"value":"/ Days since the UNIX epoch.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1092372,"byte_end":1092402,"line_start":157,"line_end":157,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8089},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1092560,"byte_end":1092571,"line_start":161,"line_end":161,"column_start":5,"column_end":16},"name":"Millisecond","qualname":"::datatypes::DateUnit::Millisecond","value":"DateUnit::Millisecond","parent":{"krate":0,"index":8086},"children":[],"decl_id":null,"docs":" Milliseconds indicating UNIX time elapsed since the epoch (no\n leap seconds), where the values are evenly divisible by 86400000.\n","sig":null,"attributes":[{"value":"/ Milliseconds indicating UNIX time elapsed since the epoch (no","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1092416,"byte_end":1092481,"line_start":159,"line_end":159,"column_start":5,"column_end":70}},{"value":"/ leap seconds), where the values are evenly divisible by 86400000.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1092486,"byte_end":1092555,"line_start":160,"line_end":160,"column_start":5,"column_end":74}}]},{"kind":"Enum","id":{"krate":0,"index":8086},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1092357,"byte_end":1092365,"line_start":156,"line_end":156,"column_start":10,"column_end":18},"name":"DateUnit","qualname":"::datatypes::DateUnit","value":"pub enum DateUnit { Day, Millisecond, }","parent":null,"children":[{"krate":0,"index":8087},{"krate":0,"index":8089}],"decl_id":null,"docs":" Date is either a 32-bit or 64-bit type representing elapsed time since UNIX\n epoch (1970-01-01) in days or milliseconds.\n","sig":null,"attributes":[{"value":"/ Date is either a 32-bit or 64-bit type representing elapsed time since UNIX","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1092134,"byte_end":1092213,"line_start":153,"line_end":153,"column_start":1,"column_end":80}},{"value":"/ epoch (1970-01-01) in days or milliseconds.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1092214,"byte_end":1092261,"line_start":154,"line_end":154,"column_start":1,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8154},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1092797,"byte_end":1092803,"line_start":168,"line_end":168,"column_start":5,"column_end":11},"name":"Second","qualname":"::datatypes::TimeUnit::Second","value":"TimeUnit::Second","parent":{"krate":0,"index":8153},"children":[],"decl_id":null,"docs":" Time in seconds.\n","sig":null,"attributes":[{"value":"/ Time in seconds.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1092772,"byte_end":1092792,"line_start":167,"line_end":167,"column_start":5,"column_end":25}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8156},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1092839,"byte_end":1092850,"line_start":170,"line_end":170,"column_start":5,"column_end":16},"name":"Millisecond","qualname":"::datatypes::TimeUnit::Millisecond","value":"TimeUnit::Millisecond","parent":{"krate":0,"index":8153},"children":[],"decl_id":null,"docs":" Time in milliseconds.\n","sig":null,"attributes":[{"value":"/ Time in milliseconds.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1092809,"byte_end":1092834,"line_start":169,"line_end":169,"column_start":5,"column_end":30}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8158},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1092886,"byte_end":1092897,"line_start":172,"line_end":172,"column_start":5,"column_end":16},"name":"Microsecond","qualname":"::datatypes::TimeUnit::Microsecond","value":"TimeUnit::Microsecond","parent":{"krate":0,"index":8153},"children":[],"decl_id":null,"docs":" Time in microseconds.\n","sig":null,"attributes":[{"value":"/ Time in microseconds.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1092856,"byte_end":1092881,"line_start":171,"line_end":171,"column_start":5,"column_end":30}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8160},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1092932,"byte_end":1092942,"line_start":174,"line_end":174,"column_start":5,"column_end":15},"name":"Nanosecond","qualname":"::datatypes::TimeUnit::Nanosecond","value":"TimeUnit::Nanosecond","parent":{"krate":0,"index":8153},"children":[],"decl_id":null,"docs":" Time in nanoseconds.\n","sig":null,"attributes":[{"value":"/ Time in nanoseconds.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1092903,"byte_end":1092927,"line_start":173,"line_end":173,"column_start":5,"column_end":29}}]},{"kind":"Enum","id":{"krate":0,"index":8153},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1092757,"byte_end":1092765,"line_start":166,"line_end":166,"column_start":10,"column_end":18},"name":"TimeUnit","qualname":"::datatypes::TimeUnit","value":"pub enum TimeUnit { Second, Millisecond, Microsecond, Nanosecond, }","parent":null,"children":[{"krate":0,"index":8154},{"krate":0,"index":8156},{"krate":0,"index":8158},{"krate":0,"index":8160}],"decl_id":null,"docs":" An absolute length of time in seconds, milliseconds, microseconds or nanoseconds.\n","sig":null,"attributes":[{"value":"/ An absolute length of time in seconds, milliseconds, microseconds or nanoseconds.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1092576,"byte_end":1092661,"line_start":164,"line_end":164,"column_start":1,"column_end":86}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8229},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1093192,"byte_end":1093201,"line_start":181,"line_end":181,"column_start":5,"column_end":14},"name":"YearMonth","qualname":"::datatypes::IntervalUnit::YearMonth","value":"IntervalUnit::YearMonth","parent":{"krate":0,"index":8228},"children":[],"decl_id":null,"docs":" Indicates the number of elapsed whole months, stored as 4-byte integers.\n","sig":null,"attributes":[{"value":"/ Indicates the number of elapsed whole months, stored as 4-byte integers.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1093111,"byte_end":1093187,"line_start":180,"line_end":180,"column_start":5,"column_end":81}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8231},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1093337,"byte_end":1093344,"line_start":184,"line_end":184,"column_start":5,"column_end":12},"name":"DayTime","qualname":"::datatypes::IntervalUnit::DayTime","value":"IntervalUnit::DayTime","parent":{"krate":0,"index":8228},"children":[],"decl_id":null,"docs":" Indicates the number of elapsed days and milliseconds,\n stored as 2 contiguous 32-bit integers (8-bytes in total).\n","sig":null,"attributes":[{"value":"/ Indicates the number of elapsed days and milliseconds,","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1093207,"byte_end":1093265,"line_start":182,"line_end":182,"column_start":5,"column_end":63}},{"value":"/ stored as 2 contiguous 32-bit integers (8-bytes in total).","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1093270,"byte_end":1093332,"line_start":183,"line_end":183,"column_start":5,"column_end":67}}]},{"kind":"Enum","id":{"krate":0,"index":8228},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1093092,"byte_end":1093104,"line_start":179,"line_end":179,"column_start":10,"column_end":22},"name":"IntervalUnit","qualname":"::datatypes::IntervalUnit","value":"pub enum IntervalUnit { YearMonth, DayTime, }","parent":null,"children":[{"krate":0,"index":8229},{"krate":0,"index":8231}],"decl_id":null,"docs":" YEAR_MONTH or DAY_TIME interval in SQL style.\n","sig":null,"attributes":[{"value":"/ YEAR_MONTH or DAY_TIME interval in SQL style.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1092947,"byte_end":1092996,"line_start":177,"line_end":177,"column_start":1,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":8295},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1093574,"byte_end":1093579,"line_start":191,"line_end":191,"column_start":12,"column_end":17},"name":"Field","qualname":"::datatypes::Field","value":"Field {  }","parent":null,"children":[{"krate":0,"index":8296},{"krate":0,"index":8297},{"krate":0,"index":8298},{"krate":0,"index":8299},{"krate":0,"index":8300},{"krate":0,"index":8376}],"decl_id":null,"docs":" Contains the meta-data for a single relative type.","sig":null,"attributes":[{"value":"/ Contains the meta-data for a single relative type.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1093349,"byte_end":1093403,"line_start":187,"line_end":187,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1093404,"byte_end":1093407,"line_start":188,"line_end":188,"column_start":1,"column_end":4}},{"value":"/ The `Schema` object is an ordered collection of `Field` objects.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1093408,"byte_end":1093476,"line_start":189,"line_end":189,"column_start":1,"column_end":69}}]},{"kind":"Trait","id":{"krate":0,"index":3812},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1093878,"byte_end":1093893,"line_start":202,"line_end":202,"column_start":11,"column_end":26},"name":"ArrowNativeType","qualname":"::datatypes::ArrowNativeType","value":"ArrowNativeType: fmt::Debug + Send + Sync + Copy + PartialOrd + FromStr + Default + 'static","parent":null,"children":[{"krate":0,"index":3813},{"krate":0,"index":3814},{"krate":0,"index":3815},{"krate":0,"index":3816},{"krate":0,"index":3817}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3813},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1093983,"byte_end":1093998,"line_start":205,"line_end":205,"column_start":8,"column_end":23},"name":"into_json_value","qualname":"::datatypes::ArrowNativeType::into_json_value","value":"pub fn into_json_value(Self) -> Option<Value>","parent":{"krate":0,"index":3812},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3814},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1094071,"byte_end":1094081,"line_start":208,"line_end":208,"column_start":8,"column_end":18},"name":"from_usize","qualname":"::datatypes::ArrowNativeType::from_usize","value":"pub fn from_usize(usize) -> Option<Self>","parent":{"krate":0,"index":3812},"children":[],"decl_id":null,"docs":" Convert native type from usize.\n","sig":null,"attributes":[{"value":"/ Convert native type from usize.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1094028,"byte_end":1094063,"line_start":207,"line_end":207,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":3815},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1094175,"byte_end":1094183,"line_start":213,"line_end":213,"column_start":8,"column_end":16},"name":"to_usize","qualname":"::datatypes::ArrowNativeType::to_usize","value":"pub fn to_usize(&Self) -> Option<usize>","parent":{"krate":0,"index":3812},"children":[],"decl_id":null,"docs":" Convert native type to usize.\n","sig":null,"attributes":[{"value":"/ Convert native type to usize.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1094134,"byte_end":1094167,"line_start":212,"line_end":212,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":3816},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1094275,"byte_end":1094283,"line_start":218,"line_end":218,"column_start":8,"column_end":16},"name":"from_i32","qualname":"::datatypes::ArrowNativeType::from_i32","value":"pub fn from_i32(i32) -> Option<Self>","parent":{"krate":0,"index":3812},"children":[],"decl_id":null,"docs":" Convert native type from i32.\n","sig":null,"attributes":[{"value":"/ Convert native type from i32.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1094234,"byte_end":1094267,"line_start":217,"line_end":217,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":3817},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1094375,"byte_end":1094383,"line_start":223,"line_end":223,"column_start":8,"column_end":16},"name":"from_i64","qualname":"::datatypes::ArrowNativeType::from_i64","value":"pub fn from_i64(i64) -> Option<Self>","parent":{"krate":0,"index":3812},"children":[],"decl_id":null,"docs":" Convert native type from i64.\n","sig":null,"attributes":[{"value":"/ Convert native type from i64.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1094334,"byte_end":1094367,"line_start":222,"line_end":222,"column_start":5,"column_end":38}}]},{"kind":"Trait","id":{"krate":0,"index":3818},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1094517,"byte_end":1094535,"line_start":229,"line_end":229,"column_start":11,"column_end":29},"name":"ArrowPrimitiveType","qualname":"::datatypes::ArrowPrimitiveType","value":"ArrowPrimitiveType: 'static","parent":null,"children":[{"krate":0,"index":3819},{"krate":0,"index":3820},{"krate":0,"index":3821},{"krate":0,"index":3822}],"decl_id":null,"docs":" Trait indicating a primitive fixed-width type (bool, ints and floats).\n","sig":null,"attributes":[{"value":"/ Trait indicating a primitive fixed-width type (bool, ints and floats).","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1094432,"byte_end":1094506,"line_start":228,"line_end":228,"column_start":1,"column_end":75}}]},{"kind":"Type","id":{"krate":0,"index":3819},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1094619,"byte_end":1094625,"line_start":231,"line_end":231,"column_start":10,"column_end":16},"name":"Native","qualname":"::datatypes::ArrowPrimitiveType::Native","value":"type Native: ArrowNativeType;","parent":{"krate":0,"index":3818},"children":[],"decl_id":null,"docs":" Corresponding Rust native type for the primitive type.\n","sig":null,"attributes":[{"value":"/ Corresponding Rust native type for the primitive type.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1094551,"byte_end":1094609,"line_start":230,"line_end":230,"column_start":5,"column_end":63}}]},{"kind":"Const","id":{"krate":0,"index":3820},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1094721,"byte_end":1094730,"line_start":234,"line_end":234,"column_start":11,"column_end":20},"name":"DATA_TYPE","qualname":"::datatypes::ArrowPrimitiveType::DATA_TYPE","value":"DataType","parent":{"krate":0,"index":3818},"children":[],"decl_id":null,"docs":" the corresponding Arrow data type of this primitive type.\n","sig":null,"attributes":[{"value":"/ the corresponding Arrow data type of this primitive type.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1094649,"byte_end":1094710,"line_start":233,"line_end":233,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":3821},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1094805,"byte_end":1094819,"line_start":237,"line_end":237,"column_start":8,"column_end":22},"name":"get_byte_width","qualname":"::datatypes::ArrowPrimitiveType::get_byte_width","value":"pub fn get_byte_width() -> usize","parent":{"krate":0,"index":3818},"children":[],"decl_id":null,"docs":" Returns the byte width of this primitive type.\n","sig":null,"attributes":[{"value":"/ Returns the byte width of this primitive type.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1094747,"byte_end":1094797,"line_start":236,"line_end":236,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":3822},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1095016,"byte_end":1095029,"line_start":244,"line_end":244,"column_start":8,"column_end":21},"name":"default_value","qualname":"::datatypes::ArrowPrimitiveType::default_value","value":"pub fn default_value() -> Self::Native","parent":{"krate":0,"index":3818},"children":[],"decl_id":null,"docs":" Returns a default value of this primitive type.","sig":null,"attributes":[{"value":"/ Returns a default value of this primitive type.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1094878,"byte_end":1094929,"line_start":241,"line_end":241,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1094934,"byte_end":1094937,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ This is useful for aggregate array ops like `sum()`, `mean()`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1094942,"byte_end":1095008,"line_start":243,"line_end":243,"column_start":5,"column_end":71}}]},{"kind":"Struct","id":{"krate":0,"index":8377},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1098392,"byte_end":1098403,"line_start":392,"line_end":392,"column_start":12,"column_end":23},"name":"BooleanType","qualname":"::datatypes::BooleanType","value":"BooleanType {  }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3864},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1098441,"byte_end":1098450,"line_start":395,"line_end":395,"column_start":15,"column_end":24},"name":"DATA_TYPE","qualname":"::datatypes::BooleanType::DATA_TYPE","value":"DataType","parent":{"krate":0,"index":3863},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8383},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1098780,"byte_end":1098788,"line_start":410,"line_end":410,"column_start":12,"column_end":20},"name":"Int8Type","qualname":"::datatypes::Int8Type","value":"Int8Type {  }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8389},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1098822,"byte_end":1098831,"line_start":411,"line_end":411,"column_start":12,"column_end":21},"name":"Int16Type","qualname":"::datatypes::Int16Type","value":"Int16Type {  }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8395},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1098867,"byte_end":1098876,"line_start":412,"line_end":412,"column_start":12,"column_end":21},"name":"Int32Type","qualname":"::datatypes::Int32Type","value":"Int32Type {  }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8401},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1098912,"byte_end":1098921,"line_start":413,"line_end":413,"column_start":12,"column_end":21},"name":"Int64Type","qualname":"::datatypes::Int64Type","value":"Int64Type {  }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8407},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1098957,"byte_end":1098966,"line_start":414,"line_end":414,"column_start":12,"column_end":21},"name":"UInt8Type","qualname":"::datatypes::UInt8Type","value":"UInt8Type {  }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8413},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1099001,"byte_end":1099011,"line_start":415,"line_end":415,"column_start":12,"column_end":22},"name":"UInt16Type","qualname":"::datatypes::UInt16Type","value":"UInt16Type {  }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8419},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1099048,"byte_end":1099058,"line_start":416,"line_end":416,"column_start":12,"column_end":22},"name":"UInt32Type","qualname":"::datatypes::UInt32Type","value":"UInt32Type {  }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8425},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1099095,"byte_end":1099105,"line_start":417,"line_end":417,"column_start":12,"column_end":22},"name":"UInt64Type","qualname":"::datatypes::UInt64Type","value":"UInt64Type {  }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8431},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1099142,"byte_end":1099153,"line_start":418,"line_end":418,"column_start":12,"column_end":23},"name":"Float32Type","qualname":"::datatypes::Float32Type","value":"Float32Type {  }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8437},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1099191,"byte_end":1099202,"line_start":419,"line_end":419,"column_start":12,"column_end":23},"name":"Float64Type","qualname":"::datatypes::Float64Type","value":"Float64Type {  }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8443},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1099245,"byte_end":1099264,"line_start":421,"line_end":421,"column_start":5,"column_end":24},"name":"TimestampSecondType","qualname":"::datatypes::TimestampSecondType","value":"TimestampSecondType {  }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8449},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1099342,"byte_end":1099366,"line_start":426,"line_end":426,"column_start":5,"column_end":29},"name":"TimestampMillisecondType","qualname":"::datatypes::TimestampMillisecondType","value":"TimestampMillisecondType {  }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8455},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1099449,"byte_end":1099473,"line_start":431,"line_end":431,"column_start":5,"column_end":29},"name":"TimestampMicrosecondType","qualname":"::datatypes::TimestampMicrosecondType","value":"TimestampMicrosecondType {  }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8461},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1099556,"byte_end":1099579,"line_start":436,"line_end":436,"column_start":5,"column_end":28},"name":"TimestampNanosecondType","qualname":"::datatypes::TimestampNanosecondType","value":"TimestampNanosecondType {  }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8467},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1099656,"byte_end":1099666,"line_start":440,"line_end":440,"column_start":12,"column_end":22},"name":"Date32Type","qualname":"::datatypes::Date32Type","value":"Date32Type {  }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8473},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1099718,"byte_end":1099728,"line_start":441,"line_end":441,"column_start":12,"column_end":22},"name":"Date64Type","qualname":"::datatypes::Date64Type","value":"Date64Type {  }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8479},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1099788,"byte_end":1099804,"line_start":442,"line_end":442,"column_start":12,"column_end":28},"name":"Time32SecondType","qualname":"::datatypes::Time32SecondType","value":"Time32SecondType {  }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8485},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1099864,"byte_end":1099885,"line_start":444,"line_end":444,"column_start":5,"column_end":26},"name":"Time32MillisecondType","qualname":"::datatypes::Time32MillisecondType","value":"Time32MillisecondType {  }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8491},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1099959,"byte_end":1099980,"line_start":449,"line_end":449,"column_start":5,"column_end":26},"name":"Time64MicrosecondType","qualname":"::datatypes::Time64MicrosecondType","value":"Time64MicrosecondType {  }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8497},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1100054,"byte_end":1100074,"line_start":454,"line_end":454,"column_start":5,"column_end":25},"name":"Time64NanosecondType","qualname":"::datatypes::Time64NanosecondType","value":"Time64NanosecondType {  }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8503},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1100147,"byte_end":1100168,"line_start":459,"line_end":459,"column_start":5,"column_end":26},"name":"IntervalYearMonthType","qualname":"::datatypes::IntervalYearMonthType","value":"IntervalYearMonthType {  }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8509},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1100246,"byte_end":1100265,"line_start":464,"line_end":464,"column_start":5,"column_end":24},"name":"IntervalDayTimeType","qualname":"::datatypes::IntervalDayTimeType","value":"IntervalDayTimeType {  }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8515},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1100341,"byte_end":1100359,"line_start":469,"line_end":469,"column_start":5,"column_end":23},"name":"DurationSecondType","qualname":"::datatypes::DurationSecondType","value":"DurationSecondType {  }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8521},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1100430,"byte_end":1100453,"line_start":474,"line_end":474,"column_start":5,"column_end":28},"name":"DurationMillisecondType","qualname":"::datatypes::DurationMillisecondType","value":"DurationMillisecondType {  }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8527},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1100529,"byte_end":1100552,"line_start":479,"line_end":479,"column_start":5,"column_end":28},"name":"DurationMicrosecondType","qualname":"::datatypes::DurationMicrosecondType","value":"DurationMicrosecondType {  }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8533},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1100628,"byte_end":1100650,"line_start":484,"line_end":484,"column_start":5,"column_end":27},"name":"DurationNanosecondType","qualname":"::datatypes::DurationNanosecondType","value":"DurationNanosecondType {  }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":3866},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1100852,"byte_end":1100874,"line_start":491,"line_end":491,"column_start":11,"column_end":33},"name":"ArrowDictionaryKeyType","qualname":"::datatypes::ArrowDictionaryKeyType","value":"ArrowDictionaryKeyType: ArrowPrimitiveType","parent":null,"children":[],"decl_id":null,"docs":" A subtype of primitive type that represents legal dictionary keys.\n See <https://arrow.apache.org/docs/format/Columnar.html>\n","sig":null,"attributes":[{"value":"/ A subtype of primitive type that represents legal dictionary keys.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1100710,"byte_end":1100780,"line_start":489,"line_end":489,"column_start":1,"column_end":71}},{"value":"/ See <https://arrow.apache.org/docs/format/Columnar.html>","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1100781,"byte_end":1100841,"line_start":490,"line_end":490,"column_start":1,"column_end":61}}]},{"kind":"Trait","id":{"krate":0,"index":3875},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1104316,"byte_end":1104332,"line_start":595,"line_end":595,"column_start":11,"column_end":27},"name":"ArrowNumericType","qualname":"::datatypes::ArrowNumericType","value":"ArrowNumericType: ArrowPrimitiveType","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(not(simd))","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1104288,"byte_end":1104305,"line_start":594,"line_end":594,"column_start":1,"column_end":18}}]},{"kind":"Trait","id":{"krate":0,"index":3877},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1114524,"byte_end":1114546,"line_start":853,"line_end":853,"column_start":11,"column_end":33},"name":"ArrowSignedNumericType","qualname":"::datatypes::ArrowSignedNumericType","value":"ArrowSignedNumericType: ArrowNumericType","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(not(simd))","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1114496,"byte_end":1114513,"line_start":852,"line_end":852,"column_start":1,"column_end":18}}]},{"kind":"Trait","id":{"krate":0,"index":3879},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1115897,"byte_end":1115914,"line_start":897,"line_end":897,"column_start":11,"column_end":28},"name":"ArrowTemporalType","qualname":"::datatypes::ArrowTemporalType","value":"ArrowTemporalType: ArrowPrimitiveType","parent":null,"children":[],"decl_id":null,"docs":" A subtype of primitive type that represents temporal values.\n","sig":null,"attributes":[{"value":"/ A subtype of primitive type that represents temporal values.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1115822,"byte_end":1115886,"line_start":896,"line_end":896,"column_start":1,"column_end":65}}]},{"kind":"Trait","id":{"krate":0,"index":3890},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1116635,"byte_end":1116653,"line_start":913,"line_end":913,"column_start":11,"column_end":29},"name":"ArrowTimestampType","qualname":"::datatypes::ArrowTimestampType","value":"ArrowTimestampType: ArrowTemporalType","parent":null,"children":[{"krate":0,"index":3891}],"decl_id":null,"docs":" A timestamp type allows us to create array builders that take a timestamp.\n","sig":null,"attributes":[{"value":"/ A timestamp type allows us to create array builders that take a timestamp.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1116546,"byte_end":1116624,"line_start":912,"line_end":912,"column_start":1,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":3891},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1116732,"byte_end":1116745,"line_start":915,"line_end":915,"column_start":8,"column_end":21},"name":"get_time_unit","qualname":"::datatypes::ArrowTimestampType::get_time_unit","value":"pub fn get_time_unit() -> TimeUnit","parent":{"krate":0,"index":3890},"children":[],"decl_id":null,"docs":" Returns the `TimeUnit` of this timestamp.\n","sig":null,"attributes":[{"value":"/ Returns the `TimeUnit` of this timestamp.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1116679,"byte_end":1116724,"line_start":914,"line_end":914,"column_start":5,"column_end":50}}]},{"kind":"Trait","id":{"krate":0,"index":3900},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1117349,"byte_end":1117360,"line_start":940,"line_end":940,"column_start":11,"column_end":22},"name":"ToByteSlice","qualname":"::datatypes::ToByteSlice","value":"ToByteSlice","parent":null,"children":[{"krate":0,"index":3901}],"decl_id":null,"docs":" Allows conversion from supported Arrow types to a byte slice.\n","sig":null,"attributes":[{"value":"/ Allows conversion from supported Arrow types to a byte slice.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1117273,"byte_end":1117338,"line_start":939,"line_end":939,"column_start":1,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":3901},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1117419,"byte_end":1117432,"line_start":942,"line_end":942,"column_start":8,"column_end":21},"name":"to_byte_slice","qualname":"::datatypes::ToByteSlice::to_byte_slice","value":"pub fn to_byte_slice(&Self) -> &[u8]","parent":{"krate":0,"index":3900},"children":[],"decl_id":null,"docs":" Converts this instance into a byte slice\n","sig":null,"attributes":[{"value":"/ Converts this instance into a byte slice","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1117367,"byte_end":1117411,"line_start":941,"line_end":941,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":3912},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1127910,"byte_end":1127917,"line_start":1155,"line_end":1155,"column_start":12,"column_end":19},"name":"to_json","qualname":"<DataType>::to_json","value":"pub fn to_json(&Self) -> Value","parent":null,"children":[],"decl_id":null,"docs":" Generate a JSON representation of the data type\n","sig":null,"attributes":[{"value":"/ Generate a JSON representation of the data type","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1127847,"byte_end":1127898,"line_start":1154,"line_end":1154,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":3913},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1132478,"byte_end":1132488,"line_start":1240,"line_end":1240,"column_start":12,"column_end":22},"name":"is_numeric","qualname":"<DataType>::is_numeric","value":"pub fn is_numeric(&DataType) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if this type is numeric: (UInt*, Unit*, or Float*)\n","sig":null,"attributes":[{"value":"/ Returns true if this type is numeric: (UInt*, Unit*, or Float*)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1132399,"byte_end":1132466,"line_start":1239,"line_end":1239,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":3918},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1133960,"byte_end":1133963,"line_start":1285,"line_end":1285,"column_start":12,"column_end":15},"name":"new","qualname":"<Field>::new","value":"pub fn new(&str, DataType, bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new field\n","sig":null,"attributes":[{"value":"/ Creates a new field","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1133925,"byte_end":1133948,"line_start":1284,"line_end":1284,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":3919},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1134264,"byte_end":1134272,"line_start":1297,"line_end":1297,"column_start":12,"column_end":20},"name":"new_dict","qualname":"<Field>::new_dict","value":"pub fn new_dict(&str, DataType, bool, i64, bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new field\n","sig":null,"attributes":[{"value":"/ Creates a new field","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1134229,"byte_end":1134252,"line_start":1296,"line_end":1296,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":3920},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1134739,"byte_end":1134751,"line_start":1317,"line_end":1317,"column_start":12,"column_end":24},"name":"set_metadata","qualname":"<Field>::set_metadata","value":"pub fn set_metadata(&mut Self, Option<BTreeMap<String, String>>)","parent":null,"children":[],"decl_id":null,"docs":" Sets the `Field`'s optional custom metadata.\n The metadata is set as `None` for empty map.\n","sig":null,"attributes":[{"value":"/ Sets the `Field`'s optional custom metadata.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1134612,"byte_end":1134660,"line_start":1314,"line_end":1314,"column_start":5,"column_end":53}},{"value":"/ The metadata is set as `None` for empty map.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1134665,"byte_end":1134713,"line_start":1315,"line_end":1315,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1134718,"byte_end":1134727,"line_start":1316,"line_end":1316,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3921},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1135157,"byte_end":1135165,"line_start":1329,"line_end":1329,"column_start":18,"column_end":26},"name":"metadata","qualname":"<Field>::metadata","value":"pub const fn metadata(&Self) -> &Option<BTreeMap<String, String>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the immutable reference to the `Field`'s optional custom metadata.\n","sig":null,"attributes":[{"value":"/ Returns the immutable reference to the `Field`'s optional custom metadata.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1135047,"byte_end":1135125,"line_start":1327,"line_end":1327,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1135130,"byte_end":1135139,"line_start":1328,"line_end":1328,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3922},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1135334,"byte_end":1135338,"line_start":1335,"line_end":1335,"column_start":18,"column_end":22},"name":"name","qualname":"<Field>::name","value":"pub const fn name(&Self) -> &String","parent":null,"children":[],"decl_id":null,"docs":" Returns an immutable reference to the `Field`'s name\n","sig":null,"attributes":[{"value":"/ Returns an immutable reference to the `Field`'s name","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1135246,"byte_end":1135302,"line_start":1333,"line_end":1333,"column_start":5,"column_end":61}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1135307,"byte_end":1135316,"line_start":1334,"line_end":1334,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3923},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1135483,"byte_end":1135492,"line_start":1341,"line_end":1341,"column_start":18,"column_end":27},"name":"data_type","qualname":"<Field>::data_type","value":"pub const fn data_type(&Self) -> &DataType","parent":null,"children":[],"decl_id":null,"docs":" Returns an immutable reference to the `Field`'s  data-type\n","sig":null,"attributes":[{"value":"/ Returns an immutable reference to the `Field`'s  data-type","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1135389,"byte_end":1135451,"line_start":1339,"line_end":1339,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1135456,"byte_end":1135465,"line_start":1340,"line_end":1340,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3924},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1135637,"byte_end":1135648,"line_start":1347,"line_end":1347,"column_start":18,"column_end":29},"name":"is_nullable","qualname":"<Field>::is_nullable","value":"pub const fn is_nullable(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Indicates whether this `Field` supports null values\n","sig":null,"attributes":[{"value":"/ Indicates whether this `Field` supports null values","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1135550,"byte_end":1135605,"line_start":1345,"line_end":1345,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1135610,"byte_end":1135619,"line_start":1346,"line_end":1346,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3925},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1135790,"byte_end":1135797,"line_start":1353,"line_end":1353,"column_start":18,"column_end":25},"name":"dict_id","qualname":"<Field>::dict_id","value":"pub const fn dict_id(&Self) -> Option<i64>","parent":null,"children":[],"decl_id":null,"docs":" Returns the dictionary ID, if this is a dictionary type\n","sig":null,"attributes":[{"value":"/ Returns the dictionary ID, if this is a dictionary type","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1135699,"byte_end":1135758,"line_start":1351,"line_end":1351,"column_start":5,"column_end":64}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1135763,"byte_end":1135772,"line_start":1352,"line_end":1352,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3926},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1136077,"byte_end":1136092,"line_start":1362,"line_end":1362,"column_start":18,"column_end":33},"name":"dict_is_ordered","qualname":"<Field>::dict_is_ordered","value":"pub const fn dict_is_ordered(&Self) -> Option<bool>","parent":null,"children":[],"decl_id":null,"docs":" Returns whether this `Field`'s dictionary is ordered, if this is a dictionary type\n","sig":null,"attributes":[{"value":"/ Returns whether this `Field`'s dictionary is ordered, if this is a dictionary type","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1135959,"byte_end":1136045,"line_start":1360,"line_end":1360,"column_start":5,"column_end":91}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1136050,"byte_end":1136059,"line_start":1361,"line_end":1361,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3927},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1136332,"byte_end":1136336,"line_start":1370,"line_end":1370,"column_start":12,"column_end":16},"name":"from","qualname":"<Field>::from","value":"pub fn from(&Value) -> Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Parse a `Field` definition from a JSON representation\n","sig":null,"attributes":[{"value":"/ Parse a `Field` definition from a JSON representation","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1136263,"byte_end":1136320,"line_start":1369,"line_end":1369,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":3929},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1146042,"byte_end":1146049,"line_start":1567,"line_end":1567,"column_start":12,"column_end":19},"name":"to_json","qualname":"<Field>::to_json","value":"pub fn to_json(&Self) -> Value","parent":null,"children":[],"decl_id":null,"docs":" Generate a JSON representation of the `Field`\n","sig":null,"attributes":[{"value":"/ Generate a JSON representation of the `Field`","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1145981,"byte_end":1146030,"line_start":1566,"line_end":1566,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":3931},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1147621,"byte_end":1147630,"line_start":1608,"line_end":1608,"column_start":12,"column_end":21},"name":"try_merge","qualname":"<Field>::try_merge","value":"pub fn try_merge(&mut Self, &Field) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Merge field into self if it is compatible. Struct will be merged recursively.\n NOTE: `self` may be updated to unexpected state in case of merge failure.","sig":null,"attributes":[{"value":"/ Merge field into self if it is compatible. Struct will be merged recursively.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1147160,"byte_end":1147241,"line_start":1596,"line_end":1596,"column_start":5,"column_end":86}},{"value":"/ NOTE: `self` may be updated to unexpected state in case of merge failure.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1147246,"byte_end":1147323,"line_start":1597,"line_end":1597,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1147328,"byte_end":1147331,"line_start":1598,"line_end":1598,"column_start":5,"column_end":8}},{"value":"/ Example:","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1147336,"byte_end":1147348,"line_start":1599,"line_end":1599,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1147353,"byte_end":1147356,"line_start":1600,"line_end":1600,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1147361,"byte_end":1147368,"line_start":1601,"line_end":1601,"column_start":5,"column_end":12}},{"value":"/ use arrow::datatypes::*;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1147373,"byte_end":1147401,"line_start":1602,"line_end":1602,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1147406,"byte_end":1147409,"line_start":1603,"line_end":1603,"column_start":5,"column_end":8}},{"value":"/ let mut field = Field::new(\"c1\", DataType::Int64, false);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1147414,"byte_end":1147475,"line_start":1604,"line_end":1604,"column_start":5,"column_end":66}},{"value":"/ assert!(field.try_merge(&Field::new(\"c1\", DataType::Int64, true)).is_ok());","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1147480,"byte_end":1147559,"line_start":1605,"line_end":1605,"column_start":5,"column_end":84}},{"value":"/ assert!(field.is_nullable());","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1147564,"byte_end":1147597,"line_start":1606,"line_end":1606,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1147602,"byte_end":1147609,"line_start":1607,"line_end":1607,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":8568},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1152984,"byte_end":1152990,"line_start":1746,"line_end":1746,"column_start":12,"column_end":18},"name":"Schema","qualname":"::datatypes::Schema","value":"Schema {  }","parent":null,"children":[{"krate":0,"index":8569},{"krate":0,"index":8630}],"decl_id":null,"docs":" Describes the meta-data of an ordered sequence of relative types.","sig":null,"attributes":[{"value":"/ Describes the meta-data of an ordered sequence of relative types.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1152727,"byte_end":1152796,"line_start":1741,"line_end":1741,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1152797,"byte_end":1152800,"line_start":1742,"line_end":1742,"column_start":1,"column_end":4}},{"value":"/ Note that this information is only part of the meta-data and not part of the physical","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1152801,"byte_end":1152890,"line_start":1743,"line_end":1743,"column_start":1,"column_end":90}},{"value":"/ memory layout.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1152891,"byte_end":1152909,"line_start":1744,"line_end":1744,"column_start":1,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":3935},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1153262,"byte_end":1153267,"line_start":1755,"line_end":1755,"column_start":12,"column_end":17},"name":"empty","qualname":"<Schema>::empty","value":"pub fn empty() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `Schema`\n","sig":null,"attributes":[{"value":"/ Creates an empty `Schema`","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1153221,"byte_end":1153250,"line_start":1754,"line_end":1754,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":3936},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1153795,"byte_end":1153798,"line_start":1774,"line_end":1774,"column_start":12,"column_end":15},"name":"new","qualname":"<Schema>::new","value":"pub fn new(Vec<Field>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Schema` from a sequence of `Field` values","sig":null,"attributes":[{"value":"/ Creates a new `Schema` from a sequence of `Field` values","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1153382,"byte_end":1153442,"line_start":1762,"line_end":1762,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1153447,"byte_end":1153450,"line_start":1763,"line_end":1763,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1153455,"byte_end":1153468,"line_start":1764,"line_end":1764,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1153473,"byte_end":1153476,"line_start":1765,"line_end":1765,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1153481,"byte_end":1153488,"line_start":1766,"line_end":1766,"column_start":5,"column_end":12}},{"value":"/ # extern crate arrow;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1153493,"byte_end":1153518,"line_start":1767,"line_end":1767,"column_start":5,"column_end":30}},{"value":"/ # use arrow::datatypes::{Field, DataType, Schema};","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1153523,"byte_end":1153577,"line_start":1768,"line_end":1768,"column_start":5,"column_end":59}},{"value":"/ let field_a = Field::new(\"a\", DataType::Int64, false);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1153582,"byte_end":1153640,"line_start":1769,"line_end":1769,"column_start":5,"column_end":63}},{"value":"/ let field_b = Field::new(\"b\", DataType::Boolean, false);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1153645,"byte_end":1153705,"line_start":1770,"line_end":1770,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1153710,"byte_end":1153713,"line_start":1771,"line_end":1771,"column_start":5,"column_end":8}},{"value":"/ let schema = Schema::new(vec![field_a, field_b]);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1153718,"byte_end":1153771,"line_start":1772,"line_end":1772,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1153776,"byte_end":1153783,"line_start":1773,"line_end":1773,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3937},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1154604,"byte_end":1154621,"line_start":1796,"line_end":1796,"column_start":18,"column_end":35},"name":"new_with_metadata","qualname":"<Schema>::new_with_metadata","value":"pub const fn new_with_metadata(Vec<Field>, HashMap<String, String>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Schema` from a sequence of `Field` values\n and adds additional metadata in form of key value pairs.","sig":null,"attributes":[{"value":"/ Creates a new `Schema` from a sequence of `Field` values","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1153896,"byte_end":1153956,"line_start":1778,"line_end":1778,"column_start":5,"column_end":65}},{"value":"/ and adds additional metadata in form of key value pairs.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1153961,"byte_end":1154021,"line_start":1779,"line_end":1779,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1154026,"byte_end":1154029,"line_start":1780,"line_end":1780,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1154034,"byte_end":1154047,"line_start":1781,"line_end":1781,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1154052,"byte_end":1154055,"line_start":1782,"line_end":1782,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1154060,"byte_end":1154067,"line_start":1783,"line_end":1783,"column_start":5,"column_end":12}},{"value":"/ # extern crate arrow;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1154072,"byte_end":1154097,"line_start":1784,"line_end":1784,"column_start":5,"column_end":30}},{"value":"/ # use arrow::datatypes::{Field, DataType, Schema};","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1154102,"byte_end":1154156,"line_start":1785,"line_end":1785,"column_start":5,"column_end":59}},{"value":"/ # use std::collections::HashMap;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1154161,"byte_end":1154197,"line_start":1786,"line_end":1786,"column_start":5,"column_end":41}},{"value":"/ let field_a = Field::new(\"a\", DataType::Int64, false);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1154202,"byte_end":1154260,"line_start":1787,"line_end":1787,"column_start":5,"column_end":63}},{"value":"/ let field_b = Field::new(\"b\", DataType::Boolean, false);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1154265,"byte_end":1154325,"line_start":1788,"line_end":1788,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1154330,"byte_end":1154333,"line_start":1789,"line_end":1789,"column_start":5,"column_end":8}},{"value":"/ let mut metadata: HashMap<String, String> = HashMap::new();","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1154338,"byte_end":1154401,"line_start":1790,"line_end":1790,"column_start":5,"column_end":68}},{"value":"/ metadata.insert(\"row_count\".to_string(), \"100\".to_string());","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1154406,"byte_end":1154470,"line_start":1791,"line_end":1791,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1154475,"byte_end":1154478,"line_start":1792,"line_end":1792,"column_start":5,"column_end":8}},{"value":"/ let schema = Schema::new_with_metadata(vec![field_a, field_b], metadata);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1154483,"byte_end":1154560,"line_start":1793,"line_end":1793,"column_start":5,"column_end":82}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1154565,"byte_end":1154572,"line_start":1794,"line_end":1794,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1154577,"byte_end":1154586,"line_start":1795,"line_end":1795,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3938},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1155675,"byte_end":1155684,"line_start":1831,"line_end":1831,"column_start":12,"column_end":21},"name":"try_merge","qualname":"<Schema>::try_merge","value":"pub fn try_merge(&[Self]) -> Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Merge schema into self if it is compatible. Struct fields will be merged recursively.","sig":null,"attributes":[{"value":"/ Merge schema into self if it is compatible. Struct fields will be merged recursively.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1154755,"byte_end":1154844,"line_start":1803,"line_end":1803,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1154849,"byte_end":1154852,"line_start":1804,"line_end":1804,"column_start":5,"column_end":8}},{"value":"/ Example:","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1154857,"byte_end":1154869,"line_start":1805,"line_end":1805,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1154874,"byte_end":1154877,"line_start":1806,"line_end":1806,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1154882,"byte_end":1154889,"line_start":1807,"line_end":1807,"column_start":5,"column_end":12}},{"value":"/ use arrow::datatypes::*;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1154894,"byte_end":1154922,"line_start":1808,"line_end":1808,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1154927,"byte_end":1154930,"line_start":1809,"line_end":1809,"column_start":5,"column_end":8}},{"value":"/ let merged = Schema::try_merge(&vec![","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1154935,"byte_end":1154976,"line_start":1810,"line_end":1810,"column_start":5,"column_end":46}},{"value":"/     Schema::new(vec![","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1154981,"byte_end":1155006,"line_start":1811,"line_end":1811,"column_start":5,"column_end":30}},{"value":"/         Field::new(\"c1\", DataType::Int64, false),","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1155011,"byte_end":1155064,"line_start":1812,"line_end":1812,"column_start":5,"column_end":58}},{"value":"/         Field::new(\"c2\", DataType::Utf8, false),","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1155069,"byte_end":1155121,"line_start":1813,"line_end":1813,"column_start":5,"column_end":57}},{"value":"/     ]),","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1155126,"byte_end":1155137,"line_start":1814,"line_end":1814,"column_start":5,"column_end":16}},{"value":"/     Schema::new(vec![","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1155142,"byte_end":1155167,"line_start":1815,"line_end":1815,"column_start":5,"column_end":30}},{"value":"/         Field::new(\"c1\", DataType::Int64, true),","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1155172,"byte_end":1155224,"line_start":1816,"line_end":1816,"column_start":5,"column_end":57}},{"value":"/         Field::new(\"c2\", DataType::Utf8, false),","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1155229,"byte_end":1155281,"line_start":1817,"line_end":1817,"column_start":5,"column_end":57}},{"value":"/         Field::new(\"c3\", DataType::Utf8, false),","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1155286,"byte_end":1155338,"line_start":1818,"line_end":1818,"column_start":5,"column_end":57}},{"value":"/     ]),","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1155343,"byte_end":1155354,"line_start":1819,"line_end":1819,"column_start":5,"column_end":16}},{"value":"/ ]).unwrap();","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1155359,"byte_end":1155375,"line_start":1820,"line_end":1820,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1155380,"byte_end":1155383,"line_start":1821,"line_end":1821,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1155388,"byte_end":1155403,"line_start":1822,"line_end":1822,"column_start":5,"column_end":20}},{"value":"/     merged,","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1155408,"byte_end":1155423,"line_start":1823,"line_end":1823,"column_start":5,"column_end":20}},{"value":"/     Schema::new(vec![","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1155428,"byte_end":1155453,"line_start":1824,"line_end":1824,"column_start":5,"column_end":30}},{"value":"/         Field::new(\"c1\", DataType::Int64, true),","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1155458,"byte_end":1155510,"line_start":1825,"line_end":1825,"column_start":5,"column_end":57}},{"value":"/         Field::new(\"c2\", DataType::Utf8, false),","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1155515,"byte_end":1155567,"line_start":1826,"line_end":1826,"column_start":5,"column_end":57}},{"value":"/         Field::new(\"c3\", DataType::Utf8, false),","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1155572,"byte_end":1155624,"line_start":1827,"line_end":1827,"column_start":5,"column_end":57}},{"value":"/     ]),","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1155629,"byte_end":1155640,"line_start":1828,"line_end":1828,"column_start":5,"column_end":16}},{"value":"/ );","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1155645,"byte_end":1155651,"line_start":1829,"line_end":1829,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1155656,"byte_end":1155663,"line_start":1830,"line_end":1830,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3939},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1157162,"byte_end":1157168,"line_start":1873,"line_end":1873,"column_start":18,"column_end":24},"name":"fields","qualname":"<Schema>::fields","value":"pub const fn fields(&Self) -> &Vec<Field>","parent":null,"children":[],"decl_id":null,"docs":" Returns an immutable reference of the vector of `Field` instances\n","sig":null,"attributes":[{"value":"/ Returns an immutable reference of the vector of `Field` instances","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1157061,"byte_end":1157130,"line_start":1871,"line_end":1871,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1157135,"byte_end":1157144,"line_start":1872,"line_end":1872,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3940},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1157371,"byte_end":1157376,"line_start":1879,"line_end":1879,"column_start":12,"column_end":17},"name":"field","qualname":"<Schema>::field","value":"pub fn field(&Self, usize) -> &Field","parent":null,"children":[],"decl_id":null,"docs":" Returns an immutable reference of a specific `Field` instance selected using an\n offset within the internal `fields` vector\n","sig":null,"attributes":[{"value":"/ Returns an immutable reference of a specific `Field` instance selected using an","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1157225,"byte_end":1157308,"line_start":1877,"line_end":1877,"column_start":5,"column_end":88}},{"value":"/ offset within the internal `fields` vector","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1157313,"byte_end":1157359,"line_start":1878,"line_end":1878,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":3941},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1157535,"byte_end":1157550,"line_start":1884,"line_end":1884,"column_start":12,"column_end":27},"name":"field_with_name","qualname":"<Schema>::field_with_name","value":"pub fn field_with_name(&Self, &str) -> Result<&Field>","parent":null,"children":[],"decl_id":null,"docs":" Returns an immutable reference of a specific `Field` instance selected by name\n","sig":null,"attributes":[{"value":"/ Returns an immutable reference of a specific `Field` instance selected by name","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1157441,"byte_end":1157523,"line_start":1883,"line_end":1883,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":3942},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1157776,"byte_end":1157795,"line_start":1890,"line_end":1890,"column_start":12,"column_end":31},"name":"fields_with_dict_id","qualname":"<Schema>::fields_with_dict_id","value":"pub fn fields_with_dict_id(&Self, i64) -> Vec<&Field>","parent":null,"children":[],"decl_id":null,"docs":" Returns a vector of immutable references to all `Field` instances selected by\n the dictionary ID they use\n","sig":null,"attributes":[{"value":"/ Returns a vector of immutable references to all `Field` instances selected by","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1157648,"byte_end":1157729,"line_start":1888,"line_end":1888,"column_start":5,"column_end":86}},{"value":"/ the dictionary ID they use","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1157734,"byte_end":1157764,"line_start":1889,"line_end":1889,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":3944},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1158026,"byte_end":1158034,"line_start":1898,"line_end":1898,"column_start":12,"column_end":20},"name":"index_of","qualname":"<Schema>::index_of","value":"pub fn index_of(&Self, &str) -> Result<usize>","parent":null,"children":[],"decl_id":null,"docs":" Find the index of the column with the given name\n","sig":null,"attributes":[{"value":"/ Find the index of the column with the given name","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1157962,"byte_end":1158014,"line_start":1897,"line_end":1897,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":3946},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1158609,"byte_end":1158617,"line_start":1914,"line_end":1914,"column_start":18,"column_end":26},"name":"metadata","qualname":"<Schema>::metadata","value":"pub const fn metadata(&Self) -> &HashMap<String, String>","parent":null,"children":[],"decl_id":null,"docs":" Returns an immutable reference to the Map of custom metadata key-value pairs.\n","sig":null,"attributes":[{"value":"/ Returns an immutable reference to the Map of custom metadata key-value pairs.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1158496,"byte_end":1158577,"line_start":1912,"line_end":1912,"column_start":5,"column_end":86}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1158582,"byte_end":1158591,"line_start":1913,"line_end":1913,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3947},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1158806,"byte_end":1158822,"line_start":1920,"line_end":1920,"column_start":12,"column_end":28},"name":"column_with_name","qualname":"<Schema>::column_with_name","value":"pub fn column_with_name(&Self, &str) -> Option<(usize, &Field)>","parent":null,"children":[],"decl_id":null,"docs":" Look up a column by name and return a immutable reference to the column along with\n it's index\n","sig":null,"attributes":[{"value":"/ Look up a column by name and return a immutable reference to the column along with","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1158689,"byte_end":1158775,"line_start":1918,"line_end":1918,"column_start":5,"column_end":91}},{"value":"/ it's index","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1158780,"byte_end":1158794,"line_start":1919,"line_end":1919,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":3949},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1159053,"byte_end":1159060,"line_start":1928,"line_end":1928,"column_start":12,"column_end":19},"name":"to_json","qualname":"<Schema>::to_json","value":"pub fn to_json(&Self) -> Value","parent":null,"children":[],"decl_id":null,"docs":" Generate a JSON representation of the `Schema`\n","sig":null,"attributes":[{"value":"/ Generate a JSON representation of the `Schema`","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1158991,"byte_end":1159041,"line_start":1927,"line_end":1927,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":3950},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1159352,"byte_end":1159356,"line_start":1936,"line_end":1936,"column_start":12,"column_end":16},"name":"from","qualname":"<Schema>::from","value":"pub fn from(&Value) -> Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Parse a `Schema` definition from a JSON representation\n","sig":null,"attributes":[{"value":"/ Parse a `Schema` definition from a JSON representation","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1159282,"byte_end":1159340,"line_start":1935,"line_end":1935,"column_start":5,"column_end":63}}]},{"kind":"Type","id":{"krate":0,"index":3958},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1162097,"byte_end":1162106,"line_start":2014,"line_end":2014,"column_start":10,"column_end":19},"name":"SchemaRef","qualname":"::datatypes::SchemaRef","value":"Arc<Schema>","parent":null,"children":[],"decl_id":null,"docs":" A reference-counted reference to a [`Schema`](crate::datatypes::Schema).\n","sig":null,"attributes":[{"value":"/ A reference-counted reference to a [`Schema`](crate::datatypes::Schema).","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1162011,"byte_end":1162087,"line_start":2013,"line_end":2013,"column_start":1,"column_end":77}}]},{"kind":"Mod","id":{"krate":0,"index":3959},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/error.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"error","qualname":"::error","value":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/error.rs","parent":null,"children":[{"krate":0,"index":3960},{"krate":0,"index":3961},{"krate":0,"index":3962},{"krate":0,"index":3964},{"krate":0,"index":3967},{"krate":0,"index":3970},{"krate":0,"index":3973},{"krate":0,"index":8678},{"krate":0,"index":8716},{"krate":0,"index":3976},{"krate":0,"index":3978},{"krate":0,"index":3980},{"krate":0,"index":3982},{"krate":0,"index":3984},{"krate":0,"index":3986},{"krate":0,"index":3988},{"krate":0,"index":3989}],"decl_id":null,"docs":" Defines `ArrowError` for representing failures in various Arrow operations.\n","sig":null,"attributes":[{"value":"/ Defines `ArrowError` for representing failures in various Arrow operations.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/error.rs","byte_start":1209930,"byte_end":1210009,"line_start":18,"line_end":18,"column_start":1,"column_end":80}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8679},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/error.rs","byte_start":1210218,"byte_end":1210231,"line_start":27,"line_end":27,"column_start":5,"column_end":18},"name":"ExternalError","qualname":"::error::ArrowError::ExternalError","value":"ArrowError::ExternalError(Box<dyn Error + Send + Sync>)","parent":{"krate":0,"index":8678},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":8682},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/error.rs","byte_start":1210267,"byte_end":1210278,"line_start":28,"line_end":28,"column_start":5,"column_end":16},"name":"MemoryError","qualname":"::error::ArrowError::MemoryError","value":"ArrowError::MemoryError(String)","parent":{"krate":0,"index":8678},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":8685},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/error.rs","byte_start":1210292,"byte_end":1210302,"line_start":29,"line_end":29,"column_start":5,"column_end":15},"name":"ParseError","qualname":"::error::ArrowError::ParseError","value":"ArrowError::ParseError(String)","parent":{"krate":0,"index":8678},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":8688},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/error.rs","byte_start":1210316,"byte_end":1210327,"line_start":30,"line_end":30,"column_start":5,"column_end":16},"name":"SchemaError","qualname":"::error::ArrowError::SchemaError","value":"ArrowError::SchemaError(String)","parent":{"krate":0,"index":8678},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":8691},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/error.rs","byte_start":1210341,"byte_end":1210353,"line_start":31,"line_end":31,"column_start":5,"column_end":17},"name":"ComputeError","qualname":"::error::ArrowError::ComputeError","value":"ArrowError::ComputeError(String)","parent":{"krate":0,"index":8678},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":8694},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/error.rs","byte_start":1210367,"byte_end":1210379,"line_start":32,"line_end":32,"column_start":5,"column_end":17},"name":"DivideByZero","qualname":"::error::ArrowError::DivideByZero","value":"ArrowError::DivideByZero","parent":{"krate":0,"index":8678},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":8696},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/error.rs","byte_start":1210385,"byte_end":1210393,"line_start":33,"line_end":33,"column_start":5,"column_end":13},"name":"CsvError","qualname":"::error::ArrowError::CsvError","value":"ArrowError::CsvError(String)","parent":{"krate":0,"index":8678},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":8699},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/error.rs","byte_start":1210407,"byte_end":1210416,"line_start":34,"line_end":34,"column_start":5,"column_end":14},"name":"JsonError","qualname":"::error::ArrowError::JsonError","value":"ArrowError::JsonError(String)","parent":{"krate":0,"index":8678},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":8702},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/error.rs","byte_start":1210430,"byte_end":1210437,"line_start":35,"line_end":35,"column_start":5,"column_end":12},"name":"IoError","qualname":"::error::ArrowError::IoError","value":"ArrowError::IoError(String)","parent":{"krate":0,"index":8678},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":8705},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/error.rs","byte_start":1210451,"byte_end":1210471,"line_start":36,"line_end":36,"column_start":5,"column_end":25},"name":"InvalidArgumentError","qualname":"::error::ArrowError::InvalidArgumentError","value":"ArrowError::InvalidArgumentError(String)","parent":{"krate":0,"index":8678},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":8708},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/error.rs","byte_start":1210485,"byte_end":1210497,"line_start":37,"line_end":37,"column_start":5,"column_end":17},"name":"ParquetError","qualname":"::error::ArrowError::ParquetError","value":"ArrowError::ParquetError(String)","parent":{"krate":0,"index":8678},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":8711},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/error.rs","byte_start":1210578,"byte_end":1210592,"line_start":39,"line_end":39,"column_start":5,"column_end":19},"name":"CDataInterface","qualname":"::error::ArrowError::CDataInterface","value":"ArrowError::CDataInterface(String)","parent":{"krate":0,"index":8678},"children":[],"decl_id":null,"docs":" Error during import or export to/from the C Data Interface\n","sig":null,"attributes":[{"value":"/ Error during import or export to/from the C Data Interface","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/error.rs","byte_start":1210511,"byte_end":1210573,"line_start":38,"line_end":38,"column_start":5,"column_end":67}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8714},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/error.rs","byte_start":1210606,"byte_end":1210632,"line_start":40,"line_end":40,"column_start":5,"column_end":31},"name":"DictionaryKeyOverflowError","qualname":"::error::ArrowError::DictionaryKeyOverflowError","value":"ArrowError::DictionaryKeyOverflowError","parent":{"krate":0,"index":8678},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":8678},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/error.rs","byte_start":1210201,"byte_end":1210211,"line_start":26,"line_end":26,"column_start":10,"column_end":20},"name":"ArrowError","qualname":"::error::ArrowError","value":"pub enum ArrowError {\n    ExternalError(Box<dyn Error + Send + Sync>),\n    MemoryError(String),\n    ParseError(String),\n    SchemaError(String),\n    ComputeError(String),\n    DivideByZero,\n    CsvError(String),\n    JsonError(String),\n    IoError(String),\n    InvalidArgumentError(String),\n    ParquetError(String),\n    CDataInterface(String),\n    DictionaryKeyOverflowError,\n}","parent":null,"children":[{"krate":0,"index":8679},{"krate":0,"index":8682},{"krate":0,"index":8685},{"krate":0,"index":8688},{"krate":0,"index":8691},{"krate":0,"index":8694},{"krate":0,"index":8696},{"krate":0,"index":8699},{"krate":0,"index":8702},{"krate":0,"index":8705},{"krate":0,"index":8708},{"krate":0,"index":8711},{"krate":0,"index":8714}],"decl_id":null,"docs":" Many different operations in the `arrow` crate return this error type.\n","sig":null,"attributes":[{"value":"/ Many different operations in the `arrow` crate return this error type.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/error.rs","byte_start":1210100,"byte_end":1210174,"line_start":24,"line_end":24,"column_start":1,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":3977},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/error.rs","byte_start":1210718,"byte_end":1210737,"line_start":45,"line_end":45,"column_start":12,"column_end":31},"name":"from_external_error","qualname":"<ArrowError>::from_external_error","value":"pub fn from_external_error(Box<dyn ::std::error::Error + Send + Sync>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Wraps an external error in an `ArrowError`.\n","sig":null,"attributes":[{"value":"/ Wraps an external error in an `ArrowError`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/error.rs","byte_start":1210659,"byte_end":1210706,"line_start":44,"line_end":44,"column_start":5,"column_end":52}}]},{"kind":"Type","id":{"krate":0,"index":3989},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/error.rs","byte_start":1213575,"byte_end":1213581,"line_start":120,"line_end":120,"column_start":10,"column_end":16},"name":"Result","qualname":"::error::Result","value":"std::result::Result<T, ArrowError>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":3991},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"ffi","qualname":"::ffi","value":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","parent":null,"children":[{"krate":0,"index":3992},{"krate":0,"index":3993},{"krate":0,"index":3996},{"krate":0,"index":3999},{"krate":0,"index":4002},{"krate":0,"index":4005},{"krate":0,"index":4006},{"krate":0,"index":4009},{"krate":0,"index":4012},{"krate":0,"index":4015},{"krate":0,"index":4018},{"krate":0,"index":4019},{"krate":0,"index":4022},{"krate":0,"index":4025},{"krate":0,"index":4028},{"krate":0,"index":4029},{"krate":0,"index":4032},{"krate":0,"index":4035},{"krate":0,"index":8718},{"krate":0,"index":8728},{"krate":0,"index":4038},{"krate":0,"index":4039},{"krate":0,"index":4043},{"krate":0,"index":4045},{"krate":0,"index":4046},{"krate":0,"index":4047},{"krate":0,"index":8730},{"krate":0,"index":8741},{"krate":0,"index":4048},{"krate":0,"index":4049},{"krate":0,"index":4052},{"krate":0,"index":4056},{"krate":0,"index":4058},{"krate":0,"index":8743},{"krate":0,"index":8746},{"krate":0,"index":4060}],"decl_id":null,"docs":" Contains declarations to bind to the [C Data Interface](https://arrow.apache.org/docs/format/CDataInterface.html).","sig":null,"attributes":[{"value":"/ Contains declarations to bind to the [C Data Interface](https://arrow.apache.org/docs/format/CDataInterface.html).","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1214426,"byte_end":1214544,"line_start":18,"line_end":18,"column_start":1,"column_end":119}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1214545,"byte_end":1214548,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ Generally, this module is divided in two main interfaces:","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1214549,"byte_end":1214610,"line_start":20,"line_end":20,"column_start":1,"column_end":62}},{"value":"/ One interface maps C ABI to native Rust types, i.e. convert c-pointers, c_char, to native rust.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1214611,"byte_end":1214710,"line_start":21,"line_end":21,"column_start":1,"column_end":100}},{"value":"/ This is handled by [FFI_ArrowSchema] and [FFI_ArrowArray].","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1214711,"byte_end":1214773,"line_start":22,"line_end":22,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1214774,"byte_end":1214777,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ The second interface maps native Rust types to the Rust-specific implementation of Arrow such as `format` to `Datatype`,","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1214778,"byte_end":1214902,"line_start":24,"line_end":24,"column_start":1,"column_end":125}},{"value":"/ `Buffer`, etc. This is handled by `ArrowArray`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1214903,"byte_end":1214954,"line_start":25,"line_end":25,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1214955,"byte_end":1214958,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1214959,"byte_end":1214970,"line_start":27,"line_end":27,"column_start":1,"column_end":12}},{"value":"/ # use std::sync::Arc;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1214971,"byte_end":1214996,"line_start":28,"line_end":28,"column_start":1,"column_end":26}},{"value":"/ # use arrow::array::{Int32Array, Array, ArrayData, make_array_from_raw};","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1214997,"byte_end":1215073,"line_start":29,"line_end":29,"column_start":1,"column_end":77}},{"value":"/ # use arrow::error::{Result, ArrowError};","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1215074,"byte_end":1215119,"line_start":30,"line_end":30,"column_start":1,"column_end":46}},{"value":"/ # use arrow::compute::kernels::arithmetic;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1215120,"byte_end":1215166,"line_start":31,"line_end":31,"column_start":1,"column_end":47}},{"value":"/ # use std::convert::TryFrom;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1215167,"byte_end":1215199,"line_start":32,"line_end":32,"column_start":1,"column_end":33}},{"value":"/ # fn main() -> Result<()> {","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1215200,"byte_end":1215231,"line_start":33,"line_end":33,"column_start":1,"column_end":32}},{"value":"/ // create an array natively","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1215232,"byte_end":1215263,"line_start":34,"line_end":34,"column_start":1,"column_end":32}},{"value":"/ let array = Int32Array::from(vec![Some(1), None, Some(3)]);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1215264,"byte_end":1215327,"line_start":35,"line_end":35,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1215328,"byte_end":1215331,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ // export it","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1215332,"byte_end":1215348,"line_start":37,"line_end":37,"column_start":1,"column_end":17}},{"value":"/ let (array_ptr, schema_ptr) = array.to_raw()?;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1215349,"byte_end":1215399,"line_start":38,"line_end":38,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1215400,"byte_end":1215403,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ // consumed and used by something else...","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1215404,"byte_end":1215449,"line_start":40,"line_end":40,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1215450,"byte_end":1215453,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ // import it","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1215454,"byte_end":1215470,"line_start":42,"line_end":42,"column_start":1,"column_end":17}},{"value":"/ let array = unsafe { make_array_from_raw(array_ptr, schema_ptr)? };","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1215471,"byte_end":1215542,"line_start":43,"line_end":43,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1215543,"byte_end":1215546,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ // perform some operation","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1215547,"byte_end":1215576,"line_start":45,"line_end":45,"column_start":1,"column_end":30}},{"value":"/ let array = array.as_any().downcast_ref::<Int32Array>().ok_or(","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1215577,"byte_end":1215643,"line_start":46,"line_end":46,"column_start":1,"column_end":67}},{"value":"/     ArrowError::ParseError(\"Expects an int32\".to_string()),","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1215644,"byte_end":1215707,"line_start":47,"line_end":47,"column_start":1,"column_end":64}},{"value":"/ )?;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1215708,"byte_end":1215715,"line_start":48,"line_end":48,"column_start":1,"column_end":8}},{"value":"/ let array = arithmetic::add(&array, &array)?;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1215716,"byte_end":1215765,"line_start":49,"line_end":49,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1215766,"byte_end":1215769,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ // verify","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1215770,"byte_end":1215783,"line_start":51,"line_end":51,"column_start":1,"column_end":14}},{"value":"/ assert_eq!(array, Int32Array::from(vec![Some(2), None, Some(6)]));","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1215784,"byte_end":1215854,"line_start":52,"line_end":52,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1215855,"byte_end":1215858,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ // (drop/release)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1215859,"byte_end":1215880,"line_start":54,"line_end":54,"column_start":1,"column_end":22}},{"value":"/ Ok(())","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1215881,"byte_end":1215891,"line_start":55,"line_end":55,"column_start":1,"column_end":11}},{"value":"/ }","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1215892,"byte_end":1215897,"line_start":56,"line_end":56,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1215898,"byte_end":1215905,"line_start":57,"line_end":57,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":8718},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1217128,"byte_end":1217143,"line_start":98,"line_end":98,"column_start":12,"column_end":27},"name":"FFI_ArrowSchema","qualname":"::ffi::FFI_ArrowSchema","value":"FFI_ArrowSchema {  }","parent":null,"children":[{"krate":0,"index":8719},{"krate":0,"index":8720},{"krate":0,"index":8721},{"krate":0,"index":8722},{"krate":0,"index":8723},{"krate":0,"index":8724},{"krate":0,"index":8725},{"krate":0,"index":8726},{"krate":0,"index":8727}],"decl_id":null,"docs":" ABI-compatible struct for `ArrowSchema` from C Data Interface\n See <https://arrow.apache.org/docs/format/CDataInterface.html#structure-definitions>\n This was created by bindgen\n","sig":null,"attributes":[{"value":"/ ABI-compatible struct for `ArrowSchema` from C Data Interface","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1216902,"byte_end":1216967,"line_start":93,"line_end":93,"column_start":1,"column_end":66}},{"value":"/ See <https://arrow.apache.org/docs/format/CDataInterface.html#structure-definitions>","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1216968,"byte_end":1217056,"line_start":94,"line_end":94,"column_start":1,"column_end":89}},{"value":"/ This was created by bindgen","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1217057,"byte_end":1217088,"line_start":95,"line_end":95,"column_start":1,"column_end":32}},{"value":"repr(C)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1217089,"byte_end":1217099,"line_start":96,"line_end":96,"column_start":1,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4042},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1218940,"byte_end":1218946,"line_start":153,"line_end":153,"column_start":12,"column_end":18},"name":"format","qualname":"<FFI_ArrowSchema>::format","value":"pub fn format(&Self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" returns the format of this schema.\n","sig":null,"attributes":[{"value":"/ returns the format of this schema.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1218890,"byte_end":1218928,"line_start":152,"line_end":152,"column_start":5,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":8730},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1225364,"byte_end":1225378,"line_start":310,"line_end":310,"column_start":12,"column_end":26},"name":"FFI_ArrowArray","qualname":"::ffi::FFI_ArrowArray","value":"FFI_ArrowArray {  }","parent":null,"children":[{"krate":0,"index":8731},{"krate":0,"index":8732},{"krate":0,"index":8733},{"krate":0,"index":8734},{"krate":0,"index":8735},{"krate":0,"index":8736},{"krate":0,"index":8737},{"krate":0,"index":8738},{"krate":0,"index":8739},{"krate":0,"index":8740}],"decl_id":null,"docs":" ABI-compatible struct for ArrowArray from C Data Interface\n See <https://arrow.apache.org/docs/format/CDataInterface.html#structure-definitions>\n This was created by bindgen\n","sig":null,"attributes":[{"value":"/ ABI-compatible struct for ArrowArray from C Data Interface","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1225141,"byte_end":1225203,"line_start":305,"line_end":305,"column_start":1,"column_end":63}},{"value":"/ See <https://arrow.apache.org/docs/format/CDataInterface.html#structure-definitions>","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1225204,"byte_end":1225292,"line_start":306,"line_end":306,"column_start":1,"column_end":89}},{"value":"/ This was created by bindgen","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1225293,"byte_end":1225324,"line_start":307,"line_end":307,"column_start":1,"column_end":32}},{"value":"repr(C)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1225325,"byte_end":1225335,"line_start":308,"line_end":308,"column_start":1,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":8743},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1230634,"byte_end":1230644,"line_start":457,"line_end":457,"column_start":12,"column_end":22},"name":"ArrowArray","qualname":"::ffi::ArrowArray","value":"ArrowArray {  }","parent":null,"children":[{"krate":0,"index":8744},{"krate":0,"index":8745}],"decl_id":null,"docs":" Struct used to move an Array from and to the C Data Interface.\n Its main responsibility is to expose functionality that requires\n both [FFI_ArrowArray] and [FFI_ArrowSchema].","sig":null,"attributes":[{"value":"/ Struct used to move an Array from and to the C Data Interface.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1229576,"byte_end":1229642,"line_start":437,"line_end":437,"column_start":1,"column_end":67}},{"value":"/ Its main responsibility is to expose functionality that requires","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1229643,"byte_end":1229711,"line_start":438,"line_end":438,"column_start":1,"column_end":69}},{"value":"/ both [FFI_ArrowArray] and [FFI_ArrowSchema].","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1229712,"byte_end":1229760,"line_start":439,"line_end":439,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1229761,"byte_end":1229764,"line_start":440,"line_end":440,"column_start":1,"column_end":4}},{"value":"/ This struct has two main paths:","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1229765,"byte_end":1229800,"line_start":441,"line_end":441,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1229801,"byte_end":1229804,"line_start":442,"line_end":442,"column_start":1,"column_end":4}},{"value":"/ ## Import from the C Data Interface","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1229805,"byte_end":1229844,"line_start":443,"line_end":443,"column_start":1,"column_end":40}},{"value":"/ * [ArrowArray::empty] to allocate memory to be filled by an external call","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1229845,"byte_end":1229922,"line_start":444,"line_end":444,"column_start":1,"column_end":78}},{"value":"/ * [ArrowArray::try_from_raw] to consume two non-null allocated pointers","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1229923,"byte_end":1229998,"line_start":445,"line_end":445,"column_start":1,"column_end":76}},{"value":"/ ## Export to the C Data Interface","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1229999,"byte_end":1230036,"line_start":446,"line_end":446,"column_start":1,"column_end":38}},{"value":"/ * [ArrowArray::try_new] to create a new [ArrowArray] from Rust-specific information","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1230037,"byte_end":1230124,"line_start":447,"line_end":447,"column_start":1,"column_end":88}},{"value":"/ * [ArrowArray::into_raw] to expose two pointers for [FFI_ArrowArray] and [FFI_ArrowSchema].","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1230125,"byte_end":1230220,"line_start":448,"line_end":448,"column_start":1,"column_end":96}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1230221,"byte_end":1230224,"line_start":449,"line_end":449,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1230225,"byte_end":1230237,"line_start":450,"line_end":450,"column_start":1,"column_end":13}},{"value":"/ Whoever creates this struct is responsible for releasing their resources. Specifically,","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1230238,"byte_end":1230329,"line_start":451,"line_end":451,"column_start":1,"column_end":92}},{"value":"/ consumers *must* call [ArrowArray::into_raw] and take ownership of the individual pointers,","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1230330,"byte_end":1230425,"line_start":452,"line_end":452,"column_start":1,"column_end":96}},{"value":"/ calling [FFI_ArrowArray::release] and [FFI_ArrowSchema::release] accordingly.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1230426,"byte_end":1230507,"line_start":453,"line_end":453,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1230508,"byte_end":1230511,"line_start":454,"line_end":454,"column_start":1,"column_end":4}},{"value":"/ Furthermore, this struct assumes that the incoming data agrees with the C data interface.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1230512,"byte_end":1230605,"line_start":455,"line_end":455,"column_start":1,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":4061},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1230965,"byte_end":1230972,"line_start":467,"line_end":467,"column_start":19,"column_end":26},"name":"try_new","qualname":"<ArrowArray>::try_new","value":"pub unsafe fn try_new(&DataType, usize, usize, Option<Buffer>, usize,\n                      Vec<Buffer>, Vec<ArrowArray>) -> Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" creates a new `ArrowArray`. This is used to export to the C Data Interface.\n # Safety\n See safety of [ArrowArray]\n","sig":null,"attributes":[{"value":"/ creates a new `ArrowArray`. This is used to export to the C Data Interface.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1230815,"byte_end":1230894,"line_start":464,"line_end":464,"column_start":5,"column_end":84}},{"value":"/ # Safety","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1230899,"byte_end":1230911,"line_start":465,"line_end":465,"column_start":5,"column_end":17}},{"value":"/ See safety of [ArrowArray]","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1230916,"byte_end":1230946,"line_start":466,"line_end":466,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":4063},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1232038,"byte_end":1232050,"line_start":500,"line_end":500,"column_start":19,"column_end":31},"name":"try_from_raw","qualname":"<ArrowArray>::try_from_raw","value":"pub unsafe fn try_from_raw(*const FFI_ArrowArray, *const FFI_ArrowSchema)\n-> Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" creates a new [ArrowArray] from two pointers. Used to import from the C Data Interface.\n # Safety\n See safety of [ArrowArray]\n # Error\n Errors if any of the pointers is null\n","sig":null,"attributes":[{"value":"/ creates a new [ArrowArray] from two pointers. Used to import from the C Data Interface.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1231814,"byte_end":1231905,"line_start":495,"line_end":495,"column_start":5,"column_end":96}},{"value":"/ # Safety","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1231910,"byte_end":1231922,"line_start":496,"line_end":496,"column_start":5,"column_end":17}},{"value":"/ See safety of [ArrowArray]","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1231927,"byte_end":1231957,"line_start":497,"line_end":497,"column_start":5,"column_end":35}},{"value":"/ # Error","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1231962,"byte_end":1231973,"line_start":498,"line_end":498,"column_start":5,"column_end":16}},{"value":"/ Errors if any of the pointers is null","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1231978,"byte_end":1232019,"line_start":499,"line_end":499,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":4064},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1232713,"byte_end":1232718,"line_start":519,"line_end":519,"column_start":19,"column_end":24},"name":"empty","qualname":"<ArrowArray>::empty","value":"pub unsafe fn empty() -> Self","parent":null,"children":[],"decl_id":null,"docs":" creates a new empty [ArrowArray]. Used to import from the C Data Interface.\n # Safety\n See safety of [ArrowArray]\n","sig":null,"attributes":[{"value":"/ creates a new empty [ArrowArray]. Used to import from the C Data Interface.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1232563,"byte_end":1232642,"line_start":516,"line_end":516,"column_start":5,"column_end":84}},{"value":"/ # Safety","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1232647,"byte_end":1232659,"line_start":517,"line_end":517,"column_start":5,"column_end":17}},{"value":"/ See safety of [ArrowArray]","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1232664,"byte_end":1232694,"line_start":518,"line_end":518,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":4065},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1232951,"byte_end":1232959,"line_start":526,"line_end":526,"column_start":12,"column_end":20},"name":"into_raw","qualname":"<ArrowArray>::into_raw","value":"pub fn into_raw(ArrowArray) -> (*const FFI_ArrowArray, *const FFI_ArrowSchema)","parent":null,"children":[],"decl_id":null,"docs":" exports [ArrowArray] to the C Data Interface\n","sig":null,"attributes":[{"value":"/ exports [ArrowArray] to the C Data Interface","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1232891,"byte_end":1232939,"line_start":525,"line_end":525,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":4066},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1233310,"byte_end":1233325,"line_start":533,"line_end":533,"column_start":12,"column_end":27},"name":"null_bit_buffer","qualname":"<ArrowArray>::null_bit_buffer","value":"pub fn null_bit_buffer(&Self) -> Option<Buffer>","parent":null,"children":[],"decl_id":null,"docs":" returns the null bit buffer.\n Rust implementation uses a buffer that is not part of the array of buffers.\n The C Data interface's null buffer is part of the array of buffers.\n","sig":null,"attributes":[{"value":"/ returns the null bit buffer.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1233106,"byte_end":1233138,"line_start":530,"line_end":530,"column_start":5,"column_end":37}},{"value":"/ Rust implementation uses a buffer that is not part of the array of buffers.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1233143,"byte_end":1233222,"line_start":531,"line_end":531,"column_start":5,"column_end":84}},{"value":"/ The C Data interface's null buffer is part of the array of buffers.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1233227,"byte_end":1233298,"line_start":532,"line_end":532,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":4068},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1236178,"byte_end":1236185,"line_start":590,"line_end":590,"column_start":12,"column_end":19},"name":"buffers","qualname":"<ArrowArray>::buffers","value":"pub fn buffers(&Self) -> Result<Vec<Buffer>>","parent":null,"children":[],"decl_id":null,"docs":" returns all buffers, as organized by Rust (i.e. null buffer is skipped)\n","sig":null,"attributes":[{"value":"/ returns all buffers, as organized by Rust (i.e. null buffer is skipped)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1236091,"byte_end":1236166,"line_start":589,"line_end":589,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":4071},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1236866,"byte_end":1236869,"line_start":611,"line_end":611,"column_start":12,"column_end":15},"name":"len","qualname":"<ArrowArray>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" the length of the array\n","sig":null,"attributes":[{"value":"/ the length of the array","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1236827,"byte_end":1236854,"line_start":610,"line_end":610,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":4072},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1236976,"byte_end":1236984,"line_start":616,"line_end":616,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<ArrowArray>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" whether the array is empty\n","sig":null,"attributes":[{"value":"/ whether the array is empty","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1236934,"byte_end":1236964,"line_start":615,"line_end":615,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":4073},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1237083,"byte_end":1237089,"line_start":621,"line_end":621,"column_start":12,"column_end":18},"name":"offset","qualname":"<ArrowArray>::offset","value":"pub fn offset(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" the offset of the array\n","sig":null,"attributes":[{"value":"/ the offset of the array","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1237044,"byte_end":1237071,"line_start":620,"line_end":620,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":4074},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1237197,"byte_end":1237207,"line_start":626,"line_end":626,"column_start":12,"column_end":22},"name":"null_count","qualname":"<ArrowArray>::null_count","value":"pub fn null_count(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" the null count of the array\n","sig":null,"attributes":[{"value":"/ the null count of the array","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1237154,"byte_end":1237185,"line_start":625,"line_end":625,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":4075},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1237331,"byte_end":1237340,"line_start":631,"line_end":631,"column_start":12,"column_end":21},"name":"data_type","qualname":"<ArrowArray>::data_type","value":"pub fn data_type(&Self) -> Result<DataType>","parent":null,"children":[],"decl_id":null,"docs":" the data_type as declared in the schema\n","sig":null,"attributes":[{"value":"/ the data_type as declared in the schema","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1237276,"byte_end":1237319,"line_start":630,"line_end":630,"column_start":5,"column_end":48}}]},{"kind":"Mod","id":{"krate":0,"index":4076},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"ipc","qualname":"::ipc","value":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/mod.rs","parent":null,"children":[{"krate":0,"index":4077},{"krate":0,"index":4152},{"krate":0,"index":4297},{"krate":0,"index":4411},{"krate":0,"index":6871},{"krate":0,"index":6872},{"krate":0,"index":6873},{"krate":0,"index":6874},{"krate":0,"index":6875},{"krate":0,"index":6876},{"krate":0,"index":6878}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_debug_implementations)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/mod.rs","byte_start":1243635,"byte_end":1243675,"line_start":19,"line_end":19,"column_start":1,"column_end":41}}]},{"kind":"Mod","id":{"krate":0,"index":4077},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/convert.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"convert","qualname":"::ipc::convert","value":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/convert.rs","parent":null,"children":[{"krate":0,"index":4078},{"krate":0,"index":4079},{"krate":0,"index":4082},{"krate":0,"index":4085},{"krate":0,"index":4088},{"krate":0,"index":4091},{"krate":0,"index":4094},{"krate":0,"index":4097},{"krate":0,"index":4098},{"krate":0,"index":4101},{"krate":0,"index":4104},{"krate":0,"index":4107},{"krate":0,"index":4108},{"krate":0,"index":4111},{"krate":0,"index":4114},{"krate":0,"index":4117},{"krate":0,"index":4120},{"krate":0,"index":4123},{"krate":0,"index":4124},{"krate":0,"index":4127},{"krate":0,"index":4130},{"krate":0,"index":4131},{"krate":0,"index":4132},{"krate":0,"index":4134},{"krate":0,"index":4137},{"krate":0,"index":4138},{"krate":0,"index":4139},{"krate":0,"index":4141},{"krate":0,"index":4146},{"krate":0,"index":4148},{"krate":0,"index":4150}],"decl_id":null,"docs":" Utilities for converting between IPC types and native Arrow types\n","sig":null,"attributes":[{"value":"/ Utilities for converting between IPC types and native Arrow types","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/convert.rs","byte_start":1245014,"byte_end":1245083,"line_start":18,"line_end":18,"column_start":1,"column_end":70}}]},{"kind":"Function","id":{"krate":0,"index":4131},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/convert.rs","byte_start":1245428,"byte_end":1245440,"line_start":32,"line_end":32,"column_start":8,"column_end":20},"name":"schema_to_fb","qualname":"::ipc::convert::schema_to_fb","value":"pub fn schema_to_fb(&Schema) -> FlatBufferBuilder","parent":null,"children":[],"decl_id":null,"docs":" Serialize a schema in IPC format\n","sig":null,"attributes":[{"value":"/ Serialize a schema in IPC format","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/convert.rs","byte_start":1245384,"byte_end":1245420,"line_start":31,"line_end":31,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":4132},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/convert.rs","byte_start":1245628,"byte_end":1245647,"line_start":42,"line_end":42,"column_start":8,"column_end":27},"name":"schema_to_fb_offset","qualname":"::ipc::convert::schema_to_fb_offset","value":"pub fn schema_to_fb_offset<'a>(&mut FlatBufferBuilder, &Schema)\n-> WIPOffset<ipc::Schema>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":4137},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/convert.rs","byte_start":1247735,"byte_end":1247747,"line_start":108,"line_end":108,"column_start":8,"column_end":20},"name":"fb_to_schema","qualname":"::ipc::convert::fb_to_schema","value":"pub fn fb_to_schema(ipc::Schema) -> Schema","parent":null,"children":[],"decl_id":null,"docs":" Deserialize a Schema table from IPC format to Schema data type\n","sig":null,"attributes":[{"value":"/ Deserialize a Schema table from IPC format to Schema data type","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/convert.rs","byte_start":1247661,"byte_end":1247727,"line_start":107,"line_end":107,"column_start":1,"column_end":67}}]},{"kind":"Function","id":{"krate":0,"index":4138},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/convert.rs","byte_start":1248828,"byte_end":1248845,"line_start":141,"line_end":141,"column_start":8,"column_end":25},"name":"schema_from_bytes","qualname":"::ipc::convert::schema_from_bytes","value":"pub fn schema_from_bytes(&[u8]) -> Result<Schema>","parent":null,"children":[],"decl_id":null,"docs":" Deserialize an IPC message into a schema\n","sig":null,"attributes":[{"value":"/ Deserialize an IPC message into a schema","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/convert.rs","byte_start":1248776,"byte_end":1248820,"line_start":140,"line_end":140,"column_start":1,"column_end":45}}]},{"kind":"Mod","id":{"krate":0,"index":4152},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/reader.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"reader","qualname":"::ipc::reader","value":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/reader.rs","parent":null,"children":[{"krate":0,"index":4153},{"krate":0,"index":4156},{"krate":0,"index":4157},{"krate":0,"index":4160},{"krate":0,"index":4163},{"krate":0,"index":4166},{"krate":0,"index":4169},{"krate":0,"index":4172},{"krate":0,"index":4173},{"krate":0,"index":4176},{"krate":0,"index":4179},{"krate":0,"index":4180},{"krate":0,"index":4183},{"krate":0,"index":4186},{"krate":0,"index":4189},{"krate":0,"index":4192},{"krate":0,"index":4195},{"krate":0,"index":4196},{"krate":0,"index":4199},{"krate":0,"index":4202},{"krate":0,"index":4205},{"krate":0,"index":4206},{"krate":0,"index":4209},{"krate":0,"index":4212},{"krate":0,"index":4215},{"krate":0,"index":4216},{"krate":0,"index":4217},{"krate":0,"index":4225},{"krate":0,"index":4226},{"krate":0,"index":4227},{"krate":0,"index":4228},{"krate":0,"index":4231},{"krate":0,"index":4234},{"krate":0,"index":4243},{"krate":0,"index":4262},{"krate":0,"index":4266},{"krate":0,"index":4269},{"krate":0,"index":4275},{"krate":0,"index":4290},{"krate":0,"index":4294}],"decl_id":null,"docs":" Arrow IPC File and Stream Readers","sig":null,"attributes":[{"value":"/ Arrow IPC File and Stream Readers","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/reader.rs","byte_start":1280093,"byte_end":1280130,"line_start":18,"line_end":18,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/reader.rs","byte_start":1280131,"byte_end":1280134,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ The `FileReader` and `StreamReader` have similar interfaces,","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/reader.rs","byte_start":1280135,"byte_end":1280199,"line_start":20,"line_end":20,"column_start":1,"column_end":65}},{"value":"/ however the `FileReader` expects a reader that supports `Seek`ing","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/reader.rs","byte_start":1280200,"byte_end":1280269,"line_start":21,"line_end":21,"column_start":1,"column_end":70}}]},{"kind":"Function","id":{"krate":0,"index":4228},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/reader.rs","byte_start":1294198,"byte_end":1294215,"line_start":410,"line_end":410,"column_start":8,"column_end":25},"name":"read_record_batch","qualname":"::ipc::reader::read_record_batch","value":"pub fn read_record_batch(&[u8], ipc::RecordBatch, SchemaRef,\n                         &[Option<ArrayRef>]) -> Result<RecordBatch>","parent":null,"children":[],"decl_id":null,"docs":" Creates a record batch from binary data using the `ipc::RecordBatch` indexes and the `Schema`\n","sig":null,"attributes":[{"value":"/ Creates a record batch from binary data using the `ipc::RecordBatch` indexes and the `Schema`","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/reader.rs","byte_start":1294093,"byte_end":1294190,"line_start":409,"line_end":409,"column_start":1,"column_end":98}}]},{"kind":"Function","id":{"krate":0,"index":4231},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/reader.rs","byte_start":1295427,"byte_end":1295442,"line_start":448,"line_end":448,"column_start":8,"column_end":23},"name":"read_dictionary","qualname":"::ipc::reader::read_dictionary","value":"pub fn read_dictionary(&[u8], ipc::DictionaryBatch, &Schema,\n                       &mut [Option<ArrayRef>]) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Read the dictionary from the buffer and provided metadata,\n updating the `dictionaries_by_field` with the resulting dictionary\n","sig":null,"attributes":[{"value":"/ Read the dictionary from the buffer and provided metadata,","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/reader.rs","byte_start":1295286,"byte_end":1295348,"line_start":446,"line_end":446,"column_start":1,"column_end":63}},{"value":"/ updating the `dictionaries_by_field` with the resulting dictionary","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/reader.rs","byte_start":1295349,"byte_end":1295419,"line_start":447,"line_end":447,"column_start":1,"column_end":71}}]},{"kind":"Struct","id":{"krate":0,"index":4234},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/reader.rs","byte_start":1297571,"byte_end":1297581,"line_start":506,"line_end":506,"column_start":12,"column_end":22},"name":"FileReader","qualname":"::ipc::reader::FileReader","value":"FileReader {  }","parent":null,"children":[{"krate":0,"index":4236},{"krate":0,"index":4237},{"krate":0,"index":4238},{"krate":0,"index":4239},{"krate":0,"index":4240},{"krate":0,"index":4241},{"krate":0,"index":4242}],"decl_id":null,"docs":" Arrow File reader\n","sig":null,"attributes":[{"value":"/ Arrow File reader","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/reader.rs","byte_start":1297538,"byte_end":1297559,"line_start":505,"line_end":505,"column_start":1,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":4245},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/reader.rs","byte_start":1298567,"byte_end":1298574,"line_start":538,"line_end":538,"column_start":12,"column_end":19},"name":"try_new","qualname":"<FileReader<R>>::try_new","value":"pub fn try_new(R) -> Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Try to create a new file reader","sig":null,"attributes":[{"value":"/ Try to create a new file reader","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/reader.rs","byte_start":1298407,"byte_end":1298442,"line_start":534,"line_end":534,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/reader.rs","byte_start":1298447,"byte_end":1298450,"line_start":535,"line_end":535,"column_start":5,"column_end":8}},{"value":"/ Returns errors if the file does not meet the Arrow Format header and footer","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/reader.rs","byte_start":1298455,"byte_end":1298534,"line_start":536,"line_end":536,"column_start":5,"column_end":84}},{"value":"/ requirements","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/reader.rs","byte_start":1298539,"byte_end":1298555,"line_start":537,"line_end":537,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":4255},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/reader.rs","byte_start":1302454,"byte_end":1302465,"line_start":637,"line_end":637,"column_start":12,"column_end":23},"name":"num_batches","qualname":"<FileReader<R>>::num_batches","value":"pub fn num_batches(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the number of batches in the file\n","sig":null,"attributes":[{"value":"/ Return the number of batches in the file","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/reader.rs","byte_start":1302398,"byte_end":1302442,"line_start":636,"line_end":636,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":4256},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/reader.rs","byte_start":1302566,"byte_end":1302572,"line_start":642,"line_end":642,"column_start":12,"column_end":18},"name":"schema","qualname":"<FileReader<R>>::schema","value":"pub fn schema(&Self) -> SchemaRef","parent":null,"children":[],"decl_id":null,"docs":" Return the schema of the file\n","sig":null,"attributes":[{"value":"/ Return the schema of the file","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/reader.rs","byte_start":1302521,"byte_end":1302554,"line_start":641,"line_end":641,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":4257},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/reader.rs","byte_start":1302753,"byte_end":1302762,"line_start":649,"line_end":649,"column_start":12,"column_end":21},"name":"set_index","qualname":"<FileReader<R>>::set_index","value":"pub fn set_index(&mut Self, usize) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Read a specific record batch","sig":null,"attributes":[{"value":"/ Read a specific record batch","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/reader.rs","byte_start":1302634,"byte_end":1302666,"line_start":646,"line_end":646,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/reader.rs","byte_start":1302671,"byte_end":1302674,"line_start":647,"line_end":647,"column_start":5,"column_end":8}},{"value":"/ Sets the current block to the index, allowing random reads","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/reader.rs","byte_start":1302679,"byte_end":1302741,"line_start":648,"line_end":648,"column_start":5,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":4269},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/reader.rs","byte_start":1306105,"byte_end":1306117,"line_start":745,"line_end":745,"column_start":12,"column_end":24},"name":"StreamReader","qualname":"::ipc::reader::StreamReader","value":"StreamReader {  }","parent":null,"children":[{"krate":0,"index":4271},{"krate":0,"index":4272},{"krate":0,"index":4273},{"krate":0,"index":4274}],"decl_id":null,"docs":" Arrow Stream reader\n","sig":null,"attributes":[{"value":"/ Arrow Stream reader","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/reader.rs","byte_start":1306070,"byte_end":1306093,"line_start":744,"line_end":744,"column_start":1,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4277},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/reader.rs","byte_start":1306904,"byte_end":1306911,"line_start":769,"line_end":769,"column_start":12,"column_end":19},"name":"try_new","qualname":"<StreamReader<R>>::try_new","value":"pub fn try_new(R) -> Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Try to create a new stream reader","sig":null,"attributes":[{"value":"/ Try to create a new stream reader","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/reader.rs","byte_start":1306664,"byte_end":1306701,"line_start":764,"line_end":764,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/reader.rs","byte_start":1306706,"byte_end":1306709,"line_start":765,"line_end":765,"column_start":5,"column_end":8}},{"value":"/ The first message in the stream is the schema, the reader will fail if it does not","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/reader.rs","byte_start":1306714,"byte_end":1306800,"line_start":766,"line_end":766,"column_start":5,"column_end":91}},{"value":"/ encounter a schema.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/reader.rs","byte_start":1306805,"byte_end":1306828,"line_start":767,"line_end":767,"column_start":5,"column_end":28}},{"value":"/ To check if the reader is done, use `is_finished(self)`","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/reader.rs","byte_start":1306833,"byte_end":1306892,"line_start":768,"line_end":768,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":4282},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/reader.rs","byte_start":1308375,"byte_end":1308381,"line_start":807,"line_end":807,"column_start":12,"column_end":18},"name":"schema","qualname":"<StreamReader<R>>::schema","value":"pub fn schema(&Self) -> SchemaRef","parent":null,"children":[],"decl_id":null,"docs":" Return the schema of the stream\n","sig":null,"attributes":[{"value":"/ Return the schema of the stream","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/reader.rs","byte_start":1308328,"byte_end":1308363,"line_start":806,"line_end":806,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":4283},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/reader.rs","byte_start":1308490,"byte_end":1308501,"line_start":812,"line_end":812,"column_start":12,"column_end":23},"name":"is_finished","qualname":"<StreamReader<R>>::is_finished","value":"pub fn is_finished(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if the stream is finished\n","sig":null,"attributes":[{"value":"/ Check if the stream is finished","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/reader.rs","byte_start":1308443,"byte_end":1308478,"line_start":811,"line_end":811,"column_start":5,"column_end":40}}]},{"kind":"Mod","id":{"krate":0,"index":4297},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/writer.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"writer","qualname":"::ipc::writer","value":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/writer.rs","parent":null,"children":[{"krate":0,"index":4298},{"krate":0,"index":4301},{"krate":0,"index":4302},{"krate":0,"index":4305},{"krate":0,"index":4308},{"krate":0,"index":4311},{"krate":0,"index":4312},{"krate":0,"index":4315},{"krate":0,"index":4318},{"krate":0,"index":4319},{"krate":0,"index":4322},{"krate":0,"index":4325},{"krate":0,"index":4326},{"krate":0,"index":4327},{"krate":0,"index":4330},{"krate":0,"index":4333},{"krate":0,"index":4336},{"krate":0,"index":4339},{"krate":0,"index":4342},{"krate":0,"index":8748},{"krate":0,"index":8752},{"krate":0,"index":4345},{"krate":0,"index":4347},{"krate":0,"index":8754},{"krate":0,"index":8755},{"krate":0,"index":8757},{"krate":0,"index":4349},{"krate":0,"index":4354},{"krate":0,"index":4357},{"krate":0,"index":4360},{"krate":0,"index":4371},{"krate":0,"index":4377},{"krate":0,"index":4380},{"krate":0,"index":4388},{"krate":0,"index":4394},{"krate":0,"index":4397},{"krate":0,"index":4400},{"krate":0,"index":4402},{"krate":0,"index":4404},{"krate":0,"index":4406},{"krate":0,"index":4409},{"krate":0,"index":4410}],"decl_id":null,"docs":" Arrow IPC File and Stream Writers","sig":null,"attributes":[{"value":"/ Arrow IPC File and Stream Writers","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/writer.rs","byte_start":1318950,"byte_end":1318987,"line_start":18,"line_end":18,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/writer.rs","byte_start":1318988,"byte_end":1318991,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ The `FileWriter` and `StreamWriter` have similar interfaces,","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/writer.rs","byte_start":1318992,"byte_end":1319056,"line_start":20,"line_end":20,"column_start":1,"column_end":65}},{"value":"/ however the `FileWriter` expects a reader that supports `Seek`ing","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/writer.rs","byte_start":1319057,"byte_end":1319126,"line_start":21,"line_end":21,"column_start":1,"column_end":70}}]},{"kind":"Struct","id":{"krate":0,"index":8748},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/writer.rs","byte_start":1319590,"byte_end":1319605,"line_start":40,"line_end":40,"column_start":12,"column_end":27},"name":"IpcWriteOptions","qualname":"::ipc::writer::IpcWriteOptions","value":"IpcWriteOptions {  }","parent":null,"children":[{"krate":0,"index":8749},{"krate":0,"index":8750},{"krate":0,"index":8751}],"decl_id":null,"docs":" IPC write options used to control the behaviour of the writer\n","sig":null,"attributes":[{"value":"/ IPC write options used to control the behaviour of the writer","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/writer.rs","byte_start":1319496,"byte_end":1319561,"line_start":38,"line_end":38,"column_start":1,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":4346},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/writer.rs","byte_start":1320078,"byte_end":1320085,"line_start":52,"line_end":52,"column_start":12,"column_end":19},"name":"try_new","qualname":"<IpcWriteOptions>::try_new","value":"pub fn try_new(usize, bool, ipc::MetadataVersion) -> Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Try create IpcWriteOptions, checking for incompatible settings\n","sig":null,"attributes":[{"value":"/ Try create IpcWriteOptions, checking for incompatible settings","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/writer.rs","byte_start":1320000,"byte_end":1320066,"line_start":51,"line_end":51,"column_start":5,"column_end":71}}]},{"kind":"Struct","id":{"krate":0,"index":8754},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/writer.rs","byte_start":1321778,"byte_end":1321794,"line_start":103,"line_end":103,"column_start":12,"column_end":28},"name":"IpcDataGenerator","qualname":"::ipc::writer::IpcDataGenerator","value":"IpcDataGenerator {  }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4350},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/writer.rs","byte_start":1321834,"byte_end":1321849,"line_start":106,"line_end":106,"column_start":12,"column_end":27},"name":"schema_to_bytes","qualname":"<IpcDataGenerator>::schema_to_bytes","value":"pub fn schema_to_bytes(&Self, &Schema, &IpcWriteOptions) -> EncodedData","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4351},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/writer.rs","byte_start":1322664,"byte_end":1322677,"line_start":133,"line_end":133,"column_start":12,"column_end":25},"name":"encoded_batch","qualname":"<IpcDataGenerator>::encoded_batch","value":"pub fn encoded_batch(&Self, &RecordBatch, &mut DictionaryTracker,\n                     &IpcWriteOptions)\n-> Result<(Vec<EncodedData>, EncodedData)>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4354},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/writer.rs","byte_start":1328063,"byte_end":1328080,"line_start":289,"line_end":289,"column_start":12,"column_end":29},"name":"DictionaryTracker","qualname":"::ipc::writer::DictionaryTracker","value":"DictionaryTracker {  }","parent":null,"children":[{"krate":0,"index":4355},{"krate":0,"index":4356}],"decl_id":null,"docs":" Keeps track of dictionaries that have been written, to avoid emitting the same dictionary\n multiple times. Can optionally error if an update to an existing dictionary is attempted, which\n isn't allowed in the `FileWriter`.\n","sig":null,"attributes":[{"value":"/ Keeps track of dictionaries that have been written, to avoid emitting the same dictionary","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/writer.rs","byte_start":1327819,"byte_end":1327912,"line_start":286,"line_end":286,"column_start":1,"column_end":94}},{"value":"/ multiple times. Can optionally error if an update to an existing dictionary is attempted, which","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/writer.rs","byte_start":1327913,"byte_end":1328012,"line_start":287,"line_end":287,"column_start":1,"column_end":100}},{"value":"/ isn't allowed in the `FileWriter`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/writer.rs","byte_start":1328013,"byte_end":1328051,"line_start":288,"line_end":288,"column_start":1,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":4358},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/writer.rs","byte_start":1328191,"byte_end":1328194,"line_start":295,"line_end":295,"column_start":12,"column_end":15},"name":"new","qualname":"<DictionaryTracker>::new","value":"pub fn new(bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4359},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/writer.rs","byte_start":1328980,"byte_end":1328986,"line_start":311,"line_end":311,"column_start":12,"column_end":18},"name":"insert","qualname":"<DictionaryTracker>::insert","value":"pub fn insert(&mut Self, i64, &ArrayRef) -> Result<bool>","parent":null,"children":[],"decl_id":null,"docs":" Keep track of the dictionary with the given ID and values. Behavior:","sig":null,"attributes":[{"value":"/ Keep track of the dictionary with the given ID and values. Behavior:","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/writer.rs","byte_start":1328340,"byte_end":1328412,"line_start":302,"line_end":302,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/writer.rs","byte_start":1328417,"byte_end":1328420,"line_start":303,"line_end":303,"column_start":5,"column_end":8}},{"value":"/ * If this ID has been written already and has the same data, return `Ok(false)` to indicate","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/writer.rs","byte_start":1328425,"byte_end":1328520,"line_start":304,"line_end":304,"column_start":5,"column_end":100}},{"value":"/   that the dictionary was not actually inserted (because it's already been seen).","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/writer.rs","byte_start":1328525,"byte_end":1328610,"line_start":305,"line_end":305,"column_start":5,"column_end":90}},{"value":"/ * If this ID has been written already but with different data, and this tracker is","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/writer.rs","byte_start":1328615,"byte_end":1328701,"line_start":306,"line_end":306,"column_start":5,"column_end":91}},{"value":"/   configured to return an error, return an error.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/writer.rs","byte_start":1328706,"byte_end":1328759,"line_start":307,"line_end":307,"column_start":5,"column_end":58}},{"value":"/ * If the tracker has not been configured to error on replacement or this dictionary","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/writer.rs","byte_start":1328764,"byte_end":1328851,"line_start":308,"line_end":308,"column_start":5,"column_end":92}},{"value":"/   has never been seen before, return `Ok(true)` to indicate that the dictionary was just","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/writer.rs","byte_start":1328856,"byte_end":1328948,"line_start":309,"line_end":309,"column_start":5,"column_end":97}},{"value":"/   inserted.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/writer.rs","byte_start":1328953,"byte_end":1328968,"line_start":310,"line_end":310,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":4360},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/writer.rs","byte_start":1329954,"byte_end":1329964,"line_start":335,"line_end":335,"column_start":12,"column_end":22},"name":"FileWriter","qualname":"::ipc::writer::FileWriter","value":"FileWriter {  }","parent":null,"children":[{"krate":0,"index":4362},{"krate":0,"index":4363},{"krate":0,"index":4364},{"krate":0,"index":4365},{"krate":0,"index":4366},{"krate":0,"index":4367},{"krate":0,"index":4368},{"krate":0,"index":4369},{"krate":0,"index":4370}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4373},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/writer.rs","byte_start":1330875,"byte_end":1330882,"line_start":358,"line_end":358,"column_start":12,"column_end":19},"name":"try_new","qualname":"<FileWriter<W>>::try_new","value":"pub fn try_new(W, &Schema) -> Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Try create a new writer, with the schema written as part of the header\n","sig":null,"attributes":[{"value":"/ Try create a new writer, with the schema written as part of the header","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/writer.rs","byte_start":1330789,"byte_end":1330863,"line_start":357,"line_end":357,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":4374},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/writer.rs","byte_start":1331122,"byte_end":1331142,"line_start":364,"line_end":364,"column_start":12,"column_end":32},"name":"try_new_with_options","qualname":"<FileWriter<W>>::try_new_with_options","value":"pub fn try_new_with_options(W, &Schema, IpcWriteOptions) -> Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Try create a new writer with IpcWriteOptions\n","sig":null,"attributes":[{"value":"/ Try create a new writer with IpcWriteOptions","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/writer.rs","byte_start":1331062,"byte_end":1331110,"line_start":363,"line_end":363,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":4375},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/writer.rs","byte_start":1332173,"byte_end":1332178,"line_start":392,"line_end":392,"column_start":12,"column_end":17},"name":"write","qualname":"<FileWriter<W>>::write","value":"pub fn write(&mut Self, &RecordBatch) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Write a record batch to the file\n","sig":null,"attributes":[{"value":"/ Write a record batch to the file","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/writer.rs","byte_start":1332125,"byte_end":1332161,"line_start":391,"line_end":391,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":4376},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/writer.rs","byte_start":1333510,"byte_end":1333516,"line_start":429,"line_end":429,"column_start":12,"column_end":18},"name":"finish","qualname":"<FileWriter<W>>::finish","value":"pub fn finish(&mut Self) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Write footer and closing tag, then mark the writer as done\n","sig":null,"attributes":[{"value":"/ Write footer and closing tag, then mark the writer as done","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/writer.rs","byte_start":1333436,"byte_end":1333498,"line_start":428,"line_end":428,"column_start":5,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":4380},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/writer.rs","byte_start":1334870,"byte_end":1334882,"line_start":468,"line_end":468,"column_start":12,"column_end":24},"name":"StreamWriter","qualname":"::ipc::writer::StreamWriter","value":"StreamWriter {  }","parent":null,"children":[{"krate":0,"index":4382},{"krate":0,"index":4383},{"krate":0,"index":4384},{"krate":0,"index":4385},{"krate":0,"index":4386},{"krate":0,"index":4387}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4390},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/writer.rs","byte_start":1335463,"byte_end":1335470,"line_start":485,"line_end":485,"column_start":12,"column_end":19},"name":"try_new","qualname":"<StreamWriter<W>>::try_new","value":"pub fn try_new(W, &Schema) -> Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Try create a new writer, with the schema written as part of the header\n","sig":null,"attributes":[{"value":"/ Try create a new writer, with the schema written as part of the header","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/writer.rs","byte_start":1335377,"byte_end":1335451,"line_start":484,"line_end":484,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":4391},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/writer.rs","byte_start":1335657,"byte_end":1335677,"line_start":490,"line_end":490,"column_start":12,"column_end":32},"name":"try_new_with_options","qualname":"<StreamWriter<W>>::try_new_with_options","value":"pub fn try_new_with_options(W, &Schema, IpcWriteOptions) -> Result<Self>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4392},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/writer.rs","byte_start":1336390,"byte_end":1336395,"line_start":511,"line_end":511,"column_start":12,"column_end":17},"name":"write","qualname":"<StreamWriter<W>>::write","value":"pub fn write(&mut Self, &RecordBatch) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Write a record batch to the stream\n","sig":null,"attributes":[{"value":"/ Write a record batch to the stream","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/writer.rs","byte_start":1336340,"byte_end":1336378,"line_start":510,"line_end":510,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":4393},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/writer.rs","byte_start":1337219,"byte_end":1337225,"line_start":532,"line_end":532,"column_start":12,"column_end":18},"name":"finish","qualname":"<StreamWriter<W>>::finish","value":"pub fn finish(&mut Self) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Write continuation bytes, and mark the stream as done\n","sig":null,"attributes":[{"value":"/ Write continuation bytes, and mark the stream as done","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/writer.rs","byte_start":1337150,"byte_end":1337207,"line_start":531,"line_end":531,"column_start":5,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":4397},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/writer.rs","byte_start":1337692,"byte_end":1337703,"line_start":551,"line_end":551,"column_start":12,"column_end":23},"name":"EncodedData","qualname":"::ipc::writer::EncodedData","value":"EncodedData { ipc_message, arrow_data }","parent":null,"children":[{"krate":0,"index":4398},{"krate":0,"index":4399}],"decl_id":null,"docs":" Stores the encoded data, which is an ipc::Message, and optional Arrow data\n","sig":null,"attributes":[{"value":"/ Stores the encoded data, which is an ipc::Message, and optional Arrow data","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/writer.rs","byte_start":1337602,"byte_end":1337680,"line_start":550,"line_end":550,"column_start":1,"column_end":79}}]},{"kind":"Field","id":{"krate":0,"index":4398},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/writer.rs","byte_start":1337746,"byte_end":1337757,"line_start":553,"line_end":553,"column_start":9,"column_end":20},"name":"ipc_message","qualname":"::ipc::writer::EncodedData::ipc_message","value":"std::vec::Vec<u8>","parent":{"krate":0,"index":4397},"children":[],"decl_id":null,"docs":" An encoded ipc::Message\n","sig":null,"attributes":[{"value":"/ An encoded ipc::Message","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/writer.rs","byte_start":1337710,"byte_end":1337737,"line_start":552,"line_end":552,"column_start":5,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":4399},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/writer.rs","byte_start":1337856,"byte_end":1337866,"line_start":555,"line_end":555,"column_start":9,"column_end":19},"name":"arrow_data","qualname":"::ipc::writer::EncodedData::arrow_data","value":"std::vec::Vec<u8>","parent":{"krate":0,"index":4397},"children":[],"decl_id":null,"docs":" Arrow buffers to be written, should be an empty vec for schema messages\n","sig":null,"attributes":[{"value":"/ Arrow buffers to be written, should be an empty vec for schema messages","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/writer.rs","byte_start":1337772,"byte_end":1337847,"line_start":554,"line_end":554,"column_start":5,"column_end":80}}]},{"kind":"Function","id":{"krate":0,"index":4400},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/writer.rs","byte_start":1337981,"byte_end":1337994,"line_start":558,"line_end":558,"column_start":8,"column_end":21},"name":"write_message","qualname":"::ipc::writer::write_message","value":"pub fn write_message<W: Write>(W, EncodedData, &IpcWriteOptions)\n-> Result<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" Write a message's IPC data and buffers, returning metadata and buffer data lengths written\n","sig":null,"attributes":[{"value":"/ Write a message's IPC data and buffers, returning metadata and buffer data lengths written","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/writer.rs","byte_start":1337879,"byte_end":1337973,"line_start":557,"line_end":557,"column_start":1,"column_end":95}}]},{"kind":"Mod","id":{"krate":0,"index":4411},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"gen","qualname":"::ipc::gen","value":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/mod.rs","parent":null,"children":[{"krate":0,"index":4412},{"krate":0,"index":4535},{"krate":0,"index":4908},{"krate":0,"index":6361},{"krate":0,"index":6717}],"decl_id":null,"docs":" Generated code\n","sig":null,"attributes":[{"value":"allow(clippy :: redundant_closure)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/mod.rs","byte_start":1243727,"byte_end":1243762,"line_start":25,"line_end":25,"column_start":1,"column_end":36}},{"value":"allow(clippy :: needless_lifetimes)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/mod.rs","byte_start":1243763,"byte_end":1243799,"line_start":26,"line_end":26,"column_start":1,"column_end":37}},{"value":"allow(clippy :: extra_unused_lifetimes)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/mod.rs","byte_start":1243800,"byte_end":1243840,"line_start":27,"line_end":27,"column_start":1,"column_end":41}},{"value":"allow(clippy :: redundant_static_lifetimes)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/mod.rs","byte_start":1243841,"byte_end":1243885,"line_start":28,"line_end":28,"column_start":1,"column_end":45}},{"value":"allow(clippy :: redundant_field_names)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/mod.rs","byte_start":1243886,"byte_end":1243925,"line_start":29,"line_end":29,"column_start":1,"column_end":40}},{"value":"/ Generated code","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/mod.rs","byte_start":1351636,"byte_end":1351654,"line_start":18,"line_end":18,"column_start":1,"column_end":19}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/mod.rs","byte_start":1351656,"byte_end":1351681,"line_start":20,"line_end":20,"column_start":1,"column_end":26}}]},{"kind":"Mod","id":{"krate":0,"index":4412},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"File","qualname":"::ipc::gen::File","value":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","parent":null,"children":[{"krate":0,"index":4413},{"krate":0,"index":4414},{"krate":0,"index":4417},{"krate":0,"index":4418},{"krate":0,"index":4421},{"krate":0,"index":8759},{"krate":0,"index":8764},{"krate":0,"index":8766},{"krate":0,"index":8767},{"krate":0,"index":8768},{"krate":0,"index":4424},{"krate":0,"index":4426},{"krate":0,"index":4427},{"krate":0,"index":4428},{"krate":0,"index":4432},{"krate":0,"index":4436},{"krate":0,"index":4440},{"krate":0,"index":4444},{"krate":0,"index":4452},{"krate":0,"index":4457},{"krate":0,"index":8771},{"krate":0,"index":8774},{"krate":0,"index":8776},{"krate":0,"index":8779},{"krate":0,"index":8781},{"krate":0,"index":4458},{"krate":0,"index":4462},{"krate":0,"index":4481},{"krate":0,"index":4488},{"krate":0,"index":4495},{"krate":0,"index":4498},{"krate":0,"index":4503},{"krate":0,"index":4513},{"krate":0,"index":4515},{"krate":0,"index":4517},{"krate":0,"index":4519},{"krate":0,"index":4520},{"krate":0,"index":4521},{"krate":0,"index":4524},{"krate":0,"index":4527},{"krate":0,"index":4528},{"krate":0,"index":4529},{"krate":0,"index":4532}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(clippy :: all)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/mod.rs","byte_start":1351683,"byte_end":1351704,"line_start":22,"line_end":22,"column_start":1,"column_end":22}},{"value":"allow(dead_code)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1352681,"byte_end":1352701,"line_start":18,"line_end":18,"column_start":1,"column_end":21}},{"value":"allow(unused_imports)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1352702,"byte_end":1352727,"line_start":19,"line_end":19,"column_start":1,"column_end":26}}]},{"kind":"Struct","id":{"krate":0,"index":8759},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1352990,"byte_end":1352995,"line_start":29,"line_end":29,"column_start":12,"column_end":17},"name":"Block","qualname":"::ipc::gen::File::Block","value":"Block {  }","parent":null,"children":[{"krate":0,"index":8760},{"krate":0,"index":8761},{"krate":0,"index":8762},{"krate":0,"index":8763}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"repr(C, align(8))","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1352924,"byte_end":1352944,"line_start":27,"line_end":27,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":4453},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1354851,"byte_end":1354854,"line_start":94,"line_end":94,"column_start":12,"column_end":15},"name":"new","qualname":"<Block>::new","value":"pub fn new(i64, i32, i64) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4454},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1355246,"byte_end":1355252,"line_start":104,"line_end":104,"column_start":12,"column_end":18},"name":"offset","qualname":"<Block>::offset","value":"pub fn offset(&Self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Index to the start of the RecordBlock (note this is past the Message header)\n","sig":null,"attributes":[{"value":"/ Index to the start of the RecordBlock (note this is past the Message header)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1355154,"byte_end":1355234,"line_start":103,"line_end":103,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":4455},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1355359,"byte_end":1355373,"line_start":108,"line_end":108,"column_start":12,"column_end":26},"name":"metaDataLength","qualname":"<Block>::metaDataLength","value":"pub fn metaDataLength(&Self) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Length of the metadata\n","sig":null,"attributes":[{"value":"/ Length of the metadata","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1355321,"byte_end":1355347,"line_start":107,"line_end":107,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":4456},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1355563,"byte_end":1355573,"line_start":113,"line_end":113,"column_start":12,"column_end":22},"name":"bodyLength","qualname":"<Block>::bodyLength","value":"pub fn bodyLength(&Self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Length of the data (this is aligned so there can be a gap between this and\n the metadata).\n","sig":null,"attributes":[{"value":"/ Length of the data (this is aligned so there can be a gap between this and","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1355450,"byte_end":1355528,"line_start":111,"line_end":111,"column_start":5,"column_end":83}},{"value":"/ the metadata).","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1355533,"byte_end":1355551,"line_start":112,"line_end":112,"column_start":5,"column_end":23}}]},{"kind":"Enum","id":{"krate":0,"index":4457},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1355654,"byte_end":1355666,"line_start":118,"line_end":118,"column_start":10,"column_end":22},"name":"FooterOffset","qualname":"::ipc::gen::File::FooterOffset","value":"pub enum FooterOffset { }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8771},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1355819,"byte_end":1355825,"line_start":124,"line_end":124,"column_start":12,"column_end":18},"name":"Footer","qualname":"::ipc::gen::File::Footer","value":"Footer { _tab }","parent":null,"children":[{"krate":0,"index":8773}],"decl_id":null,"docs":" ----------------------------------------------------------------------\n Arrow File metadata","sig":null,"attributes":[{"value":"/ ----------------------------------------------------------------------","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1355705,"byte_end":1355779,"line_start":121,"line_end":121,"column_start":1,"column_end":75}},{"value":"/ Arrow File metadata","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1355780,"byte_end":1355803,"line_start":122,"line_end":122,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1355804,"byte_end":1355807,"line_start":123,"line_end":123,"column_start":1,"column_end":4}}]},{"kind":"Field","id":{"krate":0,"index":8773},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1355840,"byte_end":1355844,"line_start":125,"line_end":125,"column_start":9,"column_end":13},"name":"_tab","qualname":"::ipc::gen::File::Footer::_tab","value":"flatbuffers::Table<'a>","parent":{"krate":0,"index":8771},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4464},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1356156,"byte_end":1356171,"line_start":140,"line_end":140,"column_start":12,"column_end":27},"name":"init_from_table","qualname":"<Footer>::init_from_table","value":"pub fn init_from_table(flatbuffers::Table) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1356135,"byte_end":1356144,"line_start":139,"line_end":139,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4465},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1356286,"byte_end":1356292,"line_start":144,"line_end":144,"column_start":12,"column_end":18},"name":"create","qualname":"<Footer>::create","value":"pub fn create<'bldr:'args, 'args:'mut_bldr,\n              'mut_bldr>(&'mut_bldr mut flatbuffers::FlatBufferBuilder,\n                         &'args FooterArgs) -> flatbuffers::WIPOffset<Footer>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(unused_mut)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1356254,"byte_end":1356274,"line_start":143,"line_end":143,"column_start":5,"column_end":25}}]},{"kind":"Const","id":{"krate":0,"index":4469},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1357015,"byte_end":1357025,"line_start":165,"line_end":165,"column_start":15,"column_end":25},"name":"VT_VERSION","qualname":"::ipc::gen::File::Footer::<'a>::VT_VERSION","value":"flatbuffers::VOffsetT","parent":{"krate":0,"index":4462},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4470},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1357068,"byte_end":1357077,"line_start":166,"line_end":166,"column_start":15,"column_end":24},"name":"VT_SCHEMA","qualname":"::ipc::gen::File::Footer::<'a>::VT_SCHEMA","value":"flatbuffers::VOffsetT","parent":{"krate":0,"index":4462},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4471},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1357120,"byte_end":1357135,"line_start":167,"line_end":167,"column_start":15,"column_end":30},"name":"VT_DICTIONARIES","qualname":"::ipc::gen::File::Footer::<'a>::VT_DICTIONARIES","value":"flatbuffers::VOffsetT","parent":{"krate":0,"index":4462},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4472},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1357178,"byte_end":1357194,"line_start":168,"line_end":168,"column_start":15,"column_end":31},"name":"VT_RECORDBATCHES","qualname":"::ipc::gen::File::Footer::<'a>::VT_RECORDBATCHES","value":"flatbuffers::VOffsetT","parent":{"krate":0,"index":4462},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4473},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1357238,"byte_end":1357256,"line_start":169,"line_end":169,"column_start":15,"column_end":33},"name":"VT_CUSTOM_METADATA","qualname":"::ipc::gen::File::Footer::<'a>::VT_CUSTOM_METADATA","value":"flatbuffers::VOffsetT","parent":{"krate":0,"index":4462},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4474},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1357312,"byte_end":1357319,"line_start":172,"line_end":172,"column_start":12,"column_end":19},"name":"version","qualname":"<Footer>::version","value":"pub fn version(&Self) -> MetadataVersion","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1357291,"byte_end":1357300,"line_start":171,"line_end":171,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4475},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1357502,"byte_end":1357508,"line_start":178,"line_end":178,"column_start":12,"column_end":18},"name":"schema","qualname":"<Footer>::schema","value":"pub fn schema(&Self) -> Option<Schema>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1357481,"byte_end":1357490,"line_start":177,"line_end":177,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4476},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1357671,"byte_end":1357683,"line_start":183,"line_end":183,"column_start":12,"column_end":24},"name":"dictionaries","qualname":"<Footer>::dictionaries","value":"pub fn dictionaries(&Self) -> Option<&'a [Block]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1357650,"byte_end":1357659,"line_start":182,"line_end":182,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4478},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1357961,"byte_end":1357974,"line_start":192,"line_end":192,"column_start":12,"column_end":25},"name":"recordBatches","qualname":"<Footer>::recordBatches","value":"pub fn recordBatches(&Self) -> Option<&'a [Block]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1357940,"byte_end":1357949,"line_start":191,"line_end":191,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4480},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1358283,"byte_end":1358298,"line_start":202,"line_end":202,"column_start":12,"column_end":27},"name":"custom_metadata","qualname":"<Footer>::custom_metadata","value":"pub fn custom_metadata(&Self) -> Option<flatbuffers::Vector>","parent":null,"children":[],"decl_id":null,"docs":" User-defined metadata\n","sig":null,"attributes":[{"value":"/ User-defined metadata","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1358232,"byte_end":1358257,"line_start":200,"line_end":200,"column_start":5,"column_end":30}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1358262,"byte_end":1358271,"line_start":201,"line_end":201,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":4488},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1359774,"byte_end":1359784,"line_start":242,"line_end":242,"column_start":12,"column_end":22},"name":"FooterArgs","qualname":"::ipc::gen::File::FooterArgs","value":"FooterArgs { version, schema, dictionaries, recordBatches, custom_metadata }","parent":null,"children":[{"krate":0,"index":4490},{"krate":0,"index":4491},{"krate":0,"index":4492},{"krate":0,"index":4493},{"krate":0,"index":4494}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":4490},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1359799,"byte_end":1359806,"line_start":243,"line_end":243,"column_start":9,"column_end":16},"name":"version","qualname":"::ipc::gen::File::FooterArgs::version","value":"ipc::gen::Schema::MetadataVersion","parent":{"krate":0,"index":4488},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":4491},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1359833,"byte_end":1359839,"line_start":244,"line_end":244,"column_start":9,"column_end":15},"name":"schema","qualname":"::ipc::gen::File::FooterArgs::schema","value":"std::option::Option<flatbuffers::WIPOffset<ipc::gen::Schema::Schema<'a>>>","parent":{"krate":0,"index":4488},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":4492},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1359893,"byte_end":1359905,"line_start":245,"line_end":245,"column_start":9,"column_end":21},"name":"dictionaries","qualname":"::ipc::gen::File::FooterArgs::dictionaries","value":"std::option::Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, ipc::gen::File::Block>>>","parent":{"krate":0,"index":4488},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":4493},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1359979,"byte_end":1359992,"line_start":246,"line_end":246,"column_start":9,"column_end":22},"name":"recordBatches","qualname":"::ipc::gen::File::FooterArgs::recordBatches","value":"std::option::Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, ipc::gen::File::Block>>>","parent":{"krate":0,"index":4488},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":4494},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1360066,"byte_end":1360081,"line_start":247,"line_end":247,"column_start":9,"column_end":24},"name":"custom_metadata","qualname":"::ipc::gen::File::FooterArgs::custom_metadata","value":"std::option::Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<ipc::gen::Schema::KeyValue<'a>>>>>","parent":{"krate":0,"index":4488},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4498},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1360521,"byte_end":1360534,"line_start":265,"line_end":265,"column_start":12,"column_end":25},"name":"FooterBuilder","qualname":"::ipc::gen::File::FooterBuilder","value":"FooterBuilder {  }","parent":null,"children":[{"krate":0,"index":4501},{"krate":0,"index":4502}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4506},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1360746,"byte_end":1360757,"line_start":271,"line_end":271,"column_start":12,"column_end":23},"name":"add_version","qualname":"<FooterBuilder>::add_version","value":"pub fn add_version(&mut Self, MetadataVersion)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1360725,"byte_end":1360734,"line_start":270,"line_end":270,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4507},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1360973,"byte_end":1360983,"line_start":279,"line_end":279,"column_start":12,"column_end":22},"name":"add_schema","qualname":"<FooterBuilder>::add_schema","value":"pub fn add_schema(&mut Self, flatbuffers::WIPOffset<Schema>)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1360952,"byte_end":1360961,"line_start":278,"line_end":278,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4508},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1361229,"byte_end":1361245,"line_start":287,"line_end":287,"column_start":12,"column_end":28},"name":"add_dictionaries","qualname":"<FooterBuilder>::add_dictionaries","value":"pub fn add_dictionaries(&mut Self,\n                        flatbuffers::WIPOffset<flatbuffers::Vector>)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1361208,"byte_end":1361217,"line_start":286,"line_end":286,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4509},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1361522,"byte_end":1361539,"line_start":297,"line_end":297,"column_start":12,"column_end":29},"name":"add_recordBatches","qualname":"<FooterBuilder>::add_recordBatches","value":"pub fn add_recordBatches(&mut Self,\n                         flatbuffers::WIPOffset<flatbuffers::Vector>)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1361501,"byte_end":1361510,"line_start":296,"line_end":296,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4510},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1361819,"byte_end":1361838,"line_start":307,"line_end":307,"column_start":12,"column_end":31},"name":"add_custom_metadata","qualname":"<FooterBuilder>::add_custom_metadata","value":"pub fn add_custom_metadata(&mut Self,\n                           flatbuffers::WIPOffset<flatbuffers::Vector>)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1361798,"byte_end":1361807,"line_start":306,"line_end":306,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4511},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1362184,"byte_end":1362187,"line_start":319,"line_end":319,"column_start":12,"column_end":15},"name":"new","qualname":"<FooterBuilder>::new","value":"pub fn new(&'b mut flatbuffers::FlatBufferBuilder) -> FooterBuilder","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1362163,"byte_end":1362172,"line_start":318,"line_end":318,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4512},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1362436,"byte_end":1362442,"line_start":329,"line_end":329,"column_start":12,"column_end":18},"name":"finish","qualname":"<FooterBuilder>::finish","value":"pub fn finish(Self) -> flatbuffers::WIPOffset<Footer>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1362415,"byte_end":1362424,"line_start":328,"line_end":328,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":4515},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1363149,"byte_end":1363167,"line_start":348,"line_end":348,"column_start":8,"column_end":26},"name":"get_root_as_footer","qualname":"::ipc::gen::File::get_root_as_footer","value":"pub fn get_root_as_footer<'a>(&'a [u8]) -> Footer","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1363047,"byte_end":1363056,"line_start":346,"line_end":346,"column_start":1,"column_end":10}},{"value":"deprecated(since = \"1.13\", note =\n             \"Deprecated in favor of `root_as...` methods.\")","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1363057,"byte_end":1363141,"line_start":347,"line_end":347,"column_start":1,"column_end":85}}]},{"kind":"Function","id":{"krate":0,"index":4517},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1363370,"byte_end":1363402,"line_start":354,"line_end":354,"column_start":8,"column_end":40},"name":"get_size_prefixed_root_as_footer","qualname":"::ipc::gen::File::get_size_prefixed_root_as_footer","value":"pub fn get_size_prefixed_root_as_footer<'a>(&'a [u8]) -> Footer","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1363268,"byte_end":1363277,"line_start":352,"line_end":352,"column_start":1,"column_end":10}},{"value":"deprecated(since = \"1.13\", note =\n             \"Deprecated in favor of `root_as...` methods.\")","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1363278,"byte_end":1363362,"line_start":353,"line_end":353,"column_start":1,"column_end":85}}]},{"kind":"Function","id":{"krate":0,"index":4519},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1363800,"byte_end":1363814,"line_start":365,"line_end":365,"column_start":8,"column_end":22},"name":"root_as_footer","qualname":"::ipc::gen::File::root_as_footer","value":"pub fn root_as_footer(&[u8]) -> Result<Footer, flatbuffers::InvalidFlatbuffer>","parent":null,"children":[],"decl_id":null,"docs":" Verifies that a buffer of bytes contains a `Footer`\n and returns it.\n Note that verification is still experimental and may not\n catch every error, or be maximally performant. For the\n previous, unchecked, behavior use\n `root_as_footer_unchecked`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1363517,"byte_end":1363526,"line_start":358,"line_end":358,"column_start":1,"column_end":10}},{"value":"/ Verifies that a buffer of bytes contains a `Footer`","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1363527,"byte_end":1363582,"line_start":359,"line_end":359,"column_start":1,"column_end":56}},{"value":"/ and returns it.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1363583,"byte_end":1363602,"line_start":360,"line_end":360,"column_start":1,"column_end":20}},{"value":"/ Note that verification is still experimental and may not","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1363603,"byte_end":1363663,"line_start":361,"line_end":361,"column_start":1,"column_end":61}},{"value":"/ catch every error, or be maximally performant. For the","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1363664,"byte_end":1363722,"line_start":362,"line_end":362,"column_start":1,"column_end":59}},{"value":"/ previous, unchecked, behavior use","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1363723,"byte_end":1363760,"line_start":363,"line_end":363,"column_start":1,"column_end":38}},{"value":"/ `root_as_footer_unchecked`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1363761,"byte_end":1363792,"line_start":364,"line_end":364,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":4520},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1364229,"byte_end":1364257,"line_start":375,"line_end":375,"column_start":8,"column_end":36},"name":"size_prefixed_root_as_footer","qualname":"::ipc::gen::File::size_prefixed_root_as_footer","value":"pub fn size_prefixed_root_as_footer(&[u8])\n-> Result<Footer, flatbuffers::InvalidFlatbuffer>","parent":null,"children":[],"decl_id":null,"docs":" Verifies that a buffer of bytes contains a size prefixed\n `Footer` and returns it.\n Note that verification is still experimental and may not\n catch every error, or be maximally performant. For the\n previous, unchecked, behavior use\n `size_prefixed_root_as_footer_unchecked`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1363918,"byte_end":1363927,"line_start":368,"line_end":368,"column_start":1,"column_end":10}},{"value":"/ Verifies that a buffer of bytes contains a size prefixed","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1363928,"byte_end":1363988,"line_start":369,"line_end":369,"column_start":1,"column_end":61}},{"value":"/ `Footer` and returns it.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1363989,"byte_end":1364017,"line_start":370,"line_end":370,"column_start":1,"column_end":29}},{"value":"/ Note that verification is still experimental and may not","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1364018,"byte_end":1364078,"line_start":371,"line_end":371,"column_start":1,"column_end":61}},{"value":"/ catch every error, or be maximally performant. For the","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1364079,"byte_end":1364137,"line_start":372,"line_end":372,"column_start":1,"column_end":59}},{"value":"/ previous, unchecked, behavior use","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1364138,"byte_end":1364175,"line_start":373,"line_end":373,"column_start":1,"column_end":38}},{"value":"/ `size_prefixed_root_as_footer_unchecked`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1364176,"byte_end":1364221,"line_start":374,"line_end":374,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":4521},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1364690,"byte_end":1364714,"line_start":387,"line_end":387,"column_start":8,"column_end":32},"name":"root_as_footer_with_opts","qualname":"::ipc::gen::File::root_as_footer_with_opts","value":"pub fn root_as_footer_with_opts<'b,\n                                'o>(&'o flatbuffers::VerifierOptions,\n                                    &'b [u8])\n-> Result<Footer, flatbuffers::InvalidFlatbuffer>","parent":null,"children":[],"decl_id":null,"docs":" Verifies, with the given options, that a buffer of bytes\n contains a `Footer` and returns it.\n Note that verification is still experimental and may not\n catch every error, or be maximally performant. For the\n previous, unchecked, behavior use\n `root_as_footer_unchecked`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1364382,"byte_end":1364391,"line_start":380,"line_end":380,"column_start":1,"column_end":10}},{"value":"/ Verifies, with the given options, that a buffer of bytes","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1364392,"byte_end":1364452,"line_start":381,"line_end":381,"column_start":1,"column_end":61}},{"value":"/ contains a `Footer` and returns it.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1364453,"byte_end":1364492,"line_start":382,"line_end":382,"column_start":1,"column_end":40}},{"value":"/ Note that verification is still experimental and may not","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1364493,"byte_end":1364553,"line_start":383,"line_end":383,"column_start":1,"column_end":61}},{"value":"/ catch every error, or be maximally performant. For the","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1364554,"byte_end":1364612,"line_start":384,"line_end":384,"column_start":1,"column_end":59}},{"value":"/ previous, unchecked, behavior use","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1364613,"byte_end":1364650,"line_start":385,"line_end":385,"column_start":1,"column_end":38}},{"value":"/ `root_as_footer_unchecked`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1364651,"byte_end":1364682,"line_start":386,"line_end":386,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":4524},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1365235,"byte_end":1365273,"line_start":400,"line_end":400,"column_start":8,"column_end":46},"name":"size_prefixed_root_as_footer_with_opts","qualname":"::ipc::gen::File::size_prefixed_root_as_footer_with_opts","value":"pub fn size_prefixed_root_as_footer_with_opts<'b,\n                                              'o>(&'o flatbuffers::VerifierOptions,\n                                                  &'b [u8])\n-> Result<Footer, flatbuffers::InvalidFlatbuffer>","parent":null,"children":[],"decl_id":null,"docs":" Verifies, with the given verifier options, that a buffer of\n bytes contains a size prefixed `Footer` and returns\n it. Note that verification is still experimental and may not\n catch every error, or be maximally performant. For the\n previous, unchecked, behavior use\n `root_as_footer_unchecked`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1364904,"byte_end":1364913,"line_start":393,"line_end":393,"column_start":1,"column_end":10}},{"value":"/ Verifies, with the given verifier options, that a buffer of","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1364914,"byte_end":1364977,"line_start":394,"line_end":394,"column_start":1,"column_end":64}},{"value":"/ bytes contains a size prefixed `Footer` and returns","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1364978,"byte_end":1365033,"line_start":395,"line_end":395,"column_start":1,"column_end":56}},{"value":"/ it. Note that verification is still experimental and may not","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1365034,"byte_end":1365098,"line_start":396,"line_end":396,"column_start":1,"column_end":65}},{"value":"/ catch every error, or be maximally performant. For the","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1365099,"byte_end":1365157,"line_start":397,"line_end":397,"column_start":1,"column_end":59}},{"value":"/ previous, unchecked, behavior use","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1365158,"byte_end":1365195,"line_start":398,"line_end":398,"column_start":1,"column_end":38}},{"value":"/ `root_as_footer_unchecked`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1365196,"byte_end":1365227,"line_start":399,"line_end":399,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":4527},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1365681,"byte_end":1365705,"line_start":410,"line_end":410,"column_start":15,"column_end":39},"name":"root_as_footer_unchecked","qualname":"::ipc::gen::File::root_as_footer_unchecked","value":"pub unsafe fn root_as_footer_unchecked(&[u8]) -> Footer","parent":null,"children":[],"decl_id":null,"docs":" Assumes, without verification, that a buffer of bytes contains a Footer and returns it.\n # Safety\n Callers must trust the given bytes do indeed contain a valid `Footer`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1365477,"byte_end":1365486,"line_start":406,"line_end":406,"column_start":1,"column_end":10}},{"value":"/ Assumes, without verification, that a buffer of bytes contains a Footer and returns it.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1365487,"byte_end":1365578,"line_start":407,"line_end":407,"column_start":1,"column_end":92}},{"value":"/ # Safety","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1365579,"byte_end":1365591,"line_start":408,"line_end":408,"column_start":1,"column_end":13}},{"value":"/ Callers must trust the given bytes do indeed contain a valid `Footer`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1365592,"byte_end":1365666,"line_start":409,"line_end":409,"column_start":1,"column_end":75}}]},{"kind":"Function","id":{"krate":0,"index":4528},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1366011,"byte_end":1366049,"line_start":417,"line_end":417,"column_start":15,"column_end":53},"name":"size_prefixed_root_as_footer_unchecked","qualname":"::ipc::gen::File::size_prefixed_root_as_footer_unchecked","value":"pub unsafe fn size_prefixed_root_as_footer_unchecked(&[u8]) -> Footer","parent":null,"children":[],"decl_id":null,"docs":" Assumes, without verification, that a buffer of bytes contains a size prefixed Footer and returns it.\n # Safety\n Callers must trust the given bytes do indeed contain a valid size prefixed `Footer`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1365779,"byte_end":1365788,"line_start":413,"line_end":413,"column_start":1,"column_end":10}},{"value":"/ Assumes, without verification, that a buffer of bytes contains a size prefixed Footer and returns it.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1365789,"byte_end":1365894,"line_start":414,"line_end":414,"column_start":1,"column_end":106}},{"value":"/ # Safety","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1365895,"byte_end":1365907,"line_start":415,"line_end":415,"column_start":1,"column_end":13}},{"value":"/ Callers must trust the given bytes do indeed contain a valid size prefixed `Footer`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1365908,"byte_end":1365996,"line_start":416,"line_end":416,"column_start":1,"column_end":89}}]},{"kind":"Function","id":{"krate":0,"index":4529},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1366154,"byte_end":1366174,"line_start":421,"line_end":421,"column_start":8,"column_end":28},"name":"finish_footer_buffer","qualname":"::ipc::gen::File::finish_footer_buffer","value":"pub fn finish_footer_buffer<'a,\n                            'b>(&'b mut flatbuffers::FlatBufferBuilder,\n                                flatbuffers::WIPOffset<Footer>)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1366137,"byte_end":1366146,"line_start":420,"line_end":420,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":4532},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1366335,"byte_end":1366369,"line_start":429,"line_end":429,"column_start":8,"column_end":42},"name":"finish_size_prefixed_footer_buffer","qualname":"::ipc::gen::File::finish_size_prefixed_footer_buffer","value":"pub fn finish_size_prefixed_footer_buffer<'a,\n                                          'b>(&'b mut flatbuffers::FlatBufferBuilder,\n                                              flatbuffers::WIPOffset<Footer>)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1366318,"byte_end":1366327,"line_start":428,"line_end":428,"column_start":1,"column_end":10}}]},{"kind":"Mod","id":{"krate":0,"index":4535},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"Message","qualname":"::ipc::gen::Message","value":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","parent":null,"children":[{"krate":0,"index":4536},{"krate":0,"index":4537},{"krate":0,"index":4538},{"krate":0,"index":4539},{"krate":0,"index":4542},{"krate":0,"index":4543},{"krate":0,"index":4546},{"krate":0,"index":4549},{"krate":0,"index":4550},{"krate":0,"index":4551},{"krate":0,"index":8785},{"krate":0,"index":8788},{"krate":0,"index":8790},{"krate":0,"index":8791},{"krate":0,"index":8792},{"krate":0,"index":8795},{"krate":0,"index":8796},{"krate":0,"index":8798},{"krate":0,"index":8800},{"krate":0,"index":8802},{"krate":0,"index":4553},{"krate":0,"index":4560},{"krate":0,"index":4562},{"krate":0,"index":4566},{"krate":0,"index":4569},{"krate":0,"index":4572},{"krate":0,"index":4580},{"krate":0,"index":4581},{"krate":0,"index":4582},{"krate":0,"index":4583},{"krate":0,"index":8805},{"krate":0,"index":8808},{"krate":0,"index":8810},{"krate":0,"index":8811},{"krate":0,"index":8812},{"krate":0,"index":8815},{"krate":0,"index":8816},{"krate":0,"index":8818},{"krate":0,"index":8820},{"krate":0,"index":8822},{"krate":0,"index":4585},{"krate":0,"index":4591},{"krate":0,"index":4593},{"krate":0,"index":4597},{"krate":0,"index":4600},{"krate":0,"index":4603},{"krate":0,"index":4611},{"krate":0,"index":4612},{"krate":0,"index":4613},{"krate":0,"index":4614},{"krate":0,"index":8825},{"krate":0,"index":8828},{"krate":0,"index":8830},{"krate":0,"index":8831},{"krate":0,"index":8832},{"krate":0,"index":8835},{"krate":0,"index":8836},{"krate":0,"index":8838},{"krate":0,"index":8840},{"krate":0,"index":8842},{"krate":0,"index":4616},{"krate":0,"index":4627},{"krate":0,"index":4629},{"krate":0,"index":4630},{"krate":0,"index":4634},{"krate":0,"index":4637},{"krate":0,"index":4640},{"krate":0,"index":4648},{"krate":0,"index":8845},{"krate":0,"index":8848},{"krate":0,"index":8850},{"krate":0,"index":8851},{"krate":0,"index":8852},{"krate":0,"index":4649},{"krate":0,"index":4651},{"krate":0,"index":4652},{"krate":0,"index":4653},{"krate":0,"index":4657},{"krate":0,"index":4661},{"krate":0,"index":4665},{"krate":0,"index":4669},{"krate":0,"index":4677},{"krate":0,"index":4681},{"krate":0,"index":8855},{"krate":0,"index":8858},{"krate":0,"index":8860},{"krate":0,"index":8863},{"krate":0,"index":8865},{"krate":0,"index":4682},{"krate":0,"index":4686},{"krate":0,"index":4697},{"krate":0,"index":4704},{"krate":0,"index":4707},{"krate":0,"index":4710},{"krate":0,"index":4715},{"krate":0,"index":4722},{"krate":0,"index":4724},{"krate":0,"index":8869},{"krate":0,"index":8872},{"krate":0,"index":8874},{"krate":0,"index":8877},{"krate":0,"index":8879},{"krate":0,"index":4725},{"krate":0,"index":4729},{"krate":0,"index":4746},{"krate":0,"index":4753},{"krate":0,"index":4759},{"krate":0,"index":4762},{"krate":0,"index":4767},{"krate":0,"index":4776},{"krate":0,"index":4778},{"krate":0,"index":8883},{"krate":0,"index":8886},{"krate":0,"index":8888},{"krate":0,"index":8891},{"krate":0,"index":8893},{"krate":0,"index":4779},{"krate":0,"index":4783},{"krate":0,"index":4796},{"krate":0,"index":4803},{"krate":0,"index":4808},{"krate":0,"index":4811},{"krate":0,"index":4816},{"krate":0,"index":4824},{"krate":0,"index":4826},{"krate":0,"index":8897},{"krate":0,"index":8900},{"krate":0,"index":8902},{"krate":0,"index":8905},{"krate":0,"index":8907},{"krate":0,"index":4827},{"krate":0,"index":4831},{"krate":0,"index":4853},{"krate":0,"index":4861},{"krate":0,"index":4868},{"krate":0,"index":4871},{"krate":0,"index":4876},{"krate":0,"index":4886},{"krate":0,"index":4888},{"krate":0,"index":4890},{"krate":0,"index":4892},{"krate":0,"index":4893},{"krate":0,"index":4894},{"krate":0,"index":4897},{"krate":0,"index":4900},{"krate":0,"index":4901},{"krate":0,"index":4902},{"krate":0,"index":4905}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(clippy :: all)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/mod.rs","byte_start":1351719,"byte_end":1351740,"line_start":24,"line_end":24,"column_start":1,"column_end":22}},{"value":"allow(dead_code)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1367329,"byte_end":1367349,"line_start":18,"line_end":18,"column_start":1,"column_end":21}},{"value":"allow(unused_imports)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1367350,"byte_end":1367375,"line_start":19,"line_end":19,"column_start":1,"column_end":26}}]},{"kind":"Const","id":{"krate":0,"index":4549},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1367748,"byte_end":1367773,"line_start":32,"line_end":32,"column_start":11,"column_end":36},"name":"ENUM_MIN_COMPRESSION_TYPE","qualname":"::ipc::gen::Message::ENUM_MIN_COMPRESSION_TYPE","value":"i8","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"1.13\", note =\n             \"Use associated constants instead. This will no longer be generated in 2021.\")","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1367612,"byte_end":1367737,"line_start":28,"line_end":31,"column_start":1,"column_end":3}}]},{"kind":"Const","id":{"krate":0,"index":4550},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1367919,"byte_end":1367944,"line_start":37,"line_end":37,"column_start":11,"column_end":36},"name":"ENUM_MAX_COMPRESSION_TYPE","qualname":"::ipc::gen::Message::ENUM_MAX_COMPRESSION_TYPE","value":"i8","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"1.13\", note =\n             \"Use associated constants instead. This will no longer be generated in 2021.\")","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1367783,"byte_end":1367908,"line_start":33,"line_end":36,"column_start":1,"column_end":3}}]},{"kind":"Const","id":{"krate":0,"index":4551},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1368121,"byte_end":1368149,"line_start":43,"line_end":43,"column_start":11,"column_end":39},"name":"ENUM_VALUES_COMPRESSION_TYPE","qualname":"::ipc::gen::Message::ENUM_VALUES_COMPRESSION_TYPE","value":"[CompressionType; ]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"1.13\", note =\n             \"Use associated constants instead. This will no longer be generated in 2021.\")","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1367954,"byte_end":1368079,"line_start":38,"line_end":41,"column_start":1,"column_end":3}},{"value":"allow(non_camel_case_types)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1368080,"byte_end":1368110,"line_start":42,"line_end":42,"column_start":1,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":8785},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1368325,"byte_end":1368340,"line_start":48,"line_end":48,"column_start":12,"column_end":27},"name":"CompressionType","qualname":"::ipc::gen::Message::CompressionType","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"repr(transparent)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1368293,"byte_end":1368313,"line_start":47,"line_end":47,"column_start":1,"column_end":21}}]},{"kind":"Field","id":{"krate":0,"index":8787},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1368341,"byte_end":1368347,"line_start":48,"line_end":48,"column_start":28,"column_end":34},"name":"0","qualname":"::ipc::gen::Message::CompressionType::0","value":"i8","parent":{"krate":0,"index":8785},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4554},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1368420,"byte_end":1368429,"line_start":51,"line_end":51,"column_start":15,"column_end":24},"name":"LZ4_FRAME","qualname":"::ipc::gen::Message::CompressionType::LZ4_FRAME","value":"Self","parent":{"krate":0,"index":4553},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4555},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1368461,"byte_end":1368465,"line_start":52,"line_end":52,"column_start":15,"column_end":19},"name":"ZSTD","qualname":"::ipc::gen::Message::CompressionType::ZSTD","value":"Self","parent":{"krate":0,"index":4553},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4556},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1368498,"byte_end":1368506,"line_start":54,"line_end":54,"column_start":15,"column_end":23},"name":"ENUM_MIN","qualname":"::ipc::gen::Message::CompressionType::ENUM_MIN","value":"i8","parent":{"krate":0,"index":4553},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4557},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1368530,"byte_end":1368538,"line_start":55,"line_end":55,"column_start":15,"column_end":23},"name":"ENUM_MAX","qualname":"::ipc::gen::Message::CompressionType::ENUM_MAX","value":"i8","parent":{"krate":0,"index":4553},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4558},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1368562,"byte_end":1368573,"line_start":56,"line_end":56,"column_start":15,"column_end":26},"name":"ENUM_VALUES","qualname":"::ipc::gen::Message::CompressionType::ENUM_VALUES","value":"&'static [Self]","parent":{"krate":0,"index":4553},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4559},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1368689,"byte_end":1368701,"line_start":58,"line_end":58,"column_start":12,"column_end":24},"name":"variant_name","qualname":"<CompressionType>::variant_name","value":"pub fn variant_name(Self) -> Option<&'static str>","parent":null,"children":[],"decl_id":null,"docs":" Returns the variant's name or \"\" if unknown.\n","sig":null,"attributes":[{"value":"/ Returns the variant's name or \"\" if unknown.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1368629,"byte_end":1368677,"line_start":57,"line_end":57,"column_start":5,"column_end":53}}]},{"kind":"Const","id":{"krate":0,"index":4581},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1370402,"byte_end":1370434,"line_start":121,"line_end":121,"column_start":11,"column_end":43},"name":"ENUM_MIN_BODY_COMPRESSION_METHOD","qualname":"::ipc::gen::Message::ENUM_MIN_BODY_COMPRESSION_METHOD","value":"i8","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"1.13\", note =\n             \"Use associated constants instead. This will no longer be generated in 2021.\")","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1370266,"byte_end":1370391,"line_start":117,"line_end":120,"column_start":1,"column_end":3}}]},{"kind":"Const","id":{"krate":0,"index":4582},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1370580,"byte_end":1370612,"line_start":126,"line_end":126,"column_start":11,"column_end":43},"name":"ENUM_MAX_BODY_COMPRESSION_METHOD","qualname":"::ipc::gen::Message::ENUM_MAX_BODY_COMPRESSION_METHOD","value":"i8","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"1.13\", note =\n             \"Use associated constants instead. This will no longer be generated in 2021.\")","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1370444,"byte_end":1370569,"line_start":122,"line_end":125,"column_start":1,"column_end":3}}]},{"kind":"Const","id":{"krate":0,"index":4583},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1370789,"byte_end":1370824,"line_start":132,"line_end":132,"column_start":11,"column_end":46},"name":"ENUM_VALUES_BODY_COMPRESSION_METHOD","qualname":"::ipc::gen::Message::ENUM_VALUES_BODY_COMPRESSION_METHOD","value":"[BodyCompressionMethod; ]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"1.13\", note =\n             \"Use associated constants instead. This will no longer be generated in 2021.\")","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1370622,"byte_end":1370747,"line_start":127,"line_end":130,"column_start":1,"column_end":3}},{"value":"allow(non_camel_case_types)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1370748,"byte_end":1370778,"line_start":131,"line_end":131,"column_start":1,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":8805},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1371187,"byte_end":1371208,"line_start":140,"line_end":140,"column_start":12,"column_end":33},"name":"BodyCompressionMethod","qualname":"::ipc::gen::Message::BodyCompressionMethod","value":"","parent":null,"children":[],"decl_id":null,"docs":" Provided for forward compatibility in case we need to support different\n strategies for compressing the IPC message body (like whole-body\n compression rather than buffer-level) in the future\n","sig":null,"attributes":[{"value":"/ Provided for forward compatibility in case we need to support different","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1370893,"byte_end":1370968,"line_start":135,"line_end":135,"column_start":1,"column_end":76}},{"value":"/ strategies for compressing the IPC message body (like whole-body","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1370969,"byte_end":1371037,"line_start":136,"line_end":136,"column_start":1,"column_end":69}},{"value":"/ compression rather than buffer-level) in the future","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1371038,"byte_end":1371093,"line_start":137,"line_end":137,"column_start":1,"column_end":56}},{"value":"repr(transparent)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1371155,"byte_end":1371175,"line_start":139,"line_end":139,"column_start":1,"column_end":21}}]},{"kind":"Field","id":{"krate":0,"index":8807},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1371209,"byte_end":1371215,"line_start":140,"line_end":140,"column_start":34,"column_end":40},"name":"0","qualname":"::ipc::gen::Message::BodyCompressionMethod::0","value":"i8","parent":{"krate":0,"index":8805},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4586},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1371804,"byte_end":1371810,"line_start":150,"line_end":150,"column_start":15,"column_end":21},"name":"BUFFER","qualname":"::ipc::gen::Message::BodyCompressionMethod::BUFFER","value":"Self","parent":{"krate":0,"index":4585},"children":[],"decl_id":null,"docs":" Each constituent buffer is first compressed with the indicated\n compressor, and then written with the uncompressed length in the first 8\n bytes as a 64-bit little-endian signed integer followed by the compressed\n buffer bytes (and then padding as required by the protocol). The\n uncompressed length may be set to -1 to indicate that the data that\n follows is not compressed, which can be useful for cases where\n compression does not yield appreciable savings.\n","sig":null,"attributes":[{"value":"/ Each constituent buffer is first compressed with the indicated","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1371284,"byte_end":1371350,"line_start":143,"line_end":143,"column_start":5,"column_end":71}},{"value":"/ compressor, and then written with the uncompressed length in the first 8","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1371355,"byte_end":1371431,"line_start":144,"line_end":144,"column_start":5,"column_end":81}},{"value":"/ bytes as a 64-bit little-endian signed integer followed by the compressed","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1371436,"byte_end":1371513,"line_start":145,"line_end":145,"column_start":5,"column_end":82}},{"value":"/ buffer bytes (and then padding as required by the protocol). The","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1371518,"byte_end":1371586,"line_start":146,"line_end":146,"column_start":5,"column_end":73}},{"value":"/ uncompressed length may be set to -1 to indicate that the data that","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1371591,"byte_end":1371662,"line_start":147,"line_end":147,"column_start":5,"column_end":76}},{"value":"/ follows is not compressed, which can be useful for cases where","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1371667,"byte_end":1371733,"line_start":148,"line_end":148,"column_start":5,"column_end":71}},{"value":"/ compression does not yield appreciable savings.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1371738,"byte_end":1371789,"line_start":149,"line_end":149,"column_start":5,"column_end":56}}]},{"kind":"Const","id":{"krate":0,"index":4587},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1371843,"byte_end":1371851,"line_start":152,"line_end":152,"column_start":15,"column_end":23},"name":"ENUM_MIN","qualname":"::ipc::gen::Message::BodyCompressionMethod::ENUM_MIN","value":"i8","parent":{"krate":0,"index":4585},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4588},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1371875,"byte_end":1371883,"line_start":153,"line_end":153,"column_start":15,"column_end":23},"name":"ENUM_MAX","qualname":"::ipc::gen::Message::BodyCompressionMethod::ENUM_MAX","value":"i8","parent":{"krate":0,"index":4585},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4589},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1371907,"byte_end":1371918,"line_start":154,"line_end":154,"column_start":15,"column_end":26},"name":"ENUM_VALUES","qualname":"::ipc::gen::Message::BodyCompressionMethod::ENUM_VALUES","value":"&'static [Self]","parent":{"krate":0,"index":4585},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4590},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1372019,"byte_end":1372031,"line_start":156,"line_end":156,"column_start":12,"column_end":24},"name":"variant_name","qualname":"<BodyCompressionMethod>::variant_name","value":"pub fn variant_name(Self) -> Option<&'static str>","parent":null,"children":[],"decl_id":null,"docs":" Returns the variant's name or \"\" if unknown.\n","sig":null,"attributes":[{"value":"/ Returns the variant's name or \"\" if unknown.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1371959,"byte_end":1372007,"line_start":155,"line_end":155,"column_start":5,"column_end":53}}]},{"kind":"Const","id":{"krate":0,"index":4612},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1373728,"byte_end":1373751,"line_start":218,"line_end":218,"column_start":11,"column_end":34},"name":"ENUM_MIN_MESSAGE_HEADER","qualname":"::ipc::gen::Message::ENUM_MIN_MESSAGE_HEADER","value":"u8","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"1.13\", note =\n             \"Use associated constants instead. This will no longer be generated in 2021.\")","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1373592,"byte_end":1373717,"line_start":214,"line_end":217,"column_start":1,"column_end":3}}]},{"kind":"Const","id":{"krate":0,"index":4613},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1373897,"byte_end":1373920,"line_start":223,"line_end":223,"column_start":11,"column_end":34},"name":"ENUM_MAX_MESSAGE_HEADER","qualname":"::ipc::gen::Message::ENUM_MAX_MESSAGE_HEADER","value":"u8","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"1.13\", note =\n             \"Use associated constants instead. This will no longer be generated in 2021.\")","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1373761,"byte_end":1373886,"line_start":219,"line_end":222,"column_start":1,"column_end":3}}]},{"kind":"Const","id":{"krate":0,"index":4614},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1374097,"byte_end":1374123,"line_start":229,"line_end":229,"column_start":11,"column_end":37},"name":"ENUM_VALUES_MESSAGE_HEADER","qualname":"::ipc::gen::Message::ENUM_VALUES_MESSAGE_HEADER","value":"[MessageHeader; ]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"1.13\", note =\n             \"Use associated constants instead. This will no longer be generated in 2021.\")","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1373930,"byte_end":1374055,"line_start":224,"line_end":227,"column_start":1,"column_end":3}},{"value":"allow(non_camel_case_types)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1374056,"byte_end":1374086,"line_start":228,"line_end":228,"column_start":1,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":8825},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1374882,"byte_end":1374895,"line_start":248,"line_end":248,"column_start":12,"column_end":25},"name":"MessageHeader","qualname":"::ipc::gen::Message::MessageHeader","value":"","parent":null,"children":[],"decl_id":null,"docs":" ----------------------------------------------------------------------\n The root Message type\n This union enables us to easily send different message types without\n redundant storage, and in the future we can easily add new message types.","sig":null,"attributes":[{"value":"/ ----------------------------------------------------------------------","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1374332,"byte_end":1374406,"line_start":238,"line_end":238,"column_start":1,"column_end":75}},{"value":"/ The root Message type","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1374407,"byte_end":1374432,"line_start":239,"line_end":239,"column_start":1,"column_end":26}},{"value":"/ This union enables us to easily send different message types without","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1374433,"byte_end":1374505,"line_start":240,"line_end":240,"column_start":1,"column_end":73}},{"value":"/ redundant storage, and in the future we can easily add new message types.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1374506,"byte_end":1374583,"line_start":241,"line_end":241,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1374584,"byte_end":1374587,"line_start":242,"line_end":242,"column_start":1,"column_end":4}},{"value":"/ Arrow implementations do not need to implement all of the message types,","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1374588,"byte_end":1374664,"line_start":243,"line_end":243,"column_start":1,"column_end":77}},{"value":"/ which may include experimental metadata types. For maximum compatibility,","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1374665,"byte_end":1374742,"line_start":244,"line_end":244,"column_start":1,"column_end":78}},{"value":"/ it is best to send data using RecordBatch","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1374743,"byte_end":1374788,"line_start":245,"line_end":245,"column_start":1,"column_end":46}},{"value":"repr(transparent)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1374850,"byte_end":1374870,"line_start":247,"line_end":247,"column_start":1,"column_end":21}}]},{"kind":"Field","id":{"krate":0,"index":8827},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1374896,"byte_end":1374902,"line_start":248,"line_end":248,"column_start":26,"column_end":32},"name":"0","qualname":"::ipc::gen::Message::MessageHeader::0","value":"u8","parent":{"krate":0,"index":8825},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4617},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1374973,"byte_end":1374977,"line_start":251,"line_end":251,"column_start":15,"column_end":19},"name":"NONE","qualname":"::ipc::gen::Message::MessageHeader::NONE","value":"Self","parent":{"krate":0,"index":4616},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4618},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1375009,"byte_end":1375015,"line_start":252,"line_end":252,"column_start":15,"column_end":21},"name":"Schema","qualname":"::ipc::gen::Message::MessageHeader::Schema","value":"Self","parent":{"krate":0,"index":4616},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4619},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1375047,"byte_end":1375062,"line_start":253,"line_end":253,"column_start":15,"column_end":30},"name":"DictionaryBatch","qualname":"::ipc::gen::Message::MessageHeader::DictionaryBatch","value":"Self","parent":{"krate":0,"index":4616},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4620},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1375094,"byte_end":1375105,"line_start":254,"line_end":254,"column_start":15,"column_end":26},"name":"RecordBatch","qualname":"::ipc::gen::Message::MessageHeader::RecordBatch","value":"Self","parent":{"krate":0,"index":4616},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4621},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1375137,"byte_end":1375143,"line_start":255,"line_end":255,"column_start":15,"column_end":21},"name":"Tensor","qualname":"::ipc::gen::Message::MessageHeader::Tensor","value":"Self","parent":{"krate":0,"index":4616},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4622},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1375175,"byte_end":1375187,"line_start":256,"line_end":256,"column_start":15,"column_end":27},"name":"SparseTensor","qualname":"::ipc::gen::Message::MessageHeader::SparseTensor","value":"Self","parent":{"krate":0,"index":4616},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4623},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1375220,"byte_end":1375228,"line_start":258,"line_end":258,"column_start":15,"column_end":23},"name":"ENUM_MIN","qualname":"::ipc::gen::Message::MessageHeader::ENUM_MIN","value":"u8","parent":{"krate":0,"index":4616},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4624},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1375252,"byte_end":1375260,"line_start":259,"line_end":259,"column_start":15,"column_end":23},"name":"ENUM_MAX","qualname":"::ipc::gen::Message::MessageHeader::ENUM_MAX","value":"u8","parent":{"krate":0,"index":4616},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4625},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1375284,"byte_end":1375295,"line_start":260,"line_end":260,"column_start":15,"column_end":26},"name":"ENUM_VALUES","qualname":"::ipc::gen::Message::MessageHeader::ENUM_VALUES","value":"&'static [Self]","parent":{"krate":0,"index":4616},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4626},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1375539,"byte_end":1375551,"line_start":269,"line_end":269,"column_start":12,"column_end":24},"name":"variant_name","qualname":"<MessageHeader>::variant_name","value":"pub fn variant_name(Self) -> Option<&'static str>","parent":null,"children":[],"decl_id":null,"docs":" Returns the variant's name or \"\" if unknown.\n","sig":null,"attributes":[{"value":"/ Returns the variant's name or \"\" if unknown.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1375479,"byte_end":1375527,"line_start":268,"line_end":268,"column_start":5,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":4629},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1376246,"byte_end":1376275,"line_start":290,"line_end":290,"column_start":12,"column_end":41},"name":"MessageHeaderUnionTableOffset","qualname":"::ipc::gen::Message::MessageHeaderUnionTableOffset","value":"MessageHeaderUnionTableOffset {  }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8845},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1377955,"byte_end":1377964,"line_start":345,"line_end":345,"column_start":12,"column_end":21},"name":"FieldNode","qualname":"::ipc::gen::Message::FieldNode","value":"FieldNode {  }","parent":null,"children":[{"krate":0,"index":8846},{"krate":0,"index":8847}],"decl_id":null,"docs":" ----------------------------------------------------------------------\n Data structures for describing a table row batch (a collection of\n equal-length Arrow arrays)\n Metadata about a field at some level of a nested type tree (but not\n its children).","sig":null,"attributes":[{"value":"/ ----------------------------------------------------------------------","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1377356,"byte_end":1377430,"line_start":333,"line_end":333,"column_start":1,"column_end":75}},{"value":"/ Data structures for describing a table row batch (a collection of","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1377431,"byte_end":1377500,"line_start":334,"line_end":334,"column_start":1,"column_end":70}},{"value":"/ equal-length Arrow arrays)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1377501,"byte_end":1377531,"line_start":335,"line_end":335,"column_start":1,"column_end":31}},{"value":"/ Metadata about a field at some level of a nested type tree (but not","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1377532,"byte_end":1377603,"line_start":336,"line_end":336,"column_start":1,"column_end":72}},{"value":"/ its children).","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1377604,"byte_end":1377622,"line_start":337,"line_end":337,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1377623,"byte_end":1377626,"line_start":338,"line_end":338,"column_start":1,"column_end":4}},{"value":"/ For example, a List<Int16> with values `[[1, 2, 3], null, [4], [5, 6], null]`","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1377627,"byte_end":1377708,"line_start":339,"line_end":339,"column_start":1,"column_end":82}},{"value":"/ would have {length: 5, null_count: 2} for its List node, and {length: 6,","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1377709,"byte_end":1377785,"line_start":340,"line_end":340,"column_start":1,"column_end":77}},{"value":"/ null_count: 0} for its Int16 node, as separate FieldNode structs","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1377786,"byte_end":1377854,"line_start":341,"line_end":341,"column_start":1,"column_end":69}},{"value":"repr(C, align(8))","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1377889,"byte_end":1377909,"line_start":343,"line_end":343,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":4678},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1379882,"byte_end":1379885,"line_start":413,"line_end":413,"column_start":12,"column_end":15},"name":"new","qualname":"<FieldNode>::new","value":"pub fn new(i64, i64) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4679},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1380173,"byte_end":1380179,"line_start":421,"line_end":421,"column_start":12,"column_end":18},"name":"length","qualname":"<FieldNode>::length","value":"pub fn length(&Self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" The number of value slots in the Arrow array at this level of a nested\n tree\n","sig":null,"attributes":[{"value":"/ The number of value slots in the Arrow array at this level of a nested","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1380074,"byte_end":1380148,"line_start":419,"line_end":419,"column_start":5,"column_end":79}},{"value":"/ tree","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1380153,"byte_end":1380161,"line_start":420,"line_end":420,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":4680},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1380476,"byte_end":1380486,"line_start":427,"line_end":427,"column_start":12,"column_end":22},"name":"null_count","qualname":"<FieldNode>::null_count","value":"pub fn null_count(&Self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" The number of observed nulls. Fields with null_count == 0 may choose not\n to write their physical validity bitmap out as a materialized buffer,\n instead setting the length of the bitmap buffer to 0.\n","sig":null,"attributes":[{"value":"/ The number of observed nulls. Fields with null_count == 0 may choose not","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1380248,"byte_end":1380324,"line_start":424,"line_end":424,"column_start":5,"column_end":81}},{"value":"/ to write their physical validity bitmap out as a materialized buffer,","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1380329,"byte_end":1380402,"line_start":425,"line_end":425,"column_start":5,"column_end":78}},{"value":"/ instead setting the length of the bitmap buffer to 0.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1380407,"byte_end":1380464,"line_start":426,"line_end":426,"column_start":5,"column_end":62}}]},{"kind":"Enum","id":{"krate":0,"index":4681},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1380567,"byte_end":1380588,"line_start":432,"line_end":432,"column_start":10,"column_end":31},"name":"BodyCompressionOffset","qualname":"::ipc::gen::Message::BodyCompressionOffset","value":"pub enum BodyCompressionOffset { }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8855},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1380803,"byte_end":1380818,"line_start":438,"line_end":438,"column_start":12,"column_end":27},"name":"BodyCompression","qualname":"::ipc::gen::Message::BodyCompression","value":"BodyCompression { _tab }","parent":null,"children":[{"krate":0,"index":8857}],"decl_id":null,"docs":" Optional compression for the memory buffers constituting IPC message\n bodies. Intended for use with RecordBatch but could be used for other\n message types\n","sig":null,"attributes":[{"value":"/ Optional compression for the memory buffers constituting IPC message","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1380627,"byte_end":1380699,"line_start":435,"line_end":435,"column_start":1,"column_end":73}},{"value":"/ bodies. Intended for use with RecordBatch but could be used for other","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1380700,"byte_end":1380773,"line_start":436,"line_end":436,"column_start":1,"column_end":74}},{"value":"/ message types","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1380774,"byte_end":1380791,"line_start":437,"line_end":437,"column_start":1,"column_end":18}}]},{"kind":"Field","id":{"krate":0,"index":8857},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1380833,"byte_end":1380837,"line_start":439,"line_end":439,"column_start":9,"column_end":13},"name":"_tab","qualname":"::ipc::gen::Message::BodyCompression::_tab","value":"flatbuffers::Table<'a>","parent":{"krate":0,"index":8855},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4688},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1381176,"byte_end":1381191,"line_start":454,"line_end":454,"column_start":12,"column_end":27},"name":"init_from_table","qualname":"<BodyCompression>::init_from_table","value":"pub fn init_from_table(flatbuffers::Table) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1381155,"byte_end":1381164,"line_start":453,"line_end":453,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4689},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1381315,"byte_end":1381321,"line_start":458,"line_end":458,"column_start":12,"column_end":18},"name":"create","qualname":"<BodyCompression>::create","value":"pub fn create<'bldr:'args, 'args:'mut_bldr,\n              'mut_bldr>(&'mut_bldr mut flatbuffers::FlatBufferBuilder,\n                         &'args BodyCompressionArgs)\n-> flatbuffers::WIPOffset<BodyCompression>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(unused_mut)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1381283,"byte_end":1381303,"line_start":457,"line_end":457,"column_start":5,"column_end":25}}]},{"kind":"Const","id":{"krate":0,"index":4693},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1381721,"byte_end":1381729,"line_start":468,"line_end":468,"column_start":15,"column_end":23},"name":"VT_CODEC","qualname":"::ipc::gen::Message::BodyCompression::<'a>::VT_CODEC","value":"flatbuffers::VOffsetT","parent":{"krate":0,"index":4686},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4694},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1381772,"byte_end":1381781,"line_start":469,"line_end":469,"column_start":15,"column_end":24},"name":"VT_METHOD","qualname":"::ipc::gen::Message::BodyCompression::<'a>::VT_METHOD","value":"flatbuffers::VOffsetT","parent":{"krate":0,"index":4686},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4695},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1381863,"byte_end":1381868,"line_start":473,"line_end":473,"column_start":12,"column_end":17},"name":"codec","qualname":"<BodyCompression>::codec","value":"pub fn codec(&Self) -> CompressionType","parent":null,"children":[],"decl_id":null,"docs":" Compressor library\n","sig":null,"attributes":[{"value":"/ Compressor library","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1381815,"byte_end":1381837,"line_start":471,"line_end":471,"column_start":5,"column_end":27}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1381842,"byte_end":1381851,"line_start":472,"line_end":472,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4696},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1382175,"byte_end":1382181,"line_start":483,"line_end":483,"column_start":12,"column_end":18},"name":"method","qualname":"<BodyCompression>::method","value":"pub fn method(&Self) -> BodyCompressionMethod","parent":null,"children":[],"decl_id":null,"docs":" Indicates the way the record batch body was compressed\n","sig":null,"attributes":[{"value":"/ Indicates the way the record batch body was compressed","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1382091,"byte_end":1382149,"line_start":481,"line_end":481,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1382154,"byte_end":1382163,"line_start":482,"line_end":482,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":4704},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1382924,"byte_end":1382943,"line_start":507,"line_end":507,"column_start":12,"column_end":31},"name":"BodyCompressionArgs","qualname":"::ipc::gen::Message::BodyCompressionArgs","value":"BodyCompressionArgs { codec, method }","parent":null,"children":[{"krate":0,"index":4705},{"krate":0,"index":4706}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":4705},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1382954,"byte_end":1382959,"line_start":508,"line_end":508,"column_start":9,"column_end":14},"name":"codec","qualname":"::ipc::gen::Message::BodyCompressionArgs::codec","value":"ipc::gen::Message::CompressionType","parent":{"krate":0,"index":4704},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":4706},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1382986,"byte_end":1382992,"line_start":509,"line_end":509,"column_start":9,"column_end":15},"name":"method","qualname":"::ipc::gen::Message::BodyCompressionArgs::method","value":"ipc::gen::Message::BodyCompressionMethod","parent":{"krate":0,"index":4704},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4710},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1383260,"byte_end":1383282,"line_start":520,"line_end":520,"column_start":12,"column_end":34},"name":"BodyCompressionBuilder","qualname":"::ipc::gen::Message::BodyCompressionBuilder","value":"BodyCompressionBuilder {  }","parent":null,"children":[{"krate":0,"index":4713},{"krate":0,"index":4714}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4718},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1383503,"byte_end":1383512,"line_start":526,"line_end":526,"column_start":12,"column_end":21},"name":"add_codec","qualname":"<BodyCompressionBuilder>::add_codec","value":"pub fn add_codec(&mut Self, CompressionType)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1383482,"byte_end":1383491,"line_start":525,"line_end":525,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4719},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1383738,"byte_end":1383748,"line_start":534,"line_end":534,"column_start":12,"column_end":22},"name":"add_method","qualname":"<BodyCompressionBuilder>::add_method","value":"pub fn add_method(&mut Self, BodyCompressionMethod)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1383717,"byte_end":1383726,"line_start":533,"line_end":533,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4720},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1383992,"byte_end":1383995,"line_start":542,"line_end":542,"column_start":12,"column_end":15},"name":"new","qualname":"<BodyCompressionBuilder>::new","value":"pub fn new(&'b mut flatbuffers::FlatBufferBuilder) -> BodyCompressionBuilder","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1383971,"byte_end":1383980,"line_start":541,"line_end":541,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4721},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1384262,"byte_end":1384268,"line_start":552,"line_end":552,"column_start":12,"column_end":18},"name":"finish","qualname":"<BodyCompressionBuilder>::finish","value":"pub fn finish(Self) -> flatbuffers::WIPOffset<BodyCompression>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1384241,"byte_end":1384250,"line_start":551,"line_end":551,"column_start":5,"column_end":14}}]},{"kind":"Enum","id":{"krate":0,"index":4724},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1384729,"byte_end":1384746,"line_start":566,"line_end":566,"column_start":10,"column_end":27},"name":"RecordBatchOffset","qualname":"::ipc::gen::Message::RecordBatchOffset","value":"pub enum RecordBatchOffset { }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8869},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1384965,"byte_end":1384976,"line_start":572,"line_end":572,"column_start":12,"column_end":23},"name":"RecordBatch","qualname":"::ipc::gen::Message::RecordBatch","value":"RecordBatch { _tab }","parent":null,"children":[{"krate":0,"index":8871}],"decl_id":null,"docs":" A data header describing the shared memory layout of a \"record\" or \"row\"\n batch. Some systems call this a \"row batch\" internally and others a \"record\n batch\".\n","sig":null,"attributes":[{"value":"/ A data header describing the shared memory layout of a \"record\" or \"row\"","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1384785,"byte_end":1384861,"line_start":569,"line_end":569,"column_start":1,"column_end":77}},{"value":"/ batch. Some systems call this a \"row batch\" internally and others a \"record","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1384862,"byte_end":1384941,"line_start":570,"line_end":570,"column_start":1,"column_end":80}},{"value":"/ batch\".","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1384942,"byte_end":1384953,"line_start":571,"line_end":571,"column_start":1,"column_end":12}}]},{"kind":"Field","id":{"krate":0,"index":8871},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1384991,"byte_end":1384995,"line_start":573,"line_end":573,"column_start":9,"column_end":13},"name":"_tab","qualname":"::ipc::gen::Message::RecordBatch::_tab","value":"flatbuffers::Table<'a>","parent":{"krate":0,"index":8869},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4731},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1385322,"byte_end":1385337,"line_start":588,"line_end":588,"column_start":12,"column_end":27},"name":"init_from_table","qualname":"<RecordBatch>::init_from_table","value":"pub fn init_from_table(flatbuffers::Table) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1385301,"byte_end":1385310,"line_start":587,"line_end":587,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4732},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1385457,"byte_end":1385463,"line_start":592,"line_end":592,"column_start":12,"column_end":18},"name":"create","qualname":"<RecordBatch>::create","value":"pub fn create<'bldr:'args, 'args:'mut_bldr,\n              'mut_bldr>(&'mut_bldr mut flatbuffers::FlatBufferBuilder,\n                         &'args RecordBatchArgs)\n-> flatbuffers::WIPOffset<RecordBatch>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(unused_mut)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1385425,"byte_end":1385445,"line_start":591,"line_end":591,"column_start":5,"column_end":25}}]},{"kind":"Const","id":{"krate":0,"index":4736},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1386081,"byte_end":1386090,"line_start":610,"line_end":610,"column_start":15,"column_end":24},"name":"VT_LENGTH","qualname":"::ipc::gen::Message::RecordBatch::<'a>::VT_LENGTH","value":"flatbuffers::VOffsetT","parent":{"krate":0,"index":4729},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4737},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1386133,"byte_end":1386141,"line_start":611,"line_end":611,"column_start":15,"column_end":23},"name":"VT_NODES","qualname":"::ipc::gen::Message::RecordBatch::<'a>::VT_NODES","value":"flatbuffers::VOffsetT","parent":{"krate":0,"index":4729},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4738},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1386184,"byte_end":1386194,"line_start":612,"line_end":612,"column_start":15,"column_end":25},"name":"VT_BUFFERS","qualname":"::ipc::gen::Message::RecordBatch::<'a>::VT_BUFFERS","value":"flatbuffers::VOffsetT","parent":{"krate":0,"index":4729},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4739},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1386237,"byte_end":1386251,"line_start":613,"line_end":613,"column_start":15,"column_end":29},"name":"VT_COMPRESSION","qualname":"::ipc::gen::Message::RecordBatch::<'a>::VT_COMPRESSION","value":"flatbuffers::VOffsetT","parent":{"krate":0,"index":4729},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4740},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1386401,"byte_end":1386407,"line_start":618,"line_end":618,"column_start":12,"column_end":18},"name":"length","qualname":"<RecordBatch>::length","value":"pub fn length(&Self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" number of records / rows. The arrays in the batch should all have this\n length\n","sig":null,"attributes":[{"value":"/ number of records / rows. The arrays in the batch should all have this","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1386286,"byte_end":1386360,"line_start":615,"line_end":615,"column_start":5,"column_end":79}},{"value":"/ length","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1386365,"byte_end":1386375,"line_start":616,"line_end":616,"column_start":5,"column_end":15}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1386380,"byte_end":1386389,"line_start":617,"line_end":617,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4741},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1386621,"byte_end":1386626,"line_start":625,"line_end":625,"column_start":12,"column_end":17},"name":"nodes","qualname":"<RecordBatch>::nodes","value":"pub fn nodes(&Self) -> Option<&'a [FieldNode]>","parent":null,"children":[],"decl_id":null,"docs":" Nodes correspond to the pre-ordered flattened logical schema\n","sig":null,"attributes":[{"value":"/ Nodes correspond to the pre-ordered flattened logical schema","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1386531,"byte_end":1386595,"line_start":623,"line_end":623,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1386600,"byte_end":1386609,"line_start":624,"line_end":624,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4743},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1387275,"byte_end":1387282,"line_start":640,"line_end":640,"column_start":12,"column_end":19},"name":"buffers","qualname":"<RecordBatch>::buffers","value":"pub fn buffers(&Self) -> Option<&'a [Buffer]>","parent":null,"children":[],"decl_id":null,"docs":" Buffers correspond to the pre-ordered flattened buffer tree","sig":null,"attributes":[{"value":"/ Buffers correspond to the pre-ordered flattened buffer tree","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1386889,"byte_end":1386952,"line_start":633,"line_end":633,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1386957,"byte_end":1386960,"line_start":634,"line_end":634,"column_start":5,"column_end":8}},{"value":"/ The number of buffers appended to this list depends on the schema. For","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1386965,"byte_end":1387039,"line_start":635,"line_end":635,"column_start":5,"column_end":79}},{"value":"/ example, most primitive arrays will have 2 buffers, 1 for the validity","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1387044,"byte_end":1387118,"line_start":636,"line_end":636,"column_start":5,"column_end":79}},{"value":"/ bitmap and 1 for the values. For struct arrays, there will only be a","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1387123,"byte_end":1387195,"line_start":637,"line_end":637,"column_start":5,"column_end":77}},{"value":"/ single buffer for the validity (nulls) bitmap","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1387200,"byte_end":1387249,"line_start":638,"line_end":638,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1387254,"byte_end":1387263,"line_start":639,"line_end":639,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4745},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1387611,"byte_end":1387622,"line_start":650,"line_end":650,"column_start":12,"column_end":23},"name":"compression","qualname":"<RecordBatch>::compression","value":"pub fn compression(&Self) -> Option<BodyCompression>","parent":null,"children":[],"decl_id":null,"docs":" Optional compression of the message body\n","sig":null,"attributes":[{"value":"/ Optional compression of the message body","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1387541,"byte_end":1387585,"line_start":648,"line_end":648,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1387590,"byte_end":1387599,"line_start":649,"line_end":649,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":4753},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1388583,"byte_end":1388598,"line_start":675,"line_end":675,"column_start":12,"column_end":27},"name":"RecordBatchArgs","qualname":"::ipc::gen::Message::RecordBatchArgs","value":"RecordBatchArgs { length, nodes, buffers, compression }","parent":null,"children":[{"krate":0,"index":4755},{"krate":0,"index":4756},{"krate":0,"index":4757},{"krate":0,"index":4758}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":4755},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1388613,"byte_end":1388619,"line_start":676,"line_end":676,"column_start":9,"column_end":15},"name":"length","qualname":"::ipc::gen::Message::RecordBatchArgs::length","value":"i64","parent":{"krate":0,"index":4753},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":4756},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1388634,"byte_end":1388639,"line_start":677,"line_end":677,"column_start":9,"column_end":14},"name":"nodes","qualname":"::ipc::gen::Message::RecordBatchArgs::nodes","value":"std::option::Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, ipc::gen::Message::FieldNode>>>","parent":{"krate":0,"index":4753},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":4757},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1388717,"byte_end":1388724,"line_start":678,"line_end":678,"column_start":9,"column_end":16},"name":"buffers","qualname":"::ipc::gen::Message::RecordBatchArgs::buffers","value":"std::option::Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, ipc::gen::Schema::Buffer>>>","parent":{"krate":0,"index":4753},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":4758},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1388799,"byte_end":1388810,"line_start":679,"line_end":679,"column_start":9,"column_end":20},"name":"compression","qualname":"::ipc::gen::Message::RecordBatchArgs::compression","value":"std::option::Option<flatbuffers::WIPOffset<ipc::gen::Message::BodyCompression<'a>>>","parent":{"krate":0,"index":4753},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4762},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1389112,"byte_end":1389130,"line_start":692,"line_end":692,"column_start":12,"column_end":30},"name":"RecordBatchBuilder","qualname":"::ipc::gen::Message::RecordBatchBuilder","value":"RecordBatchBuilder {  }","parent":null,"children":[{"krate":0,"index":4765},{"krate":0,"index":4766}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4770},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1389347,"byte_end":1389357,"line_start":698,"line_end":698,"column_start":12,"column_end":22},"name":"add_length","qualname":"<RecordBatchBuilder>::add_length","value":"pub fn add_length(&mut Self, i64)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1389326,"byte_end":1389335,"line_start":697,"line_end":697,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4771},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1389499,"byte_end":1389508,"line_start":703,"line_end":703,"column_start":12,"column_end":21},"name":"add_nodes","qualname":"<RecordBatchBuilder>::add_nodes","value":"pub fn add_nodes(&mut Self, flatbuffers::WIPOffset<flatbuffers::Vector>)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1389478,"byte_end":1389487,"line_start":702,"line_end":702,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4772},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1389751,"byte_end":1389762,"line_start":711,"line_end":711,"column_start":12,"column_end":23},"name":"add_buffers","qualname":"<RecordBatchBuilder>::add_buffers","value":"pub fn add_buffers(&mut Self, flatbuffers::WIPOffset<flatbuffers::Vector>)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1389730,"byte_end":1389739,"line_start":710,"line_end":710,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4773},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1390030,"byte_end":1390045,"line_start":721,"line_end":721,"column_start":12,"column_end":27},"name":"add_compression","qualname":"<RecordBatchBuilder>::add_compression","value":"pub fn add_compression(&mut Self, flatbuffers::WIPOffset<BodyCompression>)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1390009,"byte_end":1390018,"line_start":720,"line_end":720,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4774},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1390352,"byte_end":1390355,"line_start":732,"line_end":732,"column_start":12,"column_end":15},"name":"new","qualname":"<RecordBatchBuilder>::new","value":"pub fn new(&'b mut flatbuffers::FlatBufferBuilder) -> RecordBatchBuilder","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1390331,"byte_end":1390340,"line_start":731,"line_end":731,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4775},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1390614,"byte_end":1390620,"line_start":742,"line_end":742,"column_start":12,"column_end":18},"name":"finish","qualname":"<RecordBatchBuilder>::finish","value":"pub fn finish(Self) -> flatbuffers::WIPOffset<RecordBatch>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1390593,"byte_end":1390602,"line_start":741,"line_end":741,"column_start":5,"column_end":14}}]},{"kind":"Enum","id":{"krate":0,"index":4778},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1391169,"byte_end":1391190,"line_start":758,"line_end":758,"column_start":10,"column_end":31},"name":"DictionaryBatchOffset","qualname":"::ipc::gen::Message::DictionaryBatchOffset","value":"pub enum DictionaryBatchOffset { }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8883},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1391556,"byte_end":1391571,"line_start":767,"line_end":767,"column_start":12,"column_end":27},"name":"DictionaryBatch","qualname":"::ipc::gen::Message::DictionaryBatch","value":"DictionaryBatch { _tab }","parent":null,"children":[{"krate":0,"index":8885}],"decl_id":null,"docs":" For sending dictionary encoding information. Any Field can be\n dictionary-encoded, but in this case none of its children may be\n dictionary-encoded.\n There is one vector / column per dictionary, but that vector / column\n may be spread across multiple dictionary batches by using the isDelta\n flag\n","sig":null,"attributes":[{"value":"/ For sending dictionary encoding information. Any Field can be","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1391229,"byte_end":1391294,"line_start":761,"line_end":761,"column_start":1,"column_end":66}},{"value":"/ dictionary-encoded, but in this case none of its children may be","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1391295,"byte_end":1391363,"line_start":762,"line_end":762,"column_start":1,"column_end":69}},{"value":"/ dictionary-encoded.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1391364,"byte_end":1391387,"line_start":763,"line_end":763,"column_start":1,"column_end":24}},{"value":"/ There is one vector / column per dictionary, but that vector / column","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1391388,"byte_end":1391461,"line_start":764,"line_end":764,"column_start":1,"column_end":74}},{"value":"/ may be spread across multiple dictionary batches by using the isDelta","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1391462,"byte_end":1391535,"line_start":765,"line_end":765,"column_start":1,"column_end":74}},{"value":"/ flag","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1391536,"byte_end":1391544,"line_start":766,"line_end":766,"column_start":1,"column_end":9}}]},{"kind":"Field","id":{"krate":0,"index":8885},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1391586,"byte_end":1391590,"line_start":768,"line_end":768,"column_start":9,"column_end":13},"name":"_tab","qualname":"::ipc::gen::Message::DictionaryBatch::_tab","value":"flatbuffers::Table<'a>","parent":{"krate":0,"index":8883},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4785},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1391929,"byte_end":1391944,"line_start":783,"line_end":783,"column_start":12,"column_end":27},"name":"init_from_table","qualname":"<DictionaryBatch>::init_from_table","value":"pub fn init_from_table(flatbuffers::Table) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1391908,"byte_end":1391917,"line_start":782,"line_end":782,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4786},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1392068,"byte_end":1392074,"line_start":787,"line_end":787,"column_start":12,"column_end":18},"name":"create","qualname":"<DictionaryBatch>::create","value":"pub fn create<'bldr:'args, 'args:'mut_bldr,\n              'mut_bldr>(&'mut_bldr mut flatbuffers::FlatBufferBuilder,\n                         &'args DictionaryBatchArgs)\n-> flatbuffers::WIPOffset<DictionaryBatch>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(unused_mut)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1392036,"byte_end":1392056,"line_start":786,"line_end":786,"column_start":5,"column_end":25}}]},{"kind":"Const","id":{"krate":0,"index":4790},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1392557,"byte_end":1392562,"line_start":800,"line_end":800,"column_start":15,"column_end":20},"name":"VT_ID","qualname":"::ipc::gen::Message::DictionaryBatch::<'a>::VT_ID","value":"flatbuffers::VOffsetT","parent":{"krate":0,"index":4783},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4791},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1392605,"byte_end":1392612,"line_start":801,"line_end":801,"column_start":15,"column_end":22},"name":"VT_DATA","qualname":"::ipc::gen::Message::DictionaryBatch::<'a>::VT_DATA","value":"flatbuffers::VOffsetT","parent":{"krate":0,"index":4783},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4792},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1392655,"byte_end":1392665,"line_start":802,"line_end":802,"column_start":15,"column_end":25},"name":"VT_ISDELTA","qualname":"::ipc::gen::Message::DictionaryBatch::<'a>::VT_ISDELTA","value":"flatbuffers::VOffsetT","parent":{"krate":0,"index":4783},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4793},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1392720,"byte_end":1392722,"line_start":805,"line_end":805,"column_start":12,"column_end":14},"name":"id","qualname":"<DictionaryBatch>::id","value":"pub fn id(&Self) -> i64","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1392699,"byte_end":1392708,"line_start":804,"line_end":804,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4794},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1392867,"byte_end":1392871,"line_start":811,"line_end":811,"column_start":12,"column_end":16},"name":"data","qualname":"<DictionaryBatch>::data","value":"pub fn data(&Self) -> Option<RecordBatch>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1392846,"byte_end":1392855,"line_start":810,"line_end":810,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4795},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1393279,"byte_end":1393286,"line_start":821,"line_end":821,"column_start":12,"column_end":19},"name":"isDelta","qualname":"<DictionaryBatch>::isDelta","value":"pub fn isDelta(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" If isDelta is true the values in the dictionary are to be appended to a\n dictionary with the indicated id. If isDelta is false this dictionary\n should replace the existing dictionary.\n","sig":null,"attributes":[{"value":"/ If isDelta is true the values in the dictionary are to be appended to a","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1393052,"byte_end":1393127,"line_start":817,"line_end":817,"column_start":5,"column_end":80}},{"value":"/ dictionary with the indicated id. If isDelta is false this dictionary","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1393132,"byte_end":1393205,"line_start":818,"line_end":818,"column_start":5,"column_end":78}},{"value":"/ should replace the existing dictionary.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1393210,"byte_end":1393253,"line_start":819,"line_end":819,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1393258,"byte_end":1393267,"line_start":820,"line_end":820,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":4803},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1394057,"byte_end":1394076,"line_start":847,"line_end":847,"column_start":12,"column_end":31},"name":"DictionaryBatchArgs","qualname":"::ipc::gen::Message::DictionaryBatchArgs","value":"DictionaryBatchArgs { id, data, isDelta }","parent":null,"children":[{"krate":0,"index":4805},{"krate":0,"index":4806},{"krate":0,"index":4807}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":4805},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1394091,"byte_end":1394093,"line_start":848,"line_end":848,"column_start":9,"column_end":11},"name":"id","qualname":"::ipc::gen::Message::DictionaryBatchArgs::id","value":"i64","parent":{"krate":0,"index":4803},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":4806},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1394108,"byte_end":1394112,"line_start":849,"line_end":849,"column_start":9,"column_end":13},"name":"data","qualname":"::ipc::gen::Message::DictionaryBatchArgs::data","value":"std::option::Option<flatbuffers::WIPOffset<ipc::gen::Message::RecordBatch<'a>>>","parent":{"krate":0,"index":4803},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":4807},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1394171,"byte_end":1394178,"line_start":850,"line_end":850,"column_start":9,"column_end":16},"name":"isDelta","qualname":"::ipc::gen::Message::DictionaryBatchArgs::isDelta","value":"bool","parent":{"krate":0,"index":4803},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4811},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1394406,"byte_end":1394428,"line_start":862,"line_end":862,"column_start":12,"column_end":34},"name":"DictionaryBatchBuilder","qualname":"::ipc::gen::Message::DictionaryBatchBuilder","value":"DictionaryBatchBuilder {  }","parent":null,"children":[{"krate":0,"index":4814},{"krate":0,"index":4815}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4819},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1394649,"byte_end":1394655,"line_start":868,"line_end":868,"column_start":12,"column_end":18},"name":"add_id","qualname":"<DictionaryBatchBuilder>::add_id","value":"pub fn add_id(&mut Self, i64)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1394628,"byte_end":1394637,"line_start":867,"line_end":867,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4820},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1394776,"byte_end":1394784,"line_start":872,"line_end":872,"column_start":12,"column_end":20},"name":"add_data","qualname":"<DictionaryBatchBuilder>::add_data","value":"pub fn add_data(&mut Self, flatbuffers::WIPOffset<RecordBatch>)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1394755,"byte_end":1394764,"line_start":871,"line_end":871,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4821},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1395043,"byte_end":1395054,"line_start":880,"line_end":880,"column_start":12,"column_end":23},"name":"add_isDelta","qualname":"<DictionaryBatchBuilder>::add_isDelta","value":"pub fn add_isDelta(&mut Self, bool)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1395022,"byte_end":1395031,"line_start":879,"line_end":879,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4822},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1395209,"byte_end":1395212,"line_start":885,"line_end":885,"column_start":12,"column_end":15},"name":"new","qualname":"<DictionaryBatchBuilder>::new","value":"pub fn new(&'b mut flatbuffers::FlatBufferBuilder) -> DictionaryBatchBuilder","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1395188,"byte_end":1395197,"line_start":884,"line_end":884,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4823},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1395479,"byte_end":1395485,"line_start":895,"line_end":895,"column_start":12,"column_end":18},"name":"finish","qualname":"<DictionaryBatchBuilder>::finish","value":"pub fn finish(Self) -> flatbuffers::WIPOffset<DictionaryBatch>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1395458,"byte_end":1395467,"line_start":894,"line_end":894,"column_start":5,"column_end":14}}]},{"kind":"Enum","id":{"krate":0,"index":4826},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1395982,"byte_end":1395995,"line_start":910,"line_end":910,"column_start":10,"column_end":23},"name":"MessageOffset","qualname":"::ipc::gen::Message::MessageOffset","value":"pub enum MessageOffset { }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8897},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1396045,"byte_end":1396052,"line_start":913,"line_end":913,"column_start":12,"column_end":19},"name":"Message","qualname":"::ipc::gen::Message::Message","value":"Message { _tab }","parent":null,"children":[{"krate":0,"index":8899}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8899},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1396067,"byte_end":1396071,"line_start":914,"line_end":914,"column_start":9,"column_end":13},"name":"_tab","qualname":"::ipc::gen::Message::Message::_tab","value":"flatbuffers::Table<'a>","parent":{"krate":0,"index":8897},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4833},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1396386,"byte_end":1396401,"line_start":929,"line_end":929,"column_start":12,"column_end":27},"name":"init_from_table","qualname":"<Message>::init_from_table","value":"pub fn init_from_table(flatbuffers::Table) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1396365,"byte_end":1396374,"line_start":928,"line_end":928,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4834},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1396517,"byte_end":1396523,"line_start":933,"line_end":933,"column_start":12,"column_end":18},"name":"create","qualname":"<Message>::create","value":"pub fn create<'bldr:'args, 'args:'mut_bldr,\n              'mut_bldr>(&'mut_bldr mut flatbuffers::FlatBufferBuilder,\n                         &'args MessageArgs)\n-> flatbuffers::WIPOffset<Message>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(unused_mut)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1396485,"byte_end":1396505,"line_start":932,"line_end":932,"column_start":5,"column_end":25}}]},{"kind":"Const","id":{"krate":0,"index":4838},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1397155,"byte_end":1397165,"line_start":950,"line_end":950,"column_start":15,"column_end":25},"name":"VT_VERSION","qualname":"::ipc::gen::Message::Message::<'a>::VT_VERSION","value":"flatbuffers::VOffsetT","parent":{"krate":0,"index":4831},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4839},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1397208,"byte_end":1397222,"line_start":951,"line_end":951,"column_start":15,"column_end":29},"name":"VT_HEADER_TYPE","qualname":"::ipc::gen::Message::Message::<'a>::VT_HEADER_TYPE","value":"flatbuffers::VOffsetT","parent":{"krate":0,"index":4831},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4840},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1397265,"byte_end":1397274,"line_start":952,"line_end":952,"column_start":15,"column_end":24},"name":"VT_HEADER","qualname":"::ipc::gen::Message::Message::<'a>::VT_HEADER","value":"flatbuffers::VOffsetT","parent":{"krate":0,"index":4831},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4841},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1397317,"byte_end":1397330,"line_start":953,"line_end":953,"column_start":15,"column_end":28},"name":"VT_BODYLENGTH","qualname":"::ipc::gen::Message::Message::<'a>::VT_BODYLENGTH","value":"flatbuffers::VOffsetT","parent":{"krate":0,"index":4831},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4842},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1397374,"byte_end":1397392,"line_start":954,"line_end":954,"column_start":15,"column_end":33},"name":"VT_CUSTOM_METADATA","qualname":"::ipc::gen::Message::Message::<'a>::VT_CUSTOM_METADATA","value":"flatbuffers::VOffsetT","parent":{"krate":0,"index":4831},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4843},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1397448,"byte_end":1397455,"line_start":957,"line_end":957,"column_start":12,"column_end":19},"name":"version","qualname":"<Message>::version","value":"pub fn version(&Self) -> MetadataVersion","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1397427,"byte_end":1397436,"line_start":956,"line_end":956,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4844},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1397639,"byte_end":1397650,"line_start":963,"line_end":963,"column_start":12,"column_end":23},"name":"header_type","qualname":"<Message>::header_type","value":"pub fn header_type(&Self) -> MessageHeader","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1397618,"byte_end":1397627,"line_start":962,"line_end":962,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4845},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1397834,"byte_end":1397840,"line_start":969,"line_end":969,"column_start":12,"column_end":18},"name":"header","qualname":"<Message>::header","value":"pub fn header(&Self) -> Option<flatbuffers::Table>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1397813,"byte_end":1397822,"line_start":968,"line_end":968,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4846},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1398079,"byte_end":1398089,"line_start":977,"line_end":977,"column_start":12,"column_end":22},"name":"bodyLength","qualname":"<Message>::bodyLength","value":"pub fn bodyLength(&Self) -> i64","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1398058,"byte_end":1398067,"line_start":976,"line_end":976,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4847},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1398234,"byte_end":1398249,"line_start":983,"line_end":983,"column_start":12,"column_end":27},"name":"custom_metadata","qualname":"<Message>::custom_metadata","value":"pub fn custom_metadata(&Self) -> Option<flatbuffers::Vector>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1398213,"byte_end":1398222,"line_start":982,"line_end":982,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4848},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1398590,"byte_end":1398606,"line_start":992,"line_end":992,"column_start":12,"column_end":28},"name":"header_as_schema","qualname":"<Message>::header_as_schema","value":"pub fn header_as_schema(&Self) -> Option<Schema>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1398540,"byte_end":1398549,"line_start":990,"line_end":990,"column_start":5,"column_end":14}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1398554,"byte_end":1398578,"line_start":991,"line_end":991,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":4849},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1398855,"byte_end":1398881,"line_start":1002,"line_end":1002,"column_start":12,"column_end":38},"name":"header_as_dictionary_batch","qualname":"<Message>::header_as_dictionary_batch","value":"pub fn header_as_dictionary_batch(&Self) -> Option<DictionaryBatch>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1398805,"byte_end":1398814,"line_start":1000,"line_end":1000,"column_start":5,"column_end":14}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1398819,"byte_end":1398843,"line_start":1001,"line_end":1001,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":4850},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1399157,"byte_end":1399179,"line_start":1012,"line_end":1012,"column_start":12,"column_end":34},"name":"header_as_record_batch","qualname":"<Message>::header_as_record_batch","value":"pub fn header_as_record_batch(&Self) -> Option<RecordBatch>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1399107,"byte_end":1399116,"line_start":1010,"line_end":1010,"column_start":5,"column_end":14}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1399121,"byte_end":1399145,"line_start":1011,"line_end":1011,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":4851},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1399443,"byte_end":1399459,"line_start":1022,"line_end":1022,"column_start":12,"column_end":28},"name":"header_as_tensor","qualname":"<Message>::header_as_tensor","value":"pub fn header_as_tensor(&Self) -> Option<Tensor>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1399393,"byte_end":1399402,"line_start":1020,"line_end":1020,"column_start":5,"column_end":14}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1399407,"byte_end":1399431,"line_start":1021,"line_end":1021,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":4852},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1399708,"byte_end":1399731,"line_start":1032,"line_end":1032,"column_start":12,"column_end":35},"name":"header_as_sparse_tensor","qualname":"<Message>::header_as_sparse_tensor","value":"pub fn header_as_sparse_tensor(&Self) -> Option<SparseTensor>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1399658,"byte_end":1399667,"line_start":1030,"line_end":1030,"column_start":5,"column_end":14}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1399672,"byte_end":1399696,"line_start":1031,"line_end":1031,"column_start":5,"column_end":29}}]},{"kind":"Struct","id":{"krate":0,"index":4861},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1401479,"byte_end":1401490,"line_start":1066,"line_end":1066,"column_start":12,"column_end":23},"name":"MessageArgs","qualname":"::ipc::gen::Message::MessageArgs","value":"MessageArgs { version, header_type, header, bodyLength, custom_metadata }","parent":null,"children":[{"krate":0,"index":4863},{"krate":0,"index":4864},{"krate":0,"index":4865},{"krate":0,"index":4866},{"krate":0,"index":4867}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":4863},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1401505,"byte_end":1401512,"line_start":1067,"line_end":1067,"column_start":9,"column_end":16},"name":"version","qualname":"::ipc::gen::Message::MessageArgs::version","value":"ipc::gen::Schema::MetadataVersion","parent":{"krate":0,"index":4861},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":4864},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1401539,"byte_end":1401550,"line_start":1068,"line_end":1068,"column_start":9,"column_end":20},"name":"header_type","qualname":"::ipc::gen::Message::MessageArgs::header_type","value":"ipc::gen::Message::MessageHeader","parent":{"krate":0,"index":4861},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":4865},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1401575,"byte_end":1401581,"line_start":1069,"line_end":1069,"column_start":9,"column_end":15},"name":"header","qualname":"::ipc::gen::Message::MessageArgs::header","value":"std::option::Option<flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>>","parent":{"krate":0,"index":4861},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":4866},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1401652,"byte_end":1401662,"line_start":1070,"line_end":1070,"column_start":9,"column_end":19},"name":"bodyLength","qualname":"::ipc::gen::Message::MessageArgs::bodyLength","value":"i64","parent":{"krate":0,"index":4861},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":4867},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1401677,"byte_end":1401692,"line_start":1071,"line_end":1071,"column_start":9,"column_end":24},"name":"custom_metadata","qualname":"::ipc::gen::Message::MessageArgs::custom_metadata","value":"std::option::Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<ipc::gen::Schema::KeyValue<'a>>>>>","parent":{"krate":0,"index":4861},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4871},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1402142,"byte_end":1402156,"line_start":1089,"line_end":1089,"column_start":12,"column_end":26},"name":"MessageBuilder","qualname":"::ipc::gen::Message::MessageBuilder","value":"MessageBuilder {  }","parent":null,"children":[{"krate":0,"index":4874},{"krate":0,"index":4875}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4879},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1402369,"byte_end":1402380,"line_start":1095,"line_end":1095,"column_start":12,"column_end":23},"name":"add_version","qualname":"<MessageBuilder>::add_version","value":"pub fn add_version(&mut Self, MetadataVersion)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1402348,"byte_end":1402357,"line_start":1094,"line_end":1094,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4880},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1402597,"byte_end":1402612,"line_start":1103,"line_end":1103,"column_start":12,"column_end":27},"name":"add_header_type","qualname":"<MessageBuilder>::add_header_type","value":"pub fn add_header_type(&mut Self, MessageHeader)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1402576,"byte_end":1402585,"line_start":1102,"line_end":1102,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4881},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1402837,"byte_end":1402847,"line_start":1111,"line_end":1111,"column_start":12,"column_end":22},"name":"add_header","qualname":"<MessageBuilder>::add_header","value":"pub fn add_header(&mut Self,\n                  flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1402816,"byte_end":1402825,"line_start":1110,"line_end":1110,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4882},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1403082,"byte_end":1403096,"line_start":1119,"line_end":1119,"column_start":12,"column_end":26},"name":"add_bodyLength","qualname":"<MessageBuilder>::add_bodyLength","value":"pub fn add_bodyLength(&mut Self, i64)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1403061,"byte_end":1403070,"line_start":1118,"line_end":1118,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4883},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1403246,"byte_end":1403265,"line_start":1124,"line_end":1124,"column_start":12,"column_end":31},"name":"add_custom_metadata","qualname":"<MessageBuilder>::add_custom_metadata","value":"pub fn add_custom_metadata(&mut Self,\n                           flatbuffers::WIPOffset<flatbuffers::Vector>)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1403225,"byte_end":1403234,"line_start":1123,"line_end":1123,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4884},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1403612,"byte_end":1403615,"line_start":1136,"line_end":1136,"column_start":12,"column_end":15},"name":"new","qualname":"<MessageBuilder>::new","value":"pub fn new(&'b mut flatbuffers::FlatBufferBuilder) -> MessageBuilder","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1403591,"byte_end":1403600,"line_start":1135,"line_end":1135,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4885},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1403866,"byte_end":1403872,"line_start":1146,"line_end":1146,"column_start":12,"column_end":18},"name":"finish","qualname":"<MessageBuilder>::finish","value":"pub fn finish(Self) -> flatbuffers::WIPOffset<Message>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1403845,"byte_end":1403854,"line_start":1145,"line_end":1145,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":4888},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1406593,"byte_end":1406612,"line_start":1220,"line_end":1220,"column_start":8,"column_end":27},"name":"get_root_as_message","qualname":"::ipc::gen::Message::get_root_as_message","value":"pub fn get_root_as_message<'a>(&'a [u8]) -> Message","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1406491,"byte_end":1406500,"line_start":1218,"line_end":1218,"column_start":1,"column_end":10}},{"value":"deprecated(since = \"1.13\", note =\n             \"Deprecated in favor of `root_as...` methods.\")","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1406501,"byte_end":1406585,"line_start":1219,"line_end":1219,"column_start":1,"column_end":85}}]},{"kind":"Function","id":{"krate":0,"index":4890},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1406817,"byte_end":1406850,"line_start":1226,"line_end":1226,"column_start":8,"column_end":41},"name":"get_size_prefixed_root_as_message","qualname":"::ipc::gen::Message::get_size_prefixed_root_as_message","value":"pub fn get_size_prefixed_root_as_message<'a>(&'a [u8]) -> Message","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1406715,"byte_end":1406724,"line_start":1224,"line_end":1224,"column_start":1,"column_end":10}},{"value":"deprecated(since = \"1.13\", note =\n             \"Deprecated in favor of `root_as...` methods.\")","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1406725,"byte_end":1406809,"line_start":1225,"line_end":1225,"column_start":1,"column_end":85}}]},{"kind":"Function","id":{"krate":0,"index":4892},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1407252,"byte_end":1407267,"line_start":1237,"line_end":1237,"column_start":8,"column_end":23},"name":"root_as_message","qualname":"::ipc::gen::Message::root_as_message","value":"pub fn root_as_message(&[u8])\n-> Result<Message, flatbuffers::InvalidFlatbuffer>","parent":null,"children":[],"decl_id":null,"docs":" Verifies that a buffer of bytes contains a `Message`\n and returns it.\n Note that verification is still experimental and may not\n catch every error, or be maximally performant. For the\n previous, unchecked, behavior use\n `root_as_message_unchecked`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1406967,"byte_end":1406976,"line_start":1230,"line_end":1230,"column_start":1,"column_end":10}},{"value":"/ Verifies that a buffer of bytes contains a `Message`","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1406977,"byte_end":1407033,"line_start":1231,"line_end":1231,"column_start":1,"column_end":57}},{"value":"/ and returns it.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1407034,"byte_end":1407053,"line_start":1232,"line_end":1232,"column_start":1,"column_end":20}},{"value":"/ Note that verification is still experimental and may not","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1407054,"byte_end":1407114,"line_start":1233,"line_end":1233,"column_start":1,"column_end":61}},{"value":"/ catch every error, or be maximally performant. For the","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1407115,"byte_end":1407173,"line_start":1234,"line_end":1234,"column_start":1,"column_end":59}},{"value":"/ previous, unchecked, behavior use","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1407174,"byte_end":1407211,"line_start":1235,"line_end":1235,"column_start":1,"column_end":38}},{"value":"/ `root_as_message_unchecked`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1407212,"byte_end":1407244,"line_start":1236,"line_end":1236,"column_start":1,"column_end":33}}]},{"kind":"Function","id":{"krate":0,"index":4893},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1407686,"byte_end":1407715,"line_start":1247,"line_end":1247,"column_start":8,"column_end":37},"name":"size_prefixed_root_as_message","qualname":"::ipc::gen::Message::size_prefixed_root_as_message","value":"pub fn size_prefixed_root_as_message(&[u8])\n-> Result<Message, flatbuffers::InvalidFlatbuffer>","parent":null,"children":[],"decl_id":null,"docs":" Verifies that a buffer of bytes contains a size prefixed\n `Message` and returns it.\n Note that verification is still experimental and may not\n catch every error, or be maximally performant. For the\n previous, unchecked, behavior use\n `size_prefixed_root_as_message_unchecked`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1407373,"byte_end":1407382,"line_start":1240,"line_end":1240,"column_start":1,"column_end":10}},{"value":"/ Verifies that a buffer of bytes contains a size prefixed","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1407383,"byte_end":1407443,"line_start":1241,"line_end":1241,"column_start":1,"column_end":61}},{"value":"/ `Message` and returns it.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1407444,"byte_end":1407473,"line_start":1242,"line_end":1242,"column_start":1,"column_end":30}},{"value":"/ Note that verification is still experimental and may not","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1407474,"byte_end":1407534,"line_start":1243,"line_end":1243,"column_start":1,"column_end":61}},{"value":"/ catch every error, or be maximally performant. For the","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1407535,"byte_end":1407593,"line_start":1244,"line_end":1244,"column_start":1,"column_end":59}},{"value":"/ previous, unchecked, behavior use","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1407594,"byte_end":1407631,"line_start":1245,"line_end":1245,"column_start":1,"column_end":38}},{"value":"/ `size_prefixed_root_as_message_unchecked`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1407632,"byte_end":1407678,"line_start":1246,"line_end":1246,"column_start":1,"column_end":47}}]},{"kind":"Function","id":{"krate":0,"index":4894},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1408152,"byte_end":1408177,"line_start":1259,"line_end":1259,"column_start":8,"column_end":33},"name":"root_as_message_with_opts","qualname":"::ipc::gen::Message::root_as_message_with_opts","value":"pub fn root_as_message_with_opts<'b,\n                                 'o>(&'o flatbuffers::VerifierOptions,\n                                     &'b [u8])\n-> Result<Message, flatbuffers::InvalidFlatbuffer>","parent":null,"children":[],"decl_id":null,"docs":" Verifies, with the given options, that a buffer of bytes\n contains a `Message` and returns it.\n Note that verification is still experimental and may not\n catch every error, or be maximally performant. For the\n previous, unchecked, behavior use\n `root_as_message_unchecked`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1407842,"byte_end":1407851,"line_start":1252,"line_end":1252,"column_start":1,"column_end":10}},{"value":"/ Verifies, with the given options, that a buffer of bytes","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1407852,"byte_end":1407912,"line_start":1253,"line_end":1253,"column_start":1,"column_end":61}},{"value":"/ contains a `Message` and returns it.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1407913,"byte_end":1407953,"line_start":1254,"line_end":1254,"column_start":1,"column_end":41}},{"value":"/ Note that verification is still experimental and may not","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1407954,"byte_end":1408014,"line_start":1255,"line_end":1255,"column_start":1,"column_end":61}},{"value":"/ catch every error, or be maximally performant. For the","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1408015,"byte_end":1408073,"line_start":1256,"line_end":1256,"column_start":1,"column_end":59}},{"value":"/ previous, unchecked, behavior use","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1408074,"byte_end":1408111,"line_start":1257,"line_end":1257,"column_start":1,"column_end":38}},{"value":"/ `root_as_message_unchecked`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1408112,"byte_end":1408144,"line_start":1258,"line_end":1258,"column_start":1,"column_end":33}}]},{"kind":"Function","id":{"krate":0,"index":4897},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1408702,"byte_end":1408741,"line_start":1272,"line_end":1272,"column_start":8,"column_end":47},"name":"size_prefixed_root_as_message_with_opts","qualname":"::ipc::gen::Message::size_prefixed_root_as_message_with_opts","value":"pub fn size_prefixed_root_as_message_with_opts<'b,\n                                               'o>(&'o flatbuffers::VerifierOptions,\n                                                   &'b [u8])\n-> Result<Message, flatbuffers::InvalidFlatbuffer>","parent":null,"children":[],"decl_id":null,"docs":" Verifies, with the given verifier options, that a buffer of\n bytes contains a size prefixed `Message` and returns\n it. Note that verification is still experimental and may not\n catch every error, or be maximally performant. For the\n previous, unchecked, behavior use\n `root_as_message_unchecked`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1408369,"byte_end":1408378,"line_start":1265,"line_end":1265,"column_start":1,"column_end":10}},{"value":"/ Verifies, with the given verifier options, that a buffer of","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1408379,"byte_end":1408442,"line_start":1266,"line_end":1266,"column_start":1,"column_end":64}},{"value":"/ bytes contains a size prefixed `Message` and returns","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1408443,"byte_end":1408499,"line_start":1267,"line_end":1267,"column_start":1,"column_end":57}},{"value":"/ it. Note that verification is still experimental and may not","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1408500,"byte_end":1408564,"line_start":1268,"line_end":1268,"column_start":1,"column_end":65}},{"value":"/ catch every error, or be maximally performant. For the","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1408565,"byte_end":1408623,"line_start":1269,"line_end":1269,"column_start":1,"column_end":59}},{"value":"/ previous, unchecked, behavior use","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1408624,"byte_end":1408661,"line_start":1270,"line_end":1270,"column_start":1,"column_end":38}},{"value":"/ `root_as_message_unchecked`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1408662,"byte_end":1408694,"line_start":1271,"line_end":1271,"column_start":1,"column_end":33}}]},{"kind":"Function","id":{"krate":0,"index":4900},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1409153,"byte_end":1409178,"line_start":1282,"line_end":1282,"column_start":15,"column_end":40},"name":"root_as_message_unchecked","qualname":"::ipc::gen::Message::root_as_message_unchecked","value":"pub unsafe fn root_as_message_unchecked(&[u8]) -> Message","parent":null,"children":[],"decl_id":null,"docs":" Assumes, without verification, that a buffer of bytes contains a Message and returns it.\n # Safety\n Callers must trust the given bytes do indeed contain a valid `Message`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1408947,"byte_end":1408956,"line_start":1278,"line_end":1278,"column_start":1,"column_end":10}},{"value":"/ Assumes, without verification, that a buffer of bytes contains a Message and returns it.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1408957,"byte_end":1409049,"line_start":1279,"line_end":1279,"column_start":1,"column_end":93}},{"value":"/ # Safety","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1409050,"byte_end":1409062,"line_start":1280,"line_end":1280,"column_start":1,"column_end":13}},{"value":"/ Callers must trust the given bytes do indeed contain a valid `Message`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1409063,"byte_end":1409138,"line_start":1281,"line_end":1281,"column_start":1,"column_end":76}}]},{"kind":"Function","id":{"krate":0,"index":4901},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1409488,"byte_end":1409527,"line_start":1289,"line_end":1289,"column_start":15,"column_end":54},"name":"size_prefixed_root_as_message_unchecked","qualname":"::ipc::gen::Message::size_prefixed_root_as_message_unchecked","value":"pub unsafe fn size_prefixed_root_as_message_unchecked(&[u8]) -> Message","parent":null,"children":[],"decl_id":null,"docs":" Assumes, without verification, that a buffer of bytes contains a size prefixed Message and returns it.\n # Safety\n Callers must trust the given bytes do indeed contain a valid size prefixed `Message`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1409254,"byte_end":1409263,"line_start":1285,"line_end":1285,"column_start":1,"column_end":10}},{"value":"/ Assumes, without verification, that a buffer of bytes contains a size prefixed Message and returns it.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1409264,"byte_end":1409370,"line_start":1286,"line_end":1286,"column_start":1,"column_end":107}},{"value":"/ # Safety","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1409371,"byte_end":1409383,"line_start":1287,"line_end":1287,"column_start":1,"column_end":13}},{"value":"/ Callers must trust the given bytes do indeed contain a valid size prefixed `Message`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1409384,"byte_end":1409473,"line_start":1288,"line_end":1288,"column_start":1,"column_end":90}}]},{"kind":"Function","id":{"krate":0,"index":4902},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1409634,"byte_end":1409655,"line_start":1293,"line_end":1293,"column_start":8,"column_end":29},"name":"finish_message_buffer","qualname":"::ipc::gen::Message::finish_message_buffer","value":"pub fn finish_message_buffer<'a,\n                             'b>(&'b mut flatbuffers::FlatBufferBuilder,\n                                 flatbuffers::WIPOffset<Message>)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1409617,"byte_end":1409626,"line_start":1292,"line_end":1292,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":4905},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1409817,"byte_end":1409852,"line_start":1301,"line_end":1301,"column_start":8,"column_end":43},"name":"finish_size_prefixed_message_buffer","qualname":"::ipc::gen::Message::finish_size_prefixed_message_buffer","value":"pub fn finish_size_prefixed_message_buffer<'a,\n                                           'b>(&'b mut flatbuffers::FlatBufferBuilder,\n                                               flatbuffers::WIPOffset<Message>)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1409800,"byte_end":1409809,"line_start":1300,"line_end":1300,"column_start":1,"column_end":10}}]},{"kind":"Mod","id":{"krate":0,"index":4908},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"Schema","qualname":"::ipc::gen::Schema","value":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","parent":null,"children":[{"krate":0,"index":4909},{"krate":0,"index":4912},{"krate":0,"index":4913},{"krate":0,"index":4916},{"krate":0,"index":4919},{"krate":0,"index":4920},{"krate":0,"index":4921},{"krate":0,"index":8911},{"krate":0,"index":8914},{"krate":0,"index":8916},{"krate":0,"index":8917},{"krate":0,"index":8918},{"krate":0,"index":8921},{"krate":0,"index":8922},{"krate":0,"index":8924},{"krate":0,"index":8926},{"krate":0,"index":8928},{"krate":0,"index":4923},{"krate":0,"index":4933},{"krate":0,"index":4935},{"krate":0,"index":4939},{"krate":0,"index":4942},{"krate":0,"index":4945},{"krate":0,"index":4953},{"krate":0,"index":4954},{"krate":0,"index":4955},{"krate":0,"index":4956},{"krate":0,"index":8931},{"krate":0,"index":8934},{"krate":0,"index":8936},{"krate":0,"index":8937},{"krate":0,"index":8938},{"krate":0,"index":8941},{"krate":0,"index":8942},{"krate":0,"index":8944},{"krate":0,"index":8946},{"krate":0,"index":8948},{"krate":0,"index":4958},{"krate":0,"index":4966},{"krate":0,"index":4968},{"krate":0,"index":4972},{"krate":0,"index":4975},{"krate":0,"index":4978},{"krate":0,"index":4986},{"krate":0,"index":4987},{"krate":0,"index":4988},{"krate":0,"index":4989},{"krate":0,"index":8951},{"krate":0,"index":8954},{"krate":0,"index":8956},{"krate":0,"index":8957},{"krate":0,"index":8958},{"krate":0,"index":8961},{"krate":0,"index":8962},{"krate":0,"index":8964},{"krate":0,"index":8966},{"krate":0,"index":8968},{"krate":0,"index":4991},{"krate":0,"index":4998},{"krate":0,"index":5000},{"krate":0,"index":5004},{"krate":0,"index":5007},{"krate":0,"index":5010},{"krate":0,"index":5018},{"krate":0,"index":5019},{"krate":0,"index":5020},{"krate":0,"index":5021},{"krate":0,"index":8971},{"krate":0,"index":8974},{"krate":0,"index":8976},{"krate":0,"index":8977},{"krate":0,"index":8978},{"krate":0,"index":8981},{"krate":0,"index":8982},{"krate":0,"index":8984},{"krate":0,"index":8986},{"krate":0,"index":8988},{"krate":0,"index":5023},{"krate":0,"index":5031},{"krate":0,"index":5033},{"krate":0,"index":5037},{"krate":0,"index":5040},{"krate":0,"index":5043},{"krate":0,"index":5051},{"krate":0,"index":5052},{"krate":0,"index":5053},{"krate":0,"index":5054},{"krate":0,"index":8991},{"krate":0,"index":8994},{"krate":0,"index":8996},{"krate":0,"index":8997},{"krate":0,"index":8998},{"krate":0,"index":9001},{"krate":0,"index":9002},{"krate":0,"index":9004},{"krate":0,"index":9006},{"krate":0,"index":9008},{"krate":0,"index":5056},{"krate":0,"index":5063},{"krate":0,"index":5065},{"krate":0,"index":5069},{"krate":0,"index":5072},{"krate":0,"index":5075},{"krate":0,"index":5083},{"krate":0,"index":5084},{"krate":0,"index":5085},{"krate":0,"index":5086},{"krate":0,"index":9011},{"krate":0,"index":9014},{"krate":0,"index":9016},{"krate":0,"index":9017},{"krate":0,"index":9018},{"krate":0,"index":9021},{"krate":0,"index":9022},{"krate":0,"index":9024},{"krate":0,"index":9026},{"krate":0,"index":9028},{"krate":0,"index":5088},{"krate":0,"index":5097},{"krate":0,"index":5099},{"krate":0,"index":5103},{"krate":0,"index":5106},{"krate":0,"index":5109},{"krate":0,"index":5117},{"krate":0,"index":5118},{"krate":0,"index":5119},{"krate":0,"index":5120},{"krate":0,"index":9031},{"krate":0,"index":9034},{"krate":0,"index":9036},{"krate":0,"index":9037},{"krate":0,"index":9038},{"krate":0,"index":9041},{"krate":0,"index":9042},{"krate":0,"index":9044},{"krate":0,"index":9046},{"krate":0,"index":9048},{"krate":0,"index":5122},{"krate":0,"index":5129},{"krate":0,"index":5131},{"krate":0,"index":5135},{"krate":0,"index":5138},{"krate":0,"index":5141},{"krate":0,"index":5149},{"krate":0,"index":5150},{"krate":0,"index":5151},{"krate":0,"index":5152},{"krate":0,"index":9051},{"krate":0,"index":9054},{"krate":0,"index":9056},{"krate":0,"index":9057},{"krate":0,"index":9058},{"krate":0,"index":9061},{"krate":0,"index":9062},{"krate":0,"index":9064},{"krate":0,"index":9066},{"krate":0,"index":9068},{"krate":0,"index":5154},{"krate":0,"index":5181},{"krate":0,"index":5183},{"krate":0,"index":5184},{"krate":0,"index":5188},{"krate":0,"index":5191},{"krate":0,"index":5194},{"krate":0,"index":5202},{"krate":0,"index":5203},{"krate":0,"index":5204},{"krate":0,"index":5205},{"krate":0,"index":9071},{"krate":0,"index":9074},{"krate":0,"index":9076},{"krate":0,"index":9077},{"krate":0,"index":9078},{"krate":0,"index":9081},{"krate":0,"index":9082},{"krate":0,"index":9084},{"krate":0,"index":9086},{"krate":0,"index":9088},{"krate":0,"index":5207},{"krate":0,"index":5213},{"krate":0,"index":5215},{"krate":0,"index":5219},{"krate":0,"index":5222},{"krate":0,"index":5225},{"krate":0,"index":5233},{"krate":0,"index":5234},{"krate":0,"index":5235},{"krate":0,"index":5236},{"krate":0,"index":9091},{"krate":0,"index":9094},{"krate":0,"index":9096},{"krate":0,"index":9097},{"krate":0,"index":9098},{"krate":0,"index":9101},{"krate":0,"index":9102},{"krate":0,"index":9104},{"krate":0,"index":9106},{"krate":0,"index":9108},{"krate":0,"index":5238},{"krate":0,"index":5245},{"krate":0,"index":5247},{"krate":0,"index":5251},{"krate":0,"index":5254},{"krate":0,"index":5257},{"krate":0,"index":5265},{"krate":0,"index":9111},{"krate":0,"index":9114},{"krate":0,"index":9116},{"krate":0,"index":9117},{"krate":0,"index":9118},{"krate":0,"index":5266},{"krate":0,"index":5268},{"krate":0,"index":5269},{"krate":0,"index":5270},{"krate":0,"index":5274},{"krate":0,"index":5278},{"krate":0,"index":5282},{"krate":0,"index":5286},{"krate":0,"index":5294},{"krate":0,"index":5298},{"krate":0,"index":9121},{"krate":0,"index":9124},{"krate":0,"index":9126},{"krate":0,"index":9129},{"krate":0,"index":9131},{"krate":0,"index":5299},{"krate":0,"index":5303},{"krate":0,"index":5310},{"krate":0,"index":5317},{"krate":0,"index":5318},{"krate":0,"index":5321},{"krate":0,"index":5326},{"krate":0,"index":5331},{"krate":0,"index":5333},{"krate":0,"index":9135},{"krate":0,"index":9138},{"krate":0,"index":9140},{"krate":0,"index":9143},{"krate":0,"index":9145},{"krate":0,"index":5334},{"krate":0,"index":5338},{"krate":0,"index":5345},{"krate":0,"index":5352},{"krate":0,"index":5353},{"krate":0,"index":5356},{"krate":0,"index":5361},{"krate":0,"index":5366},{"krate":0,"index":5368},{"krate":0,"index":9149},{"krate":0,"index":9152},{"krate":0,"index":9154},{"krate":0,"index":9157},{"krate":0,"index":9159},{"krate":0,"index":5369},{"krate":0,"index":5373},{"krate":0,"index":5380},{"krate":0,"index":5387},{"krate":0,"index":5388},{"krate":0,"index":5391},{"krate":0,"index":5396},{"krate":0,"index":5401},{"krate":0,"index":5403},{"krate":0,"index":9163},{"krate":0,"index":9166},{"krate":0,"index":9168},{"krate":0,"index":9171},{"krate":0,"index":9173},{"krate":0,"index":5404},{"krate":0,"index":5408},{"krate":0,"index":5415},{"krate":0,"index":5422},{"krate":0,"index":5423},{"krate":0,"index":5426},{"krate":0,"index":5431},{"krate":0,"index":5436},{"krate":0,"index":5438},{"krate":0,"index":9177},{"krate":0,"index":9180},{"krate":0,"index":9182},{"krate":0,"index":9185},{"krate":0,"index":9187},{"krate":0,"index":5439},{"krate":0,"index":5443},{"krate":0,"index":5452},{"krate":0,"index":5459},{"krate":0,"index":5461},{"krate":0,"index":5464},{"krate":0,"index":5469},{"krate":0,"index":5475},{"krate":0,"index":5477},{"krate":0,"index":9191},{"krate":0,"index":9194},{"krate":0,"index":9196},{"krate":0,"index":9199},{"krate":0,"index":9201},{"krate":0,"index":5478},{"krate":0,"index":5482},{"krate":0,"index":5491},{"krate":0,"index":5498},{"krate":0,"index":5500},{"krate":0,"index":5503},{"krate":0,"index":5508},{"krate":0,"index":5514},{"krate":0,"index":5516},{"krate":0,"index":9205},{"krate":0,"index":9208},{"krate":0,"index":9210},{"krate":0,"index":9213},{"krate":0,"index":9215},{"krate":0,"index":5517},{"krate":0,"index":5521},{"krate":0,"index":5532},{"krate":0,"index":5539},{"krate":0,"index":5543},{"krate":0,"index":5546},{"krate":0,"index":5551},{"krate":0,"index":5558},{"krate":0,"index":5560},{"krate":0,"index":9219},{"krate":0,"index":9222},{"krate":0,"index":9224},{"krate":0,"index":9227},{"krate":0,"index":9229},{"krate":0,"index":5561},{"krate":0,"index":5565},{"krate":0,"index":5576},{"krate":0,"index":5583},{"krate":0,"index":5586},{"krate":0,"index":5589},{"krate":0,"index":5594},{"krate":0,"index":5601},{"krate":0,"index":5603},{"krate":0,"index":9233},{"krate":0,"index":9236},{"krate":0,"index":9238},{"krate":0,"index":9241},{"krate":0,"index":9243},{"krate":0,"index":5604},{"krate":0,"index":5608},{"krate":0,"index":5617},{"krate":0,"index":5624},{"krate":0,"index":5626},{"krate":0,"index":5629},{"krate":0,"index":5634},{"krate":0,"index":5640},{"krate":0,"index":5642},{"krate":0,"index":9247},{"krate":0,"index":9250},{"krate":0,"index":9252},{"krate":0,"index":9255},{"krate":0,"index":9257},{"krate":0,"index":5643},{"krate":0,"index":5647},{"krate":0,"index":5654},{"krate":0,"index":5661},{"krate":0,"index":5662},{"krate":0,"index":5665},{"krate":0,"index":5670},{"krate":0,"index":5675},{"krate":0,"index":5677},{"krate":0,"index":9261},{"krate":0,"index":9264},{"krate":0,"index":9266},{"krate":0,"index":9269},{"krate":0,"index":9271},{"krate":0,"index":5678},{"krate":0,"index":5682},{"krate":0,"index":5689},{"krate":0,"index":5696},{"krate":0,"index":5697},{"krate":0,"index":5700},{"krate":0,"index":5705},{"krate":0,"index":5710},{"krate":0,"index":5712},{"krate":0,"index":9275},{"krate":0,"index":9278},{"krate":0,"index":9280},{"krate":0,"index":9283},{"krate":0,"index":9285},{"krate":0,"index":5713},{"krate":0,"index":5717},{"krate":0,"index":5724},{"krate":0,"index":5731},{"krate":0,"index":5732},{"krate":0,"index":5735},{"krate":0,"index":5740},{"krate":0,"index":5745},{"krate":0,"index":5747},{"krate":0,"index":9289},{"krate":0,"index":9292},{"krate":0,"index":9294},{"krate":0,"index":9297},{"krate":0,"index":9299},{"krate":0,"index":5748},{"krate":0,"index":5752},{"krate":0,"index":5759},{"krate":0,"index":5766},{"krate":0,"index":5767},{"krate":0,"index":5770},{"krate":0,"index":5775},{"krate":0,"index":5780},{"krate":0,"index":5782},{"krate":0,"index":9303},{"krate":0,"index":9306},{"krate":0,"index":9308},{"krate":0,"index":9311},{"krate":0,"index":9313},{"krate":0,"index":5783},{"krate":0,"index":5787},{"krate":0,"index":5796},{"krate":0,"index":5803},{"krate":0,"index":5805},{"krate":0,"index":5808},{"krate":0,"index":5813},{"krate":0,"index":5819},{"krate":0,"index":5821},{"krate":0,"index":9317},{"krate":0,"index":9320},{"krate":0,"index":9322},{"krate":0,"index":9325},{"krate":0,"index":9327},{"krate":0,"index":5822},{"krate":0,"index":5826},{"krate":0,"index":5833},{"krate":0,"index":5840},{"krate":0,"index":5841},{"krate":0,"index":5844},{"krate":0,"index":5849},{"krate":0,"index":5854},{"krate":0,"index":5856},{"krate":0,"index":9331},{"krate":0,"index":9334},{"krate":0,"index":9336},{"krate":0,"index":9339},{"krate":0,"index":9341},{"krate":0,"index":5857},{"krate":0,"index":5861},{"krate":0,"index":5874},{"krate":0,"index":5881},{"krate":0,"index":5885},{"krate":0,"index":5888},{"krate":0,"index":5893},{"krate":0,"index":5901},{"krate":0,"index":5903},{"krate":0,"index":9345},{"krate":0,"index":9348},{"krate":0,"index":9350},{"krate":0,"index":9353},{"krate":0,"index":9355},{"krate":0,"index":5904},{"krate":0,"index":5908},{"krate":0,"index":5917},{"krate":0,"index":5924},{"krate":0,"index":5926},{"krate":0,"index":5929},{"krate":0,"index":5934},{"krate":0,"index":5940},{"krate":0,"index":5942},{"krate":0,"index":9359},{"krate":0,"index":9362},{"krate":0,"index":9364},{"krate":0,"index":9367},{"krate":0,"index":9369},{"krate":0,"index":5943},{"krate":0,"index":5947},{"krate":0,"index":5958},{"krate":0,"index":5965},{"krate":0,"index":5968},{"krate":0,"index":5971},{"krate":0,"index":5976},{"krate":0,"index":5983},{"krate":0,"index":5985},{"krate":0,"index":9373},{"krate":0,"index":9376},{"krate":0,"index":9378},{"krate":0,"index":9381},{"krate":0,"index":9383},{"krate":0,"index":5986},{"krate":0,"index":5990},{"krate":0,"index":6001},{"krate":0,"index":6008},{"krate":0,"index":6012},{"krate":0,"index":6015},{"krate":0,"index":6020},{"krate":0,"index":6027},{"krate":0,"index":6029},{"krate":0,"index":9387},{"krate":0,"index":9390},{"krate":0,"index":9392},{"krate":0,"index":9395},{"krate":0,"index":9397},{"krate":0,"index":6030},{"krate":0,"index":6034},{"krate":0,"index":6043},{"krate":0,"index":6050},{"krate":0,"index":6052},{"krate":0,"index":6055},{"krate":0,"index":6060},{"krate":0,"index":6066},{"krate":0,"index":6068},{"krate":0,"index":9401},{"krate":0,"index":9404},{"krate":0,"index":9406},{"krate":0,"index":9409},{"krate":0,"index":9411},{"krate":0,"index":6069},{"krate":0,"index":6073},{"krate":0,"index":6082},{"krate":0,"index":6089},{"krate":0,"index":6091},{"krate":0,"index":6094},{"krate":0,"index":6099},{"krate":0,"index":6105},{"krate":0,"index":6107},{"krate":0,"index":9415},{"krate":0,"index":9418},{"krate":0,"index":9420},{"krate":0,"index":9423},{"krate":0,"index":9425},{"krate":0,"index":6108},{"krate":0,"index":6112},{"krate":0,"index":6123},{"krate":0,"index":6130},{"krate":0,"index":6134},{"krate":0,"index":6137},{"krate":0,"index":6142},{"krate":0,"index":6149},{"krate":0,"index":6151},{"krate":0,"index":9429},{"krate":0,"index":9432},{"krate":0,"index":9434},{"krate":0,"index":9437},{"krate":0,"index":9439},{"krate":0,"index":6152},{"krate":0,"index":6156},{"krate":0,"index":6171},{"krate":0,"index":6178},{"krate":0,"index":6184},{"krate":0,"index":6187},{"krate":0,"index":6192},{"krate":0,"index":6201},{"krate":0,"index":6203},{"krate":0,"index":9443},{"krate":0,"index":9446},{"krate":0,"index":9448},{"krate":0,"index":9451},{"krate":0,"index":9453},{"krate":0,"index":6204},{"krate":0,"index":6208},{"krate":0,"index":6250},{"krate":0,"index":6258},{"krate":0,"index":6267},{"krate":0,"index":6270},{"krate":0,"index":6275},{"krate":0,"index":6287},{"krate":0,"index":6289},{"krate":0,"index":9457},{"krate":0,"index":9460},{"krate":0,"index":9462},{"krate":0,"index":9465},{"krate":0,"index":9467},{"krate":0,"index":6290},{"krate":0,"index":6294},{"krate":0,"index":6309},{"krate":0,"index":6316},{"krate":0,"index":6322},{"krate":0,"index":6325},{"krate":0,"index":6330},{"krate":0,"index":6339},{"krate":0,"index":6341},{"krate":0,"index":6343},{"krate":0,"index":6345},{"krate":0,"index":6346},{"krate":0,"index":6347},{"krate":0,"index":6350},{"krate":0,"index":6353},{"krate":0,"index":6354},{"krate":0,"index":6355},{"krate":0,"index":6358}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(clippy :: all)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/mod.rs","byte_start":1351758,"byte_end":1351779,"line_start":26,"line_end":26,"column_start":1,"column_end":22}},{"value":"allow(dead_code)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1410813,"byte_end":1410833,"line_start":18,"line_end":18,"column_start":1,"column_end":21}},{"value":"allow(unused_imports)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1410834,"byte_end":1410859,"line_start":19,"line_end":19,"column_start":1,"column_end":26}}]},{"kind":"Const","id":{"krate":0,"index":4919},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1411130,"byte_end":1411155,"line_start":29,"line_end":29,"column_start":11,"column_end":36},"name":"ENUM_MIN_METADATA_VERSION","qualname":"::ipc::gen::Schema::ENUM_MIN_METADATA_VERSION","value":"i16","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"1.13\", note =\n             \"Use associated constants instead. This will no longer be generated in 2021.\")","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1410994,"byte_end":1411119,"line_start":25,"line_end":28,"column_start":1,"column_end":3}}]},{"kind":"Const","id":{"krate":0,"index":4920},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1411302,"byte_end":1411327,"line_start":34,"line_end":34,"column_start":11,"column_end":36},"name":"ENUM_MAX_METADATA_VERSION","qualname":"::ipc::gen::Schema::ENUM_MAX_METADATA_VERSION","value":"i16","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"1.13\", note =\n             \"Use associated constants instead. This will no longer be generated in 2021.\")","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1411166,"byte_end":1411291,"line_start":30,"line_end":33,"column_start":1,"column_end":3}}]},{"kind":"Const","id":{"krate":0,"index":4921},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1411505,"byte_end":1411533,"line_start":40,"line_end":40,"column_start":11,"column_end":39},"name":"ENUM_VALUES_METADATA_VERSION","qualname":"::ipc::gen::Schema::ENUM_VALUES_METADATA_VERSION","value":"[MetadataVersion; ]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"1.13\", note =\n             \"Use associated constants instead. This will no longer be generated in 2021.\")","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1411338,"byte_end":1411463,"line_start":35,"line_end":38,"column_start":1,"column_end":3}},{"value":"allow(non_camel_case_types)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1411464,"byte_end":1411494,"line_start":39,"line_end":39,"column_start":1,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":8911},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1411782,"byte_end":1411797,"line_start":50,"line_end":50,"column_start":12,"column_end":27},"name":"MetadataVersion","qualname":"::ipc::gen::Schema::MetadataVersion","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"repr(transparent)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1411750,"byte_end":1411770,"line_start":49,"line_end":49,"column_start":1,"column_end":21}}]},{"kind":"Field","id":{"krate":0,"index":8913},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1411798,"byte_end":1411805,"line_start":50,"line_end":50,"column_start":28,"column_end":35},"name":"0","qualname":"::ipc::gen::Schema::MetadataVersion::0","value":"i16","parent":{"krate":0,"index":8911},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4924},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1411908,"byte_end":1411910,"line_start":54,"line_end":54,"column_start":15,"column_end":17},"name":"V1","qualname":"::ipc::gen::Schema::MetadataVersion::V1","value":"Self","parent":{"krate":0,"index":4923},"children":[],"decl_id":null,"docs":" 0.1.0 (October 2016).\n","sig":null,"attributes":[{"value":"/ 0.1.0 (October 2016).","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1411868,"byte_end":1411893,"line_start":53,"line_end":53,"column_start":5,"column_end":30}}]},{"kind":"Const","id":{"krate":0,"index":4925},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1412007,"byte_end":1412009,"line_start":56,"line_end":56,"column_start":15,"column_end":17},"name":"V2","qualname":"::ipc::gen::Schema::MetadataVersion::V2","value":"Self","parent":{"krate":0,"index":4923},"children":[],"decl_id":null,"docs":" 0.2.0 (February 2017). Non-backwards compatible with V1.\n","sig":null,"attributes":[{"value":"/ 0.2.0 (February 2017). Non-backwards compatible with V1.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1411932,"byte_end":1411992,"line_start":55,"line_end":55,"column_start":5,"column_end":65}}]},{"kind":"Const","id":{"krate":0,"index":4926},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1412121,"byte_end":1412123,"line_start":58,"line_end":58,"column_start":15,"column_end":17},"name":"V3","qualname":"::ipc::gen::Schema::MetadataVersion::V3","value":"Self","parent":{"krate":0,"index":4923},"children":[],"decl_id":null,"docs":" 0.3.0 -> 0.7.1 (May - December 2017). Non-backwards compatible with V2.\n","sig":null,"attributes":[{"value":"/ 0.3.0 -> 0.7.1 (May - December 2017). Non-backwards compatible with V2.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1412031,"byte_end":1412106,"line_start":57,"line_end":57,"column_start":5,"column_end":80}}]},{"kind":"Const","id":{"krate":0,"index":4927},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1412223,"byte_end":1412225,"line_start":60,"line_end":60,"column_start":15,"column_end":17},"name":"V4","qualname":"::ipc::gen::Schema::MetadataVersion::V4","value":"Self","parent":{"krate":0,"index":4923},"children":[],"decl_id":null,"docs":" >= 0.8.0 (December 2017). Non-backwards compatible with V3.\n","sig":null,"attributes":[{"value":"/ >= 0.8.0 (December 2017). Non-backwards compatible with V3.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1412145,"byte_end":1412208,"line_start":59,"line_end":59,"column_start":5,"column_end":68}}]},{"kind":"Const","id":{"krate":0,"index":4928},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1412643,"byte_end":1412645,"line_start":68,"line_end":68,"column_start":15,"column_end":17},"name":"V5","qualname":"::ipc::gen::Schema::MetadataVersion::V5","value":"Self","parent":{"krate":0,"index":4923},"children":[],"decl_id":null,"docs":" >= 1.0.0 (July 2020. Backwards compatible with V4 (V5 readers can read V4\n metadata and IPC messages). Implementations are recommended to provide a\n V4 compatibility mode with V5 format changes disabled.","sig":null,"attributes":[{"value":"/ >= 1.0.0 (July 2020. Backwards compatible with V4 (V5 readers can read V4","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1412247,"byte_end":1412324,"line_start":61,"line_end":61,"column_start":5,"column_end":82}},{"value":"/ metadata and IPC messages). Implementations are recommended to provide a","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1412329,"byte_end":1412405,"line_start":62,"line_end":62,"column_start":5,"column_end":81}},{"value":"/ V4 compatibility mode with V5 format changes disabled.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1412410,"byte_end":1412468,"line_start":63,"line_end":63,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1412473,"byte_end":1412476,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ Incompatible changes between V4 and V5:","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1412481,"byte_end":1412524,"line_start":65,"line_end":65,"column_start":5,"column_end":48}},{"value":"/ - Union buffer layout has changed. In V5, Unions don't have a validity","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1412529,"byte_end":1412603,"line_start":66,"line_end":66,"column_start":5,"column_end":79}},{"value":"/   bitmap buffer.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1412608,"byte_end":1412628,"line_start":67,"line_end":67,"column_start":5,"column_end":25}}]},{"kind":"Const","id":{"krate":0,"index":4929},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1412678,"byte_end":1412686,"line_start":70,"line_end":70,"column_start":15,"column_end":23},"name":"ENUM_MIN","qualname":"::ipc::gen::Schema::MetadataVersion::ENUM_MIN","value":"i16","parent":{"krate":0,"index":4923},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4930},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1412711,"byte_end":1412719,"line_start":71,"line_end":71,"column_start":15,"column_end":23},"name":"ENUM_MAX","qualname":"::ipc::gen::Schema::MetadataVersion::ENUM_MAX","value":"i16","parent":{"krate":0,"index":4923},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4931},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1412744,"byte_end":1412755,"line_start":72,"line_end":72,"column_start":15,"column_end":26},"name":"ENUM_VALUES","qualname":"::ipc::gen::Schema::MetadataVersion::ENUM_VALUES","value":"&'static [Self]","parent":{"krate":0,"index":4923},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4932},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1412900,"byte_end":1412912,"line_start":75,"line_end":75,"column_start":12,"column_end":24},"name":"variant_name","qualname":"<MetadataVersion>::variant_name","value":"pub fn variant_name(Self) -> Option<&'static str>","parent":null,"children":[],"decl_id":null,"docs":" Returns the variant's name or \"\" if unknown.\n","sig":null,"attributes":[{"value":"/ Returns the variant's name or \"\" if unknown.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1412840,"byte_end":1412888,"line_start":74,"line_end":74,"column_start":5,"column_end":53}}]},{"kind":"Const","id":{"krate":0,"index":4954},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1414708,"byte_end":1414724,"line_start":141,"line_end":141,"column_start":11,"column_end":27},"name":"ENUM_MIN_FEATURE","qualname":"::ipc::gen::Schema::ENUM_MIN_FEATURE","value":"i64","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"1.13\", note =\n             \"Use associated constants instead. This will no longer be generated in 2021.\")","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1414572,"byte_end":1414697,"line_start":137,"line_end":140,"column_start":1,"column_end":3}}]},{"kind":"Const","id":{"krate":0,"index":4955},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1414871,"byte_end":1414887,"line_start":146,"line_end":146,"column_start":11,"column_end":27},"name":"ENUM_MAX_FEATURE","qualname":"::ipc::gen::Schema::ENUM_MAX_FEATURE","value":"i64","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"1.13\", note =\n             \"Use associated constants instead. This will no longer be generated in 2021.\")","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1414735,"byte_end":1414860,"line_start":142,"line_end":145,"column_start":1,"column_end":3}}]},{"kind":"Const","id":{"krate":0,"index":4956},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1415065,"byte_end":1415084,"line_start":152,"line_end":152,"column_start":11,"column_end":30},"name":"ENUM_VALUES_FEATURE","qualname":"::ipc::gen::Schema::ENUM_VALUES_FEATURE","value":"[Feature; ]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"1.13\", note =\n             \"Use associated constants instead. This will no longer be generated in 2021.\")","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1414898,"byte_end":1415023,"line_start":147,"line_end":150,"column_start":1,"column_end":3}},{"value":"allow(non_camel_case_types)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1415024,"byte_end":1415054,"line_start":151,"line_end":151,"column_start":1,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":8931},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1416152,"byte_end":1416159,"line_start":177,"line_end":177,"column_start":12,"column_end":19},"name":"Feature","qualname":"::ipc::gen::Schema::Feature","value":"","parent":null,"children":[],"decl_id":null,"docs":" Represents Arrow Features that might not have full support\n within implementations. This is intended to be used in\n two scenarios:\n  1.  A mechanism for readers of Arrow Streams\n      and files to understand that the stream or file makes\n      use of a feature that isn't supported or unknown to\n      the implementation (and therefore can meet the Arrow\n      forward compatibility guarantees).\n  2.  A means of negotiating between a client and server\n      what features a stream is allowed to use. The enums\n      values here are intented to represent higher level\n      features, additional details maybe negotiated\n      with key-value pairs specific to the protocol.","sig":null,"attributes":[{"value":"/ Represents Arrow Features that might not have full support","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1415195,"byte_end":1415257,"line_start":158,"line_end":158,"column_start":1,"column_end":63}},{"value":"/ within implementations. This is intended to be used in","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1415258,"byte_end":1415316,"line_start":159,"line_end":159,"column_start":1,"column_end":59}},{"value":"/ two scenarios:","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1415317,"byte_end":1415335,"line_start":160,"line_end":160,"column_start":1,"column_end":19}},{"value":"/  1.  A mechanism for readers of Arrow Streams","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1415336,"byte_end":1415385,"line_start":161,"line_end":161,"column_start":1,"column_end":50}},{"value":"/      and files to understand that the stream or file makes","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1415386,"byte_end":1415448,"line_start":162,"line_end":162,"column_start":1,"column_end":63}},{"value":"/      use of a feature that isn't supported or unknown to","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1415449,"byte_end":1415509,"line_start":163,"line_end":163,"column_start":1,"column_end":61}},{"value":"/      the implementation (and therefore can meet the Arrow","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1415510,"byte_end":1415571,"line_start":164,"line_end":164,"column_start":1,"column_end":62}},{"value":"/      forward compatibility guarantees).","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1415572,"byte_end":1415615,"line_start":165,"line_end":165,"column_start":1,"column_end":44}},{"value":"/  2.  A means of negotiating between a client and server","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1415616,"byte_end":1415675,"line_start":166,"line_end":166,"column_start":1,"column_end":60}},{"value":"/      what features a stream is allowed to use. The enums","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1415676,"byte_end":1415736,"line_start":167,"line_end":167,"column_start":1,"column_end":61}},{"value":"/      values here are intented to represent higher level","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1415737,"byte_end":1415796,"line_start":168,"line_end":168,"column_start":1,"column_end":60}},{"value":"/      features, additional details maybe negotiated","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1415797,"byte_end":1415851,"line_start":169,"line_end":169,"column_start":1,"column_end":55}},{"value":"/      with key-value pairs specific to the protocol.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1415852,"byte_end":1415907,"line_start":170,"line_end":170,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1415908,"byte_end":1415911,"line_start":171,"line_end":171,"column_start":1,"column_end":4}},{"value":"/ Enums added to this list should be assigned power-of-two values","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1415912,"byte_end":1415979,"line_start":172,"line_end":172,"column_start":1,"column_end":68}},{"value":"/ to facilitate exchanging and comparing bitmaps for supported","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1415980,"byte_end":1416044,"line_start":173,"line_end":173,"column_start":1,"column_end":65}},{"value":"/ features.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1416045,"byte_end":1416058,"line_start":174,"line_end":174,"column_start":1,"column_end":14}},{"value":"repr(transparent)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1416120,"byte_end":1416140,"line_start":176,"line_end":176,"column_start":1,"column_end":21}}]},{"kind":"Field","id":{"krate":0,"index":8933},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1416160,"byte_end":1416167,"line_start":177,"line_end":177,"column_start":20,"column_end":27},"name":"0","qualname":"::ipc::gen::Schema::Feature::0","value":"i64","parent":{"krate":0,"index":8931},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4959},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1416274,"byte_end":1416280,"line_start":181,"line_end":181,"column_start":15,"column_end":21},"name":"UNUSED","qualname":"::ipc::gen::Schema::Feature::UNUSED","value":"Self","parent":{"krate":0,"index":4958},"children":[],"decl_id":null,"docs":" Needed to make flatbuffers happy.\n","sig":null,"attributes":[{"value":"/ Needed to make flatbuffers happy.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1416222,"byte_end":1416259,"line_start":180,"line_end":180,"column_start":5,"column_end":42}}]},{"kind":"Const","id":{"krate":0,"index":4960},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1416468,"byte_end":1416490,"line_start":185,"line_end":185,"column_start":15,"column_end":37},"name":"DICTIONARY_REPLACEMENT","qualname":"::ipc::gen::Schema::Feature::DICTIONARY_REPLACEMENT","value":"Self","parent":{"krate":0,"index":4958},"children":[],"decl_id":null,"docs":" The stream makes use of multiple full dictionaries with the\n same ID and assumes clients implement dictionary replacement\n correctly.\n","sig":null,"attributes":[{"value":"/ The stream makes use of multiple full dictionaries with the","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1416302,"byte_end":1416365,"line_start":182,"line_end":182,"column_start":5,"column_end":68}},{"value":"/ same ID and assumes clients implement dictionary replacement","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1416370,"byte_end":1416434,"line_start":183,"line_end":183,"column_start":5,"column_end":69}},{"value":"/ correctly.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1416439,"byte_end":1416453,"line_start":184,"line_end":184,"column_start":5,"column_end":19}}]},{"kind":"Const","id":{"krate":0,"index":4961},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1416609,"byte_end":1416624,"line_start":188,"line_end":188,"column_start":15,"column_end":30},"name":"COMPRESSED_BODY","qualname":"::ipc::gen::Schema::Feature::COMPRESSED_BODY","value":"Self","parent":{"krate":0,"index":4958},"children":[],"decl_id":null,"docs":" The stream makes use of compressed bodies as described\n in Message.fbs.\n","sig":null,"attributes":[{"value":"/ The stream makes use of compressed bodies as described","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1416512,"byte_end":1416570,"line_start":186,"line_end":186,"column_start":5,"column_end":63}},{"value":"/ in Message.fbs.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1416575,"byte_end":1416594,"line_start":187,"line_end":187,"column_start":5,"column_end":24}}]},{"kind":"Const","id":{"krate":0,"index":4962},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1416657,"byte_end":1416665,"line_start":190,"line_end":190,"column_start":15,"column_end":23},"name":"ENUM_MIN","qualname":"::ipc::gen::Schema::Feature::ENUM_MIN","value":"i64","parent":{"krate":0,"index":4958},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4963},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1416690,"byte_end":1416698,"line_start":191,"line_end":191,"column_start":15,"column_end":23},"name":"ENUM_MAX","qualname":"::ipc::gen::Schema::Feature::ENUM_MAX","value":"i64","parent":{"krate":0,"index":4958},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4964},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1416723,"byte_end":1416734,"line_start":192,"line_end":192,"column_start":15,"column_end":26},"name":"ENUM_VALUES","qualname":"::ipc::gen::Schema::Feature::ENUM_VALUES","value":"&'static [Self]","parent":{"krate":0,"index":4958},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4965},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1416919,"byte_end":1416931,"line_start":198,"line_end":198,"column_start":12,"column_end":24},"name":"variant_name","qualname":"<Feature>::variant_name","value":"pub fn variant_name(Self) -> Option<&'static str>","parent":null,"children":[],"decl_id":null,"docs":" Returns the variant's name or \"\" if unknown.\n","sig":null,"attributes":[{"value":"/ Returns the variant's name or \"\" if unknown.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1416859,"byte_end":1416907,"line_start":197,"line_end":197,"column_start":5,"column_end":53}}]},{"kind":"Const","id":{"krate":0,"index":4987},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1418673,"byte_end":1418692,"line_start":262,"line_end":262,"column_start":11,"column_end":30},"name":"ENUM_MIN_UNION_MODE","qualname":"::ipc::gen::Schema::ENUM_MIN_UNION_MODE","value":"i16","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"1.13\", note =\n             \"Use associated constants instead. This will no longer be generated in 2021.\")","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1418537,"byte_end":1418662,"line_start":258,"line_end":261,"column_start":1,"column_end":3}}]},{"kind":"Const","id":{"krate":0,"index":4988},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1418839,"byte_end":1418858,"line_start":267,"line_end":267,"column_start":11,"column_end":30},"name":"ENUM_MAX_UNION_MODE","qualname":"::ipc::gen::Schema::ENUM_MAX_UNION_MODE","value":"i16","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"1.13\", note =\n             \"Use associated constants instead. This will no longer be generated in 2021.\")","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1418703,"byte_end":1418828,"line_start":263,"line_end":266,"column_start":1,"column_end":3}}]},{"kind":"Const","id":{"krate":0,"index":4989},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1419036,"byte_end":1419058,"line_start":273,"line_end":273,"column_start":11,"column_end":33},"name":"ENUM_VALUES_UNION_MODE","qualname":"::ipc::gen::Schema::ENUM_VALUES_UNION_MODE","value":"[UnionMode; ]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"1.13\", note =\n             \"Use associated constants instead. This will no longer be generated in 2021.\")","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1418869,"byte_end":1418994,"line_start":268,"line_end":271,"column_start":1,"column_end":3}},{"value":"allow(non_camel_case_types)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1418995,"byte_end":1419025,"line_start":272,"line_end":272,"column_start":1,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":8951},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1419210,"byte_end":1419219,"line_start":277,"line_end":277,"column_start":12,"column_end":21},"name":"UnionMode","qualname":"::ipc::gen::Schema::UnionMode","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"repr(transparent)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1419178,"byte_end":1419198,"line_start":276,"line_end":276,"column_start":1,"column_end":21}}]},{"kind":"Field","id":{"krate":0,"index":8953},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1419220,"byte_end":1419227,"line_start":277,"line_end":277,"column_start":22,"column_end":29},"name":"0","qualname":"::ipc::gen::Schema::UnionMode::0","value":"i16","parent":{"krate":0,"index":8951},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4992},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1419294,"byte_end":1419300,"line_start":280,"line_end":280,"column_start":15,"column_end":21},"name":"Sparse","qualname":"::ipc::gen::Schema::UnionMode::Sparse","value":"Self","parent":{"krate":0,"index":4991},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4993},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1419332,"byte_end":1419337,"line_start":281,"line_end":281,"column_start":15,"column_end":20},"name":"Dense","qualname":"::ipc::gen::Schema::UnionMode::Dense","value":"Self","parent":{"krate":0,"index":4991},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4994},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1419370,"byte_end":1419378,"line_start":283,"line_end":283,"column_start":15,"column_end":23},"name":"ENUM_MIN","qualname":"::ipc::gen::Schema::UnionMode::ENUM_MIN","value":"i16","parent":{"krate":0,"index":4991},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4995},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1419403,"byte_end":1419411,"line_start":284,"line_end":284,"column_start":15,"column_end":23},"name":"ENUM_MAX","qualname":"::ipc::gen::Schema::UnionMode::ENUM_MAX","value":"i16","parent":{"krate":0,"index":4991},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4996},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1419436,"byte_end":1419447,"line_start":285,"line_end":285,"column_start":15,"column_end":26},"name":"ENUM_VALUES","qualname":"::ipc::gen::Schema::UnionMode::ENUM_VALUES","value":"&'static [Self]","parent":{"krate":0,"index":4991},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4997},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1419561,"byte_end":1419573,"line_start":287,"line_end":287,"column_start":12,"column_end":24},"name":"variant_name","qualname":"<UnionMode>::variant_name","value":"pub fn variant_name(Self) -> Option<&'static str>","parent":null,"children":[],"decl_id":null,"docs":" Returns the variant's name or \"\" if unknown.\n","sig":null,"attributes":[{"value":"/ Returns the variant's name or \"\" if unknown.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1419501,"byte_end":1419549,"line_start":286,"line_end":286,"column_start":5,"column_end":53}}]},{"kind":"Const","id":{"krate":0,"index":5019},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1421233,"byte_end":1421251,"line_start":350,"line_end":350,"column_start":11,"column_end":29},"name":"ENUM_MIN_PRECISION","qualname":"::ipc::gen::Schema::ENUM_MIN_PRECISION","value":"i16","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"1.13\", note =\n             \"Use associated constants instead. This will no longer be generated in 2021.\")","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1421097,"byte_end":1421222,"line_start":346,"line_end":349,"column_start":1,"column_end":3}}]},{"kind":"Const","id":{"krate":0,"index":5020},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1421398,"byte_end":1421416,"line_start":355,"line_end":355,"column_start":11,"column_end":29},"name":"ENUM_MAX_PRECISION","qualname":"::ipc::gen::Schema::ENUM_MAX_PRECISION","value":"i16","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"1.13\", note =\n             \"Use associated constants instead. This will no longer be generated in 2021.\")","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1421262,"byte_end":1421387,"line_start":351,"line_end":354,"column_start":1,"column_end":3}}]},{"kind":"Const","id":{"krate":0,"index":5021},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1421594,"byte_end":1421615,"line_start":361,"line_end":361,"column_start":11,"column_end":32},"name":"ENUM_VALUES_PRECISION","qualname":"::ipc::gen::Schema::ENUM_VALUES_PRECISION","value":"[Precision; ]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"1.13\", note =\n             \"Use associated constants instead. This will no longer be generated in 2021.\")","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1421427,"byte_end":1421552,"line_start":356,"line_end":359,"column_start":1,"column_end":3}},{"value":"allow(non_camel_case_types)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1421553,"byte_end":1421583,"line_start":360,"line_end":360,"column_start":1,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":8971},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1421789,"byte_end":1421798,"line_start":366,"line_end":366,"column_start":12,"column_end":21},"name":"Precision","qualname":"::ipc::gen::Schema::Precision","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"repr(transparent)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1421757,"byte_end":1421777,"line_start":365,"line_end":365,"column_start":1,"column_end":21}}]},{"kind":"Field","id":{"krate":0,"index":8973},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1421799,"byte_end":1421806,"line_start":366,"line_end":366,"column_start":22,"column_end":29},"name":"0","qualname":"::ipc::gen::Schema::Precision::0","value":"i16","parent":{"krate":0,"index":8971},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5024},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1421873,"byte_end":1421877,"line_start":369,"line_end":369,"column_start":15,"column_end":19},"name":"HALF","qualname":"::ipc::gen::Schema::Precision::HALF","value":"Self","parent":{"krate":0,"index":5023},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5025},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1421909,"byte_end":1421915,"line_start":370,"line_end":370,"column_start":15,"column_end":21},"name":"SINGLE","qualname":"::ipc::gen::Schema::Precision::SINGLE","value":"Self","parent":{"krate":0,"index":5023},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5026},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1421947,"byte_end":1421953,"line_start":371,"line_end":371,"column_start":15,"column_end":21},"name":"DOUBLE","qualname":"::ipc::gen::Schema::Precision::DOUBLE","value":"Self","parent":{"krate":0,"index":5023},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5027},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1421986,"byte_end":1421994,"line_start":373,"line_end":373,"column_start":15,"column_end":23},"name":"ENUM_MIN","qualname":"::ipc::gen::Schema::Precision::ENUM_MIN","value":"i16","parent":{"krate":0,"index":5023},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5028},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1422019,"byte_end":1422027,"line_start":374,"line_end":374,"column_start":15,"column_end":23},"name":"ENUM_MAX","qualname":"::ipc::gen::Schema::Precision::ENUM_MAX","value":"i16","parent":{"krate":0,"index":5023},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5029},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1422052,"byte_end":1422063,"line_start":375,"line_end":375,"column_start":15,"column_end":26},"name":"ENUM_VALUES","qualname":"::ipc::gen::Schema::Precision::ENUM_VALUES","value":"&'static [Self]","parent":{"krate":0,"index":5023},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5030},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1422190,"byte_end":1422202,"line_start":377,"line_end":377,"column_start":12,"column_end":24},"name":"variant_name","qualname":"<Precision>::variant_name","value":"pub fn variant_name(Self) -> Option<&'static str>","parent":null,"children":[],"decl_id":null,"docs":" Returns the variant's name or \"\" if unknown.\n","sig":null,"attributes":[{"value":"/ Returns the variant's name or \"\" if unknown.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1422130,"byte_end":1422178,"line_start":376,"line_end":376,"column_start":5,"column_end":53}}]},{"kind":"Const","id":{"krate":0,"index":5052},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1423904,"byte_end":1423922,"line_start":441,"line_end":441,"column_start":11,"column_end":29},"name":"ENUM_MIN_DATE_UNIT","qualname":"::ipc::gen::Schema::ENUM_MIN_DATE_UNIT","value":"i16","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"1.13\", note =\n             \"Use associated constants instead. This will no longer be generated in 2021.\")","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1423768,"byte_end":1423893,"line_start":437,"line_end":440,"column_start":1,"column_end":3}}]},{"kind":"Const","id":{"krate":0,"index":5053},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1424069,"byte_end":1424087,"line_start":446,"line_end":446,"column_start":11,"column_end":29},"name":"ENUM_MAX_DATE_UNIT","qualname":"::ipc::gen::Schema::ENUM_MAX_DATE_UNIT","value":"i16","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"1.13\", note =\n             \"Use associated constants instead. This will no longer be generated in 2021.\")","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1423933,"byte_end":1424058,"line_start":442,"line_end":445,"column_start":1,"column_end":3}}]},{"kind":"Const","id":{"krate":0,"index":5054},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1424265,"byte_end":1424286,"line_start":452,"line_end":452,"column_start":11,"column_end":32},"name":"ENUM_VALUES_DATE_UNIT","qualname":"::ipc::gen::Schema::ENUM_VALUES_DATE_UNIT","value":"[DateUnit; ]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"1.13\", note =\n             \"Use associated constants instead. This will no longer be generated in 2021.\")","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1424098,"byte_end":1424223,"line_start":447,"line_end":450,"column_start":1,"column_end":3}},{"value":"allow(non_camel_case_types)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1424224,"byte_end":1424254,"line_start":451,"line_end":451,"column_start":1,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":8991},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1424438,"byte_end":1424446,"line_start":456,"line_end":456,"column_start":12,"column_end":20},"name":"DateUnit","qualname":"::ipc::gen::Schema::DateUnit","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"repr(transparent)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1424406,"byte_end":1424426,"line_start":455,"line_end":455,"column_start":1,"column_end":21}}]},{"kind":"Field","id":{"krate":0,"index":8993},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1424447,"byte_end":1424454,"line_start":456,"line_end":456,"column_start":21,"column_end":28},"name":"0","qualname":"::ipc::gen::Schema::DateUnit::0","value":"i16","parent":{"krate":0,"index":8991},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5057},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1424520,"byte_end":1424523,"line_start":459,"line_end":459,"column_start":15,"column_end":18},"name":"DAY","qualname":"::ipc::gen::Schema::DateUnit::DAY","value":"Self","parent":{"krate":0,"index":5056},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5058},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1424555,"byte_end":1424566,"line_start":460,"line_end":460,"column_start":15,"column_end":26},"name":"MILLISECOND","qualname":"::ipc::gen::Schema::DateUnit::MILLISECOND","value":"Self","parent":{"krate":0,"index":5056},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5059},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1424599,"byte_end":1424607,"line_start":462,"line_end":462,"column_start":15,"column_end":23},"name":"ENUM_MIN","qualname":"::ipc::gen::Schema::DateUnit::ENUM_MIN","value":"i16","parent":{"krate":0,"index":5056},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5060},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1424632,"byte_end":1424640,"line_start":463,"line_end":463,"column_start":15,"column_end":23},"name":"ENUM_MAX","qualname":"::ipc::gen::Schema::DateUnit::ENUM_MAX","value":"i16","parent":{"krate":0,"index":5056},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5061},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1424665,"byte_end":1424676,"line_start":464,"line_end":464,"column_start":15,"column_end":26},"name":"ENUM_VALUES","qualname":"::ipc::gen::Schema::DateUnit::ENUM_VALUES","value":"&'static [Self]","parent":{"krate":0,"index":5056},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5062},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1424793,"byte_end":1424805,"line_start":466,"line_end":466,"column_start":12,"column_end":24},"name":"variant_name","qualname":"<DateUnit>::variant_name","value":"pub fn variant_name(Self) -> Option<&'static str>","parent":null,"children":[],"decl_id":null,"docs":" Returns the variant's name or \"\" if unknown.\n","sig":null,"attributes":[{"value":"/ Returns the variant's name or \"\" if unknown.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1424733,"byte_end":1424781,"line_start":465,"line_end":465,"column_start":5,"column_end":53}}]},{"kind":"Const","id":{"krate":0,"index":5084},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1426464,"byte_end":1426482,"line_start":529,"line_end":529,"column_start":11,"column_end":29},"name":"ENUM_MIN_TIME_UNIT","qualname":"::ipc::gen::Schema::ENUM_MIN_TIME_UNIT","value":"i16","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"1.13\", note =\n             \"Use associated constants instead. This will no longer be generated in 2021.\")","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1426328,"byte_end":1426453,"line_start":525,"line_end":528,"column_start":1,"column_end":3}}]},{"kind":"Const","id":{"krate":0,"index":5085},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1426629,"byte_end":1426647,"line_start":534,"line_end":534,"column_start":11,"column_end":29},"name":"ENUM_MAX_TIME_UNIT","qualname":"::ipc::gen::Schema::ENUM_MAX_TIME_UNIT","value":"i16","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"1.13\", note =\n             \"Use associated constants instead. This will no longer be generated in 2021.\")","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1426493,"byte_end":1426618,"line_start":530,"line_end":533,"column_start":1,"column_end":3}}]},{"kind":"Const","id":{"krate":0,"index":5086},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1426825,"byte_end":1426846,"line_start":540,"line_end":540,"column_start":11,"column_end":32},"name":"ENUM_VALUES_TIME_UNIT","qualname":"::ipc::gen::Schema::ENUM_VALUES_TIME_UNIT","value":"[TimeUnit; ]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"1.13\", note =\n             \"Use associated constants instead. This will no longer be generated in 2021.\")","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1426658,"byte_end":1426783,"line_start":535,"line_end":538,"column_start":1,"column_end":3}},{"value":"allow(non_camel_case_types)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1426784,"byte_end":1426814,"line_start":539,"line_end":539,"column_start":1,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":9011},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1427065,"byte_end":1427073,"line_start":549,"line_end":549,"column_start":12,"column_end":20},"name":"TimeUnit","qualname":"::ipc::gen::Schema::TimeUnit","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"repr(transparent)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1427033,"byte_end":1427053,"line_start":548,"line_end":548,"column_start":1,"column_end":21}}]},{"kind":"Field","id":{"krate":0,"index":9013},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1427074,"byte_end":1427081,"line_start":549,"line_end":549,"column_start":21,"column_end":28},"name":"0","qualname":"::ipc::gen::Schema::TimeUnit::0","value":"i16","parent":{"krate":0,"index":9011},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5089},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1427147,"byte_end":1427153,"line_start":552,"line_end":552,"column_start":15,"column_end":21},"name":"SECOND","qualname":"::ipc::gen::Schema::TimeUnit::SECOND","value":"Self","parent":{"krate":0,"index":5088},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5090},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1427185,"byte_end":1427196,"line_start":553,"line_end":553,"column_start":15,"column_end":26},"name":"MILLISECOND","qualname":"::ipc::gen::Schema::TimeUnit::MILLISECOND","value":"Self","parent":{"krate":0,"index":5088},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5091},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1427228,"byte_end":1427239,"line_start":554,"line_end":554,"column_start":15,"column_end":26},"name":"MICROSECOND","qualname":"::ipc::gen::Schema::TimeUnit::MICROSECOND","value":"Self","parent":{"krate":0,"index":5088},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5092},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1427271,"byte_end":1427281,"line_start":555,"line_end":555,"column_start":15,"column_end":25},"name":"NANOSECOND","qualname":"::ipc::gen::Schema::TimeUnit::NANOSECOND","value":"Self","parent":{"krate":0,"index":5088},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5093},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1427314,"byte_end":1427322,"line_start":557,"line_end":557,"column_start":15,"column_end":23},"name":"ENUM_MIN","qualname":"::ipc::gen::Schema::TimeUnit::ENUM_MIN","value":"i16","parent":{"krate":0,"index":5088},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5094},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1427347,"byte_end":1427355,"line_start":558,"line_end":558,"column_start":15,"column_end":23},"name":"ENUM_MAX","qualname":"::ipc::gen::Schema::TimeUnit::ENUM_MAX","value":"i16","parent":{"krate":0,"index":5088},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5095},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1427380,"byte_end":1427391,"line_start":559,"line_end":559,"column_start":15,"column_end":26},"name":"ENUM_VALUES","qualname":"::ipc::gen::Schema::TimeUnit::ENUM_VALUES","value":"&'static [Self]","parent":{"krate":0,"index":5088},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5096},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1427587,"byte_end":1427599,"line_start":566,"line_end":566,"column_start":12,"column_end":24},"name":"variant_name","qualname":"<TimeUnit>::variant_name","value":"pub fn variant_name(Self) -> Option<&'static str>","parent":null,"children":[],"decl_id":null,"docs":" Returns the variant's name or \"\" if unknown.\n","sig":null,"attributes":[{"value":"/ Returns the variant's name or \"\" if unknown.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1427527,"byte_end":1427575,"line_start":565,"line_end":565,"column_start":5,"column_end":53}}]},{"kind":"Const","id":{"krate":0,"index":5118},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1429370,"byte_end":1429392,"line_start":631,"line_end":631,"column_start":11,"column_end":33},"name":"ENUM_MIN_INTERVAL_UNIT","qualname":"::ipc::gen::Schema::ENUM_MIN_INTERVAL_UNIT","value":"i16","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"1.13\", note =\n             \"Use associated constants instead. This will no longer be generated in 2021.\")","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1429234,"byte_end":1429359,"line_start":627,"line_end":630,"column_start":1,"column_end":3}}]},{"kind":"Const","id":{"krate":0,"index":5119},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1429539,"byte_end":1429561,"line_start":636,"line_end":636,"column_start":11,"column_end":33},"name":"ENUM_MAX_INTERVAL_UNIT","qualname":"::ipc::gen::Schema::ENUM_MAX_INTERVAL_UNIT","value":"i16","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"1.13\", note =\n             \"Use associated constants instead. This will no longer be generated in 2021.\")","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1429403,"byte_end":1429528,"line_start":632,"line_end":635,"column_start":1,"column_end":3}}]},{"kind":"Const","id":{"krate":0,"index":5120},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1429739,"byte_end":1429764,"line_start":642,"line_end":642,"column_start":11,"column_end":36},"name":"ENUM_VALUES_INTERVAL_UNIT","qualname":"::ipc::gen::Schema::ENUM_VALUES_INTERVAL_UNIT","value":"[IntervalUnit; ]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"1.13\", note =\n             \"Use associated constants instead. This will no longer be generated in 2021.\")","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1429572,"byte_end":1429697,"line_start":637,"line_end":640,"column_start":1,"column_end":3}},{"value":"allow(non_camel_case_types)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1429698,"byte_end":1429728,"line_start":641,"line_end":641,"column_start":1,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":9031},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1429936,"byte_end":1429948,"line_start":647,"line_end":647,"column_start":12,"column_end":24},"name":"IntervalUnit","qualname":"::ipc::gen::Schema::IntervalUnit","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"repr(transparent)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1429904,"byte_end":1429924,"line_start":646,"line_end":646,"column_start":1,"column_end":21}}]},{"kind":"Field","id":{"krate":0,"index":9033},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1429949,"byte_end":1429956,"line_start":647,"line_end":647,"column_start":25,"column_end":32},"name":"0","qualname":"::ipc::gen::Schema::IntervalUnit::0","value":"i16","parent":{"krate":0,"index":9031},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5123},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1430026,"byte_end":1430036,"line_start":650,"line_end":650,"column_start":15,"column_end":25},"name":"YEAR_MONTH","qualname":"::ipc::gen::Schema::IntervalUnit::YEAR_MONTH","value":"Self","parent":{"krate":0,"index":5122},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5124},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1430068,"byte_end":1430076,"line_start":651,"line_end":651,"column_start":15,"column_end":23},"name":"DAY_TIME","qualname":"::ipc::gen::Schema::IntervalUnit::DAY_TIME","value":"Self","parent":{"krate":0,"index":5122},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5125},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1430109,"byte_end":1430117,"line_start":653,"line_end":653,"column_start":15,"column_end":23},"name":"ENUM_MIN","qualname":"::ipc::gen::Schema::IntervalUnit::ENUM_MIN","value":"i16","parent":{"krate":0,"index":5122},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5126},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1430142,"byte_end":1430150,"line_start":654,"line_end":654,"column_start":15,"column_end":23},"name":"ENUM_MAX","qualname":"::ipc::gen::Schema::IntervalUnit::ENUM_MAX","value":"i16","parent":{"krate":0,"index":5122},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5127},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1430175,"byte_end":1430186,"line_start":655,"line_end":655,"column_start":15,"column_end":26},"name":"ENUM_VALUES","qualname":"::ipc::gen::Schema::IntervalUnit::ENUM_VALUES","value":"&'static [Self]","parent":{"krate":0,"index":5122},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5128},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1430307,"byte_end":1430319,"line_start":657,"line_end":657,"column_start":12,"column_end":24},"name":"variant_name","qualname":"<IntervalUnit>::variant_name","value":"pub fn variant_name(Self) -> Option<&'static str>","parent":null,"children":[],"decl_id":null,"docs":" Returns the variant's name or \"\" if unknown.\n","sig":null,"attributes":[{"value":"/ Returns the variant's name or \"\" if unknown.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1430247,"byte_end":1430295,"line_start":656,"line_end":656,"column_start":5,"column_end":53}}]},{"kind":"Const","id":{"krate":0,"index":5150},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1432014,"byte_end":1432027,"line_start":720,"line_end":720,"column_start":11,"column_end":24},"name":"ENUM_MIN_TYPE","qualname":"::ipc::gen::Schema::ENUM_MIN_TYPE","value":"u8","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"1.13\", note =\n             \"Use associated constants instead. This will no longer be generated in 2021.\")","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1431878,"byte_end":1432003,"line_start":716,"line_end":719,"column_start":1,"column_end":3}}]},{"kind":"Const","id":{"krate":0,"index":5151},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1432173,"byte_end":1432186,"line_start":725,"line_end":725,"column_start":11,"column_end":24},"name":"ENUM_MAX_TYPE","qualname":"::ipc::gen::Schema::ENUM_MAX_TYPE","value":"u8","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"1.13\", note =\n             \"Use associated constants instead. This will no longer be generated in 2021.\")","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1432037,"byte_end":1432162,"line_start":721,"line_end":724,"column_start":1,"column_end":3}}]},{"kind":"Const","id":{"krate":0,"index":5152},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1432364,"byte_end":1432380,"line_start":731,"line_end":731,"column_start":11,"column_end":27},"name":"ENUM_VALUES_TYPE","qualname":"::ipc::gen::Schema::ENUM_VALUES_TYPE","value":"[Type; ]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"1.13\", note =\n             \"Use associated constants instead. This will no longer be generated in 2021.\")","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1432197,"byte_end":1432322,"line_start":726,"line_end":729,"column_start":1,"column_end":3}},{"value":"allow(non_camel_case_types)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1432323,"byte_end":1432353,"line_start":730,"line_end":730,"column_start":1,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":9051},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1433139,"byte_end":1433143,"line_start":761,"line_end":761,"column_start":12,"column_end":16},"name":"Type","qualname":"::ipc::gen::Schema::Type","value":"","parent":null,"children":[],"decl_id":null,"docs":" ----------------------------------------------------------------------\n Top-level Type value, enabling extensible type-specific metadata. We can\n add new logical types to Type without breaking backwards compatibility\n","sig":null,"attributes":[{"value":"/ ----------------------------------------------------------------------","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1432819,"byte_end":1432893,"line_start":756,"line_end":756,"column_start":1,"column_end":75}},{"value":"/ Top-level Type value, enabling extensible type-specific metadata. We can","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1432894,"byte_end":1432970,"line_start":757,"line_end":757,"column_start":1,"column_end":77}},{"value":"/ add new logical types to Type without breaking backwards compatibility","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1432971,"byte_end":1433045,"line_start":758,"line_end":758,"column_start":1,"column_end":75}},{"value":"repr(transparent)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1433107,"byte_end":1433127,"line_start":760,"line_end":760,"column_start":1,"column_end":21}}]},{"kind":"Field","id":{"krate":0,"index":9053},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1433144,"byte_end":1433150,"line_start":761,"line_end":761,"column_start":17,"column_end":23},"name":"0","qualname":"::ipc::gen::Schema::Type::0","value":"u8","parent":{"krate":0,"index":9051},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5155},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1433212,"byte_end":1433216,"line_start":764,"line_end":764,"column_start":15,"column_end":19},"name":"NONE","qualname":"::ipc::gen::Schema::Type::NONE","value":"Self","parent":{"krate":0,"index":5154},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5156},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1433248,"byte_end":1433252,"line_start":765,"line_end":765,"column_start":15,"column_end":19},"name":"Null","qualname":"::ipc::gen::Schema::Type::Null","value":"Self","parent":{"krate":0,"index":5154},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5157},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1433284,"byte_end":1433287,"line_start":766,"line_end":766,"column_start":15,"column_end":18},"name":"Int","qualname":"::ipc::gen::Schema::Type::Int","value":"Self","parent":{"krate":0,"index":5154},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5158},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1433319,"byte_end":1433332,"line_start":767,"line_end":767,"column_start":15,"column_end":28},"name":"FloatingPoint","qualname":"::ipc::gen::Schema::Type::FloatingPoint","value":"Self","parent":{"krate":0,"index":5154},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5159},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1433364,"byte_end":1433370,"line_start":768,"line_end":768,"column_start":15,"column_end":21},"name":"Binary","qualname":"::ipc::gen::Schema::Type::Binary","value":"Self","parent":{"krate":0,"index":5154},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5160},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1433402,"byte_end":1433406,"line_start":769,"line_end":769,"column_start":15,"column_end":19},"name":"Utf8","qualname":"::ipc::gen::Schema::Type::Utf8","value":"Self","parent":{"krate":0,"index":5154},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5161},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1433438,"byte_end":1433442,"line_start":770,"line_end":770,"column_start":15,"column_end":19},"name":"Bool","qualname":"::ipc::gen::Schema::Type::Bool","value":"Self","parent":{"krate":0,"index":5154},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5162},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1433474,"byte_end":1433481,"line_start":771,"line_end":771,"column_start":15,"column_end":22},"name":"Decimal","qualname":"::ipc::gen::Schema::Type::Decimal","value":"Self","parent":{"krate":0,"index":5154},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5163},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1433513,"byte_end":1433517,"line_start":772,"line_end":772,"column_start":15,"column_end":19},"name":"Date","qualname":"::ipc::gen::Schema::Type::Date","value":"Self","parent":{"krate":0,"index":5154},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5164},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1433549,"byte_end":1433553,"line_start":773,"line_end":773,"column_start":15,"column_end":19},"name":"Time","qualname":"::ipc::gen::Schema::Type::Time","value":"Self","parent":{"krate":0,"index":5154},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5165},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1433585,"byte_end":1433594,"line_start":774,"line_end":774,"column_start":15,"column_end":24},"name":"Timestamp","qualname":"::ipc::gen::Schema::Type::Timestamp","value":"Self","parent":{"krate":0,"index":5154},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5166},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1433627,"byte_end":1433635,"line_start":775,"line_end":775,"column_start":15,"column_end":23},"name":"Interval","qualname":"::ipc::gen::Schema::Type::Interval","value":"Self","parent":{"krate":0,"index":5154},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5167},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1433668,"byte_end":1433672,"line_start":776,"line_end":776,"column_start":15,"column_end":19},"name":"List","qualname":"::ipc::gen::Schema::Type::List","value":"Self","parent":{"krate":0,"index":5154},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5168},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1433705,"byte_end":1433712,"line_start":777,"line_end":777,"column_start":15,"column_end":22},"name":"Struct_","qualname":"::ipc::gen::Schema::Type::Struct_","value":"Self","parent":{"krate":0,"index":5154},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5169},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1433745,"byte_end":1433750,"line_start":778,"line_end":778,"column_start":15,"column_end":20},"name":"Union","qualname":"::ipc::gen::Schema::Type::Union","value":"Self","parent":{"krate":0,"index":5154},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5170},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1433783,"byte_end":1433798,"line_start":779,"line_end":779,"column_start":15,"column_end":30},"name":"FixedSizeBinary","qualname":"::ipc::gen::Schema::Type::FixedSizeBinary","value":"Self","parent":{"krate":0,"index":5154},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5171},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1433831,"byte_end":1433844,"line_start":780,"line_end":780,"column_start":15,"column_end":28},"name":"FixedSizeList","qualname":"::ipc::gen::Schema::Type::FixedSizeList","value":"Self","parent":{"krate":0,"index":5154},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5172},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1433877,"byte_end":1433880,"line_start":781,"line_end":781,"column_start":15,"column_end":18},"name":"Map","qualname":"::ipc::gen::Schema::Type::Map","value":"Self","parent":{"krate":0,"index":5154},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5173},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1433913,"byte_end":1433921,"line_start":782,"line_end":782,"column_start":15,"column_end":23},"name":"Duration","qualname":"::ipc::gen::Schema::Type::Duration","value":"Self","parent":{"krate":0,"index":5154},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5174},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1433954,"byte_end":1433965,"line_start":783,"line_end":783,"column_start":15,"column_end":26},"name":"LargeBinary","qualname":"::ipc::gen::Schema::Type::LargeBinary","value":"Self","parent":{"krate":0,"index":5154},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5175},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1433998,"byte_end":1434007,"line_start":784,"line_end":784,"column_start":15,"column_end":24},"name":"LargeUtf8","qualname":"::ipc::gen::Schema::Type::LargeUtf8","value":"Self","parent":{"krate":0,"index":5154},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5176},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1434040,"byte_end":1434049,"line_start":785,"line_end":785,"column_start":15,"column_end":24},"name":"LargeList","qualname":"::ipc::gen::Schema::Type::LargeList","value":"Self","parent":{"krate":0,"index":5154},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5177},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1434083,"byte_end":1434091,"line_start":787,"line_end":787,"column_start":15,"column_end":23},"name":"ENUM_MIN","qualname":"::ipc::gen::Schema::Type::ENUM_MIN","value":"u8","parent":{"krate":0,"index":5154},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5178},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1434115,"byte_end":1434123,"line_start":788,"line_end":788,"column_start":15,"column_end":23},"name":"ENUM_MAX","qualname":"::ipc::gen::Schema::Type::ENUM_MAX","value":"u8","parent":{"krate":0,"index":5154},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5179},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1434148,"byte_end":1434159,"line_start":789,"line_end":789,"column_start":15,"column_end":26},"name":"ENUM_VALUES","qualname":"::ipc::gen::Schema::Type::ENUM_VALUES","value":"&'static [Self]","parent":{"krate":0,"index":5154},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5180},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1434759,"byte_end":1434771,"line_start":814,"line_end":814,"column_start":12,"column_end":24},"name":"variant_name","qualname":"<Type>::variant_name","value":"pub fn variant_name(Self) -> Option<&'static str>","parent":null,"children":[],"decl_id":null,"docs":" Returns the variant's name or \"\" if unknown.\n","sig":null,"attributes":[{"value":"/ Returns the variant's name or \"\" if unknown.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1434699,"byte_end":1434747,"line_start":813,"line_end":813,"column_start":5,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":5183},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1436169,"byte_end":1436189,"line_start":851,"line_end":851,"column_start":12,"column_end":32},"name":"TypeUnionTableOffset","qualname":"::ipc::gen::Schema::TypeUnionTableOffset","value":"TypeUnionTableOffset {  }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5203},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1437352,"byte_end":1437376,"line_start":898,"line_end":898,"column_start":11,"column_end":35},"name":"ENUM_MIN_DICTIONARY_KIND","qualname":"::ipc::gen::Schema::ENUM_MIN_DICTIONARY_KIND","value":"i16","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"1.13\", note =\n             \"Use associated constants instead. This will no longer be generated in 2021.\")","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1437216,"byte_end":1437341,"line_start":894,"line_end":897,"column_start":1,"column_end":3}}]},{"kind":"Const","id":{"krate":0,"index":5204},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1437523,"byte_end":1437547,"line_start":903,"line_end":903,"column_start":11,"column_end":35},"name":"ENUM_MAX_DICTIONARY_KIND","qualname":"::ipc::gen::Schema::ENUM_MAX_DICTIONARY_KIND","value":"i16","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"1.13\", note =\n             \"Use associated constants instead. This will no longer be generated in 2021.\")","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1437387,"byte_end":1437512,"line_start":899,"line_end":902,"column_start":1,"column_end":3}}]},{"kind":"Const","id":{"krate":0,"index":5205},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1437725,"byte_end":1437752,"line_start":909,"line_end":909,"column_start":11,"column_end":38},"name":"ENUM_VALUES_DICTIONARY_KIND","qualname":"::ipc::gen::Schema::ENUM_VALUES_DICTIONARY_KIND","value":"[DictionaryKind; ]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"1.13\", note =\n             \"Use associated constants instead. This will no longer be generated in 2021.\")","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1437558,"byte_end":1437683,"line_start":904,"line_end":907,"column_start":1,"column_end":3}},{"value":"allow(non_camel_case_types)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1437684,"byte_end":1437714,"line_start":908,"line_end":908,"column_start":1,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":9071},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1438178,"byte_end":1438192,"line_start":918,"line_end":918,"column_start":12,"column_end":26},"name":"DictionaryKind","qualname":"::ipc::gen::Schema::DictionaryKind","value":"","parent":null,"children":[],"decl_id":null,"docs":" ----------------------------------------------------------------------\n Dictionary encoding metadata\n Maintained for forwards compatibility, in the future\n Dictionaries might be explicit maps between integers and values\n allowing for non-contiguous index values\n","sig":null,"attributes":[{"value":"/ ----------------------------------------------------------------------","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1437807,"byte_end":1437881,"line_start":911,"line_end":911,"column_start":1,"column_end":75}},{"value":"/ Dictionary encoding metadata","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1437882,"byte_end":1437914,"line_start":912,"line_end":912,"column_start":1,"column_end":33}},{"value":"/ Maintained for forwards compatibility, in the future","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1437915,"byte_end":1437971,"line_start":913,"line_end":913,"column_start":1,"column_end":57}},{"value":"/ Dictionaries might be explicit maps between integers and values","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1437972,"byte_end":1438039,"line_start":914,"line_end":914,"column_start":1,"column_end":68}},{"value":"/ allowing for non-contiguous index values","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1438040,"byte_end":1438084,"line_start":915,"line_end":915,"column_start":1,"column_end":45}},{"value":"repr(transparent)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1438146,"byte_end":1438166,"line_start":917,"line_end":917,"column_start":1,"column_end":21}}]},{"kind":"Field","id":{"krate":0,"index":9073},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1438193,"byte_end":1438200,"line_start":918,"line_end":918,"column_start":27,"column_end":34},"name":"0","qualname":"::ipc::gen::Schema::DictionaryKind::0","value":"i16","parent":{"krate":0,"index":9071},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5208},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1438272,"byte_end":1438282,"line_start":921,"line_end":921,"column_start":15,"column_end":25},"name":"DenseArray","qualname":"::ipc::gen::Schema::DictionaryKind::DenseArray","value":"Self","parent":{"krate":0,"index":5207},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5209},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1438315,"byte_end":1438323,"line_start":923,"line_end":923,"column_start":15,"column_end":23},"name":"ENUM_MIN","qualname":"::ipc::gen::Schema::DictionaryKind::ENUM_MIN","value":"i16","parent":{"krate":0,"index":5207},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5210},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1438348,"byte_end":1438356,"line_start":924,"line_end":924,"column_start":15,"column_end":23},"name":"ENUM_MAX","qualname":"::ipc::gen::Schema::DictionaryKind::ENUM_MAX","value":"i16","parent":{"krate":0,"index":5207},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5211},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1438381,"byte_end":1438392,"line_start":925,"line_end":925,"column_start":15,"column_end":26},"name":"ENUM_VALUES","qualname":"::ipc::gen::Schema::DictionaryKind::ENUM_VALUES","value":"&'static [Self]","parent":{"krate":0,"index":5207},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5212},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1438497,"byte_end":1438509,"line_start":927,"line_end":927,"column_start":12,"column_end":24},"name":"variant_name","qualname":"<DictionaryKind>::variant_name","value":"pub fn variant_name(Self) -> Option<&'static str>","parent":null,"children":[],"decl_id":null,"docs":" Returns the variant's name or \"\" if unknown.\n","sig":null,"attributes":[{"value":"/ Returns the variant's name or \"\" if unknown.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1438437,"byte_end":1438485,"line_start":926,"line_end":926,"column_start":5,"column_end":53}}]},{"kind":"Const","id":{"krate":0,"index":5234},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1440170,"byte_end":1440189,"line_start":989,"line_end":989,"column_start":11,"column_end":30},"name":"ENUM_MIN_ENDIANNESS","qualname":"::ipc::gen::Schema::ENUM_MIN_ENDIANNESS","value":"i16","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"1.13\", note =\n             \"Use associated constants instead. This will no longer be generated in 2021.\")","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1440034,"byte_end":1440159,"line_start":985,"line_end":988,"column_start":1,"column_end":3}}]},{"kind":"Const","id":{"krate":0,"index":5235},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1440336,"byte_end":1440355,"line_start":994,"line_end":994,"column_start":11,"column_end":30},"name":"ENUM_MAX_ENDIANNESS","qualname":"::ipc::gen::Schema::ENUM_MAX_ENDIANNESS","value":"i16","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"1.13\", note =\n             \"Use associated constants instead. This will no longer be generated in 2021.\")","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1440200,"byte_end":1440325,"line_start":990,"line_end":993,"column_start":1,"column_end":3}}]},{"kind":"Const","id":{"krate":0,"index":5236},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1440533,"byte_end":1440555,"line_start":1000,"line_end":1000,"column_start":11,"column_end":33},"name":"ENUM_VALUES_ENDIANNESS","qualname":"::ipc::gen::Schema::ENUM_VALUES_ENDIANNESS","value":"[Endianness; ]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"1.13\", note =\n             \"Use associated constants instead. This will no longer be generated in 2021.\")","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1440366,"byte_end":1440491,"line_start":995,"line_end":998,"column_start":1,"column_end":3}},{"value":"allow(non_camel_case_types)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1440492,"byte_end":1440522,"line_start":999,"line_end":999,"column_start":1,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":9091},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1440833,"byte_end":1440843,"line_start":1006,"line_end":1006,"column_start":12,"column_end":22},"name":"Endianness","qualname":"::ipc::gen::Schema::Endianness","value":"","parent":null,"children":[],"decl_id":null,"docs":" ----------------------------------------------------------------------\n Endianness of the platform producing the data\n","sig":null,"attributes":[{"value":"/ ----------------------------------------------------------------------","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1440615,"byte_end":1440689,"line_start":1002,"line_end":1002,"column_start":1,"column_end":75}},{"value":"/ Endianness of the platform producing the data","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1440690,"byte_end":1440739,"line_start":1003,"line_end":1003,"column_start":1,"column_end":50}},{"value":"repr(transparent)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1440801,"byte_end":1440821,"line_start":1005,"line_end":1005,"column_start":1,"column_end":21}}]},{"kind":"Field","id":{"krate":0,"index":9093},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1440844,"byte_end":1440851,"line_start":1006,"line_end":1006,"column_start":23,"column_end":30},"name":"0","qualname":"::ipc::gen::Schema::Endianness::0","value":"i16","parent":{"krate":0,"index":9091},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5239},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1440919,"byte_end":1440925,"line_start":1009,"line_end":1009,"column_start":15,"column_end":21},"name":"Little","qualname":"::ipc::gen::Schema::Endianness::Little","value":"Self","parent":{"krate":0,"index":5238},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5240},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1440957,"byte_end":1440960,"line_start":1010,"line_end":1010,"column_start":15,"column_end":18},"name":"Big","qualname":"::ipc::gen::Schema::Endianness::Big","value":"Self","parent":{"krate":0,"index":5238},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5241},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1440993,"byte_end":1441001,"line_start":1012,"line_end":1012,"column_start":15,"column_end":23},"name":"ENUM_MIN","qualname":"::ipc::gen::Schema::Endianness::ENUM_MIN","value":"i16","parent":{"krate":0,"index":5238},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5242},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1441026,"byte_end":1441034,"line_start":1013,"line_end":1013,"column_start":15,"column_end":23},"name":"ENUM_MAX","qualname":"::ipc::gen::Schema::Endianness::ENUM_MAX","value":"i16","parent":{"krate":0,"index":5238},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5243},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1441059,"byte_end":1441070,"line_start":1014,"line_end":1014,"column_start":15,"column_end":26},"name":"ENUM_VALUES","qualname":"::ipc::gen::Schema::Endianness::ENUM_VALUES","value":"&'static [Self]","parent":{"krate":0,"index":5238},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5244},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1441182,"byte_end":1441194,"line_start":1016,"line_end":1016,"column_start":12,"column_end":24},"name":"variant_name","qualname":"<Endianness>::variant_name","value":"pub fn variant_name(Self) -> Option<&'static str>","parent":null,"children":[],"decl_id":null,"docs":" Returns the variant's name or \"\" if unknown.\n","sig":null,"attributes":[{"value":"/ Returns the variant's name or \"\" if unknown.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1441122,"byte_end":1441170,"line_start":1015,"line_end":1015,"column_start":5,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":9111},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1442952,"byte_end":1442958,"line_start":1080,"line_end":1080,"column_start":12,"column_end":18},"name":"Buffer","qualname":"::ipc::gen::Schema::Buffer","value":"Buffer {  }","parent":null,"children":[{"krate":0,"index":9112},{"krate":0,"index":9113}],"decl_id":null,"docs":" ----------------------------------------------------------------------\n A Buffer represents a single contiguous memory segment\n","sig":null,"attributes":[{"value":"/ ----------------------------------------------------------------------","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1442721,"byte_end":1442795,"line_start":1075,"line_end":1075,"column_start":1,"column_end":75}},{"value":"/ A Buffer represents a single contiguous memory segment","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1442796,"byte_end":1442854,"line_start":1076,"line_end":1076,"column_start":1,"column_end":59}},{"value":"repr(C, align(8))","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1442886,"byte_end":1442906,"line_start":1078,"line_end":1078,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":5295},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1444760,"byte_end":1444763,"line_start":1145,"line_end":1145,"column_start":12,"column_end":15},"name":"new","qualname":"<Buffer>::new","value":"pub fn new(i64, i64) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5296},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1445047,"byte_end":1445053,"line_start":1153,"line_end":1153,"column_start":12,"column_end":18},"name":"offset","qualname":"<Buffer>::offset","value":"pub fn offset(&Self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" The relative offset into the shared memory page where the bytes for this\n buffer starts\n","sig":null,"attributes":[{"value":"/ The relative offset into the shared memory page where the bytes for this","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1444937,"byte_end":1445013,"line_start":1151,"line_end":1151,"column_start":5,"column_end":81}},{"value":"/ buffer starts","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1445018,"byte_end":1445035,"line_start":1152,"line_end":1152,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":5297},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1445479,"byte_end":1445485,"line_start":1161,"line_end":1161,"column_start":12,"column_end":18},"name":"length","qualname":"<Buffer>::length","value":"pub fn length(&Self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" The absolute length (in bytes) of the memory buffer. The memory is found\n from offset (inclusive) to offset + length (non-inclusive). When building\n messages using the encapsulated IPC message, padding bytes may be written\n after a buffer, but such padding bytes do not need to be accounted for in\n the size here.\n","sig":null,"attributes":[{"value":"/ The absolute length (in bytes) of the memory buffer. The memory is found","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1445122,"byte_end":1445198,"line_start":1156,"line_end":1156,"column_start":5,"column_end":81}},{"value":"/ from offset (inclusive) to offset + length (non-inclusive). When building","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1445203,"byte_end":1445280,"line_start":1157,"line_end":1157,"column_start":5,"column_end":82}},{"value":"/ messages using the encapsulated IPC message, padding bytes may be written","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1445285,"byte_end":1445362,"line_start":1158,"line_end":1158,"column_start":5,"column_end":82}},{"value":"/ after a buffer, but such padding bytes do not need to be accounted for in","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1445367,"byte_end":1445444,"line_start":1159,"line_end":1159,"column_start":5,"column_end":82}},{"value":"/ the size here.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1445449,"byte_end":1445467,"line_start":1160,"line_end":1160,"column_start":5,"column_end":23}}]},{"kind":"Enum","id":{"krate":0,"index":5298},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1445562,"byte_end":1445572,"line_start":1166,"line_end":1166,"column_start":10,"column_end":20},"name":"NullOffset","qualname":"::ipc::gen::Schema::NullOffset","value":"pub enum NullOffset { }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":9121},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1445685,"byte_end":1445689,"line_start":1170,"line_end":1170,"column_start":12,"column_end":16},"name":"Null","qualname":"::ipc::gen::Schema::Null","value":"Null { _tab }","parent":null,"children":[{"krate":0,"index":9123}],"decl_id":null,"docs":" These are stored in the flatbuffer in the Type union below\n","sig":null,"attributes":[{"value":"/ These are stored in the flatbuffer in the Type union below","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1445611,"byte_end":1445673,"line_start":1169,"line_end":1169,"column_start":1,"column_end":63}}]},{"kind":"Field","id":{"krate":0,"index":9123},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1445704,"byte_end":1445708,"line_start":1171,"line_end":1171,"column_start":9,"column_end":13},"name":"_tab","qualname":"::ipc::gen::Schema::Null::_tab","value":"flatbuffers::Table<'a>","parent":{"krate":0,"index":9121},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5305},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1446014,"byte_end":1446029,"line_start":1186,"line_end":1186,"column_start":12,"column_end":27},"name":"init_from_table","qualname":"<Null>::init_from_table","value":"pub fn init_from_table(flatbuffers::Table) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1445993,"byte_end":1446002,"line_start":1185,"line_end":1185,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5306},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1446142,"byte_end":1446148,"line_start":1190,"line_end":1190,"column_start":12,"column_end":18},"name":"create","qualname":"<Null>::create","value":"pub fn create<'bldr:'args, 'args:'mut_bldr,\n              'mut_bldr>(&'mut_bldr mut flatbuffers::FlatBufferBuilder,\n                         &'args NullArgs) -> flatbuffers::WIPOffset<Null>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(unused_mut)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1446110,"byte_end":1446130,"line_start":1189,"line_end":1189,"column_start":5,"column_end":25}}]},{"kind":"Struct","id":{"krate":0,"index":5317},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1446741,"byte_end":1446749,"line_start":1210,"line_end":1210,"column_start":12,"column_end":20},"name":"NullArgs","qualname":"::ipc::gen::Schema::NullArgs","value":"NullArgs {  }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5321},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1446865,"byte_end":1446876,"line_start":1217,"line_end":1217,"column_start":12,"column_end":23},"name":"NullBuilder","qualname":"::ipc::gen::Schema::NullBuilder","value":"NullBuilder {  }","parent":null,"children":[{"krate":0,"index":5324},{"krate":0,"index":5325}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5329},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1447086,"byte_end":1447089,"line_start":1223,"line_end":1223,"column_start":12,"column_end":15},"name":"new","qualname":"<NullBuilder>::new","value":"pub fn new(&'b mut flatbuffers::FlatBufferBuilder) -> NullBuilder","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1447065,"byte_end":1447074,"line_start":1222,"line_end":1222,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5330},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1447319,"byte_end":1447325,"line_start":1231,"line_end":1231,"column_start":12,"column_end":18},"name":"finish","qualname":"<NullBuilder>::finish","value":"pub fn finish(Self) -> flatbuffers::WIPOffset<Null>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1447298,"byte_end":1447307,"line_start":1230,"line_end":1230,"column_start":5,"column_end":14}}]},{"kind":"Enum","id":{"krate":0,"index":5333},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1447667,"byte_end":1447680,"line_start":1243,"line_end":1243,"column_start":10,"column_end":23},"name":"Struct_Offset","qualname":"::ipc::gen::Schema::Struct_Offset","value":"pub enum Struct_Offset { }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":9135},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1447918,"byte_end":1447925,"line_start":1249,"line_end":1249,"column_start":12,"column_end":19},"name":"Struct_","qualname":"::ipc::gen::Schema::Struct_","value":"Struct_ { _tab }","parent":null,"children":[{"krate":0,"index":9137}],"decl_id":null,"docs":" A Struct_ in the flatbuffer metadata is the same as an Arrow Struct\n (according to the physical memory layout). We used Struct_ here as\n Struct is a reserved word in Flatbuffers\n","sig":null,"attributes":[{"value":"/ A Struct_ in the flatbuffer metadata is the same as an Arrow Struct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1447719,"byte_end":1447790,"line_start":1246,"line_end":1246,"column_start":1,"column_end":72}},{"value":"/ (according to the physical memory layout). We used Struct_ here as","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1447791,"byte_end":1447861,"line_start":1247,"line_end":1247,"column_start":1,"column_end":71}},{"value":"/ Struct is a reserved word in Flatbuffers","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1447862,"byte_end":1447906,"line_start":1248,"line_end":1248,"column_start":1,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":9137},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1447940,"byte_end":1447944,"line_start":1250,"line_end":1250,"column_start":9,"column_end":13},"name":"_tab","qualname":"::ipc::gen::Schema::Struct_::_tab","value":"flatbuffers::Table<'a>","parent":{"krate":0,"index":9135},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5340},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1448259,"byte_end":1448274,"line_start":1265,"line_end":1265,"column_start":12,"column_end":27},"name":"init_from_table","qualname":"<Struct_>::init_from_table","value":"pub fn init_from_table(flatbuffers::Table) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1448238,"byte_end":1448247,"line_start":1264,"line_end":1264,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5341},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1448390,"byte_end":1448396,"line_start":1269,"line_end":1269,"column_start":12,"column_end":18},"name":"create","qualname":"<Struct_>::create","value":"pub fn create<'bldr:'args, 'args:'mut_bldr,\n              'mut_bldr>(&'mut_bldr mut flatbuffers::FlatBufferBuilder,\n                         &'args Struct_Args)\n-> flatbuffers::WIPOffset<Struct_>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(unused_mut)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1448358,"byte_end":1448378,"line_start":1268,"line_end":1268,"column_start":5,"column_end":25}}]},{"kind":"Struct","id":{"krate":0,"index":5352},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1449001,"byte_end":1449012,"line_start":1289,"line_end":1289,"column_start":12,"column_end":23},"name":"Struct_Args","qualname":"::ipc::gen::Schema::Struct_Args","value":"Struct_Args {  }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5356},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1449134,"byte_end":1449148,"line_start":1296,"line_end":1296,"column_start":12,"column_end":26},"name":"Struct_Builder","qualname":"::ipc::gen::Schema::Struct_Builder","value":"Struct_Builder {  }","parent":null,"children":[{"krate":0,"index":5359},{"krate":0,"index":5360}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5364},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1449361,"byte_end":1449364,"line_start":1302,"line_end":1302,"column_start":12,"column_end":15},"name":"new","qualname":"<Struct_Builder>::new","value":"pub fn new(&'b mut flatbuffers::FlatBufferBuilder) -> Struct_Builder","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1449340,"byte_end":1449349,"line_start":1301,"line_end":1301,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5365},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1449615,"byte_end":1449621,"line_start":1312,"line_end":1312,"column_start":12,"column_end":18},"name":"finish","qualname":"<Struct_Builder>::finish","value":"pub fn finish(Self) -> flatbuffers::WIPOffset<Struct_>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1449594,"byte_end":1449603,"line_start":1311,"line_end":1311,"column_start":5,"column_end":14}}]},{"kind":"Enum","id":{"krate":0,"index":5368},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1449972,"byte_end":1449982,"line_start":1324,"line_end":1324,"column_start":10,"column_end":20},"name":"ListOffset","qualname":"::ipc::gen::Schema::ListOffset","value":"pub enum ListOffset { }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":9149},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1450032,"byte_end":1450036,"line_start":1327,"line_end":1327,"column_start":12,"column_end":16},"name":"List","qualname":"::ipc::gen::Schema::List","value":"List { _tab }","parent":null,"children":[{"krate":0,"index":9151}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9151},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1450051,"byte_end":1450055,"line_start":1328,"line_end":1328,"column_start":9,"column_end":13},"name":"_tab","qualname":"::ipc::gen::Schema::List::_tab","value":"flatbuffers::Table<'a>","parent":{"krate":0,"index":9149},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5375},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1450361,"byte_end":1450376,"line_start":1343,"line_end":1343,"column_start":12,"column_end":27},"name":"init_from_table","qualname":"<List>::init_from_table","value":"pub fn init_from_table(flatbuffers::Table) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1450340,"byte_end":1450349,"line_start":1342,"line_end":1342,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5376},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1450489,"byte_end":1450495,"line_start":1347,"line_end":1347,"column_start":12,"column_end":18},"name":"create","qualname":"<List>::create","value":"pub fn create<'bldr:'args, 'args:'mut_bldr,\n              'mut_bldr>(&'mut_bldr mut flatbuffers::FlatBufferBuilder,\n                         &'args ListArgs) -> flatbuffers::WIPOffset<List>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(unused_mut)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1450457,"byte_end":1450477,"line_start":1346,"line_end":1346,"column_start":5,"column_end":25}}]},{"kind":"Struct","id":{"krate":0,"index":5387},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1451088,"byte_end":1451096,"line_start":1367,"line_end":1367,"column_start":12,"column_end":20},"name":"ListArgs","qualname":"::ipc::gen::Schema::ListArgs","value":"ListArgs {  }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5391},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1451212,"byte_end":1451223,"line_start":1374,"line_end":1374,"column_start":12,"column_end":23},"name":"ListBuilder","qualname":"::ipc::gen::Schema::ListBuilder","value":"ListBuilder {  }","parent":null,"children":[{"krate":0,"index":5394},{"krate":0,"index":5395}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5399},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1451433,"byte_end":1451436,"line_start":1380,"line_end":1380,"column_start":12,"column_end":15},"name":"new","qualname":"<ListBuilder>::new","value":"pub fn new(&'b mut flatbuffers::FlatBufferBuilder) -> ListBuilder","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1451412,"byte_end":1451421,"line_start":1379,"line_end":1379,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5400},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1451666,"byte_end":1451672,"line_start":1388,"line_end":1388,"column_start":12,"column_end":18},"name":"finish","qualname":"<ListBuilder>::finish","value":"pub fn finish(Self) -> flatbuffers::WIPOffset<List>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1451645,"byte_end":1451654,"line_start":1387,"line_end":1387,"column_start":5,"column_end":14}}]},{"kind":"Enum","id":{"krate":0,"index":5403},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1452014,"byte_end":1452029,"line_start":1400,"line_end":1400,"column_start":10,"column_end":25},"name":"LargeListOffset","qualname":"::ipc::gen::Schema::LargeListOffset","value":"pub enum LargeListOffset { }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":9163},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1452177,"byte_end":1452186,"line_start":1405,"line_end":1405,"column_start":12,"column_end":21},"name":"LargeList","qualname":"::ipc::gen::Schema::LargeList","value":"LargeList { _tab }","parent":null,"children":[{"krate":0,"index":9165}],"decl_id":null,"docs":" Same as List, but with 64-bit offsets, allowing to represent\n extremely large data values.\n","sig":null,"attributes":[{"value":"/ Same as List, but with 64-bit offsets, allowing to represent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1452068,"byte_end":1452132,"line_start":1403,"line_end":1403,"column_start":1,"column_end":65}},{"value":"/ extremely large data values.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1452133,"byte_end":1452165,"line_start":1404,"line_end":1404,"column_start":1,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":9165},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1452201,"byte_end":1452205,"line_start":1406,"line_end":1406,"column_start":9,"column_end":13},"name":"_tab","qualname":"::ipc::gen::Schema::LargeList::_tab","value":"flatbuffers::Table<'a>","parent":{"krate":0,"index":9163},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5410},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1452526,"byte_end":1452541,"line_start":1421,"line_end":1421,"column_start":12,"column_end":27},"name":"init_from_table","qualname":"<LargeList>::init_from_table","value":"pub fn init_from_table(flatbuffers::Table) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1452505,"byte_end":1452514,"line_start":1420,"line_end":1420,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5411},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1452659,"byte_end":1452665,"line_start":1425,"line_end":1425,"column_start":12,"column_end":18},"name":"create","qualname":"<LargeList>::create","value":"pub fn create<'bldr:'args, 'args:'mut_bldr,\n              'mut_bldr>(&'mut_bldr mut flatbuffers::FlatBufferBuilder,\n                         &'args LargeListArgs)\n-> flatbuffers::WIPOffset<LargeList>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(unused_mut)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1452627,"byte_end":1452647,"line_start":1424,"line_end":1424,"column_start":5,"column_end":25}}]},{"kind":"Struct","id":{"krate":0,"index":5422},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1453278,"byte_end":1453291,"line_start":1445,"line_end":1445,"column_start":12,"column_end":25},"name":"LargeListArgs","qualname":"::ipc::gen::Schema::LargeListArgs","value":"LargeListArgs {  }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5426},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1453417,"byte_end":1453433,"line_start":1452,"line_end":1452,"column_start":12,"column_end":28},"name":"LargeListBuilder","qualname":"::ipc::gen::Schema::LargeListBuilder","value":"LargeListBuilder {  }","parent":null,"children":[{"krate":0,"index":5429},{"krate":0,"index":5430}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5434},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1453648,"byte_end":1453651,"line_start":1458,"line_end":1458,"column_start":12,"column_end":15},"name":"new","qualname":"<LargeListBuilder>::new","value":"pub fn new(&'b mut flatbuffers::FlatBufferBuilder) -> LargeListBuilder","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1453627,"byte_end":1453636,"line_start":1457,"line_end":1457,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5435},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1453906,"byte_end":1453912,"line_start":1468,"line_end":1468,"column_start":12,"column_end":18},"name":"finish","qualname":"<LargeListBuilder>::finish","value":"pub fn finish(Self) -> flatbuffers::WIPOffset<LargeList>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1453885,"byte_end":1453894,"line_start":1467,"line_end":1467,"column_start":5,"column_end":14}}]},{"kind":"Enum","id":{"krate":0,"index":5438},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1454269,"byte_end":1454288,"line_start":1480,"line_end":1480,"column_start":10,"column_end":29},"name":"FixedSizeListOffset","qualname":"::ipc::gen::Schema::FixedSizeListOffset","value":"pub enum FixedSizeListOffset { }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":9177},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1454338,"byte_end":1454351,"line_start":1483,"line_end":1483,"column_start":12,"column_end":25},"name":"FixedSizeList","qualname":"::ipc::gen::Schema::FixedSizeList","value":"FixedSizeList { _tab }","parent":null,"children":[{"krate":0,"index":9179}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9179},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1454366,"byte_end":1454370,"line_start":1484,"line_end":1484,"column_start":9,"column_end":13},"name":"_tab","qualname":"::ipc::gen::Schema::FixedSizeList::_tab","value":"flatbuffers::Table<'a>","parent":{"krate":0,"index":9177},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5445},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1454703,"byte_end":1454718,"line_start":1499,"line_end":1499,"column_start":12,"column_end":27},"name":"init_from_table","qualname":"<FixedSizeList>::init_from_table","value":"pub fn init_from_table(flatbuffers::Table) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1454682,"byte_end":1454691,"line_start":1498,"line_end":1498,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5446},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1454840,"byte_end":1454846,"line_start":1503,"line_end":1503,"column_start":12,"column_end":18},"name":"create","qualname":"<FixedSizeList>::create","value":"pub fn create<'bldr:'args, 'args:'mut_bldr,\n              'mut_bldr>(&'mut_bldr mut flatbuffers::FlatBufferBuilder,\n                         &'args FixedSizeListArgs)\n-> flatbuffers::WIPOffset<FixedSizeList>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(unused_mut)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1454808,"byte_end":1454828,"line_start":1502,"line_end":1502,"column_start":5,"column_end":25}}]},{"kind":"Const","id":{"krate":0,"index":5450},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1455205,"byte_end":1455216,"line_start":1512,"line_end":1512,"column_start":15,"column_end":26},"name":"VT_LISTSIZE","qualname":"::ipc::gen::Schema::FixedSizeList::<'a>::VT_LISTSIZE","value":"flatbuffers::VOffsetT","parent":{"krate":0,"index":5443},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5451},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1455310,"byte_end":1455318,"line_start":1516,"line_end":1516,"column_start":12,"column_end":20},"name":"listSize","qualname":"<FixedSizeList>::listSize","value":"pub fn listSize(&Self) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Number of list items per value\n","sig":null,"attributes":[{"value":"/ Number of list items per value","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1455250,"byte_end":1455284,"line_start":1514,"line_end":1514,"column_start":5,"column_end":39}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1455289,"byte_end":1455298,"line_start":1515,"line_end":1515,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":5459},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1455856,"byte_end":1455873,"line_start":1536,"line_end":1536,"column_start":12,"column_end":29},"name":"FixedSizeListArgs","qualname":"::ipc::gen::Schema::FixedSizeListArgs","value":"FixedSizeListArgs { listSize }","parent":null,"children":[{"krate":0,"index":5460}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":5460},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1455884,"byte_end":1455892,"line_start":1537,"line_end":1537,"column_start":9,"column_end":17},"name":"listSize","qualname":"::ipc::gen::Schema::FixedSizeListArgs::listSize","value":"i32","parent":{"krate":0,"index":5459},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5464},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1456044,"byte_end":1456064,"line_start":1545,"line_end":1545,"column_start":12,"column_end":32},"name":"FixedSizeListBuilder","qualname":"::ipc::gen::Schema::FixedSizeListBuilder","value":"FixedSizeListBuilder {  }","parent":null,"children":[{"krate":0,"index":5467},{"krate":0,"index":5468}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5472},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1456283,"byte_end":1456295,"line_start":1551,"line_end":1551,"column_start":12,"column_end":24},"name":"add_listSize","qualname":"<FixedSizeListBuilder>::add_listSize","value":"pub fn add_listSize(&mut Self, i32)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1456262,"byte_end":1456271,"line_start":1550,"line_end":1550,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5473},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1456445,"byte_end":1456448,"line_start":1556,"line_end":1556,"column_start":12,"column_end":15},"name":"new","qualname":"<FixedSizeListBuilder>::new","value":"pub fn new(&'b mut flatbuffers::FlatBufferBuilder) -> FixedSizeListBuilder","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1456424,"byte_end":1456433,"line_start":1555,"line_end":1555,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5474},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1456711,"byte_end":1456717,"line_start":1566,"line_end":1566,"column_start":12,"column_end":18},"name":"finish","qualname":"<FixedSizeListBuilder>::finish","value":"pub fn finish(Self) -> flatbuffers::WIPOffset<FixedSizeList>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1456690,"byte_end":1456699,"line_start":1565,"line_end":1565,"column_start":5,"column_end":14}}]},{"kind":"Enum","id":{"krate":0,"index":5477},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1457134,"byte_end":1457143,"line_start":1579,"line_end":1579,"column_start":10,"column_end":19},"name":"MapOffset","qualname":"::ipc::gen::Schema::MapOffset","value":"pub enum MapOffset { }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":9191},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1458247,"byte_end":1458250,"line_start":1607,"line_end":1607,"column_start":12,"column_end":15},"name":"Map","qualname":"::ipc::gen::Schema::Map","value":"Map { _tab }","parent":null,"children":[{"krate":0,"index":9193}],"decl_id":null,"docs":" A Map is a logical nested type that is represented as","sig":null,"attributes":[{"value":"/ A Map is a logical nested type that is represented as","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1457182,"byte_end":1457239,"line_start":1582,"line_end":1582,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1457240,"byte_end":1457243,"line_start":1583,"line_end":1583,"column_start":1,"column_end":4}},{"value":"/ List<entries: Struct<key: K, value: V>>","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1457244,"byte_end":1457287,"line_start":1584,"line_end":1584,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1457288,"byte_end":1457291,"line_start":1585,"line_end":1585,"column_start":1,"column_end":4}},{"value":"/ In this layout, the keys and values are each respectively contiguous. We do","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1457292,"byte_end":1457371,"line_start":1586,"line_end":1586,"column_start":1,"column_end":80}},{"value":"/ not constrain the key and value types, so the application is responsible","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1457372,"byte_end":1457448,"line_start":1587,"line_end":1587,"column_start":1,"column_end":77}},{"value":"/ for ensuring that the keys are hashable and unique. Whether the keys are sorted","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1457449,"byte_end":1457532,"line_start":1588,"line_end":1588,"column_start":1,"column_end":84}},{"value":"/ may be set in the metadata for this field.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1457533,"byte_end":1457579,"line_start":1589,"line_end":1589,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1457580,"byte_end":1457583,"line_start":1590,"line_end":1590,"column_start":1,"column_end":4}},{"value":"/ In a field with Map type, the field has a child Struct field, which then","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1457584,"byte_end":1457660,"line_start":1591,"line_end":1591,"column_start":1,"column_end":77}},{"value":"/ has two children: key type and the second the value type. The names of the","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1457661,"byte_end":1457739,"line_start":1592,"line_end":1592,"column_start":1,"column_end":79}},{"value":"/ child fields may be respectively \"entries\", \"key\", and \"value\", but this is","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1457740,"byte_end":1457819,"line_start":1593,"line_end":1593,"column_start":1,"column_end":80}},{"value":"/ not enforced.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1457820,"byte_end":1457837,"line_start":1594,"line_end":1594,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1457838,"byte_end":1457841,"line_start":1595,"line_end":1595,"column_start":1,"column_end":4}},{"value":"/ Map","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1457842,"byte_end":1457849,"line_start":1596,"line_end":1596,"column_start":1,"column_end":8}},{"value":"/ ```text","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1457850,"byte_end":1457861,"line_start":1597,"line_end":1597,"column_start":1,"column_end":12}},{"value":"/   - child[0] entries: Struct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1457862,"byte_end":1457894,"line_start":1598,"line_end":1598,"column_start":1,"column_end":33}},{"value":"/     - child[0] key: K","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1457895,"byte_end":1457920,"line_start":1599,"line_end":1599,"column_start":1,"column_end":26}},{"value":"/     - child[1] value: V","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1457921,"byte_end":1457948,"line_start":1600,"line_end":1600,"column_start":1,"column_end":28}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1457949,"byte_end":1457956,"line_start":1601,"line_end":1601,"column_start":1,"column_end":8}},{"value":"/ Neither the \"entries\" field nor the \"key\" field may be nullable.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1457957,"byte_end":1458025,"line_start":1602,"line_end":1602,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1458026,"byte_end":1458029,"line_start":1603,"line_end":1603,"column_start":1,"column_end":4}},{"value":"/ The metadata is structured so that Arrow systems without special handling","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1458030,"byte_end":1458107,"line_start":1604,"line_end":1604,"column_start":1,"column_end":78}},{"value":"/ for Map can make Map an alias for List. The \"layout\" attribute for the Map","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1458108,"byte_end":1458186,"line_start":1605,"line_end":1605,"column_start":1,"column_end":79}},{"value":"/ field must have the same contents as a List.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1458187,"byte_end":1458235,"line_start":1606,"line_end":1606,"column_start":1,"column_end":49}}]},{"kind":"Field","id":{"krate":0,"index":9193},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1458265,"byte_end":1458269,"line_start":1608,"line_end":1608,"column_start":9,"column_end":13},"name":"_tab","qualname":"::ipc::gen::Schema::Map::_tab","value":"flatbuffers::Table<'a>","parent":{"krate":0,"index":9191},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5484},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1458572,"byte_end":1458587,"line_start":1623,"line_end":1623,"column_start":12,"column_end":27},"name":"init_from_table","qualname":"<Map>::init_from_table","value":"pub fn init_from_table(flatbuffers::Table) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1458551,"byte_end":1458560,"line_start":1622,"line_end":1622,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5485},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1458699,"byte_end":1458705,"line_start":1627,"line_end":1627,"column_start":12,"column_end":18},"name":"create","qualname":"<Map>::create","value":"pub fn create<'bldr:'args, 'args:'mut_bldr,\n              'mut_bldr>(&'mut_bldr mut flatbuffers::FlatBufferBuilder,\n                         &'args MapArgs) -> flatbuffers::WIPOffset<Map>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(unused_mut)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1458667,"byte_end":1458687,"line_start":1626,"line_end":1626,"column_start":5,"column_end":25}}]},{"kind":"Const","id":{"krate":0,"index":5489},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1459038,"byte_end":1459051,"line_start":1636,"line_end":1636,"column_start":15,"column_end":28},"name":"VT_KEYSSORTED","qualname":"::ipc::gen::Schema::Map::<'a>::VT_KEYSSORTED","value":"flatbuffers::VOffsetT","parent":{"krate":0,"index":5482},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5490},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1459167,"byte_end":1459177,"line_start":1640,"line_end":1640,"column_start":12,"column_end":22},"name":"keysSorted","qualname":"<Map>::keysSorted","value":"pub fn keysSorted(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Set to true if the keys within each value are sorted\n","sig":null,"attributes":[{"value":"/ Set to true if the keys within each value are sorted","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1459085,"byte_end":1459141,"line_start":1638,"line_end":1638,"column_start":5,"column_end":61}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1459146,"byte_end":1459155,"line_start":1639,"line_end":1639,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":5498},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1459708,"byte_end":1459715,"line_start":1660,"line_end":1660,"column_start":12,"column_end":19},"name":"MapArgs","qualname":"::ipc::gen::Schema::MapArgs","value":"MapArgs { keysSorted }","parent":null,"children":[{"krate":0,"index":5499}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":5499},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1459726,"byte_end":1459736,"line_start":1661,"line_end":1661,"column_start":9,"column_end":19},"name":"keysSorted","qualname":"::ipc::gen::Schema::MapArgs::keysSorted","value":"bool","parent":{"krate":0,"index":5498},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5503},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1459875,"byte_end":1459885,"line_start":1669,"line_end":1669,"column_start":12,"column_end":22},"name":"MapBuilder","qualname":"::ipc::gen::Schema::MapBuilder","value":"MapBuilder {  }","parent":null,"children":[{"krate":0,"index":5506},{"krate":0,"index":5507}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5511},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1460094,"byte_end":1460108,"line_start":1675,"line_end":1675,"column_start":12,"column_end":26},"name":"add_keysSorted","qualname":"<MapBuilder>::add_keysSorted","value":"pub fn add_keysSorted(&mut Self, bool)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1460073,"byte_end":1460082,"line_start":1674,"line_end":1674,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5512},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1460260,"byte_end":1460263,"line_start":1680,"line_end":1680,"column_start":12,"column_end":15},"name":"new","qualname":"<MapBuilder>::new","value":"pub fn new(&'b mut flatbuffers::FlatBufferBuilder) -> MapBuilder","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1460239,"byte_end":1460248,"line_start":1679,"line_end":1679,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5513},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1460491,"byte_end":1460497,"line_start":1688,"line_end":1688,"column_start":12,"column_end":18},"name":"finish","qualname":"<MapBuilder>::finish","value":"pub fn finish(Self) -> flatbuffers::WIPOffset<Map>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1460470,"byte_end":1460479,"line_start":1687,"line_end":1687,"column_start":5,"column_end":14}}]},{"kind":"Enum","id":{"krate":0,"index":5516},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1460888,"byte_end":1460899,"line_start":1701,"line_end":1701,"column_start":10,"column_end":21},"name":"UnionOffset","qualname":"::ipc::gen::Schema::UnionOffset","value":"pub enum UnionOffset { }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":9205},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1461236,"byte_end":1461241,"line_start":1708,"line_end":1708,"column_start":12,"column_end":17},"name":"Union","qualname":"::ipc::gen::Schema::Union","value":"Union { _tab }","parent":null,"children":[{"krate":0,"index":9207}],"decl_id":null,"docs":" A union is a complex type with children in Field\n By default ids in the type vector refer to the offsets in the children\n optionally typeIds provides an indirection between the child offset and the type id\n for each child `typeIds[offset]` is the id used in the type vector\n","sig":null,"attributes":[{"value":"/ A union is a complex type with children in Field","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1460938,"byte_end":1460990,"line_start":1704,"line_end":1704,"column_start":1,"column_end":53}},{"value":"/ By default ids in the type vector refer to the offsets in the children","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1460991,"byte_end":1461065,"line_start":1705,"line_end":1705,"column_start":1,"column_end":75}},{"value":"/ optionally typeIds provides an indirection between the child offset and the type id","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1461066,"byte_end":1461153,"line_start":1706,"line_end":1706,"column_start":1,"column_end":88}},{"value":"/ for each child `typeIds[offset]` is the id used in the type vector","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1461154,"byte_end":1461224,"line_start":1707,"line_end":1707,"column_start":1,"column_end":71}}]},{"kind":"Field","id":{"krate":0,"index":9207},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1461256,"byte_end":1461260,"line_start":1709,"line_end":1709,"column_start":9,"column_end":13},"name":"_tab","qualname":"::ipc::gen::Schema::Union::_tab","value":"flatbuffers::Table<'a>","parent":{"krate":0,"index":9205},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5523},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1461569,"byte_end":1461584,"line_start":1724,"line_end":1724,"column_start":12,"column_end":27},"name":"init_from_table","qualname":"<Union>::init_from_table","value":"pub fn init_from_table(flatbuffers::Table) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1461548,"byte_end":1461557,"line_start":1723,"line_end":1723,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5524},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1461698,"byte_end":1461704,"line_start":1728,"line_end":1728,"column_start":12,"column_end":18},"name":"create","qualname":"<Union>::create","value":"pub fn create<'bldr:'args, 'args:'mut_bldr,\n              'mut_bldr>(&'mut_bldr mut flatbuffers::FlatBufferBuilder,\n                         &'args UnionArgs) -> flatbuffers::WIPOffset<Union>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(unused_mut)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1461666,"byte_end":1461686,"line_start":1727,"line_end":1727,"column_start":5,"column_end":25}}]},{"kind":"Const","id":{"krate":0,"index":5528},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1462124,"byte_end":1462131,"line_start":1740,"line_end":1740,"column_start":15,"column_end":22},"name":"VT_MODE","qualname":"::ipc::gen::Schema::Union::<'a>::VT_MODE","value":"flatbuffers::VOffsetT","parent":{"krate":0,"index":5521},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5529},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1462174,"byte_end":1462184,"line_start":1741,"line_end":1741,"column_start":15,"column_end":25},"name":"VT_TYPEIDS","qualname":"::ipc::gen::Schema::Union::<'a>::VT_TYPEIDS","value":"flatbuffers::VOffsetT","parent":{"krate":0,"index":5521},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5530},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1462239,"byte_end":1462243,"line_start":1744,"line_end":1744,"column_start":12,"column_end":16},"name":"mode","qualname":"<Union>::mode","value":"pub fn mode(&Self) -> UnionMode","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1462218,"byte_end":1462227,"line_start":1743,"line_end":1743,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5531},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1462408,"byte_end":1462415,"line_start":1750,"line_end":1750,"column_start":12,"column_end":19},"name":"typeIds","qualname":"<Union>::typeIds","value":"pub fn typeIds(&Self) -> Option<flatbuffers::Vector>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1462387,"byte_end":1462396,"line_start":1749,"line_end":1749,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":5539},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1463232,"byte_end":1463241,"line_start":1777,"line_end":1777,"column_start":12,"column_end":21},"name":"UnionArgs","qualname":"::ipc::gen::Schema::UnionArgs","value":"UnionArgs { mode, typeIds }","parent":null,"children":[{"krate":0,"index":5541},{"krate":0,"index":5542}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":5541},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1463256,"byte_end":1463260,"line_start":1778,"line_end":1778,"column_start":9,"column_end":13},"name":"mode","qualname":"::ipc::gen::Schema::UnionArgs::mode","value":"ipc::gen::Schema::UnionMode","parent":{"krate":0,"index":5539},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":5542},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1463281,"byte_end":1463288,"line_start":1779,"line_end":1779,"column_start":9,"column_end":16},"name":"typeIds","qualname":"::ipc::gen::Schema::UnionArgs::typeIds","value":"std::option::Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>","parent":{"krate":0,"index":5539},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5546},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1463545,"byte_end":1463557,"line_start":1790,"line_end":1790,"column_start":12,"column_end":24},"name":"UnionBuilder","qualname":"::ipc::gen::Schema::UnionBuilder","value":"UnionBuilder {  }","parent":null,"children":[{"krate":0,"index":5549},{"krate":0,"index":5550}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5554},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1463768,"byte_end":1463776,"line_start":1796,"line_end":1796,"column_start":12,"column_end":20},"name":"add_mode","qualname":"<UnionBuilder>::add_mode","value":"pub fn add_mode(&mut Self, UnionMode)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1463747,"byte_end":1463756,"line_start":1795,"line_end":1795,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5555},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1463934,"byte_end":1463945,"line_start":1801,"line_end":1801,"column_start":12,"column_end":23},"name":"add_typeIds","qualname":"<UnionBuilder>::add_typeIds","value":"pub fn add_typeIds(&mut Self, flatbuffers::WIPOffset<flatbuffers::Vector>)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1463913,"byte_end":1463922,"line_start":1800,"line_end":1800,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5556},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1464182,"byte_end":1464185,"line_start":1809,"line_end":1809,"column_start":12,"column_end":15},"name":"new","qualname":"<UnionBuilder>::new","value":"pub fn new(&'b mut flatbuffers::FlatBufferBuilder) -> UnionBuilder","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1464161,"byte_end":1464170,"line_start":1808,"line_end":1808,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5557},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1464417,"byte_end":1464423,"line_start":1817,"line_end":1817,"column_start":12,"column_end":18},"name":"finish","qualname":"<UnionBuilder>::finish","value":"pub fn finish(Self) -> flatbuffers::WIPOffset<Union>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1464396,"byte_end":1464405,"line_start":1816,"line_end":1816,"column_start":5,"column_end":14}}]},{"kind":"Enum","id":{"krate":0,"index":5560},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1464854,"byte_end":1464863,"line_start":1831,"line_end":1831,"column_start":10,"column_end":19},"name":"IntOffset","qualname":"::ipc::gen::Schema::IntOffset","value":"pub enum IntOffset { }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":9219},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1464913,"byte_end":1464916,"line_start":1834,"line_end":1834,"column_start":12,"column_end":15},"name":"Int","qualname":"::ipc::gen::Schema::Int","value":"Int { _tab }","parent":null,"children":[{"krate":0,"index":9221}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9221},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1464931,"byte_end":1464935,"line_start":1835,"line_end":1835,"column_start":9,"column_end":13},"name":"_tab","qualname":"::ipc::gen::Schema::Int::_tab","value":"flatbuffers::Table<'a>","parent":{"krate":0,"index":9219},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5567},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1465238,"byte_end":1465253,"line_start":1850,"line_end":1850,"column_start":12,"column_end":27},"name":"init_from_table","qualname":"<Int>::init_from_table","value":"pub fn init_from_table(flatbuffers::Table) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1465217,"byte_end":1465226,"line_start":1849,"line_end":1849,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5568},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1465365,"byte_end":1465371,"line_start":1854,"line_end":1854,"column_start":12,"column_end":18},"name":"create","qualname":"<Int>::create","value":"pub fn create<'bldr:'args, 'args:'mut_bldr,\n              'mut_bldr>(&'mut_bldr mut flatbuffers::FlatBufferBuilder,\n                         &'args IntArgs) -> flatbuffers::WIPOffset<Int>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(unused_mut)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1465333,"byte_end":1465353,"line_start":1853,"line_end":1853,"column_start":5,"column_end":25}}]},{"kind":"Const","id":{"krate":0,"index":5572},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1465747,"byte_end":1465758,"line_start":1864,"line_end":1864,"column_start":15,"column_end":26},"name":"VT_BITWIDTH","qualname":"::ipc::gen::Schema::Int::<'a>::VT_BITWIDTH","value":"flatbuffers::VOffsetT","parent":{"krate":0,"index":5565},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5573},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1465801,"byte_end":1465813,"line_start":1865,"line_end":1865,"column_start":15,"column_end":27},"name":"VT_IS_SIGNED","qualname":"::ipc::gen::Schema::Int::<'a>::VT_IS_SIGNED","value":"flatbuffers::VOffsetT","parent":{"krate":0,"index":5565},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5574},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1465868,"byte_end":1465876,"line_start":1868,"line_end":1868,"column_start":12,"column_end":20},"name":"bitWidth","qualname":"<Int>::bitWidth","value":"pub fn bitWidth(&Self) -> i32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1465847,"byte_end":1465856,"line_start":1867,"line_end":1867,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5575},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1465989,"byte_end":1465998,"line_start":1872,"line_end":1872,"column_start":12,"column_end":21},"name":"is_signed","qualname":"<Int>::is_signed","value":"pub fn is_signed(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1465968,"byte_end":1465977,"line_start":1871,"line_end":1871,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":5583},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1466598,"byte_end":1466605,"line_start":1893,"line_end":1893,"column_start":12,"column_end":19},"name":"IntArgs","qualname":"::ipc::gen::Schema::IntArgs","value":"IntArgs { bitWidth, is_signed }","parent":null,"children":[{"krate":0,"index":5584},{"krate":0,"index":5585}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":5584},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1466616,"byte_end":1466624,"line_start":1894,"line_end":1894,"column_start":9,"column_end":17},"name":"bitWidth","qualname":"::ipc::gen::Schema::IntArgs::bitWidth","value":"i32","parent":{"krate":0,"index":5583},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":5585},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1466639,"byte_end":1466648,"line_start":1895,"line_end":1895,"column_start":9,"column_end":18},"name":"is_signed","qualname":"::ipc::gen::Schema::IntArgs::is_signed","value":"bool","parent":{"krate":0,"index":5583},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5589},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1466832,"byte_end":1466842,"line_start":1906,"line_end":1906,"column_start":12,"column_end":22},"name":"IntBuilder","qualname":"::ipc::gen::Schema::IntBuilder","value":"IntBuilder {  }","parent":null,"children":[{"krate":0,"index":5592},{"krate":0,"index":5593}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5597},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1467051,"byte_end":1467063,"line_start":1912,"line_end":1912,"column_start":12,"column_end":24},"name":"add_bitWidth","qualname":"<IntBuilder>::add_bitWidth","value":"pub fn add_bitWidth(&mut Self, i32)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1467030,"byte_end":1467039,"line_start":1911,"line_end":1911,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5598},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1467190,"byte_end":1467203,"line_start":1916,"line_end":1916,"column_start":12,"column_end":25},"name":"add_is_signed","qualname":"<IntBuilder>::add_is_signed","value":"pub fn add_is_signed(&mut Self, bool)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1467169,"byte_end":1467178,"line_start":1915,"line_end":1915,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5599},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1467352,"byte_end":1467355,"line_start":1921,"line_end":1921,"column_start":12,"column_end":15},"name":"new","qualname":"<IntBuilder>::new","value":"pub fn new(&'b mut flatbuffers::FlatBufferBuilder) -> IntBuilder","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1467331,"byte_end":1467340,"line_start":1920,"line_end":1920,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5600},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1467583,"byte_end":1467589,"line_start":1929,"line_end":1929,"column_start":12,"column_end":18},"name":"finish","qualname":"<IntBuilder>::finish","value":"pub fn finish(Self) -> flatbuffers::WIPOffset<Int>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1467562,"byte_end":1467571,"line_start":1928,"line_end":1928,"column_start":5,"column_end":14}}]},{"kind":"Enum","id":{"krate":0,"index":5603},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1468026,"byte_end":1468045,"line_start":1943,"line_end":1943,"column_start":10,"column_end":29},"name":"FloatingPointOffset","qualname":"::ipc::gen::Schema::FloatingPointOffset","value":"pub enum FloatingPointOffset { }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":9233},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1468095,"byte_end":1468108,"line_start":1946,"line_end":1946,"column_start":12,"column_end":25},"name":"FloatingPoint","qualname":"::ipc::gen::Schema::FloatingPoint","value":"FloatingPoint { _tab }","parent":null,"children":[{"krate":0,"index":9235}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9235},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1468123,"byte_end":1468127,"line_start":1947,"line_end":1947,"column_start":9,"column_end":13},"name":"_tab","qualname":"::ipc::gen::Schema::FloatingPoint::_tab","value":"flatbuffers::Table<'a>","parent":{"krate":0,"index":9233},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5610},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1468460,"byte_end":1468475,"line_start":1962,"line_end":1962,"column_start":12,"column_end":27},"name":"init_from_table","qualname":"<FloatingPoint>::init_from_table","value":"pub fn init_from_table(flatbuffers::Table) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1468439,"byte_end":1468448,"line_start":1961,"line_end":1961,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5611},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1468597,"byte_end":1468603,"line_start":1966,"line_end":1966,"column_start":12,"column_end":18},"name":"create","qualname":"<FloatingPoint>::create","value":"pub fn create<'bldr:'args, 'args:'mut_bldr,\n              'mut_bldr>(&'mut_bldr mut flatbuffers::FlatBufferBuilder,\n                         &'args FloatingPointArgs)\n-> flatbuffers::WIPOffset<FloatingPoint>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(unused_mut)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1468565,"byte_end":1468585,"line_start":1965,"line_end":1965,"column_start":5,"column_end":25}}]},{"kind":"Const","id":{"krate":0,"index":5615},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1468964,"byte_end":1468976,"line_start":1975,"line_end":1975,"column_start":15,"column_end":27},"name":"VT_PRECISION","qualname":"::ipc::gen::Schema::FloatingPoint::<'a>::VT_PRECISION","value":"flatbuffers::VOffsetT","parent":{"krate":0,"index":5608},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5616},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1469031,"byte_end":1469040,"line_start":1978,"line_end":1978,"column_start":12,"column_end":21},"name":"precision","qualname":"<FloatingPoint>::precision","value":"pub fn precision(&Self) -> Precision","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1469010,"byte_end":1469019,"line_start":1977,"line_end":1977,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":5624},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1469613,"byte_end":1469630,"line_start":1998,"line_end":1998,"column_start":12,"column_end":29},"name":"FloatingPointArgs","qualname":"::ipc::gen::Schema::FloatingPointArgs","value":"FloatingPointArgs { precision }","parent":null,"children":[{"krate":0,"index":5625}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":5625},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1469641,"byte_end":1469650,"line_start":1999,"line_end":1999,"column_start":9,"column_end":18},"name":"precision","qualname":"::ipc::gen::Schema::FloatingPointArgs::precision","value":"ipc::gen::Schema::Precision","parent":{"krate":0,"index":5624},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5629},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1469844,"byte_end":1469864,"line_start":2009,"line_end":2009,"column_start":12,"column_end":32},"name":"FloatingPointBuilder","qualname":"::ipc::gen::Schema::FloatingPointBuilder","value":"FloatingPointBuilder {  }","parent":null,"children":[{"krate":0,"index":5632},{"krate":0,"index":5633}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5637},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1470083,"byte_end":1470096,"line_start":2015,"line_end":2015,"column_start":12,"column_end":25},"name":"add_precision","qualname":"<FloatingPointBuilder>::add_precision","value":"pub fn add_precision(&mut Self, Precision)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1470062,"byte_end":1470071,"line_start":2014,"line_end":2014,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5638},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1470309,"byte_end":1470312,"line_start":2023,"line_end":2023,"column_start":12,"column_end":15},"name":"new","qualname":"<FloatingPointBuilder>::new","value":"pub fn new(&'b mut flatbuffers::FlatBufferBuilder) -> FloatingPointBuilder","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1470288,"byte_end":1470297,"line_start":2022,"line_end":2022,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5639},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1470575,"byte_end":1470581,"line_start":2033,"line_end":2033,"column_start":12,"column_end":18},"name":"finish","qualname":"<FloatingPointBuilder>::finish","value":"pub fn finish(Self) -> flatbuffers::WIPOffset<FloatingPoint>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1470554,"byte_end":1470563,"line_start":2032,"line_end":2032,"column_start":5,"column_end":14}}]},{"kind":"Enum","id":{"krate":0,"index":5642},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1471000,"byte_end":1471010,"line_start":2046,"line_end":2046,"column_start":10,"column_end":20},"name":"Utf8Offset","qualname":"::ipc::gen::Schema::Utf8Offset","value":"pub enum Utf8Offset { }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":9247},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1471092,"byte_end":1471096,"line_start":2050,"line_end":2050,"column_start":12,"column_end":16},"name":"Utf8","qualname":"::ipc::gen::Schema::Utf8","value":"Utf8 { _tab }","parent":null,"children":[{"krate":0,"index":9249}],"decl_id":null,"docs":" Unicode with UTF-8 encoding\n","sig":null,"attributes":[{"value":"/ Unicode with UTF-8 encoding","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1471049,"byte_end":1471080,"line_start":2049,"line_end":2049,"column_start":1,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":9249},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1471111,"byte_end":1471115,"line_start":2051,"line_end":2051,"column_start":9,"column_end":13},"name":"_tab","qualname":"::ipc::gen::Schema::Utf8::_tab","value":"flatbuffers::Table<'a>","parent":{"krate":0,"index":9247},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5649},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1471421,"byte_end":1471436,"line_start":2066,"line_end":2066,"column_start":12,"column_end":27},"name":"init_from_table","qualname":"<Utf8>::init_from_table","value":"pub fn init_from_table(flatbuffers::Table) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1471400,"byte_end":1471409,"line_start":2065,"line_end":2065,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5650},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1471549,"byte_end":1471555,"line_start":2070,"line_end":2070,"column_start":12,"column_end":18},"name":"create","qualname":"<Utf8>::create","value":"pub fn create<'bldr:'args, 'args:'mut_bldr,\n              'mut_bldr>(&'mut_bldr mut flatbuffers::FlatBufferBuilder,\n                         &'args Utf8Args) -> flatbuffers::WIPOffset<Utf8>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(unused_mut)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1471517,"byte_end":1471537,"line_start":2069,"line_end":2069,"column_start":5,"column_end":25}}]},{"kind":"Struct","id":{"krate":0,"index":5661},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1472148,"byte_end":1472156,"line_start":2090,"line_end":2090,"column_start":12,"column_end":20},"name":"Utf8Args","qualname":"::ipc::gen::Schema::Utf8Args","value":"Utf8Args {  }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5665},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1472272,"byte_end":1472283,"line_start":2097,"line_end":2097,"column_start":12,"column_end":23},"name":"Utf8Builder","qualname":"::ipc::gen::Schema::Utf8Builder","value":"Utf8Builder {  }","parent":null,"children":[{"krate":0,"index":5668},{"krate":0,"index":5669}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5673},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1472493,"byte_end":1472496,"line_start":2103,"line_end":2103,"column_start":12,"column_end":15},"name":"new","qualname":"<Utf8Builder>::new","value":"pub fn new(&'b mut flatbuffers::FlatBufferBuilder) -> Utf8Builder","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1472472,"byte_end":1472481,"line_start":2102,"line_end":2102,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5674},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1472726,"byte_end":1472732,"line_start":2111,"line_end":2111,"column_start":12,"column_end":18},"name":"finish","qualname":"<Utf8Builder>::finish","value":"pub fn finish(Self) -> flatbuffers::WIPOffset<Utf8>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1472705,"byte_end":1472714,"line_start":2110,"line_end":2110,"column_start":5,"column_end":14}}]},{"kind":"Enum","id":{"krate":0,"index":5677},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1473074,"byte_end":1473086,"line_start":2123,"line_end":2123,"column_start":10,"column_end":22},"name":"BinaryOffset","qualname":"::ipc::gen::Schema::BinaryOffset","value":"pub enum BinaryOffset { }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":9261},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1473159,"byte_end":1473165,"line_start":2127,"line_end":2127,"column_start":12,"column_end":18},"name":"Binary","qualname":"::ipc::gen::Schema::Binary","value":"Binary { _tab }","parent":null,"children":[{"krate":0,"index":9263}],"decl_id":null,"docs":" Opaque binary data\n","sig":null,"attributes":[{"value":"/ Opaque binary data","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1473125,"byte_end":1473147,"line_start":2126,"line_end":2126,"column_start":1,"column_end":23}}]},{"kind":"Field","id":{"krate":0,"index":9263},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1473180,"byte_end":1473184,"line_start":2128,"line_end":2128,"column_start":9,"column_end":13},"name":"_tab","qualname":"::ipc::gen::Schema::Binary::_tab","value":"flatbuffers::Table<'a>","parent":{"krate":0,"index":9261},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5684},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1473496,"byte_end":1473511,"line_start":2143,"line_end":2143,"column_start":12,"column_end":27},"name":"init_from_table","qualname":"<Binary>::init_from_table","value":"pub fn init_from_table(flatbuffers::Table) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1473475,"byte_end":1473484,"line_start":2142,"line_end":2142,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5685},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1473626,"byte_end":1473632,"line_start":2147,"line_end":2147,"column_start":12,"column_end":18},"name":"create","qualname":"<Binary>::create","value":"pub fn create<'bldr:'args, 'args:'mut_bldr,\n              'mut_bldr>(&'mut_bldr mut flatbuffers::FlatBufferBuilder,\n                         &'args BinaryArgs) -> flatbuffers::WIPOffset<Binary>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(unused_mut)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1473594,"byte_end":1473614,"line_start":2146,"line_end":2146,"column_start":5,"column_end":25}}]},{"kind":"Struct","id":{"krate":0,"index":5696},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1474233,"byte_end":1474243,"line_start":2167,"line_end":2167,"column_start":12,"column_end":22},"name":"BinaryArgs","qualname":"::ipc::gen::Schema::BinaryArgs","value":"BinaryArgs {  }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5700},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1474363,"byte_end":1474376,"line_start":2174,"line_end":2174,"column_start":12,"column_end":25},"name":"BinaryBuilder","qualname":"::ipc::gen::Schema::BinaryBuilder","value":"BinaryBuilder {  }","parent":null,"children":[{"krate":0,"index":5703},{"krate":0,"index":5704}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5708},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1474588,"byte_end":1474591,"line_start":2180,"line_end":2180,"column_start":12,"column_end":15},"name":"new","qualname":"<BinaryBuilder>::new","value":"pub fn new(&'b mut flatbuffers::FlatBufferBuilder) -> BinaryBuilder","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1474567,"byte_end":1474576,"line_start":2179,"line_end":2179,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5709},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1474840,"byte_end":1474846,"line_start":2190,"line_end":2190,"column_start":12,"column_end":18},"name":"finish","qualname":"<BinaryBuilder>::finish","value":"pub fn finish(Self) -> flatbuffers::WIPOffset<Binary>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1474819,"byte_end":1474828,"line_start":2189,"line_end":2189,"column_start":5,"column_end":14}}]},{"kind":"Enum","id":{"krate":0,"index":5712},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1475194,"byte_end":1475209,"line_start":2202,"line_end":2202,"column_start":10,"column_end":25},"name":"LargeUtf8Offset","qualname":"::ipc::gen::Schema::LargeUtf8Offset","value":"pub enum LargeUtf8Offset { }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":9275},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1475357,"byte_end":1475366,"line_start":2207,"line_end":2207,"column_start":12,"column_end":21},"name":"LargeUtf8","qualname":"::ipc::gen::Schema::LargeUtf8","value":"LargeUtf8 { _tab }","parent":null,"children":[{"krate":0,"index":9277}],"decl_id":null,"docs":" Same as Utf8, but with 64-bit offsets, allowing to represent\n extremely large data values.\n","sig":null,"attributes":[{"value":"/ Same as Utf8, but with 64-bit offsets, allowing to represent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1475248,"byte_end":1475312,"line_start":2205,"line_end":2205,"column_start":1,"column_end":65}},{"value":"/ extremely large data values.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1475313,"byte_end":1475345,"line_start":2206,"line_end":2206,"column_start":1,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":9277},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1475381,"byte_end":1475385,"line_start":2208,"line_end":2208,"column_start":9,"column_end":13},"name":"_tab","qualname":"::ipc::gen::Schema::LargeUtf8::_tab","value":"flatbuffers::Table<'a>","parent":{"krate":0,"index":9275},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5719},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1475706,"byte_end":1475721,"line_start":2223,"line_end":2223,"column_start":12,"column_end":27},"name":"init_from_table","qualname":"<LargeUtf8>::init_from_table","value":"pub fn init_from_table(flatbuffers::Table) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1475685,"byte_end":1475694,"line_start":2222,"line_end":2222,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5720},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1475839,"byte_end":1475845,"line_start":2227,"line_end":2227,"column_start":12,"column_end":18},"name":"create","qualname":"<LargeUtf8>::create","value":"pub fn create<'bldr:'args, 'args:'mut_bldr,\n              'mut_bldr>(&'mut_bldr mut flatbuffers::FlatBufferBuilder,\n                         &'args LargeUtf8Args)\n-> flatbuffers::WIPOffset<LargeUtf8>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(unused_mut)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1475807,"byte_end":1475827,"line_start":2226,"line_end":2226,"column_start":5,"column_end":25}}]},{"kind":"Struct","id":{"krate":0,"index":5731},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1476458,"byte_end":1476471,"line_start":2247,"line_end":2247,"column_start":12,"column_end":25},"name":"LargeUtf8Args","qualname":"::ipc::gen::Schema::LargeUtf8Args","value":"LargeUtf8Args {  }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5735},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1476597,"byte_end":1476613,"line_start":2254,"line_end":2254,"column_start":12,"column_end":28},"name":"LargeUtf8Builder","qualname":"::ipc::gen::Schema::LargeUtf8Builder","value":"LargeUtf8Builder {  }","parent":null,"children":[{"krate":0,"index":5738},{"krate":0,"index":5739}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5743},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1476828,"byte_end":1476831,"line_start":2260,"line_end":2260,"column_start":12,"column_end":15},"name":"new","qualname":"<LargeUtf8Builder>::new","value":"pub fn new(&'b mut flatbuffers::FlatBufferBuilder) -> LargeUtf8Builder","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1476807,"byte_end":1476816,"line_start":2259,"line_end":2259,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5744},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1477086,"byte_end":1477092,"line_start":2270,"line_end":2270,"column_start":12,"column_end":18},"name":"finish","qualname":"<LargeUtf8Builder>::finish","value":"pub fn finish(Self) -> flatbuffers::WIPOffset<LargeUtf8>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1477065,"byte_end":1477074,"line_start":2269,"line_end":2269,"column_start":5,"column_end":14}}]},{"kind":"Enum","id":{"krate":0,"index":5747},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1477449,"byte_end":1477466,"line_start":2282,"line_end":2282,"column_start":10,"column_end":27},"name":"LargeBinaryOffset","qualname":"::ipc::gen::Schema::LargeBinaryOffset","value":"pub enum LargeBinaryOffset { }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":9289},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1477616,"byte_end":1477627,"line_start":2287,"line_end":2287,"column_start":12,"column_end":23},"name":"LargeBinary","qualname":"::ipc::gen::Schema::LargeBinary","value":"LargeBinary { _tab }","parent":null,"children":[{"krate":0,"index":9291}],"decl_id":null,"docs":" Same as Binary, but with 64-bit offsets, allowing to represent\n extremely large data values.\n","sig":null,"attributes":[{"value":"/ Same as Binary, but with 64-bit offsets, allowing to represent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1477505,"byte_end":1477571,"line_start":2285,"line_end":2285,"column_start":1,"column_end":67}},{"value":"/ extremely large data values.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1477572,"byte_end":1477604,"line_start":2286,"line_end":2286,"column_start":1,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":9291},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1477642,"byte_end":1477646,"line_start":2288,"line_end":2288,"column_start":9,"column_end":13},"name":"_tab","qualname":"::ipc::gen::Schema::LargeBinary::_tab","value":"flatbuffers::Table<'a>","parent":{"krate":0,"index":9289},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5754},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1477973,"byte_end":1477988,"line_start":2303,"line_end":2303,"column_start":12,"column_end":27},"name":"init_from_table","qualname":"<LargeBinary>::init_from_table","value":"pub fn init_from_table(flatbuffers::Table) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1477952,"byte_end":1477961,"line_start":2302,"line_end":2302,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5755},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1478108,"byte_end":1478114,"line_start":2307,"line_end":2307,"column_start":12,"column_end":18},"name":"create","qualname":"<LargeBinary>::create","value":"pub fn create<'bldr:'args, 'args:'mut_bldr,\n              'mut_bldr>(&'mut_bldr mut flatbuffers::FlatBufferBuilder,\n                         &'args LargeBinaryArgs)\n-> flatbuffers::WIPOffset<LargeBinary>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(unused_mut)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1478076,"byte_end":1478096,"line_start":2306,"line_end":2306,"column_start":5,"column_end":25}}]},{"kind":"Struct","id":{"krate":0,"index":5766},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1478735,"byte_end":1478750,"line_start":2327,"line_end":2327,"column_start":12,"column_end":27},"name":"LargeBinaryArgs","qualname":"::ipc::gen::Schema::LargeBinaryArgs","value":"LargeBinaryArgs {  }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5770},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1478880,"byte_end":1478898,"line_start":2334,"line_end":2334,"column_start":12,"column_end":30},"name":"LargeBinaryBuilder","qualname":"::ipc::gen::Schema::LargeBinaryBuilder","value":"LargeBinaryBuilder {  }","parent":null,"children":[{"krate":0,"index":5773},{"krate":0,"index":5774}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5778},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1479115,"byte_end":1479118,"line_start":2340,"line_end":2340,"column_start":12,"column_end":15},"name":"new","qualname":"<LargeBinaryBuilder>::new","value":"pub fn new(&'b mut flatbuffers::FlatBufferBuilder) -> LargeBinaryBuilder","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1479094,"byte_end":1479103,"line_start":2339,"line_end":2339,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5779},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1479377,"byte_end":1479383,"line_start":2350,"line_end":2350,"column_start":12,"column_end":18},"name":"finish","qualname":"<LargeBinaryBuilder>::finish","value":"pub fn finish(Self) -> flatbuffers::WIPOffset<LargeBinary>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1479356,"byte_end":1479365,"line_start":2349,"line_end":2349,"column_start":5,"column_end":14}}]},{"kind":"Enum","id":{"krate":0,"index":5782},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1479746,"byte_end":1479767,"line_start":2362,"line_end":2362,"column_start":10,"column_end":31},"name":"FixedSizeBinaryOffset","qualname":"::ipc::gen::Schema::FixedSizeBinaryOffset","value":"pub enum FixedSizeBinaryOffset { }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":9303},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1479817,"byte_end":1479832,"line_start":2365,"line_end":2365,"column_start":12,"column_end":27},"name":"FixedSizeBinary","qualname":"::ipc::gen::Schema::FixedSizeBinary","value":"FixedSizeBinary { _tab }","parent":null,"children":[{"krate":0,"index":9305}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9305},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1479847,"byte_end":1479851,"line_start":2366,"line_end":2366,"column_start":9,"column_end":13},"name":"_tab","qualname":"::ipc::gen::Schema::FixedSizeBinary::_tab","value":"flatbuffers::Table<'a>","parent":{"krate":0,"index":9303},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5789},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1480190,"byte_end":1480205,"line_start":2381,"line_end":2381,"column_start":12,"column_end":27},"name":"init_from_table","qualname":"<FixedSizeBinary>::init_from_table","value":"pub fn init_from_table(flatbuffers::Table) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1480169,"byte_end":1480178,"line_start":2380,"line_end":2380,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5790},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1480329,"byte_end":1480335,"line_start":2385,"line_end":2385,"column_start":12,"column_end":18},"name":"create","qualname":"<FixedSizeBinary>::create","value":"pub fn create<'bldr:'args, 'args:'mut_bldr,\n              'mut_bldr>(&'mut_bldr mut flatbuffers::FlatBufferBuilder,\n                         &'args FixedSizeBinaryArgs)\n-> flatbuffers::WIPOffset<FixedSizeBinary>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(unused_mut)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1480297,"byte_end":1480317,"line_start":2384,"line_end":2384,"column_start":5,"column_end":25}}]},{"kind":"Const","id":{"krate":0,"index":5794},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1480702,"byte_end":1480714,"line_start":2394,"line_end":2394,"column_start":15,"column_end":27},"name":"VT_BYTEWIDTH","qualname":"::ipc::gen::Schema::FixedSizeBinary::<'a>::VT_BYTEWIDTH","value":"flatbuffers::VOffsetT","parent":{"krate":0,"index":5787},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5795},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1480803,"byte_end":1480812,"line_start":2398,"line_end":2398,"column_start":12,"column_end":21},"name":"byteWidth","qualname":"<FixedSizeBinary>::byteWidth","value":"pub fn byteWidth(&Self) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Number of bytes per value\n","sig":null,"attributes":[{"value":"/ Number of bytes per value","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1480748,"byte_end":1480777,"line_start":2396,"line_end":2396,"column_start":5,"column_end":34}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1480782,"byte_end":1480791,"line_start":2397,"line_end":2397,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":5803},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1481357,"byte_end":1481376,"line_start":2418,"line_end":2418,"column_start":12,"column_end":31},"name":"FixedSizeBinaryArgs","qualname":"::ipc::gen::Schema::FixedSizeBinaryArgs","value":"FixedSizeBinaryArgs { byteWidth }","parent":null,"children":[{"krate":0,"index":5804}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":5804},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1481387,"byte_end":1481396,"line_start":2419,"line_end":2419,"column_start":9,"column_end":18},"name":"byteWidth","qualname":"::ipc::gen::Schema::FixedSizeBinaryArgs::byteWidth","value":"i32","parent":{"krate":0,"index":5803},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5808},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1481553,"byte_end":1481575,"line_start":2427,"line_end":2427,"column_start":12,"column_end":34},"name":"FixedSizeBinaryBuilder","qualname":"::ipc::gen::Schema::FixedSizeBinaryBuilder","value":"FixedSizeBinaryBuilder {  }","parent":null,"children":[{"krate":0,"index":5811},{"krate":0,"index":5812}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5816},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1481796,"byte_end":1481809,"line_start":2433,"line_end":2433,"column_start":12,"column_end":25},"name":"add_byteWidth","qualname":"<FixedSizeBinaryBuilder>::add_byteWidth","value":"pub fn add_byteWidth(&mut Self, i32)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1481775,"byte_end":1481784,"line_start":2432,"line_end":2432,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5817},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1481964,"byte_end":1481967,"line_start":2438,"line_end":2438,"column_start":12,"column_end":15},"name":"new","qualname":"<FixedSizeBinaryBuilder>::new","value":"pub fn new(&'b mut flatbuffers::FlatBufferBuilder) -> FixedSizeBinaryBuilder","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1481943,"byte_end":1481952,"line_start":2437,"line_end":2437,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5818},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1482234,"byte_end":1482240,"line_start":2448,"line_end":2448,"column_start":12,"column_end":18},"name":"finish","qualname":"<FixedSizeBinaryBuilder>::finish","value":"pub fn finish(Self) -> flatbuffers::WIPOffset<FixedSizeBinary>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1482213,"byte_end":1482222,"line_start":2447,"line_end":2447,"column_start":5,"column_end":14}}]},{"kind":"Enum","id":{"krate":0,"index":5821},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1482665,"byte_end":1482675,"line_start":2461,"line_end":2461,"column_start":10,"column_end":20},"name":"BoolOffset","qualname":"::ipc::gen::Schema::BoolOffset","value":"pub enum BoolOffset { }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":9317},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1482725,"byte_end":1482729,"line_start":2464,"line_end":2464,"column_start":12,"column_end":16},"name":"Bool","qualname":"::ipc::gen::Schema::Bool","value":"Bool { _tab }","parent":null,"children":[{"krate":0,"index":9319}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9319},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1482744,"byte_end":1482748,"line_start":2465,"line_end":2465,"column_start":9,"column_end":13},"name":"_tab","qualname":"::ipc::gen::Schema::Bool::_tab","value":"flatbuffers::Table<'a>","parent":{"krate":0,"index":9317},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5828},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1483054,"byte_end":1483069,"line_start":2480,"line_end":2480,"column_start":12,"column_end":27},"name":"init_from_table","qualname":"<Bool>::init_from_table","value":"pub fn init_from_table(flatbuffers::Table) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1483033,"byte_end":1483042,"line_start":2479,"line_end":2479,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5829},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1483182,"byte_end":1483188,"line_start":2484,"line_end":2484,"column_start":12,"column_end":18},"name":"create","qualname":"<Bool>::create","value":"pub fn create<'bldr:'args, 'args:'mut_bldr,\n              'mut_bldr>(&'mut_bldr mut flatbuffers::FlatBufferBuilder,\n                         &'args BoolArgs) -> flatbuffers::WIPOffset<Bool>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(unused_mut)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1483150,"byte_end":1483170,"line_start":2483,"line_end":2483,"column_start":5,"column_end":25}}]},{"kind":"Struct","id":{"krate":0,"index":5840},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1483781,"byte_end":1483789,"line_start":2504,"line_end":2504,"column_start":12,"column_end":20},"name":"BoolArgs","qualname":"::ipc::gen::Schema::BoolArgs","value":"BoolArgs {  }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5844},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1483905,"byte_end":1483916,"line_start":2511,"line_end":2511,"column_start":12,"column_end":23},"name":"BoolBuilder","qualname":"::ipc::gen::Schema::BoolBuilder","value":"BoolBuilder {  }","parent":null,"children":[{"krate":0,"index":5847},{"krate":0,"index":5848}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5852},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1484126,"byte_end":1484129,"line_start":2517,"line_end":2517,"column_start":12,"column_end":15},"name":"new","qualname":"<BoolBuilder>::new","value":"pub fn new(&'b mut flatbuffers::FlatBufferBuilder) -> BoolBuilder","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1484105,"byte_end":1484114,"line_start":2516,"line_end":2516,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5853},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1484359,"byte_end":1484365,"line_start":2525,"line_end":2525,"column_start":12,"column_end":18},"name":"finish","qualname":"<BoolBuilder>::finish","value":"pub fn finish(Self) -> flatbuffers::WIPOffset<Bool>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1484338,"byte_end":1484347,"line_start":2524,"line_end":2524,"column_start":5,"column_end":14}}]},{"kind":"Enum","id":{"krate":0,"index":5856},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1484707,"byte_end":1484720,"line_start":2537,"line_end":2537,"column_start":10,"column_end":23},"name":"DecimalOffset","qualname":"::ipc::gen::Schema::DecimalOffset","value":"pub enum DecimalOffset { }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":9331},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1484997,"byte_end":1485004,"line_start":2544,"line_end":2544,"column_start":12,"column_end":19},"name":"Decimal","qualname":"::ipc::gen::Schema::Decimal","value":"Decimal { _tab }","parent":null,"children":[{"krate":0,"index":9333}],"decl_id":null,"docs":" Exact decimal value represented as an integer value in two's\n complement. Currently only 128-bit (16-byte) and 256-bit (32-byte) integers\n are used. The representation uses the endianness indicated\n in the Schema.\n","sig":null,"attributes":[{"value":"/ Exact decimal value represented as an integer value in two's","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1484759,"byte_end":1484823,"line_start":2540,"line_end":2540,"column_start":1,"column_end":65}},{"value":"/ complement. Currently only 128-bit (16-byte) and 256-bit (32-byte) integers","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1484824,"byte_end":1484903,"line_start":2541,"line_end":2541,"column_start":1,"column_end":80}},{"value":"/ are used. The representation uses the endianness indicated","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1484904,"byte_end":1484966,"line_start":2542,"line_end":2542,"column_start":1,"column_end":63}},{"value":"/ in the Schema.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1484967,"byte_end":1484985,"line_start":2543,"line_end":2543,"column_start":1,"column_end":19}}]},{"kind":"Field","id":{"krate":0,"index":9333},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1485019,"byte_end":1485023,"line_start":2545,"line_end":2545,"column_start":9,"column_end":13},"name":"_tab","qualname":"::ipc::gen::Schema::Decimal::_tab","value":"flatbuffers::Table<'a>","parent":{"krate":0,"index":9331},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5863},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1485338,"byte_end":1485353,"line_start":2560,"line_end":2560,"column_start":12,"column_end":27},"name":"init_from_table","qualname":"<Decimal>::init_from_table","value":"pub fn init_from_table(flatbuffers::Table) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1485317,"byte_end":1485326,"line_start":2559,"line_end":2559,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5864},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1485469,"byte_end":1485475,"line_start":2564,"line_end":2564,"column_start":12,"column_end":18},"name":"create","qualname":"<Decimal>::create","value":"pub fn create<'bldr:'args, 'args:'mut_bldr,\n              'mut_bldr>(&'mut_bldr mut flatbuffers::FlatBufferBuilder,\n                         &'args DecimalArgs)\n-> flatbuffers::WIPOffset<Decimal>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(unused_mut)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1485437,"byte_end":1485457,"line_start":2563,"line_end":2563,"column_start":5,"column_end":25}}]},{"kind":"Const","id":{"krate":0,"index":5868},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1485902,"byte_end":1485914,"line_start":2575,"line_end":2575,"column_start":15,"column_end":27},"name":"VT_PRECISION","qualname":"::ipc::gen::Schema::Decimal::<'a>::VT_PRECISION","value":"flatbuffers::VOffsetT","parent":{"krate":0,"index":5861},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5869},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1485957,"byte_end":1485965,"line_start":2576,"line_end":2576,"column_start":15,"column_end":23},"name":"VT_SCALE","qualname":"::ipc::gen::Schema::Decimal::<'a>::VT_SCALE","value":"flatbuffers::VOffsetT","parent":{"krate":0,"index":5861},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5870},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1486008,"byte_end":1486019,"line_start":2577,"line_end":2577,"column_start":15,"column_end":26},"name":"VT_BITWIDTH","qualname":"::ipc::gen::Schema::Decimal::<'a>::VT_BITWIDTH","value":"flatbuffers::VOffsetT","parent":{"krate":0,"index":5861},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5871},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1486113,"byte_end":1486122,"line_start":2581,"line_end":2581,"column_start":12,"column_end":21},"name":"precision","qualname":"<Decimal>::precision","value":"pub fn precision(&Self) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Total number of decimal digits\n","sig":null,"attributes":[{"value":"/ Total number of decimal digits","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1486053,"byte_end":1486087,"line_start":2579,"line_end":2579,"column_start":5,"column_end":39}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1486092,"byte_end":1486101,"line_start":2580,"line_end":2580,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5872},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1486319,"byte_end":1486324,"line_start":2588,"line_end":2588,"column_start":12,"column_end":17},"name":"scale","qualname":"<Decimal>::scale","value":"pub fn scale(&Self) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Number of digits after the decimal point \".\"\n","sig":null,"attributes":[{"value":"/ Number of digits after the decimal point \".\"","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1486245,"byte_end":1486293,"line_start":2586,"line_end":2586,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1486298,"byte_end":1486307,"line_start":2587,"line_end":2587,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5873},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1486574,"byte_end":1486582,"line_start":2594,"line_end":2594,"column_start":12,"column_end":20},"name":"bitWidth","qualname":"<Decimal>::bitWidth","value":"pub fn bitWidth(&Self) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Number of bits per value. The only accepted widths are 128 and 256.\n We use bitWidth for consistency with Int::bitWidth.\n","sig":null,"attributes":[{"value":"/ Number of bits per value. The only accepted widths are 128 and 256.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1486417,"byte_end":1486488,"line_start":2591,"line_end":2591,"column_start":5,"column_end":76}},{"value":"/ We use bitWidth for consistency with Int::bitWidth.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1486493,"byte_end":1486548,"line_start":2592,"line_end":2592,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1486553,"byte_end":1486562,"line_start":2593,"line_end":2593,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":5881},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1487250,"byte_end":1487261,"line_start":2616,"line_end":2616,"column_start":12,"column_end":23},"name":"DecimalArgs","qualname":"::ipc::gen::Schema::DecimalArgs","value":"DecimalArgs { precision, scale, bitWidth }","parent":null,"children":[{"krate":0,"index":5882},{"krate":0,"index":5883},{"krate":0,"index":5884}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":5882},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1487272,"byte_end":1487281,"line_start":2617,"line_end":2617,"column_start":9,"column_end":18},"name":"precision","qualname":"::ipc::gen::Schema::DecimalArgs::precision","value":"i32","parent":{"krate":0,"index":5881},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":5883},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1487296,"byte_end":1487301,"line_start":2618,"line_end":2618,"column_start":9,"column_end":14},"name":"scale","qualname":"::ipc::gen::Schema::DecimalArgs::scale","value":"i32","parent":{"krate":0,"index":5881},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":5884},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1487316,"byte_end":1487324,"line_start":2619,"line_end":2619,"column_start":9,"column_end":17},"name":"bitWidth","qualname":"::ipc::gen::Schema::DecimalArgs::bitWidth","value":"i32","parent":{"krate":0,"index":5881},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5888},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1487535,"byte_end":1487549,"line_start":2631,"line_end":2631,"column_start":12,"column_end":26},"name":"DecimalBuilder","qualname":"::ipc::gen::Schema::DecimalBuilder","value":"DecimalBuilder {  }","parent":null,"children":[{"krate":0,"index":5891},{"krate":0,"index":5892}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5896},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1487762,"byte_end":1487775,"line_start":2637,"line_end":2637,"column_start":12,"column_end":25},"name":"add_precision","qualname":"<DecimalBuilder>::add_precision","value":"pub fn add_precision(&mut Self, i32)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1487741,"byte_end":1487750,"line_start":2636,"line_end":2636,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5897},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1487922,"byte_end":1487931,"line_start":2642,"line_end":2642,"column_start":12,"column_end":21},"name":"add_scale","qualname":"<DecimalBuilder>::add_scale","value":"pub fn add_scale(&mut Self, i32)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1487901,"byte_end":1487910,"line_start":2641,"line_end":2641,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5898},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1488053,"byte_end":1488065,"line_start":2646,"line_end":2646,"column_start":12,"column_end":24},"name":"add_bitWidth","qualname":"<DecimalBuilder>::add_bitWidth","value":"pub fn add_bitWidth(&mut Self, i32)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1488032,"byte_end":1488041,"line_start":2645,"line_end":2645,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5899},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1488211,"byte_end":1488214,"line_start":2651,"line_end":2651,"column_start":12,"column_end":15},"name":"new","qualname":"<DecimalBuilder>::new","value":"pub fn new(&'b mut flatbuffers::FlatBufferBuilder) -> DecimalBuilder","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1488190,"byte_end":1488199,"line_start":2650,"line_end":2650,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5900},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1488465,"byte_end":1488471,"line_start":2661,"line_end":2661,"column_start":12,"column_end":18},"name":"finish","qualname":"<DecimalBuilder>::finish","value":"pub fn finish(Self) -> flatbuffers::WIPOffset<Decimal>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1488444,"byte_end":1488453,"line_start":2660,"line_end":2660,"column_start":5,"column_end":14}}]},{"kind":"Enum","id":{"krate":0,"index":5903},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1488962,"byte_end":1488972,"line_start":2676,"line_end":2676,"column_start":10,"column_end":20},"name":"DateOffset","qualname":"::ipc::gen::Schema::DateOffset","value":"pub enum DateOffset { }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":9345},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1489352,"byte_end":1489356,"line_start":2685,"line_end":2685,"column_start":12,"column_end":16},"name":"Date","qualname":"::ipc::gen::Schema::Date","value":"Date { _tab }","parent":null,"children":[{"krate":0,"index":9347}],"decl_id":null,"docs":" Date is either a 32-bit or 64-bit type representing elapsed time since UNIX\n epoch (1970-01-01), stored in either of two units:","sig":null,"attributes":[{"value":"/ Date is either a 32-bit or 64-bit type representing elapsed time since UNIX","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1489011,"byte_end":1489090,"line_start":2679,"line_end":2679,"column_start":1,"column_end":80}},{"value":"/ epoch (1970-01-01), stored in either of two units:","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1489091,"byte_end":1489145,"line_start":2680,"line_end":2680,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1489146,"byte_end":1489149,"line_start":2681,"line_end":2681,"column_start":1,"column_end":4}},{"value":"/ * Milliseconds (64 bits) indicating UNIX time elapsed since the epoch (no","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1489150,"byte_end":1489227,"line_start":2682,"line_end":2682,"column_start":1,"column_end":78}},{"value":"/   leap seconds), where the values are evenly divisible by 86400000","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1489228,"byte_end":1489298,"line_start":2683,"line_end":2683,"column_start":1,"column_end":71}},{"value":"/ * Days (32 bits) since the UNIX epoch","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1489299,"byte_end":1489340,"line_start":2684,"line_end":2684,"column_start":1,"column_end":42}}]},{"kind":"Field","id":{"krate":0,"index":9347},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1489371,"byte_end":1489375,"line_start":2686,"line_end":2686,"column_start":9,"column_end":13},"name":"_tab","qualname":"::ipc::gen::Schema::Date::_tab","value":"flatbuffers::Table<'a>","parent":{"krate":0,"index":9345},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5910},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1489681,"byte_end":1489696,"line_start":2701,"line_end":2701,"column_start":12,"column_end":27},"name":"init_from_table","qualname":"<Date>::init_from_table","value":"pub fn init_from_table(flatbuffers::Table) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1489660,"byte_end":1489669,"line_start":2700,"line_end":2700,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5911},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1489809,"byte_end":1489815,"line_start":2705,"line_end":2705,"column_start":12,"column_end":18},"name":"create","qualname":"<Date>::create","value":"pub fn create<'bldr:'args, 'args:'mut_bldr,\n              'mut_bldr>(&'mut_bldr mut flatbuffers::FlatBufferBuilder,\n                         &'args DateArgs) -> flatbuffers::WIPOffset<Date>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(unused_mut)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1489777,"byte_end":1489797,"line_start":2704,"line_end":2704,"column_start":5,"column_end":25}}]},{"kind":"Const","id":{"krate":0,"index":5915},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1490139,"byte_end":1490146,"line_start":2714,"line_end":2714,"column_start":15,"column_end":22},"name":"VT_UNIT","qualname":"::ipc::gen::Schema::Date::<'a>::VT_UNIT","value":"flatbuffers::VOffsetT","parent":{"krate":0,"index":5908},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5916},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1490201,"byte_end":1490205,"line_start":2717,"line_end":2717,"column_start":12,"column_end":16},"name":"unit","qualname":"<Date>::unit","value":"pub fn unit(&Self) -> DateUnit","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1490180,"byte_end":1490189,"line_start":2716,"line_end":2716,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":5924},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1490748,"byte_end":1490756,"line_start":2737,"line_end":2737,"column_start":12,"column_end":20},"name":"DateArgs","qualname":"::ipc::gen::Schema::DateArgs","value":"DateArgs { unit }","parent":null,"children":[{"krate":0,"index":5925}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":5925},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1490767,"byte_end":1490771,"line_start":2738,"line_end":2738,"column_start":9,"column_end":13},"name":"unit","qualname":"::ipc::gen::Schema::DateArgs::unit","value":"ipc::gen::Schema::DateUnit","parent":{"krate":0,"index":5924},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5929},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1490947,"byte_end":1490958,"line_start":2748,"line_end":2748,"column_start":12,"column_end":23},"name":"DateBuilder","qualname":"::ipc::gen::Schema::DateBuilder","value":"DateBuilder {  }","parent":null,"children":[{"krate":0,"index":5932},{"krate":0,"index":5933}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5937},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1491168,"byte_end":1491176,"line_start":2754,"line_end":2754,"column_start":12,"column_end":20},"name":"add_unit","qualname":"<DateBuilder>::add_unit","value":"pub fn add_unit(&mut Self, DateUnit)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1491147,"byte_end":1491156,"line_start":2753,"line_end":2753,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5938},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1491335,"byte_end":1491338,"line_start":2759,"line_end":2759,"column_start":12,"column_end":15},"name":"new","qualname":"<DateBuilder>::new","value":"pub fn new(&'b mut flatbuffers::FlatBufferBuilder) -> DateBuilder","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1491314,"byte_end":1491323,"line_start":2758,"line_end":2758,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5939},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1491568,"byte_end":1491574,"line_start":2767,"line_end":2767,"column_start":12,"column_end":18},"name":"finish","qualname":"<DateBuilder>::finish","value":"pub fn finish(Self) -> flatbuffers::WIPOffset<Date>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1491547,"byte_end":1491556,"line_start":2766,"line_end":2766,"column_start":5,"column_end":14}}]},{"kind":"Enum","id":{"krate":0,"index":5942},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1491956,"byte_end":1491966,"line_start":2780,"line_end":2780,"column_start":10,"column_end":20},"name":"TimeOffset","qualname":"::ipc::gen::Schema::TimeOffset","value":"pub enum TimeOffset { }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":9359},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1492157,"byte_end":1492161,"line_start":2786,"line_end":2786,"column_start":12,"column_end":16},"name":"Time","qualname":"::ipc::gen::Schema::Time","value":"Time { _tab }","parent":null,"children":[{"krate":0,"index":9361}],"decl_id":null,"docs":" Time type. The physical storage type depends on the unit\n - SECOND and MILLISECOND: 32 bits\n - MICROSECOND and NANOSECOND: 64 bits\n","sig":null,"attributes":[{"value":"/ Time type. The physical storage type depends on the unit","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1492005,"byte_end":1492065,"line_start":2783,"line_end":2783,"column_start":1,"column_end":61}},{"value":"/ - SECOND and MILLISECOND: 32 bits","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1492066,"byte_end":1492103,"line_start":2784,"line_end":2784,"column_start":1,"column_end":38}},{"value":"/ - MICROSECOND and NANOSECOND: 64 bits","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1492104,"byte_end":1492145,"line_start":2785,"line_end":2785,"column_start":1,"column_end":42}}]},{"kind":"Field","id":{"krate":0,"index":9361},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1492176,"byte_end":1492180,"line_start":2787,"line_end":2787,"column_start":9,"column_end":13},"name":"_tab","qualname":"::ipc::gen::Schema::Time::_tab","value":"flatbuffers::Table<'a>","parent":{"krate":0,"index":9359},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5949},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1492486,"byte_end":1492501,"line_start":2802,"line_end":2802,"column_start":12,"column_end":27},"name":"init_from_table","qualname":"<Time>::init_from_table","value":"pub fn init_from_table(flatbuffers::Table) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1492465,"byte_end":1492474,"line_start":2801,"line_end":2801,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5950},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1492614,"byte_end":1492620,"line_start":2806,"line_end":2806,"column_start":12,"column_end":18},"name":"create","qualname":"<Time>::create","value":"pub fn create<'bldr:'args, 'args:'mut_bldr,\n              'mut_bldr>(&'mut_bldr mut flatbuffers::FlatBufferBuilder,\n                         &'args TimeArgs) -> flatbuffers::WIPOffset<Time>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(unused_mut)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1492582,"byte_end":1492602,"line_start":2805,"line_end":2805,"column_start":5,"column_end":25}}]},{"kind":"Const","id":{"krate":0,"index":5954},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1492989,"byte_end":1492996,"line_start":2816,"line_end":2816,"column_start":15,"column_end":22},"name":"VT_UNIT","qualname":"::ipc::gen::Schema::Time::<'a>::VT_UNIT","value":"flatbuffers::VOffsetT","parent":{"krate":0,"index":5947},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5955},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1493039,"byte_end":1493050,"line_start":2817,"line_end":2817,"column_start":15,"column_end":26},"name":"VT_BITWIDTH","qualname":"::ipc::gen::Schema::Time::<'a>::VT_BITWIDTH","value":"flatbuffers::VOffsetT","parent":{"krate":0,"index":5947},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5956},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1493105,"byte_end":1493109,"line_start":2820,"line_end":2820,"column_start":12,"column_end":16},"name":"unit","qualname":"<Time>::unit","value":"pub fn unit(&Self) -> TimeUnit","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1493084,"byte_end":1493093,"line_start":2819,"line_end":2819,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5957},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1493275,"byte_end":1493283,"line_start":2826,"line_end":2826,"column_start":12,"column_end":20},"name":"bitWidth","qualname":"<Time>::bitWidth","value":"pub fn bitWidth(&Self) -> i32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1493254,"byte_end":1493263,"line_start":2825,"line_end":2825,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":5965},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1493847,"byte_end":1493855,"line_start":2845,"line_end":2845,"column_start":12,"column_end":20},"name":"TimeArgs","qualname":"::ipc::gen::Schema::TimeArgs","value":"TimeArgs { unit, bitWidth }","parent":null,"children":[{"krate":0,"index":5966},{"krate":0,"index":5967}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":5966},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1493866,"byte_end":1493870,"line_start":2846,"line_end":2846,"column_start":9,"column_end":13},"name":"unit","qualname":"::ipc::gen::Schema::TimeArgs::unit","value":"ipc::gen::Schema::TimeUnit","parent":{"krate":0,"index":5965},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":5967},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1493890,"byte_end":1493898,"line_start":2847,"line_end":2847,"column_start":9,"column_end":17},"name":"bitWidth","qualname":"::ipc::gen::Schema::TimeArgs::bitWidth","value":"i32","parent":{"krate":0,"index":5965},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5971},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1494095,"byte_end":1494106,"line_start":2858,"line_end":2858,"column_start":12,"column_end":23},"name":"TimeBuilder","qualname":"::ipc::gen::Schema::TimeBuilder","value":"TimeBuilder {  }","parent":null,"children":[{"krate":0,"index":5974},{"krate":0,"index":5975}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5979},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1494316,"byte_end":1494324,"line_start":2864,"line_end":2864,"column_start":12,"column_end":20},"name":"add_unit","qualname":"<TimeBuilder>::add_unit","value":"pub fn add_unit(&mut Self, TimeUnit)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1494295,"byte_end":1494304,"line_start":2863,"line_end":2863,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5980},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1494483,"byte_end":1494495,"line_start":2869,"line_end":2869,"column_start":12,"column_end":24},"name":"add_bitWidth","qualname":"<TimeBuilder>::add_bitWidth","value":"pub fn add_bitWidth(&mut Self, i32)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1494462,"byte_end":1494471,"line_start":2868,"line_end":2868,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5981},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1494624,"byte_end":1494627,"line_start":2873,"line_end":2873,"column_start":12,"column_end":15},"name":"new","qualname":"<TimeBuilder>::new","value":"pub fn new(&'b mut flatbuffers::FlatBufferBuilder) -> TimeBuilder","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1494603,"byte_end":1494612,"line_start":2872,"line_end":2872,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5982},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1494857,"byte_end":1494863,"line_start":2881,"line_end":2881,"column_start":12,"column_end":18},"name":"finish","qualname":"<TimeBuilder>::finish","value":"pub fn finish(Self) -> flatbuffers::WIPOffset<Time>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1494836,"byte_end":1494845,"line_start":2880,"line_end":2880,"column_start":5,"column_end":14}}]},{"kind":"Enum","id":{"krate":0,"index":5985},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1495293,"byte_end":1495308,"line_start":2895,"line_end":2895,"column_start":10,"column_end":25},"name":"TimestampOffset","qualname":"::ipc::gen::Schema::TimestampOffset","value":"pub enum TimestampOffset { }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":9373},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1495683,"byte_end":1495692,"line_start":2904,"line_end":2904,"column_start":12,"column_end":21},"name":"Timestamp","qualname":"::ipc::gen::Schema::Timestamp","value":"Timestamp { _tab }","parent":null,"children":[{"krate":0,"index":9375}],"decl_id":null,"docs":" Time elapsed from the Unix epoch, 00:00:00.000 on 1 January 1970, excluding\n leap seconds, as a 64-bit integer. Note that UNIX time does not include\n leap seconds.","sig":null,"attributes":[{"value":"/ Time elapsed from the Unix epoch, 00:00:00.000 on 1 January 1970, excluding","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1495347,"byte_end":1495426,"line_start":2898,"line_end":2898,"column_start":1,"column_end":80}},{"value":"/ leap seconds, as a 64-bit integer. Note that UNIX time does not include","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1495427,"byte_end":1495502,"line_start":2899,"line_end":2899,"column_start":1,"column_end":76}},{"value":"/ leap seconds.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1495503,"byte_end":1495520,"line_start":2900,"line_end":2900,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1495521,"byte_end":1495524,"line_start":2901,"line_end":2901,"column_start":1,"column_end":4}},{"value":"/ The Timestamp metadata supports both \"time zone naive\" and \"time zone","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1495525,"byte_end":1495598,"line_start":2902,"line_end":2902,"column_start":1,"column_end":74}},{"value":"/ aware\" timestamps. Read about the timezone attribute for more detail","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1495599,"byte_end":1495671,"line_start":2903,"line_end":2903,"column_start":1,"column_end":73}}]},{"kind":"Field","id":{"krate":0,"index":9375},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1495707,"byte_end":1495711,"line_start":2905,"line_end":2905,"column_start":9,"column_end":13},"name":"_tab","qualname":"::ipc::gen::Schema::Timestamp::_tab","value":"flatbuffers::Table<'a>","parent":{"krate":0,"index":9373},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5992},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1496032,"byte_end":1496047,"line_start":2920,"line_end":2920,"column_start":12,"column_end":27},"name":"init_from_table","qualname":"<Timestamp>::init_from_table","value":"pub fn init_from_table(flatbuffers::Table) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1496011,"byte_end":1496020,"line_start":2919,"line_end":2919,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5993},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1496165,"byte_end":1496171,"line_start":2924,"line_end":2924,"column_start":12,"column_end":18},"name":"create","qualname":"<Timestamp>::create","value":"pub fn create<'bldr:'args, 'args:'mut_bldr,\n              'mut_bldr>(&'mut_bldr mut flatbuffers::FlatBufferBuilder,\n                         &'args TimestampArgs)\n-> flatbuffers::WIPOffset<Timestamp>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(unused_mut)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1496133,"byte_end":1496153,"line_start":2923,"line_end":2923,"column_start":5,"column_end":25}}]},{"kind":"Const","id":{"krate":0,"index":5997},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1496605,"byte_end":1496612,"line_start":2936,"line_end":2936,"column_start":15,"column_end":22},"name":"VT_UNIT","qualname":"::ipc::gen::Schema::Timestamp::<'a>::VT_UNIT","value":"flatbuffers::VOffsetT","parent":{"krate":0,"index":5990},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5998},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1496655,"byte_end":1496666,"line_start":2937,"line_end":2937,"column_start":15,"column_end":26},"name":"VT_TIMEZONE","qualname":"::ipc::gen::Schema::Timestamp::<'a>::VT_TIMEZONE","value":"flatbuffers::VOffsetT","parent":{"krate":0,"index":5990},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5999},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1496721,"byte_end":1496725,"line_start":2940,"line_end":2940,"column_start":12,"column_end":16},"name":"unit","qualname":"<Timestamp>::unit","value":"pub fn unit(&Self) -> TimeUnit","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1496700,"byte_end":1496709,"line_start":2939,"line_end":2939,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6000},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1497994,"byte_end":1498002,"line_start":2966,"line_end":2966,"column_start":12,"column_end":20},"name":"timezone","qualname":"<Timestamp>::timezone","value":"pub fn timezone(&Self) -> Option<&'a str>","parent":null,"children":[],"decl_id":null,"docs":" The time zone is a string indicating the name of a time zone, one of:","sig":null,"attributes":[{"value":"/ The time zone is a string indicating the name of a time zone, one of:","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1496870,"byte_end":1496943,"line_start":2945,"line_end":2945,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1496948,"byte_end":1496951,"line_start":2946,"line_end":2946,"column_start":5,"column_end":8}},{"value":"/ * As used in the Olson time zone database (the \"tz database\" or","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1496956,"byte_end":1497023,"line_start":2947,"line_end":2947,"column_start":5,"column_end":72}},{"value":"/   \"tzdata\"), such as \"America/New_York\"","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1497028,"byte_end":1497071,"line_start":2948,"line_end":2948,"column_start":5,"column_end":48}},{"value":"/ * An absolute time zone offset of the form +XX:XX or -XX:XX, such as +07:30","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1497076,"byte_end":1497155,"line_start":2949,"line_end":2949,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1497160,"byte_end":1497163,"line_start":2950,"line_end":2950,"column_start":5,"column_end":8}},{"value":"/ Whether a timezone string is present indicates different semantics about","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1497168,"byte_end":1497244,"line_start":2951,"line_end":2951,"column_start":5,"column_end":81}},{"value":"/ the data:","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1497249,"byte_end":1497262,"line_start":2952,"line_end":2952,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1497267,"byte_end":1497270,"line_start":2953,"line_end":2953,"column_start":5,"column_end":8}},{"value":"/ * If the time zone is null or equal to an empty string, the data is \"time","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1497275,"byte_end":1497352,"line_start":2954,"line_end":2954,"column_start":5,"column_end":82}},{"value":"/   zone naive\" and shall be displayed *as is* to the user, not localized","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1497357,"byte_end":1497432,"line_start":2955,"line_end":2955,"column_start":5,"column_end":80}},{"value":"/   to the locale of the user. This data can be though of as UTC but","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1497437,"byte_end":1497507,"line_start":2956,"line_end":2956,"column_start":5,"column_end":75}},{"value":"/   without having \"UTC\" as the time zone, it is not considered to be","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1497512,"byte_end":1497583,"line_start":2957,"line_end":2957,"column_start":5,"column_end":76}},{"value":"/   localized to any time zone","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1497588,"byte_end":1497620,"line_start":2958,"line_end":2958,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1497625,"byte_end":1497628,"line_start":2959,"line_end":2959,"column_start":5,"column_end":8}},{"value":"/ * If the time zone is set to a valid value, values can be displayed as","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1497633,"byte_end":1497707,"line_start":2960,"line_end":2960,"column_start":5,"column_end":79}},{"value":"/   \"localized\" to that time zone, even though the underlying 64-bit","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1497712,"byte_end":1497782,"line_start":2961,"line_end":2961,"column_start":5,"column_end":75}},{"value":"/   integers are identical to the same data stored in UTC. Converting","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1497787,"byte_end":1497858,"line_start":2962,"line_end":2962,"column_start":5,"column_end":76}},{"value":"/   between time zones is a metadata-only operation and does not change the","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1497863,"byte_end":1497940,"line_start":2963,"line_end":2963,"column_start":5,"column_end":82}},{"value":"/   underlying values","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1497945,"byte_end":1497968,"line_start":2964,"line_end":2964,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1497973,"byte_end":1497982,"line_start":2965,"line_end":2965,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":6008},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1498713,"byte_end":1498726,"line_start":2990,"line_end":2990,"column_start":12,"column_end":25},"name":"TimestampArgs","qualname":"::ipc::gen::Schema::TimestampArgs","value":"TimestampArgs { unit, timezone }","parent":null,"children":[{"krate":0,"index":6010},{"krate":0,"index":6011}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6010},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1498741,"byte_end":1498745,"line_start":2991,"line_end":2991,"column_start":9,"column_end":13},"name":"unit","qualname":"::ipc::gen::Schema::TimestampArgs::unit","value":"ipc::gen::Schema::TimeUnit","parent":{"krate":0,"index":6008},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6011},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1498765,"byte_end":1498773,"line_start":2992,"line_end":2992,"column_start":9,"column_end":17},"name":"timezone","qualname":"::ipc::gen::Schema::TimestampArgs::timezone","value":"std::option::Option<flatbuffers::WIPOffset<&'a str>>","parent":{"krate":0,"index":6008},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6015},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1499017,"byte_end":1499033,"line_start":3003,"line_end":3003,"column_start":12,"column_end":28},"name":"TimestampBuilder","qualname":"::ipc::gen::Schema::TimestampBuilder","value":"TimestampBuilder {  }","parent":null,"children":[{"krate":0,"index":6018},{"krate":0,"index":6019}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6023},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1499248,"byte_end":1499256,"line_start":3009,"line_end":3009,"column_start":12,"column_end":20},"name":"add_unit","qualname":"<TimestampBuilder>::add_unit","value":"pub fn add_unit(&mut Self, TimeUnit)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1499227,"byte_end":1499236,"line_start":3008,"line_end":3008,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6024},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1499415,"byte_end":1499427,"line_start":3014,"line_end":3014,"column_start":12,"column_end":24},"name":"add_timezone","qualname":"<TimestampBuilder>::add_timezone","value":"pub fn add_timezone(&mut Self, flatbuffers::WIPOffset<&'b str>)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1499394,"byte_end":1499403,"line_start":3013,"line_end":3013,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6025},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1499649,"byte_end":1499652,"line_start":3021,"line_end":3021,"column_start":12,"column_end":15},"name":"new","qualname":"<TimestampBuilder>::new","value":"pub fn new(&'b mut flatbuffers::FlatBufferBuilder) -> TimestampBuilder","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1499628,"byte_end":1499637,"line_start":3020,"line_end":3020,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6026},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1499907,"byte_end":1499913,"line_start":3031,"line_end":3031,"column_start":12,"column_end":18},"name":"finish","qualname":"<TimestampBuilder>::finish","value":"pub fn finish(Self) -> flatbuffers::WIPOffset<Timestamp>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1499886,"byte_end":1499895,"line_start":3030,"line_end":3030,"column_start":5,"column_end":14}}]},{"kind":"Enum","id":{"krate":0,"index":6029},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1500358,"byte_end":1500372,"line_start":3045,"line_end":3045,"column_start":10,"column_end":24},"name":"IntervalOffset","qualname":"::ipc::gen::Schema::IntervalOffset","value":"pub enum IntervalOffset { }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":9387},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1500422,"byte_end":1500430,"line_start":3048,"line_end":3048,"column_start":12,"column_end":20},"name":"Interval","qualname":"::ipc::gen::Schema::Interval","value":"Interval { _tab }","parent":null,"children":[{"krate":0,"index":9389}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9389},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1500445,"byte_end":1500449,"line_start":3049,"line_end":3049,"column_start":9,"column_end":13},"name":"_tab","qualname":"::ipc::gen::Schema::Interval::_tab","value":"flatbuffers::Table<'a>","parent":{"krate":0,"index":9387},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6036},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1500767,"byte_end":1500782,"line_start":3064,"line_end":3064,"column_start":12,"column_end":27},"name":"init_from_table","qualname":"<Interval>::init_from_table","value":"pub fn init_from_table(flatbuffers::Table) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1500746,"byte_end":1500755,"line_start":3063,"line_end":3063,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6037},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1500899,"byte_end":1500905,"line_start":3068,"line_end":3068,"column_start":12,"column_end":18},"name":"create","qualname":"<Interval>::create","value":"pub fn create<'bldr:'args, 'args:'mut_bldr,\n              'mut_bldr>(&'mut_bldr mut flatbuffers::FlatBufferBuilder,\n                         &'args IntervalArgs)\n-> flatbuffers::WIPOffset<Interval>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(unused_mut)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1500867,"byte_end":1500887,"line_start":3067,"line_end":3067,"column_start":5,"column_end":25}}]},{"kind":"Const","id":{"krate":0,"index":6041},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1501241,"byte_end":1501248,"line_start":3077,"line_end":3077,"column_start":15,"column_end":22},"name":"VT_UNIT","qualname":"::ipc::gen::Schema::Interval::<'a>::VT_UNIT","value":"flatbuffers::VOffsetT","parent":{"krate":0,"index":6034},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6042},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1501303,"byte_end":1501307,"line_start":3080,"line_end":3080,"column_start":12,"column_end":16},"name":"unit","qualname":"<Interval>::unit","value":"pub fn unit(&Self) -> IntervalUnit","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1501282,"byte_end":1501291,"line_start":3079,"line_end":3079,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":6050},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1501873,"byte_end":1501885,"line_start":3100,"line_end":3100,"column_start":12,"column_end":24},"name":"IntervalArgs","qualname":"::ipc::gen::Schema::IntervalArgs","value":"IntervalArgs { unit }","parent":null,"children":[{"krate":0,"index":6051}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6051},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1501896,"byte_end":1501900,"line_start":3101,"line_end":3101,"column_start":9,"column_end":13},"name":"unit","qualname":"::ipc::gen::Schema::IntervalArgs::unit","value":"ipc::gen::Schema::IntervalUnit","parent":{"krate":0,"index":6050},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6055},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1502091,"byte_end":1502106,"line_start":3111,"line_end":3111,"column_start":12,"column_end":27},"name":"IntervalBuilder","qualname":"::ipc::gen::Schema::IntervalBuilder","value":"IntervalBuilder {  }","parent":null,"children":[{"krate":0,"index":6058},{"krate":0,"index":6059}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6063},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1502320,"byte_end":1502328,"line_start":3117,"line_end":3117,"column_start":12,"column_end":20},"name":"add_unit","qualname":"<IntervalBuilder>::add_unit","value":"pub fn add_unit(&mut Self, IntervalUnit)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1502299,"byte_end":1502308,"line_start":3116,"line_end":3116,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6064},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1502536,"byte_end":1502539,"line_start":3125,"line_end":3125,"column_start":12,"column_end":15},"name":"new","qualname":"<IntervalBuilder>::new","value":"pub fn new(&'b mut flatbuffers::FlatBufferBuilder) -> IntervalBuilder","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1502515,"byte_end":1502524,"line_start":3124,"line_end":3124,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6065},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1502792,"byte_end":1502798,"line_start":3135,"line_end":3135,"column_start":12,"column_end":18},"name":"finish","qualname":"<IntervalBuilder>::finish","value":"pub fn finish(Self) -> flatbuffers::WIPOffset<Interval>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1502771,"byte_end":1502780,"line_start":3134,"line_end":3134,"column_start":5,"column_end":14}}]},{"kind":"Enum","id":{"krate":0,"index":6068},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1503192,"byte_end":1503206,"line_start":3148,"line_end":3148,"column_start":10,"column_end":24},"name":"DurationOffset","qualname":"::ipc::gen::Schema::DurationOffset","value":"pub enum DurationOffset { }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":9401},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1503256,"byte_end":1503264,"line_start":3151,"line_end":3151,"column_start":12,"column_end":20},"name":"Duration","qualname":"::ipc::gen::Schema::Duration","value":"Duration { _tab }","parent":null,"children":[{"krate":0,"index":9403}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9403},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1503279,"byte_end":1503283,"line_start":3152,"line_end":3152,"column_start":9,"column_end":13},"name":"_tab","qualname":"::ipc::gen::Schema::Duration::_tab","value":"flatbuffers::Table<'a>","parent":{"krate":0,"index":9401},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6075},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1503601,"byte_end":1503616,"line_start":3167,"line_end":3167,"column_start":12,"column_end":27},"name":"init_from_table","qualname":"<Duration>::init_from_table","value":"pub fn init_from_table(flatbuffers::Table) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1503580,"byte_end":1503589,"line_start":3166,"line_end":3166,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6076},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1503733,"byte_end":1503739,"line_start":3171,"line_end":3171,"column_start":12,"column_end":18},"name":"create","qualname":"<Duration>::create","value":"pub fn create<'bldr:'args, 'args:'mut_bldr,\n              'mut_bldr>(&'mut_bldr mut flatbuffers::FlatBufferBuilder,\n                         &'args DurationArgs)\n-> flatbuffers::WIPOffset<Duration>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(unused_mut)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1503701,"byte_end":1503721,"line_start":3170,"line_end":3170,"column_start":5,"column_end":25}}]},{"kind":"Const","id":{"krate":0,"index":6080},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1504075,"byte_end":1504082,"line_start":3180,"line_end":3180,"column_start":15,"column_end":22},"name":"VT_UNIT","qualname":"::ipc::gen::Schema::Duration::<'a>::VT_UNIT","value":"flatbuffers::VOffsetT","parent":{"krate":0,"index":6073},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6081},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1504137,"byte_end":1504141,"line_start":3183,"line_end":3183,"column_start":12,"column_end":16},"name":"unit","qualname":"<Duration>::unit","value":"pub fn unit(&Self) -> TimeUnit","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1504116,"byte_end":1504125,"line_start":3182,"line_end":3182,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":6089},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1504692,"byte_end":1504704,"line_start":3203,"line_end":3203,"column_start":12,"column_end":24},"name":"DurationArgs","qualname":"::ipc::gen::Schema::DurationArgs","value":"DurationArgs { unit }","parent":null,"children":[{"krate":0,"index":6090}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6090},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1504715,"byte_end":1504719,"line_start":3204,"line_end":3204,"column_start":9,"column_end":13},"name":"unit","qualname":"::ipc::gen::Schema::DurationArgs::unit","value":"ipc::gen::Schema::TimeUnit","parent":{"krate":0,"index":6089},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6094},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1504903,"byte_end":1504918,"line_start":3214,"line_end":3214,"column_start":12,"column_end":27},"name":"DurationBuilder","qualname":"::ipc::gen::Schema::DurationBuilder","value":"DurationBuilder {  }","parent":null,"children":[{"krate":0,"index":6097},{"krate":0,"index":6098}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6102},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1505132,"byte_end":1505140,"line_start":3220,"line_end":3220,"column_start":12,"column_end":20},"name":"add_unit","qualname":"<DurationBuilder>::add_unit","value":"pub fn add_unit(&mut Self, TimeUnit)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1505111,"byte_end":1505120,"line_start":3219,"line_end":3219,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6103},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1505303,"byte_end":1505306,"line_start":3225,"line_end":3225,"column_start":12,"column_end":15},"name":"new","qualname":"<DurationBuilder>::new","value":"pub fn new(&'b mut flatbuffers::FlatBufferBuilder) -> DurationBuilder","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1505282,"byte_end":1505291,"line_start":3224,"line_end":3224,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6104},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1505559,"byte_end":1505565,"line_start":3235,"line_end":3235,"column_start":12,"column_end":18},"name":"finish","qualname":"<DurationBuilder>::finish","value":"pub fn finish(Self) -> flatbuffers::WIPOffset<Duration>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1505538,"byte_end":1505547,"line_start":3234,"line_end":3234,"column_start":5,"column_end":14}}]},{"kind":"Enum","id":{"krate":0,"index":6107},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1505959,"byte_end":1505973,"line_start":3248,"line_end":3248,"column_start":10,"column_end":24},"name":"KeyValueOffset","qualname":"::ipc::gen::Schema::KeyValueOffset","value":"pub enum KeyValueOffset { }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":9415},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1506217,"byte_end":1506225,"line_start":3254,"line_end":3254,"column_start":12,"column_end":20},"name":"KeyValue","qualname":"::ipc::gen::Schema::KeyValue","value":"KeyValue { _tab }","parent":null,"children":[{"krate":0,"index":9417}],"decl_id":null,"docs":" ----------------------------------------------------------------------\n user defined key value pairs to add custom metadata to arrow\n key namespacing is the responsibility of the user\n","sig":null,"attributes":[{"value":"/ ----------------------------------------------------------------------","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1506012,"byte_end":1506086,"line_start":3251,"line_end":3251,"column_start":1,"column_end":75}},{"value":"/ user defined key value pairs to add custom metadata to arrow","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1506087,"byte_end":1506151,"line_start":3252,"line_end":3252,"column_start":1,"column_end":65}},{"value":"/ key namespacing is the responsibility of the user","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1506152,"byte_end":1506205,"line_start":3253,"line_end":3253,"column_start":1,"column_end":54}}]},{"kind":"Field","id":{"krate":0,"index":9417},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1506240,"byte_end":1506244,"line_start":3255,"line_end":3255,"column_start":9,"column_end":13},"name":"_tab","qualname":"::ipc::gen::Schema::KeyValue::_tab","value":"flatbuffers::Table<'a>","parent":{"krate":0,"index":9415},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6114},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1506562,"byte_end":1506577,"line_start":3270,"line_end":3270,"column_start":12,"column_end":27},"name":"init_from_table","qualname":"<KeyValue>::init_from_table","value":"pub fn init_from_table(flatbuffers::Table) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1506541,"byte_end":1506550,"line_start":3269,"line_end":3269,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6115},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1506694,"byte_end":1506700,"line_start":3274,"line_end":3274,"column_start":12,"column_end":18},"name":"create","qualname":"<KeyValue>::create","value":"pub fn create<'bldr:'args, 'args:'mut_bldr,\n              'mut_bldr>(&'mut_bldr mut flatbuffers::FlatBufferBuilder,\n                         &'args KeyValueArgs)\n-> flatbuffers::WIPOffset<KeyValue>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(unused_mut)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1506662,"byte_end":1506682,"line_start":3273,"line_end":3273,"column_start":5,"column_end":25}}]},{"kind":"Const","id":{"krate":0,"index":6119},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1507166,"byte_end":1507172,"line_start":3288,"line_end":3288,"column_start":15,"column_end":21},"name":"VT_KEY","qualname":"::ipc::gen::Schema::KeyValue::<'a>::VT_KEY","value":"flatbuffers::VOffsetT","parent":{"krate":0,"index":6112},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":6120},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1507215,"byte_end":1507223,"line_start":3289,"line_end":3289,"column_start":15,"column_end":23},"name":"VT_VALUE","qualname":"::ipc::gen::Schema::KeyValue::<'a>::VT_VALUE","value":"flatbuffers::VOffsetT","parent":{"krate":0,"index":6112},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6121},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1507278,"byte_end":1507281,"line_start":3292,"line_end":3292,"column_start":12,"column_end":15},"name":"key","qualname":"<KeyValue>::key","value":"pub fn key(&Self) -> Option<&'a str>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1507257,"byte_end":1507266,"line_start":3291,"line_end":3291,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6122},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1507438,"byte_end":1507443,"line_start":3297,"line_end":3297,"column_start":12,"column_end":17},"name":"value","qualname":"<KeyValue>::value","value":"pub fn value(&Self) -> Option<&'a str>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1507417,"byte_end":1507426,"line_start":3296,"line_end":3296,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":6130},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1508230,"byte_end":1508242,"line_start":3325,"line_end":3325,"column_start":12,"column_end":24},"name":"KeyValueArgs","qualname":"::ipc::gen::Schema::KeyValueArgs","value":"KeyValueArgs { key, value }","parent":null,"children":[{"krate":0,"index":6132},{"krate":0,"index":6133}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6132},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1508257,"byte_end":1508260,"line_start":3326,"line_end":3326,"column_start":9,"column_end":12},"name":"key","qualname":"::ipc::gen::Schema::KeyValueArgs::key","value":"std::option::Option<flatbuffers::WIPOffset<&'a str>>","parent":{"krate":0,"index":6130},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6133},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1508311,"byte_end":1508316,"line_start":3327,"line_end":3327,"column_start":9,"column_end":14},"name":"value","qualname":"::ipc::gen::Schema::KeyValueArgs::value","value":"std::option::Option<flatbuffers::WIPOffset<&'a str>>","parent":{"krate":0,"index":6130},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6137},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1508542,"byte_end":1508557,"line_start":3338,"line_end":3338,"column_start":12,"column_end":27},"name":"KeyValueBuilder","qualname":"::ipc::gen::Schema::KeyValueBuilder","value":"KeyValueBuilder {  }","parent":null,"children":[{"krate":0,"index":6140},{"krate":0,"index":6141}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6145},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1508771,"byte_end":1508778,"line_start":3344,"line_end":3344,"column_start":12,"column_end":19},"name":"add_key","qualname":"<KeyValueBuilder>::add_key","value":"pub fn add_key(&mut Self, flatbuffers::WIPOffset<&'b str>)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1508750,"byte_end":1508759,"line_start":3343,"line_end":3343,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6146},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1508962,"byte_end":1508971,"line_start":3349,"line_end":3349,"column_start":12,"column_end":21},"name":"add_value","qualname":"<KeyValueBuilder>::add_value","value":"pub fn add_value(&mut Self, flatbuffers::WIPOffset<&'b str>)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1508941,"byte_end":1508950,"line_start":3348,"line_end":3348,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6147},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1509161,"byte_end":1509164,"line_start":3354,"line_end":3354,"column_start":12,"column_end":15},"name":"new","qualname":"<KeyValueBuilder>::new","value":"pub fn new(&'b mut flatbuffers::FlatBufferBuilder) -> KeyValueBuilder","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1509140,"byte_end":1509149,"line_start":3353,"line_end":3353,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6148},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1509417,"byte_end":1509423,"line_start":3364,"line_end":3364,"column_start":12,"column_end":18},"name":"finish","qualname":"<KeyValueBuilder>::finish","value":"pub fn finish(Self) -> flatbuffers::WIPOffset<KeyValue>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1509396,"byte_end":1509405,"line_start":3363,"line_end":3363,"column_start":5,"column_end":14}}]},{"kind":"Enum","id":{"krate":0,"index":6151},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1509857,"byte_end":1509881,"line_start":3378,"line_end":3378,"column_start":10,"column_end":34},"name":"DictionaryEncodingOffset","qualname":"::ipc::gen::Schema::DictionaryEncodingOffset","value":"pub enum DictionaryEncodingOffset { }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":9429},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1509931,"byte_end":1509949,"line_start":3381,"line_end":3381,"column_start":12,"column_end":30},"name":"DictionaryEncoding","qualname":"::ipc::gen::Schema::DictionaryEncoding","value":"DictionaryEncoding { _tab }","parent":null,"children":[{"krate":0,"index":9431}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9431},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1509964,"byte_end":1509968,"line_start":3382,"line_end":3382,"column_start":9,"column_end":13},"name":"_tab","qualname":"::ipc::gen::Schema::DictionaryEncoding::_tab","value":"flatbuffers::Table<'a>","parent":{"krate":0,"index":9429},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6158},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1510316,"byte_end":1510331,"line_start":3397,"line_end":3397,"column_start":12,"column_end":27},"name":"init_from_table","qualname":"<DictionaryEncoding>::init_from_table","value":"pub fn init_from_table(flatbuffers::Table) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1510295,"byte_end":1510304,"line_start":3396,"line_end":3396,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6159},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1510458,"byte_end":1510464,"line_start":3401,"line_end":3401,"column_start":12,"column_end":18},"name":"create","qualname":"<DictionaryEncoding>::create","value":"pub fn create<'bldr:'args, 'args:'mut_bldr,\n              'mut_bldr>(&'mut_bldr mut flatbuffers::FlatBufferBuilder,\n                         &'args DictionaryEncodingArgs)\n-> flatbuffers::WIPOffset<DictionaryEncoding>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(unused_mut)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1510426,"byte_end":1510446,"line_start":3400,"line_end":3400,"column_start":5,"column_end":25}}]},{"kind":"Const","id":{"krate":0,"index":6163},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1511027,"byte_end":1511032,"line_start":3415,"line_end":3415,"column_start":15,"column_end":20},"name":"VT_ID","qualname":"::ipc::gen::Schema::DictionaryEncoding::<'a>::VT_ID","value":"flatbuffers::VOffsetT","parent":{"krate":0,"index":6156},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":6164},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1511075,"byte_end":1511087,"line_start":3416,"line_end":3416,"column_start":15,"column_end":27},"name":"VT_INDEXTYPE","qualname":"::ipc::gen::Schema::DictionaryEncoding::<'a>::VT_INDEXTYPE","value":"flatbuffers::VOffsetT","parent":{"krate":0,"index":6156},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":6165},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1511130,"byte_end":1511142,"line_start":3417,"line_end":3417,"column_start":15,"column_end":27},"name":"VT_ISORDERED","qualname":"::ipc::gen::Schema::DictionaryEncoding::<'a>::VT_ISORDERED","value":"flatbuffers::VOffsetT","parent":{"krate":0,"index":6156},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":6166},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1511185,"byte_end":1511202,"line_start":3418,"line_end":3418,"column_start":15,"column_end":32},"name":"VT_DICTIONARYKIND","qualname":"::ipc::gen::Schema::DictionaryEncoding::<'a>::VT_DICTIONARYKIND","value":"flatbuffers::VOffsetT","parent":{"krate":0,"index":6156},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6167},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1511445,"byte_end":1511447,"line_start":3424,"line_end":3424,"column_start":12,"column_end":14},"name":"id","qualname":"<DictionaryEncoding>::id","value":"pub fn id(&Self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" The known dictionary id in the application where this data is used. In\n the file or streaming formats, the dictionary ids are found in the\n DictionaryBatch messages\n","sig":null,"attributes":[{"value":"/ The known dictionary id in the application where this data is used. In","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1511237,"byte_end":1511311,"line_start":3420,"line_end":3420,"column_start":5,"column_end":79}},{"value":"/ the file or streaming formats, the dictionary ids are found in the","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1511316,"byte_end":1511386,"line_start":3421,"line_end":3421,"column_start":5,"column_end":75}},{"value":"/ DictionaryBatch messages","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1511391,"byte_end":1511419,"line_start":3422,"line_end":3422,"column_start":5,"column_end":33}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1511424,"byte_end":1511433,"line_start":3423,"line_end":3423,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6168},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1511981,"byte_end":1511990,"line_start":3435,"line_end":3435,"column_start":12,"column_end":21},"name":"indexType","qualname":"<DictionaryEncoding>::indexType","value":"pub fn indexType(&Self) -> Option<Int>","parent":null,"children":[],"decl_id":null,"docs":" The dictionary indices are constrained to be non-negative integers. If\n this field is null, the indices must be signed int32. To maximize\n cross-language compatibility and performance, implementations are\n recommended to prefer signed integer types over unsigned integer types\n and to avoid uint64 indices unless they are required by an application.\n","sig":null,"attributes":[{"value":"/ The dictionary indices are constrained to be non-negative integers. If","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1511574,"byte_end":1511648,"line_start":3429,"line_end":3429,"column_start":5,"column_end":79}},{"value":"/ this field is null, the indices must be signed int32. To maximize","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1511653,"byte_end":1511722,"line_start":3430,"line_end":3430,"column_start":5,"column_end":74}},{"value":"/ cross-language compatibility and performance, implementations are","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1511727,"byte_end":1511796,"line_start":3431,"line_end":3431,"column_start":5,"column_end":74}},{"value":"/ recommended to prefer signed integer types over unsigned integer types","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1511801,"byte_end":1511875,"line_start":3432,"line_end":3432,"column_start":5,"column_end":79}},{"value":"/ and to avoid uint64 indices unless they are required by an application.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1511880,"byte_end":1511955,"line_start":3433,"line_end":3433,"column_start":5,"column_end":80}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1511960,"byte_end":1511969,"line_start":3434,"line_end":3434,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6169},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1512457,"byte_end":1512466,"line_start":3446,"line_end":3446,"column_start":12,"column_end":21},"name":"isOrdered","qualname":"<DictionaryEncoding>::isOrdered","value":"pub fn isOrdered(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" By default, dictionaries are not ordered, or the order does not have\n semantic meaning. In some statistical, applications, dictionary-encoding\n is used to represent ordered categorical data, and we provide a way to\n preserve that metadata here\n","sig":null,"attributes":[{"value":"/ By default, dictionaries are not ordered, or the order does not have","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1512163,"byte_end":1512235,"line_start":3441,"line_end":3441,"column_start":5,"column_end":77}},{"value":"/ semantic meaning. In some statistical, applications, dictionary-encoding","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1512240,"byte_end":1512316,"line_start":3442,"line_end":3442,"column_start":5,"column_end":81}},{"value":"/ is used to represent ordered categorical data, and we provide a way to","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1512321,"byte_end":1512395,"line_start":3443,"line_end":3443,"column_start":5,"column_end":79}},{"value":"/ preserve that metadata here","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1512400,"byte_end":1512431,"line_start":3444,"line_end":3444,"column_start":5,"column_end":36}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1512436,"byte_end":1512445,"line_start":3445,"line_end":3445,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6170},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1512627,"byte_end":1512641,"line_start":3452,"line_end":3452,"column_start":12,"column_end":26},"name":"dictionaryKind","qualname":"<DictionaryEncoding>::dictionaryKind","value":"pub fn dictionaryKind(&Self) -> DictionaryKind","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1512606,"byte_end":1512615,"line_start":3451,"line_end":3451,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":6178},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1513677,"byte_end":1513699,"line_start":3486,"line_end":3486,"column_start":12,"column_end":34},"name":"DictionaryEncodingArgs","qualname":"::ipc::gen::Schema::DictionaryEncodingArgs","value":"DictionaryEncodingArgs { id, indexType, isOrdered, dictionaryKind }","parent":null,"children":[{"krate":0,"index":6180},{"krate":0,"index":6181},{"krate":0,"index":6182},{"krate":0,"index":6183}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6180},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1513714,"byte_end":1513716,"line_start":3487,"line_end":3487,"column_start":9,"column_end":11},"name":"id","qualname":"::ipc::gen::Schema::DictionaryEncodingArgs::id","value":"i64","parent":{"krate":0,"index":6178},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6181},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1513731,"byte_end":1513740,"line_start":3488,"line_end":3488,"column_start":9,"column_end":18},"name":"indexType","qualname":"::ipc::gen::Schema::DictionaryEncodingArgs::indexType","value":"std::option::Option<flatbuffers::WIPOffset<ipc::gen::Schema::Int<'a>>>","parent":{"krate":0,"index":6178},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6182},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1513791,"byte_end":1513800,"line_start":3489,"line_end":3489,"column_start":9,"column_end":18},"name":"isOrdered","qualname":"::ipc::gen::Schema::DictionaryEncodingArgs::isOrdered","value":"bool","parent":{"krate":0,"index":6178},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6183},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1513816,"byte_end":1513830,"line_start":3490,"line_end":3490,"column_start":9,"column_end":23},"name":"dictionaryKind","qualname":"::ipc::gen::Schema::DictionaryEncodingArgs::dictionaryKind","value":"ipc::gen::Schema::DictionaryKind","parent":{"krate":0,"index":6178},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6187},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1514137,"byte_end":1514162,"line_start":3503,"line_end":3503,"column_start":12,"column_end":37},"name":"DictionaryEncodingBuilder","qualname":"::ipc::gen::Schema::DictionaryEncodingBuilder","value":"DictionaryEncodingBuilder {  }","parent":null,"children":[{"krate":0,"index":6190},{"krate":0,"index":6191}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6195},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1514386,"byte_end":1514392,"line_start":3509,"line_end":3509,"column_start":12,"column_end":18},"name":"add_id","qualname":"<DictionaryEncodingBuilder>::add_id","value":"pub fn add_id(&mut Self, i64)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1514365,"byte_end":1514374,"line_start":3508,"line_end":3508,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6196},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1514516,"byte_end":1514529,"line_start":3513,"line_end":3513,"column_start":12,"column_end":25},"name":"add_indexType","qualname":"<DictionaryEncodingBuilder>::add_indexType","value":"pub fn add_indexType(&mut Self, flatbuffers::WIPOffset<Int>)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1514495,"byte_end":1514504,"line_start":3512,"line_end":3512,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6197},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1514765,"byte_end":1514778,"line_start":3520,"line_end":3520,"column_start":12,"column_end":25},"name":"add_isOrdered","qualname":"<DictionaryEncodingBuilder>::add_isOrdered","value":"pub fn add_isOrdered(&mut Self, bool)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1514744,"byte_end":1514753,"line_start":3519,"line_end":3519,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6198},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1514942,"byte_end":1514960,"line_start":3525,"line_end":3525,"column_start":12,"column_end":30},"name":"add_dictionaryKind","qualname":"<DictionaryEncodingBuilder>::add_dictionaryKind","value":"pub fn add_dictionaryKind(&mut Self, DictionaryKind)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1514921,"byte_end":1514930,"line_start":3524,"line_end":3524,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6199},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1515214,"byte_end":1515217,"line_start":3533,"line_end":3533,"column_start":12,"column_end":15},"name":"new","qualname":"<DictionaryEncodingBuilder>::new","value":"pub fn new(&'b mut flatbuffers::FlatBufferBuilder)\n-> DictionaryEncodingBuilder","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1515193,"byte_end":1515202,"line_start":3532,"line_end":3532,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6200},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1515490,"byte_end":1515496,"line_start":3543,"line_end":3543,"column_start":12,"column_end":18},"name":"finish","qualname":"<DictionaryEncodingBuilder>::finish","value":"pub fn finish(Self) -> flatbuffers::WIPOffset<DictionaryEncoding>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1515469,"byte_end":1515478,"line_start":3542,"line_end":3542,"column_start":5,"column_end":14}}]},{"kind":"Enum","id":{"krate":0,"index":6203},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1516076,"byte_end":1516087,"line_start":3559,"line_end":3559,"column_start":10,"column_end":21},"name":"FieldOffset","qualname":"::ipc::gen::Schema::FieldOffset","value":"pub enum FieldOffset { }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":9443},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1516305,"byte_end":1516310,"line_start":3565,"line_end":3565,"column_start":12,"column_end":17},"name":"Field","qualname":"::ipc::gen::Schema::Field","value":"Field { _tab }","parent":null,"children":[{"krate":0,"index":9445}],"decl_id":null,"docs":" ----------------------------------------------------------------------\n A field represents a named column in a record / row batch or child of a\n nested type.\n","sig":null,"attributes":[{"value":"/ ----------------------------------------------------------------------","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1516126,"byte_end":1516200,"line_start":3562,"line_end":3562,"column_start":1,"column_end":75}},{"value":"/ A field represents a named column in a record / row batch or child of a","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1516201,"byte_end":1516276,"line_start":3563,"line_end":3563,"column_start":1,"column_end":76}},{"value":"/ nested type.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1516277,"byte_end":1516293,"line_start":3564,"line_end":3564,"column_start":1,"column_end":17}}]},{"kind":"Field","id":{"krate":0,"index":9445},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1516325,"byte_end":1516329,"line_start":3566,"line_end":3566,"column_start":9,"column_end":13},"name":"_tab","qualname":"::ipc::gen::Schema::Field::_tab","value":"flatbuffers::Table<'a>","parent":{"krate":0,"index":9443},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6210},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1516638,"byte_end":1516653,"line_start":3581,"line_end":3581,"column_start":12,"column_end":27},"name":"init_from_table","qualname":"<Field>::init_from_table","value":"pub fn init_from_table(flatbuffers::Table) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1516617,"byte_end":1516626,"line_start":3580,"line_end":3580,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6211},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1516767,"byte_end":1516773,"line_start":3585,"line_end":3585,"column_start":12,"column_end":18},"name":"create","qualname":"<Field>::create","value":"pub fn create<'bldr:'args, 'args:'mut_bldr,\n              'mut_bldr>(&'mut_bldr mut flatbuffers::FlatBufferBuilder,\n                         &'args FieldArgs) -> flatbuffers::WIPOffset<Field>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(unused_mut)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1516735,"byte_end":1516755,"line_start":3584,"line_end":3584,"column_start":5,"column_end":25}}]},{"kind":"Const","id":{"krate":0,"index":6215},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1517606,"byte_end":1517613,"line_start":3610,"line_end":3610,"column_start":15,"column_end":22},"name":"VT_NAME","qualname":"::ipc::gen::Schema::Field::<'a>::VT_NAME","value":"flatbuffers::VOffsetT","parent":{"krate":0,"index":6208},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":6216},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1517656,"byte_end":1517667,"line_start":3611,"line_end":3611,"column_start":15,"column_end":26},"name":"VT_NULLABLE","qualname":"::ipc::gen::Schema::Field::<'a>::VT_NULLABLE","value":"flatbuffers::VOffsetT","parent":{"krate":0,"index":6208},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":6217},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1517710,"byte_end":1517722,"line_start":3612,"line_end":3612,"column_start":15,"column_end":27},"name":"VT_TYPE_TYPE","qualname":"::ipc::gen::Schema::Field::<'a>::VT_TYPE_TYPE","value":"flatbuffers::VOffsetT","parent":{"krate":0,"index":6208},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":6218},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1517765,"byte_end":1517773,"line_start":3613,"line_end":3613,"column_start":15,"column_end":23},"name":"VT_TYPE_","qualname":"::ipc::gen::Schema::Field::<'a>::VT_TYPE_","value":"flatbuffers::VOffsetT","parent":{"krate":0,"index":6208},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":6219},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1517817,"byte_end":1517830,"line_start":3614,"line_end":3614,"column_start":15,"column_end":28},"name":"VT_DICTIONARY","qualname":"::ipc::gen::Schema::Field::<'a>::VT_DICTIONARY","value":"flatbuffers::VOffsetT","parent":{"krate":0,"index":6208},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":6220},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1517874,"byte_end":1517885,"line_start":3615,"line_end":3615,"column_start":15,"column_end":26},"name":"VT_CHILDREN","qualname":"::ipc::gen::Schema::Field::<'a>::VT_CHILDREN","value":"flatbuffers::VOffsetT","parent":{"krate":0,"index":6208},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":6221},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1517929,"byte_end":1517947,"line_start":3616,"line_end":3616,"column_start":15,"column_end":33},"name":"VT_CUSTOM_METADATA","qualname":"::ipc::gen::Schema::Field::<'a>::VT_CUSTOM_METADATA","value":"flatbuffers::VOffsetT","parent":{"krate":0,"index":6208},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6222},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1518048,"byte_end":1518052,"line_start":3620,"line_end":3620,"column_start":12,"column_end":16},"name":"name","qualname":"<Field>::name","value":"pub fn name(&Self) -> Option<&'a str>","parent":null,"children":[],"decl_id":null,"docs":" Name is not required, in i.e. a List\n","sig":null,"attributes":[{"value":"/ Name is not required, in i.e. a List","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1517982,"byte_end":1518022,"line_start":3618,"line_end":3618,"column_start":5,"column_end":45}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1518027,"byte_end":1518036,"line_start":3619,"line_end":3619,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6223},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1518287,"byte_end":1518295,"line_start":3626,"line_end":3626,"column_start":12,"column_end":20},"name":"nullable","qualname":"<Field>::nullable","value":"pub fn nullable(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Whether or not this field can contain nulls. Should be true in general.\n","sig":null,"attributes":[{"value":"/ Whether or not this field can contain nulls. Should be true in general.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1518186,"byte_end":1518261,"line_start":3624,"line_end":3624,"column_start":5,"column_end":80}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1518266,"byte_end":1518275,"line_start":3625,"line_end":3625,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6224},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1518442,"byte_end":1518451,"line_start":3632,"line_end":3632,"column_start":12,"column_end":21},"name":"type_type","qualname":"<Field>::type_type","value":"pub fn type_type(&Self) -> Type","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1518421,"byte_end":1518430,"line_start":3631,"line_end":3631,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6225},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1518686,"byte_end":1518691,"line_start":3639,"line_end":3639,"column_start":12,"column_end":17},"name":"type_","qualname":"<Field>::type_","value":"pub fn type_(&Self) -> Option<flatbuffers::Table>","parent":null,"children":[],"decl_id":null,"docs":" This is the type of the decoded value if the field is dictionary encoded.\n","sig":null,"attributes":[{"value":"/ This is the type of the decoded value if the field is dictionary encoded.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1518583,"byte_end":1518660,"line_start":3637,"line_end":3637,"column_start":5,"column_end":82}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1518665,"byte_end":1518674,"line_start":3638,"line_end":3638,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6226},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1518984,"byte_end":1518994,"line_start":3648,"line_end":3648,"column_start":12,"column_end":22},"name":"dictionary","qualname":"<Field>::dictionary","value":"pub fn dictionary(&Self) -> Option<DictionaryEncoding>","parent":null,"children":[],"decl_id":null,"docs":" Present only if the field is dictionary encoded.\n","sig":null,"attributes":[{"value":"/ Present only if the field is dictionary encoded.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1518906,"byte_end":1518958,"line_start":3646,"line_end":3646,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1518963,"byte_end":1518972,"line_start":3647,"line_end":3647,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6227},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1519366,"byte_end":1519374,"line_start":3658,"line_end":3658,"column_start":12,"column_end":20},"name":"children","qualname":"<Field>::children","value":"pub fn children(&Self) -> Option<flatbuffers::Vector>","parent":null,"children":[],"decl_id":null,"docs":" children apply only to nested data types like Struct, List and Union. For\n primitive types children will have length 0.\n","sig":null,"attributes":[{"value":"/ children apply only to nested data types like Struct, List and Union. For","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1519210,"byte_end":1519287,"line_start":3655,"line_end":3655,"column_start":5,"column_end":82}},{"value":"/ primitive types children will have length 0.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1519292,"byte_end":1519340,"line_start":3656,"line_end":3656,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1519345,"byte_end":1519354,"line_start":3657,"line_end":3657,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6228},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1519701,"byte_end":1519716,"line_start":3667,"line_end":3667,"column_start":12,"column_end":27},"name":"custom_metadata","qualname":"<Field>::custom_metadata","value":"pub fn custom_metadata(&Self) -> Option<flatbuffers::Vector>","parent":null,"children":[],"decl_id":null,"docs":" User-defined metadata\n","sig":null,"attributes":[{"value":"/ User-defined metadata","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1519650,"byte_end":1519675,"line_start":3665,"line_end":3665,"column_start":5,"column_end":30}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1519680,"byte_end":1519689,"line_start":3666,"line_end":3666,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6229},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1520055,"byte_end":1520067,"line_start":3676,"line_end":3676,"column_start":12,"column_end":24},"name":"type_as_null","qualname":"<Field>::type_as_null","value":"pub fn type_as_null(&Self) -> Option<Null>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1520005,"byte_end":1520014,"line_start":3674,"line_end":3674,"column_start":5,"column_end":14}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1520019,"byte_end":1520043,"line_start":3675,"line_end":3675,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6230},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1520298,"byte_end":1520309,"line_start":3686,"line_end":3686,"column_start":12,"column_end":23},"name":"type_as_int","qualname":"<Field>::type_as_int","value":"pub fn type_as_int(&Self) -> Option<Int>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1520248,"byte_end":1520257,"line_start":3684,"line_end":3684,"column_start":5,"column_end":14}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1520262,"byte_end":1520286,"line_start":3685,"line_end":3685,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6231},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1520537,"byte_end":1520559,"line_start":3696,"line_end":3696,"column_start":12,"column_end":34},"name":"type_as_floating_point","qualname":"<Field>::type_as_floating_point","value":"pub fn type_as_floating_point(&Self) -> Option<FloatingPoint>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1520487,"byte_end":1520496,"line_start":3694,"line_end":3694,"column_start":5,"column_end":14}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1520501,"byte_end":1520525,"line_start":3695,"line_end":3695,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6232},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1520817,"byte_end":1520831,"line_start":3706,"line_end":3706,"column_start":12,"column_end":26},"name":"type_as_binary","qualname":"<Field>::type_as_binary","value":"pub fn type_as_binary(&Self) -> Option<Binary>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1520767,"byte_end":1520776,"line_start":3704,"line_end":3704,"column_start":5,"column_end":14}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1520781,"byte_end":1520805,"line_start":3705,"line_end":3705,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6233},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1521068,"byte_end":1521081,"line_start":3716,"line_end":3716,"column_start":12,"column_end":25},"name":"type_as_utf_8","qualname":"<Field>::type_as_utf_8","value":"pub fn type_as_utf_8(&Self) -> Option<Utf8>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1521018,"byte_end":1521027,"line_start":3714,"line_end":3714,"column_start":5,"column_end":14}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1521032,"byte_end":1521056,"line_start":3715,"line_end":3715,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6234},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1521312,"byte_end":1521324,"line_start":3726,"line_end":3726,"column_start":12,"column_end":24},"name":"type_as_bool","qualname":"<Field>::type_as_bool","value":"pub fn type_as_bool(&Self) -> Option<Bool>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1521262,"byte_end":1521271,"line_start":3724,"line_end":3724,"column_start":5,"column_end":14}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1521276,"byte_end":1521300,"line_start":3725,"line_end":3725,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6235},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1521555,"byte_end":1521570,"line_start":3736,"line_end":3736,"column_start":12,"column_end":27},"name":"type_as_decimal","qualname":"<Field>::type_as_decimal","value":"pub fn type_as_decimal(&Self) -> Option<Decimal>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1521505,"byte_end":1521514,"line_start":3734,"line_end":3734,"column_start":5,"column_end":14}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1521519,"byte_end":1521543,"line_start":3735,"line_end":3735,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6236},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1521810,"byte_end":1521822,"line_start":3746,"line_end":3746,"column_start":12,"column_end":24},"name":"type_as_date","qualname":"<Field>::type_as_date","value":"pub fn type_as_date(&Self) -> Option<Date>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1521760,"byte_end":1521769,"line_start":3744,"line_end":3744,"column_start":5,"column_end":14}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1521774,"byte_end":1521798,"line_start":3745,"line_end":3745,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6237},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1522053,"byte_end":1522065,"line_start":3756,"line_end":3756,"column_start":12,"column_end":24},"name":"type_as_time","qualname":"<Field>::type_as_time","value":"pub fn type_as_time(&Self) -> Option<Time>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1522003,"byte_end":1522012,"line_start":3754,"line_end":3754,"column_start":5,"column_end":14}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1522017,"byte_end":1522041,"line_start":3755,"line_end":3755,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6238},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1522296,"byte_end":1522313,"line_start":3766,"line_end":3766,"column_start":12,"column_end":29},"name":"type_as_timestamp","qualname":"<Field>::type_as_timestamp","value":"pub fn type_as_timestamp(&Self) -> Option<Timestamp>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1522246,"byte_end":1522255,"line_start":3764,"line_end":3764,"column_start":5,"column_end":14}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1522260,"byte_end":1522284,"line_start":3765,"line_end":3765,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6239},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1522559,"byte_end":1522575,"line_start":3776,"line_end":3776,"column_start":12,"column_end":28},"name":"type_as_interval","qualname":"<Field>::type_as_interval","value":"pub fn type_as_interval(&Self) -> Option<Interval>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1522509,"byte_end":1522518,"line_start":3774,"line_end":3774,"column_start":5,"column_end":14}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1522523,"byte_end":1522547,"line_start":3775,"line_end":3775,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6240},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1522818,"byte_end":1522830,"line_start":3786,"line_end":3786,"column_start":12,"column_end":24},"name":"type_as_list","qualname":"<Field>::type_as_list","value":"pub fn type_as_list(&Self) -> Option<List>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1522768,"byte_end":1522777,"line_start":3784,"line_end":3784,"column_start":5,"column_end":14}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1522782,"byte_end":1522806,"line_start":3785,"line_end":3785,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6241},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1523061,"byte_end":1523076,"line_start":3796,"line_end":3796,"column_start":12,"column_end":27},"name":"type_as_struct_","qualname":"<Field>::type_as_struct_","value":"pub fn type_as_struct_(&Self) -> Option<Struct_>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1523011,"byte_end":1523020,"line_start":3794,"line_end":3794,"column_start":5,"column_end":14}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1523025,"byte_end":1523049,"line_start":3795,"line_end":3795,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6242},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1523316,"byte_end":1523329,"line_start":3806,"line_end":3806,"column_start":12,"column_end":25},"name":"type_as_union","qualname":"<Field>::type_as_union","value":"pub fn type_as_union(&Self) -> Option<Union>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1523266,"byte_end":1523275,"line_start":3804,"line_end":3804,"column_start":5,"column_end":14}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1523280,"byte_end":1523304,"line_start":3805,"line_end":3805,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6243},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1523563,"byte_end":1523588,"line_start":3816,"line_end":3816,"column_start":12,"column_end":37},"name":"type_as_fixed_size_binary","qualname":"<Field>::type_as_fixed_size_binary","value":"pub fn type_as_fixed_size_binary(&Self) -> Option<FixedSizeBinary>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1523513,"byte_end":1523522,"line_start":3814,"line_end":3814,"column_start":5,"column_end":14}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1523527,"byte_end":1523551,"line_start":3815,"line_end":3815,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6244},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1523852,"byte_end":1523875,"line_start":3826,"line_end":3826,"column_start":12,"column_end":35},"name":"type_as_fixed_size_list","qualname":"<Field>::type_as_fixed_size_list","value":"pub fn type_as_fixed_size_list(&Self) -> Option<FixedSizeList>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1523802,"byte_end":1523811,"line_start":3824,"line_end":3824,"column_start":5,"column_end":14}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1523816,"byte_end":1523840,"line_start":3825,"line_end":3825,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6245},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1524133,"byte_end":1524144,"line_start":3836,"line_end":3836,"column_start":12,"column_end":23},"name":"type_as_map","qualname":"<Field>::type_as_map","value":"pub fn type_as_map(&Self) -> Option<Map>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1524083,"byte_end":1524092,"line_start":3834,"line_end":3834,"column_start":5,"column_end":14}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1524097,"byte_end":1524121,"line_start":3835,"line_end":3835,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6246},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1524372,"byte_end":1524388,"line_start":3846,"line_end":3846,"column_start":12,"column_end":28},"name":"type_as_duration","qualname":"<Field>::type_as_duration","value":"pub fn type_as_duration(&Self) -> Option<Duration>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1524322,"byte_end":1524331,"line_start":3844,"line_end":3844,"column_start":5,"column_end":14}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1524336,"byte_end":1524360,"line_start":3845,"line_end":3845,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6247},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1524631,"byte_end":1524651,"line_start":3856,"line_end":3856,"column_start":12,"column_end":32},"name":"type_as_large_binary","qualname":"<Field>::type_as_large_binary","value":"pub fn type_as_large_binary(&Self) -> Option<LargeBinary>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1524581,"byte_end":1524590,"line_start":3854,"line_end":3854,"column_start":5,"column_end":14}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1524595,"byte_end":1524619,"line_start":3855,"line_end":3855,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6248},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1524903,"byte_end":1524922,"line_start":3866,"line_end":3866,"column_start":12,"column_end":31},"name":"type_as_large_utf_8","qualname":"<Field>::type_as_large_utf_8","value":"pub fn type_as_large_utf_8(&Self) -> Option<LargeUtf8>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1524853,"byte_end":1524862,"line_start":3864,"line_end":3864,"column_start":5,"column_end":14}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1524867,"byte_end":1524891,"line_start":3865,"line_end":3865,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6249},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1525168,"byte_end":1525186,"line_start":3876,"line_end":3876,"column_start":12,"column_end":30},"name":"type_as_large_list","qualname":"<Field>::type_as_large_list","value":"pub fn type_as_large_list(&Self) -> Option<LargeList>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1525118,"byte_end":1525127,"line_start":3874,"line_end":3874,"column_start":5,"column_end":14}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1525132,"byte_end":1525156,"line_start":3875,"line_end":3875,"column_start":5,"column_end":29}}]},{"kind":"Struct","id":{"krate":0,"index":6258},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1528870,"byte_end":1528879,"line_start":3928,"line_end":3928,"column_start":12,"column_end":21},"name":"FieldArgs","qualname":"::ipc::gen::Schema::FieldArgs","value":"FieldArgs { name, nullable, type_type, type_, dictionary, children, custom_metadata }","parent":null,"children":[{"krate":0,"index":6260},{"krate":0,"index":6261},{"krate":0,"index":6262},{"krate":0,"index":6263},{"krate":0,"index":6264},{"krate":0,"index":6265},{"krate":0,"index":6266}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6260},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1528894,"byte_end":1528898,"line_start":3929,"line_end":3929,"column_start":9,"column_end":13},"name":"name","qualname":"::ipc::gen::Schema::FieldArgs::name","value":"std::option::Option<flatbuffers::WIPOffset<&'a str>>","parent":{"krate":0,"index":6258},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6261},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1528949,"byte_end":1528957,"line_start":3930,"line_end":3930,"column_start":9,"column_end":17},"name":"nullable","qualname":"::ipc::gen::Schema::FieldArgs::nullable","value":"bool","parent":{"krate":0,"index":6258},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6262},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1528973,"byte_end":1528982,"line_start":3931,"line_end":3931,"column_start":9,"column_end":18},"name":"type_type","qualname":"::ipc::gen::Schema::FieldArgs::type_type","value":"ipc::gen::Schema::Type","parent":{"krate":0,"index":6258},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6263},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1528998,"byte_end":1529003,"line_start":3932,"line_end":3932,"column_start":9,"column_end":14},"name":"type_","qualname":"::ipc::gen::Schema::FieldArgs::type_","value":"std::option::Option<flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>>","parent":{"krate":0,"index":6258},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6264},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1529074,"byte_end":1529084,"line_start":3933,"line_end":3933,"column_start":9,"column_end":19},"name":"dictionary","qualname":"::ipc::gen::Schema::FieldArgs::dictionary","value":"std::option::Option<flatbuffers::WIPOffset<ipc::gen::Schema::DictionaryEncoding<'a>>>","parent":{"krate":0,"index":6258},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6265},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1529150,"byte_end":1529158,"line_start":3934,"line_end":3934,"column_start":9,"column_end":17},"name":"children","qualname":"::ipc::gen::Schema::FieldArgs::children","value":"std::option::Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<ipc::gen::Schema::Field<'a>>>>>","parent":{"krate":0,"index":6258},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6266},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1529304,"byte_end":1529319,"line_start":3939,"line_end":3939,"column_start":9,"column_end":24},"name":"custom_metadata","qualname":"::ipc::gen::Schema::FieldArgs::custom_metadata","value":"std::option::Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<ipc::gen::Schema::KeyValue<'a>>>>>","parent":{"krate":0,"index":6258},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6270},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1529795,"byte_end":1529807,"line_start":3959,"line_end":3959,"column_start":12,"column_end":24},"name":"FieldBuilder","qualname":"::ipc::gen::Schema::FieldBuilder","value":"FieldBuilder {  }","parent":null,"children":[{"krate":0,"index":6273},{"krate":0,"index":6274}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6278},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1530018,"byte_end":1530026,"line_start":3965,"line_end":3965,"column_start":12,"column_end":20},"name":"add_name","qualname":"<FieldBuilder>::add_name","value":"pub fn add_name(&mut Self, flatbuffers::WIPOffset<&'b str>)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1529997,"byte_end":1530006,"line_start":3964,"line_end":3964,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6279},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1530210,"byte_end":1530222,"line_start":3970,"line_end":3970,"column_start":12,"column_end":24},"name":"add_nullable","qualname":"<FieldBuilder>::add_nullable","value":"pub fn add_nullable(&mut Self, bool)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1530189,"byte_end":1530198,"line_start":3969,"line_end":3969,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6280},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1530370,"byte_end":1530383,"line_start":3975,"line_end":3975,"column_start":12,"column_end":25},"name":"add_type_type","qualname":"<FieldBuilder>::add_type_type","value":"pub fn add_type_type(&mut Self, Type)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1530349,"byte_end":1530358,"line_start":3974,"line_end":3974,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6281},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1530539,"byte_end":1530548,"line_start":3980,"line_end":3980,"column_start":12,"column_end":21},"name":"add_type_","qualname":"<FieldBuilder>::add_type_","value":"pub fn add_type_(&mut Self,\n                 flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1530518,"byte_end":1530527,"line_start":3979,"line_end":3979,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6282},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1530778,"byte_end":1530792,"line_start":3988,"line_end":3988,"column_start":12,"column_end":26},"name":"add_dictionary","qualname":"<FieldBuilder>::add_dictionary","value":"pub fn add_dictionary(&mut Self, flatbuffers::WIPOffset<DictionaryEncoding>)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1530757,"byte_end":1530766,"line_start":3987,"line_end":3987,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6283},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1531096,"byte_end":1531108,"line_start":3999,"line_end":3999,"column_start":12,"column_end":24},"name":"add_children","qualname":"<FieldBuilder>::add_children","value":"pub fn add_children(&mut Self, flatbuffers::WIPOffset<flatbuffers::Vector>)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1531075,"byte_end":1531084,"line_start":3998,"line_end":3998,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6284},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1531407,"byte_end":1531426,"line_start":4009,"line_end":4009,"column_start":12,"column_end":31},"name":"add_custom_metadata","qualname":"<FieldBuilder>::add_custom_metadata","value":"pub fn add_custom_metadata(&mut Self,\n                           flatbuffers::WIPOffset<flatbuffers::Vector>)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1531386,"byte_end":1531395,"line_start":4008,"line_end":4008,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6285},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1531771,"byte_end":1531774,"line_start":4021,"line_end":4021,"column_start":12,"column_end":15},"name":"new","qualname":"<FieldBuilder>::new","value":"pub fn new(&'b mut flatbuffers::FlatBufferBuilder) -> FieldBuilder","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1531750,"byte_end":1531759,"line_start":4020,"line_end":4020,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6286},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1532006,"byte_end":1532012,"line_start":4029,"line_end":4029,"column_start":12,"column_end":18},"name":"finish","qualname":"<FieldBuilder>::finish","value":"pub fn finish(Self) -> flatbuffers::WIPOffset<Field>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1531985,"byte_end":1531994,"line_start":4028,"line_end":4028,"column_start":5,"column_end":14}}]},{"kind":"Enum","id":{"krate":0,"index":6289},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1540411,"byte_end":1540423,"line_start":4263,"line_end":4263,"column_start":10,"column_end":22},"name":"SchemaOffset","qualname":"::ipc::gen::Schema::SchemaOffset","value":"pub enum SchemaOffset { }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":9457},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1540598,"byte_end":1540604,"line_start":4268,"line_end":4268,"column_start":12,"column_end":18},"name":"Schema","qualname":"::ipc::gen::Schema::Schema","value":"Schema { _tab }","parent":null,"children":[{"krate":0,"index":9459}],"decl_id":null,"docs":" ----------------------------------------------------------------------\n A Schema describes the columns in a row batch\n","sig":null,"attributes":[{"value":"/ ----------------------------------------------------------------------","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1540462,"byte_end":1540536,"line_start":4266,"line_end":4266,"column_start":1,"column_end":75}},{"value":"/ A Schema describes the columns in a row batch","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1540537,"byte_end":1540586,"line_start":4267,"line_end":4267,"column_start":1,"column_end":50}}]},{"kind":"Field","id":{"krate":0,"index":9459},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1540619,"byte_end":1540623,"line_start":4269,"line_end":4269,"column_start":9,"column_end":13},"name":"_tab","qualname":"::ipc::gen::Schema::Schema::_tab","value":"flatbuffers::Table<'a>","parent":{"krate":0,"index":9457},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6296},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1540935,"byte_end":1540950,"line_start":4284,"line_end":4284,"column_start":12,"column_end":27},"name":"init_from_table","qualname":"<Schema>::init_from_table","value":"pub fn init_from_table(flatbuffers::Table) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1540914,"byte_end":1540923,"line_start":4283,"line_end":4283,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6297},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1541065,"byte_end":1541071,"line_start":4288,"line_end":4288,"column_start":12,"column_end":18},"name":"create","qualname":"<Schema>::create","value":"pub fn create<'bldr:'args, 'args:'mut_bldr,\n              'mut_bldr>(&'mut_bldr mut flatbuffers::FlatBufferBuilder,\n                         &'args SchemaArgs) -> flatbuffers::WIPOffset<Schema>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(unused_mut)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1541033,"byte_end":1541053,"line_start":4287,"line_end":4287,"column_start":5,"column_end":25}}]},{"kind":"Const","id":{"krate":0,"index":6301},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1541694,"byte_end":1541707,"line_start":4306,"line_end":4306,"column_start":15,"column_end":28},"name":"VT_ENDIANNESS","qualname":"::ipc::gen::Schema::Schema::<'a>::VT_ENDIANNESS","value":"flatbuffers::VOffsetT","parent":{"krate":0,"index":6294},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":6302},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1541750,"byte_end":1541759,"line_start":4307,"line_end":4307,"column_start":15,"column_end":24},"name":"VT_FIELDS","qualname":"::ipc::gen::Schema::Schema::<'a>::VT_FIELDS","value":"flatbuffers::VOffsetT","parent":{"krate":0,"index":6294},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":6303},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1541802,"byte_end":1541820,"line_start":4308,"line_end":4308,"column_start":15,"column_end":33},"name":"VT_CUSTOM_METADATA","qualname":"::ipc::gen::Schema::Schema::<'a>::VT_CUSTOM_METADATA","value":"flatbuffers::VOffsetT","parent":{"krate":0,"index":6294},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":6304},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1541863,"byte_end":1541874,"line_start":4309,"line_end":4309,"column_start":15,"column_end":26},"name":"VT_FEATURES","qualname":"::ipc::gen::Schema::Schema::<'a>::VT_FEATURES","value":"flatbuffers::VOffsetT","parent":{"krate":0,"index":6294},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6305},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1542098,"byte_end":1542108,"line_start":4315,"line_end":4315,"column_start":12,"column_end":22},"name":"endianness","qualname":"<Schema>::endianness","value":"pub fn endianness(&Self) -> Endianness","parent":null,"children":[],"decl_id":null,"docs":" endianness of the buffer\n it is Little Endian by default\n if endianness doesn't match the underlying system then the vectors need to be converted\n","sig":null,"attributes":[{"value":"/ endianness of the buffer","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1541909,"byte_end":1541937,"line_start":4311,"line_end":4311,"column_start":5,"column_end":33}},{"value":"/ it is Little Endian by default","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1541942,"byte_end":1541976,"line_start":4312,"line_end":4312,"column_start":5,"column_end":39}},{"value":"/ if endianness doesn't match the underlying system then the vectors need to be converted","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1541981,"byte_end":1542072,"line_start":4313,"line_end":4313,"column_start":5,"column_end":96}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1542077,"byte_end":1542086,"line_start":4314,"line_end":4314,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6306},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1542283,"byte_end":1542289,"line_start":4321,"line_end":4321,"column_start":12,"column_end":18},"name":"fields","qualname":"<Schema>::fields","value":"pub fn fields(&Self) -> Option<flatbuffers::Vector>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1542262,"byte_end":1542271,"line_start":4320,"line_end":4320,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6307},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1542585,"byte_end":1542600,"line_start":4329,"line_end":4329,"column_start":12,"column_end":27},"name":"custom_metadata","qualname":"<Schema>::custom_metadata","value":"pub fn custom_metadata(&Self) -> Option<flatbuffers::Vector>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1542564,"byte_end":1542573,"line_start":4328,"line_end":4328,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6308},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1542953,"byte_end":1542961,"line_start":4338,"line_end":4338,"column_start":12,"column_end":20},"name":"features","qualname":"<Schema>::features","value":"pub fn features(&Self) -> Option<flatbuffers::Vector>","parent":null,"children":[],"decl_id":null,"docs":" Features used in the stream/file.\n","sig":null,"attributes":[{"value":"/ Features used in the stream/file.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1542890,"byte_end":1542927,"line_start":4336,"line_end":4336,"column_start":5,"column_end":42}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1542932,"byte_end":1542941,"line_start":4337,"line_end":4337,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":6316},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1544041,"byte_end":1544051,"line_start":4363,"line_end":4363,"column_start":12,"column_end":22},"name":"SchemaArgs","qualname":"::ipc::gen::Schema::SchemaArgs","value":"SchemaArgs { endianness, fields, custom_metadata, features }","parent":null,"children":[{"krate":0,"index":6318},{"krate":0,"index":6319},{"krate":0,"index":6320},{"krate":0,"index":6321}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6318},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1544066,"byte_end":1544076,"line_start":4364,"line_end":4364,"column_start":9,"column_end":19},"name":"endianness","qualname":"::ipc::gen::Schema::SchemaArgs::endianness","value":"ipc::gen::Schema::Endianness","parent":{"krate":0,"index":6316},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6319},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1544098,"byte_end":1544104,"line_start":4365,"line_end":4365,"column_start":9,"column_end":15},"name":"fields","qualname":"::ipc::gen::Schema::SchemaArgs::fields","value":"std::option::Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<ipc::gen::Schema::Field<'a>>>>>","parent":{"krate":0,"index":6316},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6320},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1544250,"byte_end":1544265,"line_start":4370,"line_end":4370,"column_start":9,"column_end":24},"name":"custom_metadata","qualname":"::ipc::gen::Schema::SchemaArgs::custom_metadata","value":"std::option::Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<ipc::gen::Schema::KeyValue<'a>>>>>","parent":{"krate":0,"index":6316},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6321},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1544414,"byte_end":1544422,"line_start":4375,"line_end":4375,"column_start":9,"column_end":17},"name":"features","qualname":"::ipc::gen::Schema::SchemaArgs::features","value":"std::option::Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, ipc::gen::Schema::Feature>>>","parent":{"krate":0,"index":6316},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6325},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1544754,"byte_end":1544767,"line_start":4388,"line_end":4388,"column_start":12,"column_end":25},"name":"SchemaBuilder","qualname":"::ipc::gen::Schema::SchemaBuilder","value":"SchemaBuilder {  }","parent":null,"children":[{"krate":0,"index":6328},{"krate":0,"index":6329}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6333},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1544979,"byte_end":1544993,"line_start":4394,"line_end":4394,"column_start":12,"column_end":26},"name":"add_endianness","qualname":"<SchemaBuilder>::add_endianness","value":"pub fn add_endianness(&mut Self, Endianness)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1544958,"byte_end":1544967,"line_start":4393,"line_end":4393,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6334},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1545207,"byte_end":1545217,"line_start":4402,"line_end":4402,"column_start":12,"column_end":22},"name":"add_fields","qualname":"<SchemaBuilder>::add_fields","value":"pub fn add_fields(&mut Self, flatbuffers::WIPOffset<flatbuffers::Vector>)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1545186,"byte_end":1545195,"line_start":4401,"line_end":4401,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6335},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1545511,"byte_end":1545530,"line_start":4412,"line_end":4412,"column_start":12,"column_end":31},"name":"add_custom_metadata","qualname":"<SchemaBuilder>::add_custom_metadata","value":"pub fn add_custom_metadata(&mut Self,\n                           flatbuffers::WIPOffset<flatbuffers::Vector>)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1545490,"byte_end":1545499,"line_start":4411,"line_end":4411,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6336},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1545876,"byte_end":1545888,"line_start":4424,"line_end":4424,"column_start":12,"column_end":24},"name":"add_features","qualname":"<SchemaBuilder>::add_features","value":"pub fn add_features(&mut Self, flatbuffers::WIPOffset<flatbuffers::Vector>)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1545855,"byte_end":1545864,"line_start":4423,"line_end":4423,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6337},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1546133,"byte_end":1546136,"line_start":4432,"line_end":4432,"column_start":12,"column_end":15},"name":"new","qualname":"<SchemaBuilder>::new","value":"pub fn new(&'b mut flatbuffers::FlatBufferBuilder) -> SchemaBuilder","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1546112,"byte_end":1546121,"line_start":4431,"line_end":4431,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6338},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1546385,"byte_end":1546391,"line_start":4442,"line_end":4442,"column_start":12,"column_end":18},"name":"finish","qualname":"<SchemaBuilder>::finish","value":"pub fn finish(Self) -> flatbuffers::WIPOffset<Schema>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1546364,"byte_end":1546373,"line_start":4441,"line_end":4441,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":6341},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1547038,"byte_end":1547056,"line_start":4460,"line_end":4460,"column_start":8,"column_end":26},"name":"get_root_as_schema","qualname":"::ipc::gen::Schema::get_root_as_schema","value":"pub fn get_root_as_schema<'a>(&'a [u8]) -> Schema","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1546936,"byte_end":1546945,"line_start":4458,"line_end":4458,"column_start":1,"column_end":10}},{"value":"deprecated(since = \"1.13\", note =\n             \"Deprecated in favor of `root_as...` methods.\")","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1546946,"byte_end":1547030,"line_start":4459,"line_end":4459,"column_start":1,"column_end":85}}]},{"kind":"Function","id":{"krate":0,"index":6343},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1547259,"byte_end":1547291,"line_start":4466,"line_end":4466,"column_start":8,"column_end":40},"name":"get_size_prefixed_root_as_schema","qualname":"::ipc::gen::Schema::get_size_prefixed_root_as_schema","value":"pub fn get_size_prefixed_root_as_schema<'a>(&'a [u8]) -> Schema","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1547157,"byte_end":1547166,"line_start":4464,"line_end":4464,"column_start":1,"column_end":10}},{"value":"deprecated(since = \"1.13\", note =\n             \"Deprecated in favor of `root_as...` methods.\")","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1547167,"byte_end":1547251,"line_start":4465,"line_end":4465,"column_start":1,"column_end":85}}]},{"kind":"Function","id":{"krate":0,"index":6345},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1547689,"byte_end":1547703,"line_start":4477,"line_end":4477,"column_start":8,"column_end":22},"name":"root_as_schema","qualname":"::ipc::gen::Schema::root_as_schema","value":"pub fn root_as_schema(&[u8]) -> Result<Schema, flatbuffers::InvalidFlatbuffer>","parent":null,"children":[],"decl_id":null,"docs":" Verifies that a buffer of bytes contains a `Schema`\n and returns it.\n Note that verification is still experimental and may not\n catch every error, or be maximally performant. For the\n previous, unchecked, behavior use\n `root_as_schema_unchecked`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1547406,"byte_end":1547415,"line_start":4470,"line_end":4470,"column_start":1,"column_end":10}},{"value":"/ Verifies that a buffer of bytes contains a `Schema`","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1547416,"byte_end":1547471,"line_start":4471,"line_end":4471,"column_start":1,"column_end":56}},{"value":"/ and returns it.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1547472,"byte_end":1547491,"line_start":4472,"line_end":4472,"column_start":1,"column_end":20}},{"value":"/ Note that verification is still experimental and may not","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1547492,"byte_end":1547552,"line_start":4473,"line_end":4473,"column_start":1,"column_end":61}},{"value":"/ catch every error, or be maximally performant. For the","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1547553,"byte_end":1547611,"line_start":4474,"line_end":4474,"column_start":1,"column_end":59}},{"value":"/ previous, unchecked, behavior use","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1547612,"byte_end":1547649,"line_start":4475,"line_end":4475,"column_start":1,"column_end":38}},{"value":"/ `root_as_schema_unchecked`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1547650,"byte_end":1547681,"line_start":4476,"line_end":4476,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":6346},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1548118,"byte_end":1548146,"line_start":4487,"line_end":4487,"column_start":8,"column_end":36},"name":"size_prefixed_root_as_schema","qualname":"::ipc::gen::Schema::size_prefixed_root_as_schema","value":"pub fn size_prefixed_root_as_schema(&[u8])\n-> Result<Schema, flatbuffers::InvalidFlatbuffer>","parent":null,"children":[],"decl_id":null,"docs":" Verifies that a buffer of bytes contains a size prefixed\n `Schema` and returns it.\n Note that verification is still experimental and may not\n catch every error, or be maximally performant. For the\n previous, unchecked, behavior use\n `size_prefixed_root_as_schema_unchecked`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1547807,"byte_end":1547816,"line_start":4480,"line_end":4480,"column_start":1,"column_end":10}},{"value":"/ Verifies that a buffer of bytes contains a size prefixed","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1547817,"byte_end":1547877,"line_start":4481,"line_end":4481,"column_start":1,"column_end":61}},{"value":"/ `Schema` and returns it.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1547878,"byte_end":1547906,"line_start":4482,"line_end":4482,"column_start":1,"column_end":29}},{"value":"/ Note that verification is still experimental and may not","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1547907,"byte_end":1547967,"line_start":4483,"line_end":4483,"column_start":1,"column_end":61}},{"value":"/ catch every error, or be maximally performant. For the","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1547968,"byte_end":1548026,"line_start":4484,"line_end":4484,"column_start":1,"column_end":59}},{"value":"/ previous, unchecked, behavior use","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1548027,"byte_end":1548064,"line_start":4485,"line_end":4485,"column_start":1,"column_end":38}},{"value":"/ `size_prefixed_root_as_schema_unchecked`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1548065,"byte_end":1548110,"line_start":4486,"line_end":4486,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":6347},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1548579,"byte_end":1548603,"line_start":4499,"line_end":4499,"column_start":8,"column_end":32},"name":"root_as_schema_with_opts","qualname":"::ipc::gen::Schema::root_as_schema_with_opts","value":"pub fn root_as_schema_with_opts<'b,\n                                'o>(&'o flatbuffers::VerifierOptions,\n                                    &'b [u8])\n-> Result<Schema, flatbuffers::InvalidFlatbuffer>","parent":null,"children":[],"decl_id":null,"docs":" Verifies, with the given options, that a buffer of bytes\n contains a `Schema` and returns it.\n Note that verification is still experimental and may not\n catch every error, or be maximally performant. For the\n previous, unchecked, behavior use\n `root_as_schema_unchecked`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1548271,"byte_end":1548280,"line_start":4492,"line_end":4492,"column_start":1,"column_end":10}},{"value":"/ Verifies, with the given options, that a buffer of bytes","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1548281,"byte_end":1548341,"line_start":4493,"line_end":4493,"column_start":1,"column_end":61}},{"value":"/ contains a `Schema` and returns it.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1548342,"byte_end":1548381,"line_start":4494,"line_end":4494,"column_start":1,"column_end":40}},{"value":"/ Note that verification is still experimental and may not","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1548382,"byte_end":1548442,"line_start":4495,"line_end":4495,"column_start":1,"column_end":61}},{"value":"/ catch every error, or be maximally performant. For the","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1548443,"byte_end":1548501,"line_start":4496,"line_end":4496,"column_start":1,"column_end":59}},{"value":"/ previous, unchecked, behavior use","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1548502,"byte_end":1548539,"line_start":4497,"line_end":4497,"column_start":1,"column_end":38}},{"value":"/ `root_as_schema_unchecked`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1548540,"byte_end":1548571,"line_start":4498,"line_end":4498,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":6350},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1549124,"byte_end":1549162,"line_start":4512,"line_end":4512,"column_start":8,"column_end":46},"name":"size_prefixed_root_as_schema_with_opts","qualname":"::ipc::gen::Schema::size_prefixed_root_as_schema_with_opts","value":"pub fn size_prefixed_root_as_schema_with_opts<'b,\n                                              'o>(&'o flatbuffers::VerifierOptions,\n                                                  &'b [u8])\n-> Result<Schema, flatbuffers::InvalidFlatbuffer>","parent":null,"children":[],"decl_id":null,"docs":" Verifies, with the given verifier options, that a buffer of\n bytes contains a size prefixed `Schema` and returns\n it. Note that verification is still experimental and may not\n catch every error, or be maximally performant. For the\n previous, unchecked, behavior use\n `root_as_schema_unchecked`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1548793,"byte_end":1548802,"line_start":4505,"line_end":4505,"column_start":1,"column_end":10}},{"value":"/ Verifies, with the given verifier options, that a buffer of","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1548803,"byte_end":1548866,"line_start":4506,"line_end":4506,"column_start":1,"column_end":64}},{"value":"/ bytes contains a size prefixed `Schema` and returns","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1548867,"byte_end":1548922,"line_start":4507,"line_end":4507,"column_start":1,"column_end":56}},{"value":"/ it. Note that verification is still experimental and may not","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1548923,"byte_end":1548987,"line_start":4508,"line_end":4508,"column_start":1,"column_end":65}},{"value":"/ catch every error, or be maximally performant. For the","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1548988,"byte_end":1549046,"line_start":4509,"line_end":4509,"column_start":1,"column_end":59}},{"value":"/ previous, unchecked, behavior use","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1549047,"byte_end":1549084,"line_start":4510,"line_end":4510,"column_start":1,"column_end":38}},{"value":"/ `root_as_schema_unchecked`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1549085,"byte_end":1549116,"line_start":4511,"line_end":4511,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":6353},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1549570,"byte_end":1549594,"line_start":4522,"line_end":4522,"column_start":15,"column_end":39},"name":"root_as_schema_unchecked","qualname":"::ipc::gen::Schema::root_as_schema_unchecked","value":"pub unsafe fn root_as_schema_unchecked(&[u8]) -> Schema","parent":null,"children":[],"decl_id":null,"docs":" Assumes, without verification, that a buffer of bytes contains a Schema and returns it.\n # Safety\n Callers must trust the given bytes do indeed contain a valid `Schema`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1549366,"byte_end":1549375,"line_start":4518,"line_end":4518,"column_start":1,"column_end":10}},{"value":"/ Assumes, without verification, that a buffer of bytes contains a Schema and returns it.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1549376,"byte_end":1549467,"line_start":4519,"line_end":4519,"column_start":1,"column_end":92}},{"value":"/ # Safety","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1549468,"byte_end":1549480,"line_start":4520,"line_end":4520,"column_start":1,"column_end":13}},{"value":"/ Callers must trust the given bytes do indeed contain a valid `Schema`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1549481,"byte_end":1549555,"line_start":4521,"line_end":4521,"column_start":1,"column_end":75}}]},{"kind":"Function","id":{"krate":0,"index":6354},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1549900,"byte_end":1549938,"line_start":4529,"line_end":4529,"column_start":15,"column_end":53},"name":"size_prefixed_root_as_schema_unchecked","qualname":"::ipc::gen::Schema::size_prefixed_root_as_schema_unchecked","value":"pub unsafe fn size_prefixed_root_as_schema_unchecked(&[u8]) -> Schema","parent":null,"children":[],"decl_id":null,"docs":" Assumes, without verification, that a buffer of bytes contains a size prefixed Schema and returns it.\n # Safety\n Callers must trust the given bytes do indeed contain a valid size prefixed `Schema`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1549668,"byte_end":1549677,"line_start":4525,"line_end":4525,"column_start":1,"column_end":10}},{"value":"/ Assumes, without verification, that a buffer of bytes contains a size prefixed Schema and returns it.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1549678,"byte_end":1549783,"line_start":4526,"line_end":4526,"column_start":1,"column_end":106}},{"value":"/ # Safety","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1549784,"byte_end":1549796,"line_start":4527,"line_end":4527,"column_start":1,"column_end":13}},{"value":"/ Callers must trust the given bytes do indeed contain a valid size prefixed `Schema`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1549797,"byte_end":1549885,"line_start":4528,"line_end":4528,"column_start":1,"column_end":89}}]},{"kind":"Function","id":{"krate":0,"index":6355},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1550043,"byte_end":1550063,"line_start":4533,"line_end":4533,"column_start":8,"column_end":28},"name":"finish_schema_buffer","qualname":"::ipc::gen::Schema::finish_schema_buffer","value":"pub fn finish_schema_buffer<'a,\n                            'b>(&'b mut flatbuffers::FlatBufferBuilder,\n                                flatbuffers::WIPOffset<Schema>)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1550026,"byte_end":1550035,"line_start":4532,"line_end":4532,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":6358},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1550224,"byte_end":1550258,"line_start":4541,"line_end":4541,"column_start":8,"column_end":42},"name":"finish_size_prefixed_schema_buffer","qualname":"::ipc::gen::Schema::finish_size_prefixed_schema_buffer","value":"pub fn finish_size_prefixed_schema_buffer<'a,\n                                          'b>(&'b mut flatbuffers::FlatBufferBuilder,\n                                              flatbuffers::WIPOffset<Schema>)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1550207,"byte_end":1550216,"line_start":4540,"line_end":4540,"column_start":1,"column_end":10}}]},{"kind":"Mod","id":{"krate":0,"index":6361},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"SparseTensor","qualname":"::ipc::gen::SparseTensor","value":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","parent":null,"children":[{"krate":0,"index":6362},{"krate":0,"index":6363},{"krate":0,"index":6364},{"krate":0,"index":6367},{"krate":0,"index":6368},{"krate":0,"index":6371},{"krate":0,"index":6374},{"krate":0,"index":6375},{"krate":0,"index":6376},{"krate":0,"index":9471},{"krate":0,"index":9474},{"krate":0,"index":9476},{"krate":0,"index":9477},{"krate":0,"index":9478},{"krate":0,"index":9481},{"krate":0,"index":9482},{"krate":0,"index":9484},{"krate":0,"index":9486},{"krate":0,"index":9488},{"krate":0,"index":6378},{"krate":0,"index":6385},{"krate":0,"index":6387},{"krate":0,"index":6391},{"krate":0,"index":6394},{"krate":0,"index":6397},{"krate":0,"index":6405},{"krate":0,"index":6406},{"krate":0,"index":6407},{"krate":0,"index":6408},{"krate":0,"index":9491},{"krate":0,"index":9494},{"krate":0,"index":9496},{"krate":0,"index":9497},{"krate":0,"index":9498},{"krate":0,"index":9501},{"krate":0,"index":9502},{"krate":0,"index":9504},{"krate":0,"index":9506},{"krate":0,"index":9508},{"krate":0,"index":6410},{"krate":0,"index":6419},{"krate":0,"index":6421},{"krate":0,"index":6422},{"krate":0,"index":6426},{"krate":0,"index":6429},{"krate":0,"index":6432},{"krate":0,"index":6440},{"krate":0,"index":6441},{"krate":0,"index":9511},{"krate":0,"index":9514},{"krate":0,"index":9516},{"krate":0,"index":9519},{"krate":0,"index":9521},{"krate":0,"index":6442},{"krate":0,"index":6446},{"krate":0,"index":6461},{"krate":0,"index":6468},{"krate":0,"index":6474},{"krate":0,"index":6477},{"krate":0,"index":6482},{"krate":0,"index":6491},{"krate":0,"index":6493},{"krate":0,"index":9525},{"krate":0,"index":9528},{"krate":0,"index":9530},{"krate":0,"index":9533},{"krate":0,"index":9535},{"krate":0,"index":6494},{"krate":0,"index":6498},{"krate":0,"index":6515},{"krate":0,"index":6522},{"krate":0,"index":6529},{"krate":0,"index":6532},{"krate":0,"index":6537},{"krate":0,"index":6547},{"krate":0,"index":6549},{"krate":0,"index":9539},{"krate":0,"index":9542},{"krate":0,"index":9544},{"krate":0,"index":9547},{"krate":0,"index":9549},{"krate":0,"index":6550},{"krate":0,"index":6554},{"krate":0,"index":6573},{"krate":0,"index":6580},{"krate":0,"index":6587},{"krate":0,"index":6590},{"krate":0,"index":6595},{"krate":0,"index":6605},{"krate":0,"index":6607},{"krate":0,"index":9553},{"krate":0,"index":9556},{"krate":0,"index":9558},{"krate":0,"index":9561},{"krate":0,"index":9563},{"krate":0,"index":6608},{"krate":0,"index":6612},{"krate":0,"index":6657},{"krate":0,"index":6666},{"krate":0,"index":6675},{"krate":0,"index":6678},{"krate":0,"index":6683},{"krate":0,"index":6695},{"krate":0,"index":6697},{"krate":0,"index":6699},{"krate":0,"index":6701},{"krate":0,"index":6702},{"krate":0,"index":6703},{"krate":0,"index":6706},{"krate":0,"index":6709},{"krate":0,"index":6710},{"krate":0,"index":6711},{"krate":0,"index":6714}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(clippy :: all)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/mod.rs","byte_start":1351796,"byte_end":1351817,"line_start":28,"line_end":28,"column_start":1,"column_end":22}},{"value":"allow(dead_code)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1551218,"byte_end":1551238,"line_start":18,"line_end":18,"column_start":1,"column_end":21}},{"value":"allow(unused_imports)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1551239,"byte_end":1551264,"line_start":19,"line_end":19,"column_start":1,"column_end":26}}]},{"kind":"Const","id":{"krate":0,"index":6374},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1551599,"byte_end":1551637,"line_start":31,"line_end":31,"column_start":11,"column_end":49},"name":"ENUM_MIN_SPARSE_MATRIX_COMPRESSED_AXIS","qualname":"::ipc::gen::SparseTensor::ENUM_MIN_SPARSE_MATRIX_COMPRESSED_AXIS","value":"i16","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"1.13\", note =\n             \"Use associated constants instead. This will no longer be generated in 2021.\")","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1551463,"byte_end":1551588,"line_start":27,"line_end":30,"column_start":1,"column_end":3}}]},{"kind":"Const","id":{"krate":0,"index":6375},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1551784,"byte_end":1551822,"line_start":36,"line_end":36,"column_start":11,"column_end":49},"name":"ENUM_MAX_SPARSE_MATRIX_COMPRESSED_AXIS","qualname":"::ipc::gen::SparseTensor::ENUM_MAX_SPARSE_MATRIX_COMPRESSED_AXIS","value":"i16","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"1.13\", note =\n             \"Use associated constants instead. This will no longer be generated in 2021.\")","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1551648,"byte_end":1551773,"line_start":32,"line_end":35,"column_start":1,"column_end":3}}]},{"kind":"Const","id":{"krate":0,"index":6376},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1552000,"byte_end":1552041,"line_start":42,"line_end":42,"column_start":11,"column_end":52},"name":"ENUM_VALUES_SPARSE_MATRIX_COMPRESSED_AXIS","qualname":"::ipc::gen::SparseTensor::ENUM_VALUES_SPARSE_MATRIX_COMPRESSED_AXIS","value":"[SparseMatrixCompressedAxis; ]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"1.13\", note =\n             \"Use associated constants instead. This will no longer be generated in 2021.\")","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1551833,"byte_end":1551958,"line_start":37,"line_end":40,"column_start":1,"column_end":3}},{"value":"allow(non_camel_case_types)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1551959,"byte_end":1551989,"line_start":41,"line_end":41,"column_start":1,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":9471},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1552253,"byte_end":1552279,"line_start":49,"line_end":49,"column_start":12,"column_end":38},"name":"SparseMatrixCompressedAxis","qualname":"::ipc::gen::SparseTensor::SparseMatrixCompressedAxis","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"repr(transparent)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1552221,"byte_end":1552241,"line_start":48,"line_end":48,"column_start":1,"column_end":21}}]},{"kind":"Field","id":{"krate":0,"index":9473},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1552280,"byte_end":1552287,"line_start":49,"line_end":49,"column_start":39,"column_end":46},"name":"0","qualname":"::ipc::gen::SparseTensor::SparseMatrixCompressedAxis::0","value":"i16","parent":{"krate":0,"index":9471},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":6379},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1552371,"byte_end":1552374,"line_start":52,"line_end":52,"column_start":15,"column_end":18},"name":"Row","qualname":"::ipc::gen::SparseTensor::SparseMatrixCompressedAxis::Row","value":"Self","parent":{"krate":0,"index":6378},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":6380},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1552406,"byte_end":1552412,"line_start":53,"line_end":53,"column_start":15,"column_end":21},"name":"Column","qualname":"::ipc::gen::SparseTensor::SparseMatrixCompressedAxis::Column","value":"Self","parent":{"krate":0,"index":6378},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":6381},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1552445,"byte_end":1552453,"line_start":55,"line_end":55,"column_start":15,"column_end":23},"name":"ENUM_MIN","qualname":"::ipc::gen::SparseTensor::SparseMatrixCompressedAxis::ENUM_MIN","value":"i16","parent":{"krate":0,"index":6378},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":6382},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1552478,"byte_end":1552486,"line_start":56,"line_end":56,"column_start":15,"column_end":23},"name":"ENUM_MAX","qualname":"::ipc::gen::SparseTensor::SparseMatrixCompressedAxis::ENUM_MAX","value":"i16","parent":{"krate":0,"index":6378},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":6383},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1552511,"byte_end":1552522,"line_start":57,"line_end":57,"column_start":15,"column_end":26},"name":"ENUM_VALUES","qualname":"::ipc::gen::SparseTensor::SparseMatrixCompressedAxis::ENUM_VALUES","value":"&'static [Self]","parent":{"krate":0,"index":6378},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6384},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1552634,"byte_end":1552646,"line_start":59,"line_end":59,"column_start":12,"column_end":24},"name":"variant_name","qualname":"<SparseMatrixCompressedAxis>::variant_name","value":"pub fn variant_name(Self) -> Option<&'static str>","parent":null,"children":[],"decl_id":null,"docs":" Returns the variant's name or \"\" if unknown.\n","sig":null,"attributes":[{"value":"/ Returns the variant's name or \"\" if unknown.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1552574,"byte_end":1552622,"line_start":58,"line_end":58,"column_start":5,"column_end":53}}]},{"kind":"Const","id":{"krate":0,"index":6406},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1554421,"byte_end":1554449,"line_start":122,"line_end":122,"column_start":11,"column_end":39},"name":"ENUM_MIN_SPARSE_TENSOR_INDEX","qualname":"::ipc::gen::SparseTensor::ENUM_MIN_SPARSE_TENSOR_INDEX","value":"u8","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"1.13\", note =\n             \"Use associated constants instead. This will no longer be generated in 2021.\")","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1554285,"byte_end":1554410,"line_start":118,"line_end":121,"column_start":1,"column_end":3}}]},{"kind":"Const","id":{"krate":0,"index":6407},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1554595,"byte_end":1554623,"line_start":127,"line_end":127,"column_start":11,"column_end":39},"name":"ENUM_MAX_SPARSE_TENSOR_INDEX","qualname":"::ipc::gen::SparseTensor::ENUM_MAX_SPARSE_TENSOR_INDEX","value":"u8","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"1.13\", note =\n             \"Use associated constants instead. This will no longer be generated in 2021.\")","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1554459,"byte_end":1554584,"line_start":123,"line_end":126,"column_start":1,"column_end":3}}]},{"kind":"Const","id":{"krate":0,"index":6408},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1554800,"byte_end":1554831,"line_start":133,"line_end":133,"column_start":11,"column_end":42},"name":"ENUM_VALUES_SPARSE_TENSOR_INDEX","qualname":"::ipc::gen::SparseTensor::ENUM_VALUES_SPARSE_TENSOR_INDEX","value":"[SparseTensorIndex; ]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"1.13\", note =\n             \"Use associated constants instead. This will no longer be generated in 2021.\")","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1554633,"byte_end":1554758,"line_start":128,"line_end":131,"column_start":1,"column_end":3}},{"value":"allow(non_camel_case_types)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1554759,"byte_end":1554789,"line_start":132,"line_end":132,"column_start":1,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":9491},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1555121,"byte_end":1555138,"line_start":142,"line_end":142,"column_start":12,"column_end":29},"name":"SparseTensorIndex","qualname":"::ipc::gen::SparseTensor::SparseTensorIndex","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"repr(transparent)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1555089,"byte_end":1555109,"line_start":141,"line_end":141,"column_start":1,"column_end":21}}]},{"kind":"Field","id":{"krate":0,"index":9493},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1555139,"byte_end":1555145,"line_start":142,"line_end":142,"column_start":30,"column_end":36},"name":"0","qualname":"::ipc::gen::SparseTensor::SparseTensorIndex::0","value":"u8","parent":{"krate":0,"index":9491},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":6411},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1555220,"byte_end":1555224,"line_start":145,"line_end":145,"column_start":15,"column_end":19},"name":"NONE","qualname":"::ipc::gen::SparseTensor::SparseTensorIndex::NONE","value":"Self","parent":{"krate":0,"index":6410},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":6412},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1555256,"byte_end":1555276,"line_start":146,"line_end":146,"column_start":15,"column_end":35},"name":"SparseTensorIndexCOO","qualname":"::ipc::gen::SparseTensor::SparseTensorIndex::SparseTensorIndexCOO","value":"Self","parent":{"krate":0,"index":6410},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":6413},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1555308,"byte_end":1555328,"line_start":147,"line_end":147,"column_start":15,"column_end":35},"name":"SparseMatrixIndexCSX","qualname":"::ipc::gen::SparseTensor::SparseTensorIndex::SparseMatrixIndexCSX","value":"Self","parent":{"krate":0,"index":6410},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":6414},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1555360,"byte_end":1555380,"line_start":148,"line_end":148,"column_start":15,"column_end":35},"name":"SparseTensorIndexCSF","qualname":"::ipc::gen::SparseTensor::SparseTensorIndex::SparseTensorIndexCSF","value":"Self","parent":{"krate":0,"index":6410},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":6415},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1555413,"byte_end":1555421,"line_start":150,"line_end":150,"column_start":15,"column_end":23},"name":"ENUM_MIN","qualname":"::ipc::gen::SparseTensor::SparseTensorIndex::ENUM_MIN","value":"u8","parent":{"krate":0,"index":6410},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":6416},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1555445,"byte_end":1555453,"line_start":151,"line_end":151,"column_start":15,"column_end":23},"name":"ENUM_MAX","qualname":"::ipc::gen::SparseTensor::SparseTensorIndex::ENUM_MAX","value":"u8","parent":{"krate":0,"index":6410},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":6417},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1555477,"byte_end":1555488,"line_start":152,"line_end":152,"column_start":15,"column_end":26},"name":"ENUM_VALUES","qualname":"::ipc::gen::SparseTensor::SparseTensorIndex::ENUM_VALUES","value":"&'static [Self]","parent":{"krate":0,"index":6410},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6418},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1555710,"byte_end":1555722,"line_start":159,"line_end":159,"column_start":12,"column_end":24},"name":"variant_name","qualname":"<SparseTensorIndex>::variant_name","value":"pub fn variant_name(Self) -> Option<&'static str>","parent":null,"children":[],"decl_id":null,"docs":" Returns the variant's name or \"\" if unknown.\n","sig":null,"attributes":[{"value":"/ Returns the variant's name or \"\" if unknown.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1555650,"byte_end":1555698,"line_start":158,"line_end":158,"column_start":5,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":6421},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1556377,"byte_end":1556410,"line_start":178,"line_end":178,"column_start":12,"column_end":45},"name":"SparseTensorIndexUnionTableOffset","qualname":"::ipc::gen::SparseTensor::SparseTensorIndexUnionTableOffset","value":"SparseTensorIndexUnionTableOffset {  }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":6441},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1557524,"byte_end":1557550,"line_start":221,"line_end":221,"column_start":10,"column_end":36},"name":"SparseTensorIndexCOOOffset","qualname":"::ipc::gen::SparseTensor::SparseTensorIndexCOOOffset","value":"pub enum SparseTensorIndexCOOOffset { }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":9511},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1558829,"byte_end":1558849,"line_start":256,"line_end":256,"column_start":12,"column_end":32},"name":"SparseTensorIndexCOO","qualname":"::ipc::gen::SparseTensor::SparseTensorIndexCOO","value":"SparseTensorIndexCOO { _tab }","parent":null,"children":[{"krate":0,"index":9513}],"decl_id":null,"docs":" ----------------------------------------------------------------------\n EXPERIMENTAL: Data structures for sparse tensors\n Coordinate (COO) format of sparse tensor index.","sig":null,"attributes":[{"value":"/ ----------------------------------------------------------------------","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1557589,"byte_end":1557663,"line_start":224,"line_end":224,"column_start":1,"column_end":75}},{"value":"/ EXPERIMENTAL: Data structures for sparse tensors","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1557664,"byte_end":1557716,"line_start":225,"line_end":225,"column_start":1,"column_end":53}},{"value":"/ Coordinate (COO) format of sparse tensor index.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1557717,"byte_end":1557768,"line_start":226,"line_end":226,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1557769,"byte_end":1557772,"line_start":227,"line_end":227,"column_start":1,"column_end":4}},{"value":"/ COO's index list are represented as a NxM matrix,","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1557773,"byte_end":1557826,"line_start":228,"line_end":228,"column_start":1,"column_end":54}},{"value":"/ where N is the number of non-zero values,","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1557827,"byte_end":1557872,"line_start":229,"line_end":229,"column_start":1,"column_end":46}},{"value":"/ and M is the number of dimensions of a sparse tensor.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1557873,"byte_end":1557930,"line_start":230,"line_end":230,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1557931,"byte_end":1557934,"line_start":231,"line_end":231,"column_start":1,"column_end":4}},{"value":"/ indicesBuffer stores the location and size of the data of this indices","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1557935,"byte_end":1558009,"line_start":232,"line_end":232,"column_start":1,"column_end":75}},{"value":"/ matrix.  The value type and the stride of the indices matrix is","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1558010,"byte_end":1558077,"line_start":233,"line_end":233,"column_start":1,"column_end":68}},{"value":"/ specified in indicesType and indicesStrides fields.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1558078,"byte_end":1558133,"line_start":234,"line_end":234,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1558134,"byte_end":1558137,"line_start":235,"line_end":235,"column_start":1,"column_end":4}},{"value":"/ For example, let X be a 2x3x4x5 tensor, and it has the following","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1558138,"byte_end":1558206,"line_start":236,"line_end":236,"column_start":1,"column_end":69}},{"value":"/ 6 non-zero values:","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1558207,"byte_end":1558229,"line_start":237,"line_end":237,"column_start":1,"column_end":23}},{"value":"/ ```text","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1558230,"byte_end":1558241,"line_start":238,"line_end":238,"column_start":1,"column_end":12}},{"value":"/   X[0, 1, 2, 0] := 1","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1558242,"byte_end":1558266,"line_start":239,"line_end":239,"column_start":1,"column_end":25}},{"value":"/   X[1, 1, 2, 3] := 2","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1558267,"byte_end":1558291,"line_start":240,"line_end":240,"column_start":1,"column_end":25}},{"value":"/   X[0, 2, 1, 0] := 3","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1558292,"byte_end":1558316,"line_start":241,"line_end":241,"column_start":1,"column_end":25}},{"value":"/   X[0, 1, 3, 0] := 4","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1558317,"byte_end":1558341,"line_start":242,"line_end":242,"column_start":1,"column_end":25}},{"value":"/   X[0, 1, 2, 1] := 5","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1558342,"byte_end":1558366,"line_start":243,"line_end":243,"column_start":1,"column_end":25}},{"value":"/   X[1, 2, 0, 4] := 6","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1558367,"byte_end":1558391,"line_start":244,"line_end":244,"column_start":1,"column_end":25}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1558392,"byte_end":1558399,"line_start":245,"line_end":245,"column_start":1,"column_end":8}},{"value":"/ In COO format, the index matrix of X is the following 4x6 matrix:","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1558400,"byte_end":1558469,"line_start":246,"line_end":246,"column_start":1,"column_end":70}},{"value":"/ ```text","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1558470,"byte_end":1558481,"line_start":247,"line_end":247,"column_start":1,"column_end":12}},{"value":"/   [[0, 0, 0, 0, 1, 1],","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1558482,"byte_end":1558508,"line_start":248,"line_end":248,"column_start":1,"column_end":27}},{"value":"/    [1, 1, 1, 2, 1, 2],","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1558509,"byte_end":1558535,"line_start":249,"line_end":249,"column_start":1,"column_end":27}},{"value":"/    [2, 2, 3, 1, 2, 0],","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1558536,"byte_end":1558562,"line_start":250,"line_end":250,"column_start":1,"column_end":27}},{"value":"/    [0, 1, 0, 0, 3, 4]]","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1558563,"byte_end":1558589,"line_start":251,"line_end":251,"column_start":1,"column_end":27}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1558590,"byte_end":1558597,"line_start":252,"line_end":252,"column_start":1,"column_end":8}},{"value":"/ When isCanonical is true, the indices is sorted in lexicographical order","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1558598,"byte_end":1558674,"line_start":253,"line_end":253,"column_start":1,"column_end":77}},{"value":"/ (row-major order), and it does not have duplicated entries.  Otherwise,","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1558675,"byte_end":1558750,"line_start":254,"line_end":254,"column_start":1,"column_end":76}},{"value":"/ the indices may not be sorted, or may have duplicated entries.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1558751,"byte_end":1558817,"line_start":255,"line_end":255,"column_start":1,"column_end":67}}]},{"kind":"Field","id":{"krate":0,"index":9513},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1558864,"byte_end":1558868,"line_start":257,"line_end":257,"column_start":9,"column_end":13},"name":"_tab","qualname":"::ipc::gen::SparseTensor::SparseTensorIndexCOO::_tab","value":"flatbuffers::Table<'a>","parent":{"krate":0,"index":9511},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6448},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1559222,"byte_end":1559237,"line_start":272,"line_end":272,"column_start":12,"column_end":27},"name":"init_from_table","qualname":"<SparseTensorIndexCOO>::init_from_table","value":"pub fn init_from_table(flatbuffers::Table) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1559201,"byte_end":1559210,"line_start":271,"line_end":271,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6449},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1559366,"byte_end":1559372,"line_start":276,"line_end":276,"column_start":12,"column_end":18},"name":"create","qualname":"<SparseTensorIndexCOO>::create","value":"pub fn create<'bldr:'args, 'args:'mut_bldr,\n              'mut_bldr>(&'mut_bldr mut flatbuffers::FlatBufferBuilder,\n                         &'args SparseTensorIndexCOOArgs)\n-> flatbuffers::WIPOffset<SparseTensorIndexCOO>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(unused_mut)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1559334,"byte_end":1559354,"line_start":275,"line_end":275,"column_start":5,"column_end":25}}]},{"kind":"Const","id":{"krate":0,"index":6453},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1560057,"byte_end":1560071,"line_start":294,"line_end":294,"column_start":15,"column_end":29},"name":"VT_INDICESTYPE","qualname":"::ipc::gen::SparseTensor::SparseTensorIndexCOO::<'a>::VT_INDICESTYPE","value":"flatbuffers::VOffsetT","parent":{"krate":0,"index":6446},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":6454},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1560114,"byte_end":1560131,"line_start":295,"line_end":295,"column_start":15,"column_end":32},"name":"VT_INDICESSTRIDES","qualname":"::ipc::gen::SparseTensor::SparseTensorIndexCOO::<'a>::VT_INDICESSTRIDES","value":"flatbuffers::VOffsetT","parent":{"krate":0,"index":6446},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":6455},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1560174,"byte_end":1560190,"line_start":296,"line_end":296,"column_start":15,"column_end":31},"name":"VT_INDICESBUFFER","qualname":"::ipc::gen::SparseTensor::SparseTensorIndexCOO::<'a>::VT_INDICESBUFFER","value":"flatbuffers::VOffsetT","parent":{"krate":0,"index":6446},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":6456},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1560233,"byte_end":1560247,"line_start":297,"line_end":297,"column_start":15,"column_end":29},"name":"VT_ISCANONICAL","qualname":"::ipc::gen::SparseTensor::SparseTensorIndexCOO::<'a>::VT_ISCANONICAL","value":"flatbuffers::VOffsetT","parent":{"krate":0,"index":6446},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6457},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1560347,"byte_end":1560358,"line_start":301,"line_end":301,"column_start":12,"column_end":23},"name":"indicesType","qualname":"<SparseTensorIndexCOO>::indicesType","value":"pub fn indicesType(&Self) -> Int","parent":null,"children":[],"decl_id":null,"docs":" The type of values in indicesBuffer\n","sig":null,"attributes":[{"value":"/ The type of values in indicesBuffer","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1560282,"byte_end":1560321,"line_start":299,"line_end":299,"column_start":5,"column_end":44}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1560326,"byte_end":1560335,"line_start":300,"line_end":300,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6458},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1560733,"byte_end":1560747,"line_start":312,"line_end":312,"column_start":12,"column_end":26},"name":"indicesStrides","qualname":"<SparseTensorIndexCOO>::indicesStrides","value":"pub fn indicesStrides(&Self) -> Option<flatbuffers::Vector>","parent":null,"children":[],"decl_id":null,"docs":" Non-negative byte offsets to advance one value cell along each dimension\n If omitted, default to row-major order (C-like).\n","sig":null,"attributes":[{"value":"/ Non-negative byte offsets to advance one value cell along each dimension","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1560574,"byte_end":1560650,"line_start":309,"line_end":309,"column_start":5,"column_end":81}},{"value":"/ If omitted, default to row-major order (C-like).","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1560655,"byte_end":1560707,"line_start":310,"line_end":310,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1560712,"byte_end":1560721,"line_start":311,"line_end":311,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6459},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1561078,"byte_end":1561091,"line_start":321,"line_end":321,"column_start":12,"column_end":25},"name":"indicesBuffer","qualname":"<SparseTensorIndexCOO>::indicesBuffer","value":"pub fn indicesBuffer(&Self) -> &'a Buffer","parent":null,"children":[],"decl_id":null,"docs":" The location and size of the indices matrix's data\n","sig":null,"attributes":[{"value":"/ The location and size of the indices matrix's data","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1560998,"byte_end":1561052,"line_start":319,"line_end":319,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1561057,"byte_end":1561066,"line_start":320,"line_end":320,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6460},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1561591,"byte_end":1561602,"line_start":332,"line_end":332,"column_start":12,"column_end":23},"name":"isCanonical","qualname":"<SparseTensorIndexCOO>::isCanonical","value":"pub fn isCanonical(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" This flag is true if and only if the indices matrix is sorted in\n row-major order, and does not have duplicated entries.\n This sort order is the same as of Tensorflow's SparseTensor,\n but it is inverse order of SciPy's canonical coo_matrix\n (SciPy employs column-major order for its coo_matrix).\n","sig":null,"attributes":[{"value":"/ This flag is true if and only if the indices matrix is sorted in","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1561238,"byte_end":1561306,"line_start":326,"line_end":326,"column_start":5,"column_end":73}},{"value":"/ row-major order, and does not have duplicated entries.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1561311,"byte_end":1561369,"line_start":327,"line_end":327,"column_start":5,"column_end":63}},{"value":"/ This sort order is the same as of Tensorflow's SparseTensor,","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1561374,"byte_end":1561438,"line_start":328,"line_end":328,"column_start":5,"column_end":69}},{"value":"/ but it is inverse order of SciPy's canonical coo_matrix","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1561443,"byte_end":1561502,"line_start":329,"line_end":329,"column_start":5,"column_end":64}},{"value":"/ (SciPy employs column-major order for its coo_matrix).","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1561507,"byte_end":1561565,"line_start":330,"line_end":330,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1561570,"byte_end":1561579,"line_start":331,"line_end":331,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":6468},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1562626,"byte_end":1562650,"line_start":363,"line_end":363,"column_start":12,"column_end":36},"name":"SparseTensorIndexCOOArgs","qualname":"::ipc::gen::SparseTensor::SparseTensorIndexCOOArgs","value":"SparseTensorIndexCOOArgs { indicesType, indicesStrides, indicesBuffer, isCanonical }","parent":null,"children":[{"krate":0,"index":6470},{"krate":0,"index":6471},{"krate":0,"index":6472},{"krate":0,"index":6473}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6470},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1562665,"byte_end":1562676,"line_start":364,"line_end":364,"column_start":9,"column_end":20},"name":"indicesType","qualname":"::ipc::gen::SparseTensor::SparseTensorIndexCOOArgs::indicesType","value":"std::option::Option<flatbuffers::WIPOffset<ipc::gen::Schema::Int<'a>>>","parent":{"krate":0,"index":6468},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6471},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1562727,"byte_end":1562741,"line_start":365,"line_end":365,"column_start":9,"column_end":23},"name":"indicesStrides","qualname":"::ipc::gen::SparseTensor::SparseTensorIndexCOOArgs::indicesStrides","value":"std::option::Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>","parent":{"krate":0,"index":6468},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6472},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1562813,"byte_end":1562826,"line_start":366,"line_end":366,"column_start":9,"column_end":22},"name":"indicesBuffer","qualname":"::ipc::gen::SparseTensor::SparseTensorIndexCOOArgs::indicesBuffer","value":"std::option::Option<&'a ipc::gen::Schema::Buffer>","parent":{"krate":0,"index":6468},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6473},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1562856,"byte_end":1562867,"line_start":367,"line_end":367,"column_start":9,"column_end":20},"name":"isCanonical","qualname":"::ipc::gen::SparseTensor::SparseTensorIndexCOOArgs::isCanonical","value":"bool","parent":{"krate":0,"index":6468},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6477},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1563200,"byte_end":1563227,"line_start":380,"line_end":380,"column_start":12,"column_end":39},"name":"SparseTensorIndexCOOBuilder","qualname":"::ipc::gen::SparseTensor::SparseTensorIndexCOOBuilder","value":"SparseTensorIndexCOOBuilder {  }","parent":null,"children":[{"krate":0,"index":6480},{"krate":0,"index":6481}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6485},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1563453,"byte_end":1563468,"line_start":386,"line_end":386,"column_start":12,"column_end":27},"name":"add_indicesType","qualname":"<SparseTensorIndexCOOBuilder>::add_indicesType","value":"pub fn add_indicesType(&mut Self, flatbuffers::WIPOffset<Int>)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1563432,"byte_end":1563441,"line_start":385,"line_end":385,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6486},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1563712,"byte_end":1563730,"line_start":393,"line_end":393,"column_start":12,"column_end":30},"name":"add_indicesStrides","qualname":"<SparseTensorIndexCOOBuilder>::add_indicesStrides","value":"pub fn add_indicesStrides(&mut Self,\n                          flatbuffers::WIPOffset<flatbuffers::Vector>)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1563691,"byte_end":1563700,"line_start":392,"line_end":392,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6487},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1564025,"byte_end":1564042,"line_start":403,"line_end":403,"column_start":12,"column_end":29},"name":"add_indicesBuffer","qualname":"<SparseTensorIndexCOOBuilder>::add_indicesBuffer","value":"pub fn add_indicesBuffer(&mut Self, &Buffer)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1564004,"byte_end":1564013,"line_start":402,"line_end":402,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6488},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1564248,"byte_end":1564263,"line_start":410,"line_end":410,"column_start":12,"column_end":27},"name":"add_isCanonical","qualname":"<SparseTensorIndexCOOBuilder>::add_isCanonical","value":"pub fn add_isCanonical(&mut Self, bool)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1564227,"byte_end":1564236,"line_start":409,"line_end":409,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6489},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1564469,"byte_end":1564472,"line_start":418,"line_end":418,"column_start":12,"column_end":15},"name":"new","qualname":"<SparseTensorIndexCOOBuilder>::new","value":"pub fn new(&'b mut flatbuffers::FlatBufferBuilder)\n-> SparseTensorIndexCOOBuilder","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1564448,"byte_end":1564457,"line_start":417,"line_end":417,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6490},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1564749,"byte_end":1564755,"line_start":428,"line_end":428,"column_start":12,"column_end":18},"name":"finish","qualname":"<SparseTensorIndexCOOBuilder>::finish","value":"pub fn finish(Self) -> flatbuffers::WIPOffset<SparseTensorIndexCOO>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1564728,"byte_end":1564737,"line_start":427,"line_end":427,"column_start":5,"column_end":14}}]},{"kind":"Enum","id":{"krate":0,"index":6493},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1565569,"byte_end":1565595,"line_start":448,"line_end":448,"column_start":10,"column_end":36},"name":"SparseMatrixIndexCSXOffset","qualname":"::ipc::gen::SparseTensor::SparseMatrixIndexCSXOffset","value":"pub enum SparseMatrixIndexCSXOffset { }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":9525},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1565700,"byte_end":1565720,"line_start":452,"line_end":452,"column_start":12,"column_end":32},"name":"SparseMatrixIndexCSX","qualname":"::ipc::gen::SparseTensor::SparseMatrixIndexCSX","value":"SparseMatrixIndexCSX { _tab }","parent":null,"children":[{"krate":0,"index":9527}],"decl_id":null,"docs":" Compressed Sparse format, that is matrix-specific.\n","sig":null,"attributes":[{"value":"/ Compressed Sparse format, that is matrix-specific.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1565634,"byte_end":1565688,"line_start":451,"line_end":451,"column_start":1,"column_end":55}}]},{"kind":"Field","id":{"krate":0,"index":9527},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1565735,"byte_end":1565739,"line_start":453,"line_end":453,"column_start":9,"column_end":13},"name":"_tab","qualname":"::ipc::gen::SparseTensor::SparseMatrixIndexCSX::_tab","value":"flatbuffers::Table<'a>","parent":{"krate":0,"index":9525},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6500},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1566093,"byte_end":1566108,"line_start":468,"line_end":468,"column_start":12,"column_end":27},"name":"init_from_table","qualname":"<SparseMatrixIndexCSX>::init_from_table","value":"pub fn init_from_table(flatbuffers::Table) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1566072,"byte_end":1566081,"line_start":467,"line_end":467,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6501},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1566237,"byte_end":1566243,"line_start":472,"line_end":472,"column_start":12,"column_end":18},"name":"create","qualname":"<SparseMatrixIndexCSX>::create","value":"pub fn create<'bldr:'args, 'args:'mut_bldr,\n              'mut_bldr>(&'mut_bldr mut flatbuffers::FlatBufferBuilder,\n                         &'args SparseMatrixIndexCSXArgs)\n-> flatbuffers::WIPOffset<SparseMatrixIndexCSX>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(unused_mut)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1566205,"byte_end":1566225,"line_start":471,"line_end":471,"column_start":5,"column_end":25}}]},{"kind":"Const","id":{"krate":0,"index":6505},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1567022,"byte_end":1567039,"line_start":493,"line_end":493,"column_start":15,"column_end":32},"name":"VT_COMPRESSEDAXIS","qualname":"::ipc::gen::SparseTensor::SparseMatrixIndexCSX::<'a>::VT_COMPRESSEDAXIS","value":"flatbuffers::VOffsetT","parent":{"krate":0,"index":6498},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":6506},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1567082,"byte_end":1567095,"line_start":494,"line_end":494,"column_start":15,"column_end":28},"name":"VT_INDPTRTYPE","qualname":"::ipc::gen::SparseTensor::SparseMatrixIndexCSX::<'a>::VT_INDPTRTYPE","value":"flatbuffers::VOffsetT","parent":{"krate":0,"index":6498},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":6507},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1567138,"byte_end":1567153,"line_start":495,"line_end":495,"column_start":15,"column_end":30},"name":"VT_INDPTRBUFFER","qualname":"::ipc::gen::SparseTensor::SparseMatrixIndexCSX::<'a>::VT_INDPTRBUFFER","value":"flatbuffers::VOffsetT","parent":{"krate":0,"index":6498},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":6508},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1567196,"byte_end":1567210,"line_start":496,"line_end":496,"column_start":15,"column_end":29},"name":"VT_INDICESTYPE","qualname":"::ipc::gen::SparseTensor::SparseMatrixIndexCSX::<'a>::VT_INDICESTYPE","value":"flatbuffers::VOffsetT","parent":{"krate":0,"index":6498},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":6509},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1567254,"byte_end":1567270,"line_start":497,"line_end":497,"column_start":15,"column_end":31},"name":"VT_INDICESBUFFER","qualname":"::ipc::gen::SparseTensor::SparseMatrixIndexCSX::<'a>::VT_INDICESBUFFER","value":"flatbuffers::VOffsetT","parent":{"krate":0,"index":6498},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6510},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1567375,"byte_end":1567389,"line_start":501,"line_end":501,"column_start":12,"column_end":26},"name":"compressedAxis","qualname":"<SparseMatrixIndexCSX>::compressedAxis","value":"pub fn compressedAxis(&Self) -> SparseMatrixCompressedAxis","parent":null,"children":[],"decl_id":null,"docs":" Which axis, row or column, is compressed\n","sig":null,"attributes":[{"value":"/ Which axis, row or column, is compressed","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1567305,"byte_end":1567349,"line_start":499,"line_end":499,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1567354,"byte_end":1567363,"line_start":500,"line_end":500,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6511},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1567717,"byte_end":1567727,"line_start":511,"line_end":511,"column_start":12,"column_end":22},"name":"indptrType","qualname":"<SparseMatrixIndexCSX>::indptrType","value":"pub fn indptrType(&Self) -> Int","parent":null,"children":[],"decl_id":null,"docs":" The type of values in indptrBuffer\n","sig":null,"attributes":[{"value":"/ The type of values in indptrBuffer","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1567653,"byte_end":1567691,"line_start":509,"line_end":509,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1567696,"byte_end":1567705,"line_start":510,"line_end":510,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6512},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1568761,"byte_end":1568773,"line_start":543,"line_end":543,"column_start":12,"column_end":24},"name":"indptrBuffer","qualname":"<SparseMatrixIndexCSX>::indptrBuffer","value":"pub fn indptrBuffer(&Self) -> &'a Buffer","parent":null,"children":[],"decl_id":null,"docs":" indptrBuffer stores the location and size of indptr array that\n represents the range of the rows.\n The i-th row spans from `indptr[i]` to `indptr[i+1]` in the data.\n The length of this array is 1 + (the number of rows), and the type\n of index value is long.","sig":null,"attributes":[{"value":"/ indptrBuffer stores the location and size of indptr array that","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1567942,"byte_end":1568008,"line_start":519,"line_end":519,"column_start":5,"column_end":71}},{"value":"/ represents the range of the rows.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1568013,"byte_end":1568050,"line_start":520,"line_end":520,"column_start":5,"column_end":42}},{"value":"/ The i-th row spans from `indptr[i]` to `indptr[i+1]` in the data.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1568055,"byte_end":1568124,"line_start":521,"line_end":521,"column_start":5,"column_end":74}},{"value":"/ The length of this array is 1 + (the number of rows), and the type","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1568129,"byte_end":1568199,"line_start":522,"line_end":522,"column_start":5,"column_end":75}},{"value":"/ of index value is long.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1568204,"byte_end":1568231,"line_start":523,"line_end":523,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1568236,"byte_end":1568239,"line_start":524,"line_end":524,"column_start":5,"column_end":8}},{"value":"/ For example, let X be the following 6x4 matrix:","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1568244,"byte_end":1568295,"line_start":525,"line_end":525,"column_start":5,"column_end":56}},{"value":"/ ```text","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1568300,"byte_end":1568311,"line_start":526,"line_end":526,"column_start":5,"column_end":16}},{"value":"/   X := [[0, 1, 2, 0],","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1568316,"byte_end":1568341,"line_start":527,"line_end":527,"column_start":5,"column_end":30}},{"value":"/         [0, 0, 3, 0],","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1568346,"byte_end":1568371,"line_start":528,"line_end":528,"column_start":5,"column_end":30}},{"value":"/         [0, 4, 0, 5],","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1568376,"byte_end":1568401,"line_start":529,"line_end":529,"column_start":5,"column_end":30}},{"value":"/         [0, 0, 0, 0],","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1568406,"byte_end":1568431,"line_start":530,"line_end":530,"column_start":5,"column_end":30}},{"value":"/         [6, 0, 7, 8],","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1568436,"byte_end":1568461,"line_start":531,"line_end":531,"column_start":5,"column_end":30}},{"value":"/         [0, 9, 0, 0]].","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1568466,"byte_end":1568492,"line_start":532,"line_end":532,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1568497,"byte_end":1568504,"line_start":533,"line_end":533,"column_start":5,"column_end":12}},{"value":"/ The array of non-zero values in X is:","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1568509,"byte_end":1568550,"line_start":534,"line_end":534,"column_start":5,"column_end":46}},{"value":"/ ```text","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1568555,"byte_end":1568566,"line_start":535,"line_end":535,"column_start":5,"column_end":16}},{"value":"/   values(X) = [1, 2, 3, 4, 5, 6, 7, 8, 9].","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1568571,"byte_end":1568617,"line_start":536,"line_end":536,"column_start":5,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1568622,"byte_end":1568629,"line_start":537,"line_end":537,"column_start":5,"column_end":12}},{"value":"/ And the indptr of X is:","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1568634,"byte_end":1568661,"line_start":538,"line_end":538,"column_start":5,"column_end":32}},{"value":"/ ```text","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1568666,"byte_end":1568677,"line_start":539,"line_end":539,"column_start":5,"column_end":16}},{"value":"/   indptr(X) = [0, 2, 3, 5, 5, 8, 10].","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1568682,"byte_end":1568723,"line_start":540,"line_end":540,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1568728,"byte_end":1568735,"line_start":541,"line_end":541,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1568740,"byte_end":1568749,"line_start":542,"line_end":542,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6513},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1568984,"byte_end":1568995,"line_start":550,"line_end":550,"column_start":12,"column_end":23},"name":"indicesType","qualname":"<SparseMatrixIndexCSX>::indicesType","value":"pub fn indicesType(&Self) -> Int","parent":null,"children":[],"decl_id":null,"docs":" The type of values in indicesBuffer\n","sig":null,"attributes":[{"value":"/ The type of values in indicesBuffer","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1568919,"byte_end":1568958,"line_start":548,"line_end":548,"column_start":5,"column_end":44}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1568963,"byte_end":1568972,"line_start":549,"line_end":549,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6514},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1569636,"byte_end":1569649,"line_start":568,"line_end":568,"column_start":12,"column_end":25},"name":"indicesBuffer","qualname":"<SparseMatrixIndexCSX>::indicesBuffer","value":"pub fn indicesBuffer(&Self) -> &'a Buffer","parent":null,"children":[],"decl_id":null,"docs":" indicesBuffer stores the location and size of the array that\n contains the column indices of the corresponding non-zero values.\n The type of index value is long.","sig":null,"attributes":[{"value":"/ indicesBuffer stores the location and size of the array that","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1569211,"byte_end":1569275,"line_start":558,"line_end":558,"column_start":5,"column_end":69}},{"value":"/ contains the column indices of the corresponding non-zero values.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1569280,"byte_end":1569349,"line_start":559,"line_end":559,"column_start":5,"column_end":74}},{"value":"/ The type of index value is long.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1569354,"byte_end":1569390,"line_start":560,"line_end":560,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1569395,"byte_end":1569398,"line_start":561,"line_end":561,"column_start":5,"column_end":8}},{"value":"/ For example, the indices of the above X is:","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1569403,"byte_end":1569450,"line_start":562,"line_end":562,"column_start":5,"column_end":52}},{"value":"/ ```text","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1569455,"byte_end":1569466,"line_start":563,"line_end":563,"column_start":5,"column_end":16}},{"value":"/   indices(X) = [1, 2, 2, 1, 3, 0, 2, 3, 1].","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1569471,"byte_end":1569518,"line_start":564,"line_end":564,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1569523,"byte_end":1569530,"line_start":565,"line_end":565,"column_start":5,"column_end":12}},{"value":"/ Note that the indices are sorted in lexicographical order for each row.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1569535,"byte_end":1569610,"line_start":566,"line_end":566,"column_start":5,"column_end":80}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1569615,"byte_end":1569624,"line_start":567,"line_end":567,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":6522},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1570815,"byte_end":1570839,"line_start":604,"line_end":604,"column_start":12,"column_end":36},"name":"SparseMatrixIndexCSXArgs","qualname":"::ipc::gen::SparseTensor::SparseMatrixIndexCSXArgs","value":"SparseMatrixIndexCSXArgs { compressedAxis, indptrType, indptrBuffer, indicesType, indicesBuffer }","parent":null,"children":[{"krate":0,"index":6524},{"krate":0,"index":6525},{"krate":0,"index":6526},{"krate":0,"index":6527},{"krate":0,"index":6528}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6524},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1570854,"byte_end":1570868,"line_start":605,"line_end":605,"column_start":9,"column_end":23},"name":"compressedAxis","qualname":"::ipc::gen::SparseTensor::SparseMatrixIndexCSXArgs::compressedAxis","value":"ipc::gen::SparseTensor::SparseMatrixCompressedAxis","parent":{"krate":0,"index":6522},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6525},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1570906,"byte_end":1570916,"line_start":606,"line_end":606,"column_start":9,"column_end":19},"name":"indptrType","qualname":"::ipc::gen::SparseTensor::SparseMatrixIndexCSXArgs::indptrType","value":"std::option::Option<flatbuffers::WIPOffset<ipc::gen::Schema::Int<'a>>>","parent":{"krate":0,"index":6522},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6526},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1570967,"byte_end":1570979,"line_start":607,"line_end":607,"column_start":9,"column_end":21},"name":"indptrBuffer","qualname":"::ipc::gen::SparseTensor::SparseMatrixIndexCSXArgs::indptrBuffer","value":"std::option::Option<&'a ipc::gen::Schema::Buffer>","parent":{"krate":0,"index":6522},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6527},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1571009,"byte_end":1571020,"line_start":608,"line_end":608,"column_start":9,"column_end":20},"name":"indicesType","qualname":"::ipc::gen::SparseTensor::SparseMatrixIndexCSXArgs::indicesType","value":"std::option::Option<flatbuffers::WIPOffset<ipc::gen::Schema::Int<'a>>>","parent":{"krate":0,"index":6522},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6528},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1571071,"byte_end":1571084,"line_start":609,"line_end":609,"column_start":9,"column_end":22},"name":"indicesBuffer","qualname":"::ipc::gen::SparseTensor::SparseMatrixIndexCSXArgs::indicesBuffer","value":"std::option::Option<&'a ipc::gen::Schema::Buffer>","parent":{"krate":0,"index":6522},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6532},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1571530,"byte_end":1571557,"line_start":623,"line_end":623,"column_start":12,"column_end":39},"name":"SparseMatrixIndexCSXBuilder","qualname":"::ipc::gen::SparseTensor::SparseMatrixIndexCSXBuilder","value":"SparseMatrixIndexCSXBuilder {  }","parent":null,"children":[{"krate":0,"index":6535},{"krate":0,"index":6536}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6540},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1571783,"byte_end":1571801,"line_start":629,"line_end":629,"column_start":12,"column_end":30},"name":"add_compressedAxis","qualname":"<SparseMatrixIndexCSXBuilder>::add_compressedAxis","value":"pub fn add_compressedAxis(&mut Self, SparseMatrixCompressedAxis)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1571762,"byte_end":1571771,"line_start":628,"line_end":628,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6541},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1572086,"byte_end":1572100,"line_start":637,"line_end":637,"column_start":12,"column_end":26},"name":"add_indptrType","qualname":"<SparseMatrixIndexCSXBuilder>::add_indptrType","value":"pub fn add_indptrType(&mut Self, flatbuffers::WIPOffset<Int>)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1572065,"byte_end":1572074,"line_start":636,"line_end":636,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6542},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1572341,"byte_end":1572357,"line_start":644,"line_end":644,"column_start":12,"column_end":28},"name":"add_indptrBuffer","qualname":"<SparseMatrixIndexCSXBuilder>::add_indptrBuffer","value":"pub fn add_indptrBuffer(&mut Self, &Buffer)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1572320,"byte_end":1572329,"line_start":643,"line_end":643,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6543},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1572560,"byte_end":1572575,"line_start":651,"line_end":651,"column_start":12,"column_end":27},"name":"add_indicesType","qualname":"<SparseMatrixIndexCSXBuilder>::add_indicesType","value":"pub fn add_indicesType(&mut Self, flatbuffers::WIPOffset<Int>)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1572539,"byte_end":1572548,"line_start":650,"line_end":650,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6544},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1572819,"byte_end":1572836,"line_start":658,"line_end":658,"column_start":12,"column_end":29},"name":"add_indicesBuffer","qualname":"<SparseMatrixIndexCSXBuilder>::add_indicesBuffer","value":"pub fn add_indicesBuffer(&mut Self, &Buffer)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1572798,"byte_end":1572807,"line_start":657,"line_end":657,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6545},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1573042,"byte_end":1573045,"line_start":665,"line_end":665,"column_start":12,"column_end":15},"name":"new","qualname":"<SparseMatrixIndexCSXBuilder>::new","value":"pub fn new(&'b mut flatbuffers::FlatBufferBuilder)\n-> SparseMatrixIndexCSXBuilder","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1573021,"byte_end":1573030,"line_start":664,"line_end":664,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6546},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1573322,"byte_end":1573328,"line_start":675,"line_end":675,"column_start":12,"column_end":18},"name":"finish","qualname":"<SparseMatrixIndexCSXBuilder>::finish","value":"pub fn finish(Self) -> flatbuffers::WIPOffset<SparseMatrixIndexCSX>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1573301,"byte_end":1573310,"line_start":674,"line_end":674,"column_start":5,"column_end":14}}]},{"kind":"Enum","id":{"krate":0,"index":6549},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1574390,"byte_end":1574416,"line_start":700,"line_end":700,"column_start":10,"column_end":36},"name":"SparseTensorIndexCSFOffset","qualname":"::ipc::gen::SparseTensor::SparseTensorIndexCSFOffset","value":"pub enum SparseTensorIndexCSFOffset { }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":9539},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1574521,"byte_end":1574541,"line_start":704,"line_end":704,"column_start":12,"column_end":32},"name":"SparseTensorIndexCSF","qualname":"::ipc::gen::SparseTensor::SparseTensorIndexCSF","value":"SparseTensorIndexCSF { _tab }","parent":null,"children":[{"krate":0,"index":9541}],"decl_id":null,"docs":" Compressed Sparse Fiber (CSF) sparse tensor index.\n","sig":null,"attributes":[{"value":"/ Compressed Sparse Fiber (CSF) sparse tensor index.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1574455,"byte_end":1574509,"line_start":703,"line_end":703,"column_start":1,"column_end":55}}]},{"kind":"Field","id":{"krate":0,"index":9541},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1574556,"byte_end":1574560,"line_start":705,"line_end":705,"column_start":9,"column_end":13},"name":"_tab","qualname":"::ipc::gen::SparseTensor::SparseTensorIndexCSF::_tab","value":"flatbuffers::Table<'a>","parent":{"krate":0,"index":9539},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6556},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1574914,"byte_end":1574929,"line_start":720,"line_end":720,"column_start":12,"column_end":27},"name":"init_from_table","qualname":"<SparseTensorIndexCSF>::init_from_table","value":"pub fn init_from_table(flatbuffers::Table) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1574893,"byte_end":1574902,"line_start":719,"line_end":719,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6557},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1575058,"byte_end":1575064,"line_start":724,"line_end":724,"column_start":12,"column_end":18},"name":"create","qualname":"<SparseTensorIndexCSF>::create","value":"pub fn create<'bldr:'args, 'args:'mut_bldr,\n              'mut_bldr>(&'mut_bldr mut flatbuffers::FlatBufferBuilder,\n                         &'args SparseTensorIndexCSFArgs)\n-> flatbuffers::WIPOffset<SparseTensorIndexCSF>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(unused_mut)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1575026,"byte_end":1575046,"line_start":723,"line_end":723,"column_start":5,"column_end":25}}]},{"kind":"Const","id":{"krate":0,"index":6561},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1575880,"byte_end":1575893,"line_start":747,"line_end":747,"column_start":15,"column_end":28},"name":"VT_INDPTRTYPE","qualname":"::ipc::gen::SparseTensor::SparseTensorIndexCSF::<'a>::VT_INDPTRTYPE","value":"flatbuffers::VOffsetT","parent":{"krate":0,"index":6554},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":6562},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1575936,"byte_end":1575952,"line_start":748,"line_end":748,"column_start":15,"column_end":31},"name":"VT_INDPTRBUFFERS","qualname":"::ipc::gen::SparseTensor::SparseTensorIndexCSF::<'a>::VT_INDPTRBUFFERS","value":"flatbuffers::VOffsetT","parent":{"krate":0,"index":6554},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":6563},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1575995,"byte_end":1576009,"line_start":749,"line_end":749,"column_start":15,"column_end":29},"name":"VT_INDICESTYPE","qualname":"::ipc::gen::SparseTensor::SparseTensorIndexCSF::<'a>::VT_INDICESTYPE","value":"flatbuffers::VOffsetT","parent":{"krate":0,"index":6554},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":6564},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1576052,"byte_end":1576069,"line_start":750,"line_end":750,"column_start":15,"column_end":32},"name":"VT_INDICESBUFFERS","qualname":"::ipc::gen::SparseTensor::SparseTensorIndexCSF::<'a>::VT_INDICESBUFFERS","value":"flatbuffers::VOffsetT","parent":{"krate":0,"index":6554},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":6565},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1576113,"byte_end":1576125,"line_start":751,"line_end":751,"column_start":15,"column_end":27},"name":"VT_AXISORDER","qualname":"::ipc::gen::SparseTensor::SparseTensorIndexCSF::<'a>::VT_AXISORDER","value":"flatbuffers::VOffsetT","parent":{"krate":0,"index":6554},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6566},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1577292,"byte_end":1577302,"line_start":785,"line_end":785,"column_start":12,"column_end":22},"name":"indptrType","qualname":"<SparseTensorIndexCSF>::indptrType","value":"pub fn indptrType(&Self) -> Int","parent":null,"children":[],"decl_id":null,"docs":" CSF is a generalization of compressed sparse row (CSR) index.\n See [smith2017knl](http://shaden.io/pub-files/smith2017knl.pdf)","sig":null,"attributes":[{"value":"/ CSF is a generalization of compressed sparse row (CSR) index.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1576160,"byte_end":1576225,"line_start":753,"line_end":753,"column_start":5,"column_end":70}},{"value":"/ See [smith2017knl](http://shaden.io/pub-files/smith2017knl.pdf)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1576230,"byte_end":1576297,"line_start":754,"line_end":754,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1576302,"byte_end":1576305,"line_start":755,"line_end":755,"column_start":5,"column_end":8}},{"value":"/ CSF index recursively compresses each dimension of a tensor into a set","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1576310,"byte_end":1576384,"line_start":756,"line_end":756,"column_start":5,"column_end":79}},{"value":"/ of prefix trees. Each path from a root to leaf forms one tensor","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1576389,"byte_end":1576456,"line_start":757,"line_end":757,"column_start":5,"column_end":72}},{"value":"/ non-zero index. CSF is implemented with two arrays of buffers and one","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1576461,"byte_end":1576534,"line_start":758,"line_end":758,"column_start":5,"column_end":78}},{"value":"/ arrays of integers.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1576539,"byte_end":1576562,"line_start":759,"line_end":759,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1576567,"byte_end":1576570,"line_start":760,"line_end":760,"column_start":5,"column_end":8}},{"value":"/ For example, let X be a 2x3x4x5 tensor and let it have the following","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1576575,"byte_end":1576647,"line_start":761,"line_end":761,"column_start":5,"column_end":77}},{"value":"/ 8 non-zero values:","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1576652,"byte_end":1576674,"line_start":762,"line_end":762,"column_start":5,"column_end":27}},{"value":"/ ```text","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1576679,"byte_end":1576690,"line_start":763,"line_end":763,"column_start":5,"column_end":16}},{"value":"/   X[0, 0, 0, 1] := 1","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1576695,"byte_end":1576719,"line_start":764,"line_end":764,"column_start":5,"column_end":29}},{"value":"/   X[0, 0, 0, 2] := 2","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1576724,"byte_end":1576748,"line_start":765,"line_end":765,"column_start":5,"column_end":29}},{"value":"/   X[0, 1, 0, 0] := 3","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1576753,"byte_end":1576777,"line_start":766,"line_end":766,"column_start":5,"column_end":29}},{"value":"/   X[0, 1, 0, 2] := 4","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1576782,"byte_end":1576806,"line_start":767,"line_end":767,"column_start":5,"column_end":29}},{"value":"/   X[0, 1, 1, 0] := 5","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1576811,"byte_end":1576835,"line_start":768,"line_end":768,"column_start":5,"column_end":29}},{"value":"/   X[1, 1, 1, 0] := 6","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1576840,"byte_end":1576864,"line_start":769,"line_end":769,"column_start":5,"column_end":29}},{"value":"/   X[1, 1, 1, 1] := 7","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1576869,"byte_end":1576893,"line_start":770,"line_end":770,"column_start":5,"column_end":29}},{"value":"/   X[1, 1, 1, 2] := 8","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1576898,"byte_end":1576922,"line_start":771,"line_end":771,"column_start":5,"column_end":29}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1576927,"byte_end":1576934,"line_start":772,"line_end":772,"column_start":5,"column_end":12}},{"value":"/ As a prefix tree this would be represented as:","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1576939,"byte_end":1576989,"line_start":773,"line_end":773,"column_start":5,"column_end":55}},{"value":"/ ```text","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1576994,"byte_end":1577005,"line_start":774,"line_end":774,"column_start":5,"column_end":16}},{"value":"/         0          1","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1577010,"byte_end":1577034,"line_start":775,"line_end":775,"column_start":5,"column_end":29}},{"value":"/        / \\         |","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1577039,"byte_end":1577063,"line_start":776,"line_end":776,"column_start":5,"column_end":29}},{"value":"/       0   1        1","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1577068,"byte_end":1577092,"line_start":777,"line_end":777,"column_start":5,"column_end":29}},{"value":"/      /   / \\       |","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1577097,"byte_end":1577121,"line_start":778,"line_end":778,"column_start":5,"column_end":29}},{"value":"/     0   0   1      1","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1577126,"byte_end":1577150,"line_start":779,"line_end":779,"column_start":5,"column_end":29}},{"value":"/    /|  /|   |    /| |","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1577155,"byte_end":1577180,"line_start":780,"line_end":780,"column_start":5,"column_end":30}},{"value":"/   1 2 0 2   0   0 1 2","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1577185,"byte_end":1577210,"line_start":781,"line_end":781,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1577215,"byte_end":1577222,"line_start":782,"line_end":782,"column_start":5,"column_end":12}},{"value":"/ The type of values in indptrBuffers","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1577227,"byte_end":1577266,"line_start":783,"line_end":783,"column_start":5,"column_end":44}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1577271,"byte_end":1577280,"line_start":784,"line_end":784,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6567},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1578188,"byte_end":1578201,"line_start":808,"line_end":808,"column_start":12,"column_end":25},"name":"indptrBuffers","qualname":"<SparseTensorIndexCSF>::indptrBuffers","value":"pub fn indptrBuffers(&Self) -> &'a [Buffer]","parent":null,"children":[],"decl_id":null,"docs":" indptrBuffers stores the sparsity structure.\n Each two consecutive dimensions in a tensor correspond to a buffer in\n indptrBuffers. A pair of consecutive values at `indptrBuffers[dim][i]`\n and `indptrBuffers[dim][i + 1]` signify a range of nodes in\n `indicesBuffers[dim + 1]` who are children of `indicesBuffers[dim][i]` node.","sig":null,"attributes":[{"value":"/ indptrBuffers stores the sparsity structure.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1577517,"byte_end":1577565,"line_start":793,"line_end":793,"column_start":5,"column_end":53}},{"value":"/ Each two consecutive dimensions in a tensor correspond to a buffer in","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1577570,"byte_end":1577643,"line_start":794,"line_end":794,"column_start":5,"column_end":78}},{"value":"/ indptrBuffers. A pair of consecutive values at `indptrBuffers[dim][i]`","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1577648,"byte_end":1577722,"line_start":795,"line_end":795,"column_start":5,"column_end":79}},{"value":"/ and `indptrBuffers[dim][i + 1]` signify a range of nodes in","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1577727,"byte_end":1577790,"line_start":796,"line_end":796,"column_start":5,"column_end":68}},{"value":"/ `indicesBuffers[dim + 1]` who are children of `indicesBuffers[dim][i]` node.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1577795,"byte_end":1577875,"line_start":797,"line_end":797,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1577880,"byte_end":1577883,"line_start":798,"line_end":798,"column_start":5,"column_end":8}},{"value":"/ For example, the indptrBuffers for the above X is:","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1577888,"byte_end":1577942,"line_start":799,"line_end":799,"column_start":5,"column_end":59}},{"value":"/ ```text","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1577947,"byte_end":1577958,"line_start":800,"line_end":800,"column_start":5,"column_end":16}},{"value":"/   indptrBuffer(X) = [","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1577963,"byte_end":1577988,"line_start":801,"line_end":801,"column_start":5,"column_end":30}},{"value":"/                       [0, 2, 3],","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1577993,"byte_end":1578029,"line_start":802,"line_end":802,"column_start":5,"column_end":41}},{"value":"/                       [0, 1, 3, 4],","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1578034,"byte_end":1578073,"line_start":803,"line_end":803,"column_start":5,"column_end":44}},{"value":"/                       [0, 2, 4, 5, 8]","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1578078,"byte_end":1578119,"line_start":804,"line_end":804,"column_start":5,"column_end":46}},{"value":"/                     ].","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1578124,"byte_end":1578150,"line_start":805,"line_end":805,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1578155,"byte_end":1578162,"line_start":806,"line_end":806,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1578167,"byte_end":1578176,"line_start":807,"line_end":807,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6569},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1578555,"byte_end":1578566,"line_start":819,"line_end":819,"column_start":12,"column_end":23},"name":"indicesType","qualname":"<SparseTensorIndexCSF>::indicesType","value":"pub fn indicesType(&Self) -> Int","parent":null,"children":[],"decl_id":null,"docs":" The type of values in indicesBuffers\n","sig":null,"attributes":[{"value":"/ The type of values in indicesBuffers","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1578489,"byte_end":1578529,"line_start":817,"line_end":817,"column_start":5,"column_end":45}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1578534,"byte_end":1578543,"line_start":818,"line_end":818,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6570},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1579256,"byte_end":1579270,"line_start":839,"line_end":839,"column_start":12,"column_end":26},"name":"indicesBuffers","qualname":"<SparseTensorIndexCSF>::indicesBuffers","value":"pub fn indicesBuffers(&Self) -> &'a [Buffer]","parent":null,"children":[],"decl_id":null,"docs":" indicesBuffers stores values of nodes.\n Each tensor dimension corresponds to a buffer in indicesBuffers.\n For example, the indicesBuffers for the above X is:\n ```text\n   indicesBuffer(X) = [\n                        [0, 1],\n                        [0, 1, 1],\n                        [0, 0, 1, 1],\n                        [1, 2, 0, 2, 0, 0, 1, 2]\n                      ].\n ```\n","sig":null,"attributes":[{"value":"/ indicesBuffers stores values of nodes.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1578782,"byte_end":1578824,"line_start":827,"line_end":827,"column_start":5,"column_end":47}},{"value":"/ Each tensor dimension corresponds to a buffer in indicesBuffers.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1578829,"byte_end":1578897,"line_start":828,"line_end":828,"column_start":5,"column_end":73}},{"value":"/ For example, the indicesBuffers for the above X is:","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1578902,"byte_end":1578957,"line_start":829,"line_end":829,"column_start":5,"column_end":60}},{"value":"/ ```text","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1578962,"byte_end":1578973,"line_start":830,"line_end":830,"column_start":5,"column_end":16}},{"value":"/   indicesBuffer(X) = [","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1578978,"byte_end":1579004,"line_start":831,"line_end":831,"column_start":5,"column_end":31}},{"value":"/                        [0, 1],","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1579009,"byte_end":1579043,"line_start":832,"line_end":832,"column_start":5,"column_end":39}},{"value":"/                        [0, 1, 1],","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1579048,"byte_end":1579085,"line_start":833,"line_end":833,"column_start":5,"column_end":42}},{"value":"/                        [0, 0, 1, 1],","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1579090,"byte_end":1579130,"line_start":834,"line_end":834,"column_start":5,"column_end":45}},{"value":"/                        [1, 2, 0, 2, 0, 0, 1, 2]","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1579135,"byte_end":1579186,"line_start":835,"line_end":835,"column_start":5,"column_end":56}},{"value":"/                      ].","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1579191,"byte_end":1579218,"line_start":836,"line_end":836,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1579223,"byte_end":1579230,"line_start":837,"line_end":837,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1579235,"byte_end":1579244,"line_start":838,"line_end":838,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6572},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1579811,"byte_end":1579820,"line_start":855,"line_end":855,"column_start":12,"column_end":21},"name":"axisOrder","qualname":"<SparseTensorIndexCSF>::axisOrder","value":"pub fn axisOrder(&Self) -> flatbuffers::Vector","parent":null,"children":[],"decl_id":null,"docs":" axisOrder stores the sequence in which dimensions were traversed to\n produce the prefix tree.\n For example, the axisOrder for the above X is:\n ```text\n   axisOrder(X) = [0, 1, 2, 3].\n ```\n","sig":null,"attributes":[{"value":"/ axisOrder stores the sequence in which dimensions were traversed to","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1579559,"byte_end":1579630,"line_start":848,"line_end":848,"column_start":5,"column_end":76}},{"value":"/ produce the prefix tree.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1579635,"byte_end":1579663,"line_start":849,"line_end":849,"column_start":5,"column_end":33}},{"value":"/ For example, the axisOrder for the above X is:","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1579668,"byte_end":1579718,"line_start":850,"line_end":850,"column_start":5,"column_end":55}},{"value":"/ ```text","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1579723,"byte_end":1579734,"line_start":851,"line_end":851,"column_start":5,"column_end":16}},{"value":"/   axisOrder(X) = [0, 1, 2, 3].","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1579739,"byte_end":1579773,"line_start":852,"line_end":852,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1579778,"byte_end":1579785,"line_start":853,"line_end":853,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1579790,"byte_end":1579799,"line_start":854,"line_end":854,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":6580},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1581360,"byte_end":1581384,"line_start":902,"line_end":902,"column_start":12,"column_end":36},"name":"SparseTensorIndexCSFArgs","qualname":"::ipc::gen::SparseTensor::SparseTensorIndexCSFArgs","value":"SparseTensorIndexCSFArgs { indptrType, indptrBuffers, indicesType, indicesBuffers, axisOrder }","parent":null,"children":[{"krate":0,"index":6582},{"krate":0,"index":6583},{"krate":0,"index":6584},{"krate":0,"index":6585},{"krate":0,"index":6586}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6582},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1581399,"byte_end":1581409,"line_start":903,"line_end":903,"column_start":9,"column_end":19},"name":"indptrType","qualname":"::ipc::gen::SparseTensor::SparseTensorIndexCSFArgs::indptrType","value":"std::option::Option<flatbuffers::WIPOffset<ipc::gen::Schema::Int<'a>>>","parent":{"krate":0,"index":6580},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6583},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1581460,"byte_end":1581473,"line_start":904,"line_end":904,"column_start":9,"column_end":22},"name":"indptrBuffers","qualname":"::ipc::gen::SparseTensor::SparseTensorIndexCSFArgs::indptrBuffers","value":"std::option::Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, ipc::gen::Schema::Buffer>>>","parent":{"krate":0,"index":6580},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6584},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1581548,"byte_end":1581559,"line_start":905,"line_end":905,"column_start":9,"column_end":20},"name":"indicesType","qualname":"::ipc::gen::SparseTensor::SparseTensorIndexCSFArgs::indicesType","value":"std::option::Option<flatbuffers::WIPOffset<ipc::gen::Schema::Int<'a>>>","parent":{"krate":0,"index":6580},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6585},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1581610,"byte_end":1581624,"line_start":906,"line_end":906,"column_start":9,"column_end":23},"name":"indicesBuffers","qualname":"::ipc::gen::SparseTensor::SparseTensorIndexCSFArgs::indicesBuffers","value":"std::option::Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, ipc::gen::Schema::Buffer>>>","parent":{"krate":0,"index":6580},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6586},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1581699,"byte_end":1581708,"line_start":907,"line_end":907,"column_start":9,"column_end":18},"name":"axisOrder","qualname":"::ipc::gen::SparseTensor::SparseTensorIndexCSFArgs::axisOrder","value":"std::option::Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>","parent":{"krate":0,"index":6580},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6590},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1582191,"byte_end":1582218,"line_start":921,"line_end":921,"column_start":12,"column_end":39},"name":"SparseTensorIndexCSFBuilder","qualname":"::ipc::gen::SparseTensor::SparseTensorIndexCSFBuilder","value":"SparseTensorIndexCSFBuilder {  }","parent":null,"children":[{"krate":0,"index":6593},{"krate":0,"index":6594}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6598},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1582444,"byte_end":1582458,"line_start":927,"line_end":927,"column_start":12,"column_end":26},"name":"add_indptrType","qualname":"<SparseTensorIndexCSFBuilder>::add_indptrType","value":"pub fn add_indptrType(&mut Self, flatbuffers::WIPOffset<Int>)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1582423,"byte_end":1582432,"line_start":926,"line_end":926,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6599},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1582699,"byte_end":1582716,"line_start":934,"line_end":934,"column_start":12,"column_end":29},"name":"add_indptrBuffers","qualname":"<SparseTensorIndexCSFBuilder>::add_indptrBuffers","value":"pub fn add_indptrBuffers(&mut Self,\n                         flatbuffers::WIPOffset<flatbuffers::Vector>)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1582678,"byte_end":1582687,"line_start":933,"line_end":933,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6600},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1583011,"byte_end":1583026,"line_start":944,"line_end":944,"column_start":12,"column_end":27},"name":"add_indicesType","qualname":"<SparseTensorIndexCSFBuilder>::add_indicesType","value":"pub fn add_indicesType(&mut Self, flatbuffers::WIPOffset<Int>)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1582990,"byte_end":1582999,"line_start":943,"line_end":943,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6601},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1583270,"byte_end":1583288,"line_start":951,"line_end":951,"column_start":12,"column_end":30},"name":"add_indicesBuffers","qualname":"<SparseTensorIndexCSFBuilder>::add_indicesBuffers","value":"pub fn add_indicesBuffers(&mut Self,\n                          flatbuffers::WIPOffset<flatbuffers::Vector>)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1583249,"byte_end":1583258,"line_start":950,"line_end":950,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6602},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1583586,"byte_end":1583599,"line_start":961,"line_end":961,"column_start":12,"column_end":25},"name":"add_axisOrder","qualname":"<SparseTensorIndexCSFBuilder>::add_axisOrder","value":"pub fn add_axisOrder(&mut Self, flatbuffers::WIPOffset<flatbuffers::Vector>)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1583565,"byte_end":1583574,"line_start":960,"line_end":960,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6603},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1583879,"byte_end":1583882,"line_start":971,"line_end":971,"column_start":12,"column_end":15},"name":"new","qualname":"<SparseTensorIndexCSFBuilder>::new","value":"pub fn new(&'b mut flatbuffers::FlatBufferBuilder)\n-> SparseTensorIndexCSFBuilder","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1583858,"byte_end":1583867,"line_start":970,"line_end":970,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6604},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1584159,"byte_end":1584165,"line_start":981,"line_end":981,"column_start":12,"column_end":18},"name":"finish","qualname":"<SparseTensorIndexCSFBuilder>::finish","value":"pub fn finish(Self) -> flatbuffers::WIPOffset<SparseTensorIndexCSF>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1584138,"byte_end":1584147,"line_start":980,"line_end":980,"column_start":5,"column_end":14}}]},{"kind":"Enum","id":{"krate":0,"index":6607},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1585318,"byte_end":1585336,"line_start":1008,"line_end":1008,"column_start":10,"column_end":28},"name":"SparseTensorOffset","qualname":"::ipc::gen::SparseTensor::SparseTensorOffset","value":"pub enum SparseTensorOffset { }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":9553},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1585386,"byte_end":1585398,"line_start":1011,"line_end":1011,"column_start":12,"column_end":24},"name":"SparseTensor","qualname":"::ipc::gen::SparseTensor::SparseTensor","value":"SparseTensor { _tab }","parent":null,"children":[{"krate":0,"index":9555}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9555},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1585413,"byte_end":1585417,"line_start":1012,"line_end":1012,"column_start":9,"column_end":13},"name":"_tab","qualname":"::ipc::gen::SparseTensor::SparseTensor::_tab","value":"flatbuffers::Table<'a>","parent":{"krate":0,"index":9553},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6614},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1585747,"byte_end":1585762,"line_start":1027,"line_end":1027,"column_start":12,"column_end":27},"name":"init_from_table","qualname":"<SparseTensor>::init_from_table","value":"pub fn init_from_table(flatbuffers::Table) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1585726,"byte_end":1585735,"line_start":1026,"line_end":1026,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6615},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1585883,"byte_end":1585889,"line_start":1031,"line_end":1031,"column_start":12,"column_end":18},"name":"create","qualname":"<SparseTensor>::create","value":"pub fn create<'bldr:'args, 'args:'mut_bldr,\n              'mut_bldr>(&'mut_bldr mut flatbuffers::FlatBufferBuilder,\n                         &'args SparseTensorArgs)\n-> flatbuffers::WIPOffset<SparseTensor>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(unused_mut)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1585851,"byte_end":1585871,"line_start":1030,"line_end":1030,"column_start":5,"column_end":25}}]},{"kind":"Const","id":{"krate":0,"index":6619},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1586712,"byte_end":1586724,"line_start":1054,"line_end":1054,"column_start":15,"column_end":27},"name":"VT_TYPE_TYPE","qualname":"::ipc::gen::SparseTensor::SparseTensor::<'a>::VT_TYPE_TYPE","value":"flatbuffers::VOffsetT","parent":{"krate":0,"index":6612},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":6620},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1586767,"byte_end":1586775,"line_start":1055,"line_end":1055,"column_start":15,"column_end":23},"name":"VT_TYPE_","qualname":"::ipc::gen::SparseTensor::SparseTensor::<'a>::VT_TYPE_","value":"flatbuffers::VOffsetT","parent":{"krate":0,"index":6612},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":6621},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1586818,"byte_end":1586826,"line_start":1056,"line_end":1056,"column_start":15,"column_end":23},"name":"VT_SHAPE","qualname":"::ipc::gen::SparseTensor::SparseTensor::<'a>::VT_SHAPE","value":"flatbuffers::VOffsetT","parent":{"krate":0,"index":6612},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":6622},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1586869,"byte_end":1586887,"line_start":1057,"line_end":1057,"column_start":15,"column_end":33},"name":"VT_NON_ZERO_LENGTH","qualname":"::ipc::gen::SparseTensor::SparseTensor::<'a>::VT_NON_ZERO_LENGTH","value":"flatbuffers::VOffsetT","parent":{"krate":0,"index":6612},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":6623},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1586931,"byte_end":1586950,"line_start":1058,"line_end":1058,"column_start":15,"column_end":34},"name":"VT_SPARSEINDEX_TYPE","qualname":"::ipc::gen::SparseTensor::SparseTensor::<'a>::VT_SPARSEINDEX_TYPE","value":"flatbuffers::VOffsetT","parent":{"krate":0,"index":6612},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":6624},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1586994,"byte_end":1587008,"line_start":1059,"line_end":1059,"column_start":15,"column_end":29},"name":"VT_SPARSEINDEX","qualname":"::ipc::gen::SparseTensor::SparseTensor::<'a>::VT_SPARSEINDEX","value":"flatbuffers::VOffsetT","parent":{"krate":0,"index":6612},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":6625},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1587052,"byte_end":1587059,"line_start":1060,"line_end":1060,"column_start":15,"column_end":22},"name":"VT_DATA","qualname":"::ipc::gen::SparseTensor::SparseTensor::<'a>::VT_DATA","value":"flatbuffers::VOffsetT","parent":{"krate":0,"index":6612},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6626},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1587115,"byte_end":1587124,"line_start":1063,"line_end":1063,"column_start":12,"column_end":21},"name":"type_type","qualname":"<SparseTensor>::type_type","value":"pub fn type_type(&Self) -> Type","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1587094,"byte_end":1587103,"line_start":1062,"line_end":1062,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6627},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1587434,"byte_end":1587439,"line_start":1072,"line_end":1072,"column_start":12,"column_end":17},"name":"type_","qualname":"<SparseTensor>::type_","value":"pub fn type_(&Self) -> flatbuffers::Table","parent":null,"children":[],"decl_id":null,"docs":" The type of data contained in a value cell.\n Currently only fixed-width value types are supported,\n no strings or nested types.\n","sig":null,"attributes":[{"value":"/ The type of data contained in a value cell.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1587263,"byte_end":1587310,"line_start":1068,"line_end":1068,"column_start":5,"column_end":52}},{"value":"/ Currently only fixed-width value types are supported,","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1587315,"byte_end":1587372,"line_start":1069,"line_end":1069,"column_start":5,"column_end":62}},{"value":"/ no strings or nested types.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1587377,"byte_end":1587408,"line_start":1070,"line_end":1070,"column_start":5,"column_end":36}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1587413,"byte_end":1587422,"line_start":1071,"line_end":1071,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6628},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1587752,"byte_end":1587757,"line_start":1082,"line_end":1082,"column_start":12,"column_end":17},"name":"shape","qualname":"<SparseTensor>::shape","value":"pub fn shape(&Self) -> flatbuffers::Vector","parent":null,"children":[],"decl_id":null,"docs":" The dimensions of the tensor, optionally named.\n","sig":null,"attributes":[{"value":"/ The dimensions of the tensor, optionally named.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1587675,"byte_end":1587726,"line_start":1080,"line_end":1080,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1587731,"byte_end":1587740,"line_start":1081,"line_end":1081,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6629},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1588159,"byte_end":1588174,"line_start":1093,"line_end":1093,"column_start":12,"column_end":27},"name":"non_zero_length","qualname":"<SparseTensor>::non_zero_length","value":"pub fn non_zero_length(&Self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" The number of non-zero values in a sparse tensor.\n","sig":null,"attributes":[{"value":"/ The number of non-zero values in a sparse tensor.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1588080,"byte_end":1588133,"line_start":1091,"line_end":1091,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1588138,"byte_end":1588147,"line_start":1092,"line_end":1092,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6630},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1588329,"byte_end":1588345,"line_start":1099,"line_end":1099,"column_start":12,"column_end":28},"name":"sparseIndex_type","qualname":"<SparseTensor>::sparseIndex_type","value":"pub fn sparseIndex_type(&Self) -> SparseTensorIndex","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1588308,"byte_end":1588317,"line_start":1098,"line_end":1098,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6631},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1588626,"byte_end":1588637,"line_start":1109,"line_end":1109,"column_start":12,"column_end":23},"name":"sparseIndex","qualname":"<SparseTensor>::sparseIndex","value":"pub fn sparseIndex(&Self) -> flatbuffers::Table","parent":null,"children":[],"decl_id":null,"docs":" Sparse tensor index\n","sig":null,"attributes":[{"value":"/ Sparse tensor index","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1588577,"byte_end":1588600,"line_start":1107,"line_end":1107,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1588605,"byte_end":1588614,"line_start":1108,"line_end":1108,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6632},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1588951,"byte_end":1588955,"line_start":1119,"line_end":1119,"column_start":12,"column_end":16},"name":"data","qualname":"<SparseTensor>::data","value":"pub fn data(&Self) -> &'a Buffer","parent":null,"children":[],"decl_id":null,"docs":" The location and size of the tensor's data\n","sig":null,"attributes":[{"value":"/ The location and size of the tensor's data","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1588879,"byte_end":1588925,"line_start":1117,"line_end":1117,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1588930,"byte_end":1588939,"line_start":1118,"line_end":1118,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6633},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1589135,"byte_end":1589147,"line_start":1126,"line_end":1126,"column_start":12,"column_end":24},"name":"type_as_null","qualname":"<SparseTensor>::type_as_null","value":"pub fn type_as_null(&Self) -> Option<Null>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1589085,"byte_end":1589094,"line_start":1124,"line_end":1124,"column_start":5,"column_end":14}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1589099,"byte_end":1589123,"line_start":1125,"line_end":1125,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6634},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1589403,"byte_end":1589414,"line_start":1137,"line_end":1137,"column_start":12,"column_end":23},"name":"type_as_int","qualname":"<SparseTensor>::type_as_int","value":"pub fn type_as_int(&Self) -> Option<Int>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1589353,"byte_end":1589362,"line_start":1135,"line_end":1135,"column_start":5,"column_end":14}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1589367,"byte_end":1589391,"line_start":1136,"line_end":1136,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6635},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1589667,"byte_end":1589689,"line_start":1148,"line_end":1148,"column_start":12,"column_end":34},"name":"type_as_floating_point","qualname":"<SparseTensor>::type_as_floating_point","value":"pub fn type_as_floating_point(&Self) -> Option<FloatingPoint>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1589617,"byte_end":1589626,"line_start":1146,"line_end":1146,"column_start":5,"column_end":14}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1589631,"byte_end":1589655,"line_start":1147,"line_end":1147,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6636},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1589972,"byte_end":1589986,"line_start":1159,"line_end":1159,"column_start":12,"column_end":26},"name":"type_as_binary","qualname":"<SparseTensor>::type_as_binary","value":"pub fn type_as_binary(&Self) -> Option<Binary>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1589922,"byte_end":1589931,"line_start":1157,"line_end":1157,"column_start":5,"column_end":14}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1589936,"byte_end":1589960,"line_start":1158,"line_end":1158,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6637},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1590248,"byte_end":1590261,"line_start":1170,"line_end":1170,"column_start":12,"column_end":25},"name":"type_as_utf_8","qualname":"<SparseTensor>::type_as_utf_8","value":"pub fn type_as_utf_8(&Self) -> Option<Utf8>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1590198,"byte_end":1590207,"line_start":1168,"line_end":1168,"column_start":5,"column_end":14}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1590212,"byte_end":1590236,"line_start":1169,"line_end":1169,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6638},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1590517,"byte_end":1590529,"line_start":1181,"line_end":1181,"column_start":12,"column_end":24},"name":"type_as_bool","qualname":"<SparseTensor>::type_as_bool","value":"pub fn type_as_bool(&Self) -> Option<Bool>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1590467,"byte_end":1590476,"line_start":1179,"line_end":1179,"column_start":5,"column_end":14}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1590481,"byte_end":1590505,"line_start":1180,"line_end":1180,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6639},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1590785,"byte_end":1590800,"line_start":1192,"line_end":1192,"column_start":12,"column_end":27},"name":"type_as_decimal","qualname":"<SparseTensor>::type_as_decimal","value":"pub fn type_as_decimal(&Self) -> Option<Decimal>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1590735,"byte_end":1590744,"line_start":1190,"line_end":1190,"column_start":5,"column_end":14}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1590749,"byte_end":1590773,"line_start":1191,"line_end":1191,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6640},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1591065,"byte_end":1591077,"line_start":1203,"line_end":1203,"column_start":12,"column_end":24},"name":"type_as_date","qualname":"<SparseTensor>::type_as_date","value":"pub fn type_as_date(&Self) -> Option<Date>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1591015,"byte_end":1591024,"line_start":1201,"line_end":1201,"column_start":5,"column_end":14}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1591029,"byte_end":1591053,"line_start":1202,"line_end":1202,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6641},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1591333,"byte_end":1591345,"line_start":1214,"line_end":1214,"column_start":12,"column_end":24},"name":"type_as_time","qualname":"<SparseTensor>::type_as_time","value":"pub fn type_as_time(&Self) -> Option<Time>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1591283,"byte_end":1591292,"line_start":1212,"line_end":1212,"column_start":5,"column_end":14}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1591297,"byte_end":1591321,"line_start":1213,"line_end":1213,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6642},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1591601,"byte_end":1591618,"line_start":1225,"line_end":1225,"column_start":12,"column_end":29},"name":"type_as_timestamp","qualname":"<SparseTensor>::type_as_timestamp","value":"pub fn type_as_timestamp(&Self) -> Option<Timestamp>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1591551,"byte_end":1591560,"line_start":1223,"line_end":1223,"column_start":5,"column_end":14}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1591565,"byte_end":1591589,"line_start":1224,"line_end":1224,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6643},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1591889,"byte_end":1591905,"line_start":1236,"line_end":1236,"column_start":12,"column_end":28},"name":"type_as_interval","qualname":"<SparseTensor>::type_as_interval","value":"pub fn type_as_interval(&Self) -> Option<Interval>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1591839,"byte_end":1591848,"line_start":1234,"line_end":1234,"column_start":5,"column_end":14}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1591853,"byte_end":1591877,"line_start":1235,"line_end":1235,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6644},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1592173,"byte_end":1592185,"line_start":1247,"line_end":1247,"column_start":12,"column_end":24},"name":"type_as_list","qualname":"<SparseTensor>::type_as_list","value":"pub fn type_as_list(&Self) -> Option<List>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1592123,"byte_end":1592132,"line_start":1245,"line_end":1245,"column_start":5,"column_end":14}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1592137,"byte_end":1592161,"line_start":1246,"line_end":1246,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6645},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1592441,"byte_end":1592456,"line_start":1258,"line_end":1258,"column_start":12,"column_end":27},"name":"type_as_struct_","qualname":"<SparseTensor>::type_as_struct_","value":"pub fn type_as_struct_(&Self) -> Option<Struct_>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1592391,"byte_end":1592400,"line_start":1256,"line_end":1256,"column_start":5,"column_end":14}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1592405,"byte_end":1592429,"line_start":1257,"line_end":1257,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6646},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1592721,"byte_end":1592734,"line_start":1269,"line_end":1269,"column_start":12,"column_end":25},"name":"type_as_union","qualname":"<SparseTensor>::type_as_union","value":"pub fn type_as_union(&Self) -> Option<Union>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1592671,"byte_end":1592680,"line_start":1267,"line_end":1267,"column_start":5,"column_end":14}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1592685,"byte_end":1592709,"line_start":1268,"line_end":1268,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6647},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1592993,"byte_end":1593018,"line_start":1280,"line_end":1280,"column_start":12,"column_end":37},"name":"type_as_fixed_size_binary","qualname":"<SparseTensor>::type_as_fixed_size_binary","value":"pub fn type_as_fixed_size_binary(&Self) -> Option<FixedSizeBinary>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1592943,"byte_end":1592952,"line_start":1278,"line_end":1278,"column_start":5,"column_end":14}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1592957,"byte_end":1592981,"line_start":1279,"line_end":1279,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6648},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1593307,"byte_end":1593330,"line_start":1291,"line_end":1291,"column_start":12,"column_end":35},"name":"type_as_fixed_size_list","qualname":"<SparseTensor>::type_as_fixed_size_list","value":"pub fn type_as_fixed_size_list(&Self) -> Option<FixedSizeList>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1593257,"byte_end":1593266,"line_start":1289,"line_end":1289,"column_start":5,"column_end":14}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1593271,"byte_end":1593295,"line_start":1290,"line_end":1290,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6649},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1593613,"byte_end":1593624,"line_start":1302,"line_end":1302,"column_start":12,"column_end":23},"name":"type_as_map","qualname":"<SparseTensor>::type_as_map","value":"pub fn type_as_map(&Self) -> Option<Map>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1593563,"byte_end":1593572,"line_start":1300,"line_end":1300,"column_start":5,"column_end":14}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1593577,"byte_end":1593601,"line_start":1301,"line_end":1301,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6650},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1593877,"byte_end":1593893,"line_start":1313,"line_end":1313,"column_start":12,"column_end":28},"name":"type_as_duration","qualname":"<SparseTensor>::type_as_duration","value":"pub fn type_as_duration(&Self) -> Option<Duration>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1593827,"byte_end":1593836,"line_start":1311,"line_end":1311,"column_start":5,"column_end":14}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1593841,"byte_end":1593865,"line_start":1312,"line_end":1312,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6651},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1594161,"byte_end":1594181,"line_start":1324,"line_end":1324,"column_start":12,"column_end":32},"name":"type_as_large_binary","qualname":"<SparseTensor>::type_as_large_binary","value":"pub fn type_as_large_binary(&Self) -> Option<LargeBinary>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1594111,"byte_end":1594120,"line_start":1322,"line_end":1322,"column_start":5,"column_end":14}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1594125,"byte_end":1594149,"line_start":1323,"line_end":1323,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6652},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1594458,"byte_end":1594477,"line_start":1335,"line_end":1335,"column_start":12,"column_end":31},"name":"type_as_large_utf_8","qualname":"<SparseTensor>::type_as_large_utf_8","value":"pub fn type_as_large_utf_8(&Self) -> Option<LargeUtf8>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1594408,"byte_end":1594417,"line_start":1333,"line_end":1333,"column_start":5,"column_end":14}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1594422,"byte_end":1594446,"line_start":1334,"line_end":1334,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6653},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1594748,"byte_end":1594766,"line_start":1346,"line_end":1346,"column_start":12,"column_end":30},"name":"type_as_large_list","qualname":"<SparseTensor>::type_as_large_list","value":"pub fn type_as_large_list(&Self) -> Option<LargeList>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1594698,"byte_end":1594707,"line_start":1344,"line_end":1344,"column_start":5,"column_end":14}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1594712,"byte_end":1594736,"line_start":1345,"line_end":1345,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6654},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1595037,"byte_end":1595075,"line_start":1357,"line_end":1357,"column_start":12,"column_end":50},"name":"sparseIndex_as_sparse_tensor_index_coo","qualname":"<SparseTensor>::sparseIndex_as_sparse_tensor_index_coo","value":"pub fn sparseIndex_as_sparse_tensor_index_coo(&Self)\n-> Option<SparseTensorIndexCOO>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1594987,"byte_end":1594996,"line_start":1355,"line_end":1355,"column_start":5,"column_end":14}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1595001,"byte_end":1595025,"line_start":1356,"line_end":1356,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6655},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1595420,"byte_end":1595458,"line_start":1370,"line_end":1370,"column_start":12,"column_end":50},"name":"sparseIndex_as_sparse_matrix_index_csx","qualname":"<SparseTensor>::sparseIndex_as_sparse_matrix_index_csx","value":"pub fn sparseIndex_as_sparse_matrix_index_csx(&Self)\n-> Option<SparseMatrixIndexCSX>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1595370,"byte_end":1595379,"line_start":1368,"line_end":1368,"column_start":5,"column_end":14}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1595384,"byte_end":1595408,"line_start":1369,"line_end":1369,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6656},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1595803,"byte_end":1595841,"line_start":1383,"line_end":1383,"column_start":12,"column_end":50},"name":"sparseIndex_as_sparse_tensor_index_csf","qualname":"<SparseTensor>::sparseIndex_as_sparse_tensor_index_csf","value":"pub fn sparseIndex_as_sparse_tensor_index_csf(&Self)\n-> Option<SparseTensorIndexCSF>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1595753,"byte_end":1595762,"line_start":1381,"line_end":1381,"column_start":5,"column_end":14}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1595767,"byte_end":1595791,"line_start":1382,"line_end":1382,"column_start":5,"column_end":29}}]},{"kind":"Struct","id":{"krate":0,"index":6666},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1600077,"byte_end":1600093,"line_start":1444,"line_end":1444,"column_start":12,"column_end":28},"name":"SparseTensorArgs","qualname":"::ipc::gen::SparseTensor::SparseTensorArgs","value":"SparseTensorArgs { type_type, type_, shape, non_zero_length, sparseIndex_type, sparseIndex, data }","parent":null,"children":[{"krate":0,"index":6668},{"krate":0,"index":6669},{"krate":0,"index":6670},{"krate":0,"index":6671},{"krate":0,"index":6672},{"krate":0,"index":6673},{"krate":0,"index":6674}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6668},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1600108,"byte_end":1600117,"line_start":1445,"line_end":1445,"column_start":9,"column_end":18},"name":"type_type","qualname":"::ipc::gen::SparseTensor::SparseTensorArgs::type_type","value":"ipc::gen::Schema::Type","parent":{"krate":0,"index":6666},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6669},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1600133,"byte_end":1600138,"line_start":1446,"line_end":1446,"column_start":9,"column_end":14},"name":"type_","qualname":"::ipc::gen::SparseTensor::SparseTensorArgs::type_","value":"std::option::Option<flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>>","parent":{"krate":0,"index":6666},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6670},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1600209,"byte_end":1600214,"line_start":1447,"line_end":1447,"column_start":9,"column_end":14},"name":"shape","qualname":"::ipc::gen::SparseTensor::SparseTensorArgs::shape","value":"std::option::Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<ipc::gen::Tensor::TensorDim<'a>>>>>","parent":{"krate":0,"index":6666},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6671},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1600364,"byte_end":1600379,"line_start":1452,"line_end":1452,"column_start":9,"column_end":24},"name":"non_zero_length","qualname":"::ipc::gen::SparseTensor::SparseTensorArgs::non_zero_length","value":"i64","parent":{"krate":0,"index":6666},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6672},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1600394,"byte_end":1600410,"line_start":1453,"line_end":1453,"column_start":9,"column_end":25},"name":"sparseIndex_type","qualname":"::ipc::gen::SparseTensor::SparseTensorArgs::sparseIndex_type","value":"ipc::gen::SparseTensor::SparseTensorIndex","parent":{"krate":0,"index":6666},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6673},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1600439,"byte_end":1600450,"line_start":1454,"line_end":1454,"column_start":9,"column_end":20},"name":"sparseIndex","qualname":"::ipc::gen::SparseTensor::SparseTensorArgs::sparseIndex","value":"std::option::Option<flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>>","parent":{"krate":0,"index":6666},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6674},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1600521,"byte_end":1600525,"line_start":1455,"line_end":1455,"column_start":9,"column_end":13},"name":"data","qualname":"::ipc::gen::SparseTensor::SparseTensorArgs::data","value":"std::option::Option<&'a ipc::gen::Schema::Buffer>","parent":{"krate":0,"index":6666},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6678},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1600996,"byte_end":1601015,"line_start":1471,"line_end":1471,"column_start":12,"column_end":31},"name":"SparseTensorBuilder","qualname":"::ipc::gen::SparseTensor::SparseTensorBuilder","value":"SparseTensorBuilder {  }","parent":null,"children":[{"krate":0,"index":6681},{"krate":0,"index":6682}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6686},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1601233,"byte_end":1601246,"line_start":1477,"line_end":1477,"column_start":12,"column_end":25},"name":"add_type_type","qualname":"<SparseTensorBuilder>::add_type_type","value":"pub fn add_type_type(&mut Self, Type)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1601212,"byte_end":1601221,"line_start":1476,"line_end":1476,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6687},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1601409,"byte_end":1601418,"line_start":1482,"line_end":1482,"column_start":12,"column_end":21},"name":"add_type_","qualname":"<SparseTensorBuilder>::add_type_","value":"pub fn add_type_(&mut Self,\n                 flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1601388,"byte_end":1601397,"line_start":1481,"line_end":1481,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6688},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1601655,"byte_end":1601664,"line_start":1490,"line_end":1490,"column_start":12,"column_end":21},"name":"add_shape","qualname":"<SparseTensorBuilder>::add_shape","value":"pub fn add_shape(&mut Self, flatbuffers::WIPOffset<flatbuffers::Vector>)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1601634,"byte_end":1601643,"line_start":1489,"line_end":1489,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6689},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1601965,"byte_end":1601984,"line_start":1500,"line_end":1500,"column_start":12,"column_end":31},"name":"add_non_zero_length","qualname":"<SparseTensorBuilder>::add_non_zero_length","value":"pub fn add_non_zero_length(&mut Self, i64)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1601944,"byte_end":1601953,"line_start":1499,"line_end":1499,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6690},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1602154,"byte_end":1602174,"line_start":1505,"line_end":1505,"column_start":12,"column_end":32},"name":"add_sparseIndex_type","qualname":"<SparseTensorBuilder>::add_sparseIndex_type","value":"pub fn add_sparseIndex_type(&mut Self, SparseTensorIndex)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1602133,"byte_end":1602142,"line_start":1504,"line_end":1504,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6691},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1602431,"byte_end":1602446,"line_start":1513,"line_end":1513,"column_start":12,"column_end":27},"name":"add_sparseIndex","qualname":"<SparseTensorBuilder>::add_sparseIndex","value":"pub fn add_sparseIndex(&mut Self,\n                       flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1602410,"byte_end":1602419,"line_start":1512,"line_end":1512,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6692},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1602723,"byte_end":1602731,"line_start":1523,"line_end":1523,"column_start":12,"column_end":20},"name":"add_data","qualname":"<SparseTensorBuilder>::add_data","value":"pub fn add_data(&mut Self, &Buffer)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1602702,"byte_end":1602711,"line_start":1522,"line_end":1522,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6693},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1602880,"byte_end":1602883,"line_start":1528,"line_end":1528,"column_start":12,"column_end":15},"name":"new","qualname":"<SparseTensorBuilder>::new","value":"pub fn new(&'b mut flatbuffers::FlatBufferBuilder) -> SparseTensorBuilder","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1602859,"byte_end":1602868,"line_start":1527,"line_end":1527,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6694},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1603144,"byte_end":1603150,"line_start":1538,"line_end":1538,"column_start":12,"column_end":18},"name":"finish","qualname":"<SparseTensorBuilder>::finish","value":"pub fn finish(Self) -> flatbuffers::WIPOffset<SparseTensor>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1603123,"byte_end":1603132,"line_start":1537,"line_end":1537,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":6697},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1613336,"byte_end":1613361,"line_start":1814,"line_end":1814,"column_start":8,"column_end":33},"name":"get_root_as_sparse_tensor","qualname":"::ipc::gen::SparseTensor::get_root_as_sparse_tensor","value":"pub fn get_root_as_sparse_tensor<'a>(&'a [u8]) -> SparseTensor","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1613234,"byte_end":1613243,"line_start":1812,"line_end":1812,"column_start":1,"column_end":10}},{"value":"deprecated(since = \"1.13\", note =\n             \"Deprecated in favor of `root_as...` methods.\")","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1613244,"byte_end":1613328,"line_start":1813,"line_end":1813,"column_start":1,"column_end":85}}]},{"kind":"Function","id":{"krate":0,"index":6699},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1613576,"byte_end":1613615,"line_start":1820,"line_end":1820,"column_start":8,"column_end":47},"name":"get_size_prefixed_root_as_sparse_tensor","qualname":"::ipc::gen::SparseTensor::get_size_prefixed_root_as_sparse_tensor","value":"pub fn get_size_prefixed_root_as_sparse_tensor<'a>(&'a [u8]) -> SparseTensor","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1613474,"byte_end":1613483,"line_start":1818,"line_end":1818,"column_start":1,"column_end":10}},{"value":"deprecated(since = \"1.13\", note =\n             \"Deprecated in favor of `root_as...` methods.\")","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1613484,"byte_end":1613568,"line_start":1819,"line_end":1819,"column_start":1,"column_end":85}}]},{"kind":"Function","id":{"krate":0,"index":6701},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1614038,"byte_end":1614059,"line_start":1831,"line_end":1831,"column_start":8,"column_end":29},"name":"root_as_sparse_tensor","qualname":"::ipc::gen::SparseTensor::root_as_sparse_tensor","value":"pub fn root_as_sparse_tensor(&[u8])\n-> Result<SparseTensor, flatbuffers::InvalidFlatbuffer>","parent":null,"children":[],"decl_id":null,"docs":" Verifies that a buffer of bytes contains a `SparseTensor`\n and returns it.\n Note that verification is still experimental and may not\n catch every error, or be maximally performant. For the\n previous, unchecked, behavior use\n `root_as_sparse_tensor_unchecked`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1613742,"byte_end":1613751,"line_start":1824,"line_end":1824,"column_start":1,"column_end":10}},{"value":"/ Verifies that a buffer of bytes contains a `SparseTensor`","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1613752,"byte_end":1613813,"line_start":1825,"line_end":1825,"column_start":1,"column_end":62}},{"value":"/ and returns it.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1613814,"byte_end":1613833,"line_start":1826,"line_end":1826,"column_start":1,"column_end":20}},{"value":"/ Note that verification is still experimental and may not","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1613834,"byte_end":1613894,"line_start":1827,"line_end":1827,"column_start":1,"column_end":61}},{"value":"/ catch every error, or be maximally performant. For the","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1613895,"byte_end":1613953,"line_start":1828,"line_end":1828,"column_start":1,"column_end":59}},{"value":"/ previous, unchecked, behavior use","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1613954,"byte_end":1613991,"line_start":1829,"line_end":1829,"column_start":1,"column_end":38}},{"value":"/ `root_as_sparse_tensor_unchecked`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1613992,"byte_end":1614030,"line_start":1830,"line_end":1830,"column_start":1,"column_end":39}}]},{"kind":"Function","id":{"krate":0,"index":6702},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1614506,"byte_end":1614541,"line_start":1843,"line_end":1843,"column_start":8,"column_end":43},"name":"size_prefixed_root_as_sparse_tensor","qualname":"::ipc::gen::SparseTensor::size_prefixed_root_as_sparse_tensor","value":"pub fn size_prefixed_root_as_sparse_tensor(&[u8])\n-> Result<SparseTensor, flatbuffers::InvalidFlatbuffer>","parent":null,"children":[],"decl_id":null,"docs":" Verifies that a buffer of bytes contains a size prefixed\n `SparseTensor` and returns it.\n Note that verification is still experimental and may not\n catch every error, or be maximally performant. For the\n previous, unchecked, behavior use\n `size_prefixed_root_as_sparse_tensor_unchecked`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1614182,"byte_end":1614191,"line_start":1836,"line_end":1836,"column_start":1,"column_end":10}},{"value":"/ Verifies that a buffer of bytes contains a size prefixed","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1614192,"byte_end":1614252,"line_start":1837,"line_end":1837,"column_start":1,"column_end":61}},{"value":"/ `SparseTensor` and returns it.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1614253,"byte_end":1614287,"line_start":1838,"line_end":1838,"column_start":1,"column_end":35}},{"value":"/ Note that verification is still experimental and may not","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1614288,"byte_end":1614348,"line_start":1839,"line_end":1839,"column_start":1,"column_end":61}},{"value":"/ catch every error, or be maximally performant. For the","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1614349,"byte_end":1614407,"line_start":1840,"line_end":1840,"column_start":1,"column_end":59}},{"value":"/ previous, unchecked, behavior use","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1614408,"byte_end":1614445,"line_start":1841,"line_end":1841,"column_start":1,"column_end":38}},{"value":"/ `size_prefixed_root_as_sparse_tensor_unchecked`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1614446,"byte_end":1614498,"line_start":1842,"line_end":1842,"column_start":1,"column_end":53}}]},{"kind":"Function","id":{"krate":0,"index":6703},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1614999,"byte_end":1615030,"line_start":1855,"line_end":1855,"column_start":8,"column_end":39},"name":"root_as_sparse_tensor_with_opts","qualname":"::ipc::gen::SparseTensor::root_as_sparse_tensor_with_opts","value":"pub fn root_as_sparse_tensor_with_opts<'b,\n                                       'o>(&'o flatbuffers::VerifierOptions,\n                                           &'b [u8])\n-> Result<SparseTensor, flatbuffers::InvalidFlatbuffer>","parent":null,"children":[],"decl_id":null,"docs":" Verifies, with the given options, that a buffer of bytes\n contains a `SparseTensor` and returns it.\n Note that verification is still experimental and may not\n catch every error, or be maximally performant. For the\n previous, unchecked, behavior use\n `root_as_sparse_tensor_unchecked`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1614678,"byte_end":1614687,"line_start":1848,"line_end":1848,"column_start":1,"column_end":10}},{"value":"/ Verifies, with the given options, that a buffer of bytes","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1614688,"byte_end":1614748,"line_start":1849,"line_end":1849,"column_start":1,"column_end":61}},{"value":"/ contains a `SparseTensor` and returns it.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1614749,"byte_end":1614794,"line_start":1850,"line_end":1850,"column_start":1,"column_end":46}},{"value":"/ Note that verification is still experimental and may not","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1614795,"byte_end":1614855,"line_start":1851,"line_end":1851,"column_start":1,"column_end":61}},{"value":"/ catch every error, or be maximally performant. For the","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1614856,"byte_end":1614914,"line_start":1852,"line_end":1852,"column_start":1,"column_end":59}},{"value":"/ previous, unchecked, behavior use","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1614915,"byte_end":1614952,"line_start":1853,"line_end":1853,"column_start":1,"column_end":38}},{"value":"/ `root_as_sparse_tensor_unchecked`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1614953,"byte_end":1614991,"line_start":1854,"line_end":1854,"column_start":1,"column_end":39}}]},{"kind":"Function","id":{"krate":0,"index":6706},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1615576,"byte_end":1615621,"line_start":1868,"line_end":1868,"column_start":8,"column_end":53},"name":"size_prefixed_root_as_sparse_tensor_with_opts","qualname":"::ipc::gen::SparseTensor::size_prefixed_root_as_sparse_tensor_with_opts","value":"pub fn size_prefixed_root_as_sparse_tensor_with_opts<'b,\n                                                     'o>(&'o flatbuffers::VerifierOptions,\n                                                         &'b [u8])\n-> Result<SparseTensor, flatbuffers::InvalidFlatbuffer>","parent":null,"children":[],"decl_id":null,"docs":" Verifies, with the given verifier options, that a buffer of\n bytes contains a size prefixed `SparseTensor` and returns\n it. Note that verification is still experimental and may not\n catch every error, or be maximally performant. For the\n previous, unchecked, behavior use\n `root_as_sparse_tensor_unchecked`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1615232,"byte_end":1615241,"line_start":1861,"line_end":1861,"column_start":1,"column_end":10}},{"value":"/ Verifies, with the given verifier options, that a buffer of","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1615242,"byte_end":1615305,"line_start":1862,"line_end":1862,"column_start":1,"column_end":64}},{"value":"/ bytes contains a size prefixed `SparseTensor` and returns","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1615306,"byte_end":1615367,"line_start":1863,"line_end":1863,"column_start":1,"column_end":62}},{"value":"/ it. Note that verification is still experimental and may not","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1615368,"byte_end":1615432,"line_start":1864,"line_end":1864,"column_start":1,"column_end":65}},{"value":"/ catch every error, or be maximally performant. For the","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1615433,"byte_end":1615491,"line_start":1865,"line_end":1865,"column_start":1,"column_end":59}},{"value":"/ previous, unchecked, behavior use","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1615492,"byte_end":1615529,"line_start":1866,"line_end":1866,"column_start":1,"column_end":38}},{"value":"/ `root_as_sparse_tensor_unchecked`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1615530,"byte_end":1615568,"line_start":1867,"line_end":1867,"column_start":1,"column_end":39}}]},{"kind":"Function","id":{"krate":0,"index":6709},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1616053,"byte_end":1616084,"line_start":1878,"line_end":1878,"column_start":15,"column_end":46},"name":"root_as_sparse_tensor_unchecked","qualname":"::ipc::gen::SparseTensor::root_as_sparse_tensor_unchecked","value":"pub unsafe fn root_as_sparse_tensor_unchecked(&[u8]) -> SparseTensor","parent":null,"children":[],"decl_id":null,"docs":" Assumes, without verification, that a buffer of bytes contains a SparseTensor and returns it.\n # Safety\n Callers must trust the given bytes do indeed contain a valid `SparseTensor`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1615837,"byte_end":1615846,"line_start":1874,"line_end":1874,"column_start":1,"column_end":10}},{"value":"/ Assumes, without verification, that a buffer of bytes contains a SparseTensor and returns it.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1615847,"byte_end":1615944,"line_start":1875,"line_end":1875,"column_start":1,"column_end":98}},{"value":"/ # Safety","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1615945,"byte_end":1615957,"line_start":1876,"line_end":1876,"column_start":1,"column_end":13}},{"value":"/ Callers must trust the given bytes do indeed contain a valid `SparseTensor`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1615958,"byte_end":1616038,"line_start":1877,"line_end":1877,"column_start":1,"column_end":81}}]},{"kind":"Function","id":{"krate":0,"index":6710},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1616414,"byte_end":1616459,"line_start":1885,"line_end":1885,"column_start":15,"column_end":60},"name":"size_prefixed_root_as_sparse_tensor_unchecked","qualname":"::ipc::gen::SparseTensor::size_prefixed_root_as_sparse_tensor_unchecked","value":"pub unsafe fn size_prefixed_root_as_sparse_tensor_unchecked(&[u8])\n-> SparseTensor","parent":null,"children":[],"decl_id":null,"docs":" Assumes, without verification, that a buffer of bytes contains a size prefixed SparseTensor and returns it.\n # Safety\n Callers must trust the given bytes do indeed contain a valid size prefixed `SparseTensor`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1616170,"byte_end":1616179,"line_start":1881,"line_end":1881,"column_start":1,"column_end":10}},{"value":"/ Assumes, without verification, that a buffer of bytes contains a size prefixed SparseTensor and returns it.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1616180,"byte_end":1616291,"line_start":1882,"line_end":1882,"column_start":1,"column_end":112}},{"value":"/ # Safety","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1616292,"byte_end":1616304,"line_start":1883,"line_end":1883,"column_start":1,"column_end":13}},{"value":"/ Callers must trust the given bytes do indeed contain a valid size prefixed `SparseTensor`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1616305,"byte_end":1616399,"line_start":1884,"line_end":1884,"column_start":1,"column_end":95}}]},{"kind":"Function","id":{"krate":0,"index":6711},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1616576,"byte_end":1616603,"line_start":1889,"line_end":1889,"column_start":8,"column_end":35},"name":"finish_sparse_tensor_buffer","qualname":"::ipc::gen::SparseTensor::finish_sparse_tensor_buffer","value":"pub fn finish_sparse_tensor_buffer<'a,\n                                   'b>(&'b mut flatbuffers::FlatBufferBuilder,\n                                       flatbuffers::WIPOffset<SparseTensor>)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1616559,"byte_end":1616568,"line_start":1888,"line_end":1888,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":6714},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1616770,"byte_end":1616811,"line_start":1897,"line_end":1897,"column_start":8,"column_end":49},"name":"finish_size_prefixed_sparse_tensor_buffer","qualname":"::ipc::gen::SparseTensor::finish_size_prefixed_sparse_tensor_buffer","value":"pub fn finish_size_prefixed_sparse_tensor_buffer<'a,\n                                                 'b>(&'b mut flatbuffers::FlatBufferBuilder,\n                                                     flatbuffers::WIPOffset<SparseTensor>)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1616753,"byte_end":1616762,"line_start":1896,"line_end":1896,"column_start":1,"column_end":10}}]},{"kind":"Mod","id":{"krate":0,"index":6717},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"Tensor","qualname":"::ipc::gen::Tensor","value":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","parent":null,"children":[{"krate":0,"index":6718},{"krate":0,"index":6719},{"krate":0,"index":6722},{"krate":0,"index":6723},{"krate":0,"index":6726},{"krate":0,"index":6729},{"krate":0,"index":9567},{"krate":0,"index":9570},{"krate":0,"index":9572},{"krate":0,"index":9575},{"krate":0,"index":9577},{"krate":0,"index":6730},{"krate":0,"index":6734},{"krate":0,"index":6745},{"krate":0,"index":6752},{"krate":0,"index":6756},{"krate":0,"index":6759},{"krate":0,"index":6764},{"krate":0,"index":6771},{"krate":0,"index":6773},{"krate":0,"index":9581},{"krate":0,"index":9584},{"krate":0,"index":9586},{"krate":0,"index":9589},{"krate":0,"index":9591},{"krate":0,"index":6774},{"krate":0,"index":6778},{"krate":0,"index":6816},{"krate":0,"index":6824},{"krate":0,"index":6831},{"krate":0,"index":6834},{"krate":0,"index":6839},{"krate":0,"index":6849},{"krate":0,"index":6851},{"krate":0,"index":6853},{"krate":0,"index":6855},{"krate":0,"index":6856},{"krate":0,"index":6857},{"krate":0,"index":6860},{"krate":0,"index":6863},{"krate":0,"index":6864},{"krate":0,"index":6865},{"krate":0,"index":6868}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(clippy :: all)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/mod.rs","byte_start":1351840,"byte_end":1351861,"line_start":30,"line_end":30,"column_start":1,"column_end":22}},{"value":"allow(dead_code)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1617777,"byte_end":1617797,"line_start":18,"line_end":18,"column_start":1,"column_end":21}},{"value":"allow(unused_imports)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1617798,"byte_end":1617823,"line_start":19,"line_end":19,"column_start":1,"column_end":26}}]},{"kind":"Enum","id":{"krate":0,"index":6729},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1617999,"byte_end":1618014,"line_start":26,"line_end":26,"column_start":10,"column_end":25},"name":"TensorDimOffset","qualname":"::ipc::gen::Tensor::TensorDimOffset","value":"pub enum TensorDimOffset { }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":9567},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1618222,"byte_end":1618231,"line_start":32,"line_end":32,"column_start":12,"column_end":21},"name":"TensorDim","qualname":"::ipc::gen::Tensor::TensorDim","value":"TensorDim { _tab }","parent":null,"children":[{"krate":0,"index":9569}],"decl_id":null,"docs":" ----------------------------------------------------------------------\n Data structures for dense tensors\n Shape data for a single axis in a tensor\n","sig":null,"attributes":[{"value":"/ ----------------------------------------------------------------------","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1618053,"byte_end":1618127,"line_start":29,"line_end":29,"column_start":1,"column_end":75}},{"value":"/ Data structures for dense tensors","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1618128,"byte_end":1618165,"line_start":30,"line_end":30,"column_start":1,"column_end":38}},{"value":"/ Shape data for a single axis in a tensor","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1618166,"byte_end":1618210,"line_start":31,"line_end":31,"column_start":1,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":9569},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1618246,"byte_end":1618250,"line_start":33,"line_end":33,"column_start":9,"column_end":13},"name":"_tab","qualname":"::ipc::gen::Tensor::TensorDim::_tab","value":"flatbuffers::Table<'a>","parent":{"krate":0,"index":9567},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6736},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1618571,"byte_end":1618586,"line_start":48,"line_end":48,"column_start":12,"column_end":27},"name":"init_from_table","qualname":"<TensorDim>::init_from_table","value":"pub fn init_from_table(flatbuffers::Table) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1618550,"byte_end":1618559,"line_start":47,"line_end":47,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6737},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1618704,"byte_end":1618710,"line_start":52,"line_end":52,"column_start":12,"column_end":18},"name":"create","qualname":"<TensorDim>::create","value":"pub fn create<'bldr:'args, 'args:'mut_bldr,\n              'mut_bldr>(&'mut_bldr mut flatbuffers::FlatBufferBuilder,\n                         &'args TensorDimArgs)\n-> flatbuffers::WIPOffset<TensorDim>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(unused_mut)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1618672,"byte_end":1618692,"line_start":51,"line_end":51,"column_start":5,"column_end":25}}]},{"kind":"Const","id":{"krate":0,"index":6741},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1619138,"byte_end":1619146,"line_start":64,"line_end":64,"column_start":15,"column_end":23},"name":"VT_SIZE_","qualname":"::ipc::gen::Tensor::TensorDim::<'a>::VT_SIZE_","value":"flatbuffers::VOffsetT","parent":{"krate":0,"index":6734},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":6742},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1619189,"byte_end":1619196,"line_start":65,"line_end":65,"column_start":15,"column_end":22},"name":"VT_NAME","qualname":"::ipc::gen::Tensor::TensorDim::<'a>::VT_NAME","value":"flatbuffers::VOffsetT","parent":{"krate":0,"index":6734},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6743},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1619279,"byte_end":1619284,"line_start":69,"line_end":69,"column_start":12,"column_end":17},"name":"size_","qualname":"<TensorDim>::size_","value":"pub fn size_(&Self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Length of dimension\n","sig":null,"attributes":[{"value":"/ Length of dimension","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1619230,"byte_end":1619253,"line_start":67,"line_end":67,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1619258,"byte_end":1619267,"line_start":68,"line_end":68,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6744},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1619440,"byte_end":1619444,"line_start":74,"line_end":74,"column_start":12,"column_end":16},"name":"name","qualname":"<TensorDim>::name","value":"pub fn name(&Self) -> Option<&'a str>","parent":null,"children":[],"decl_id":null,"docs":" Name of the dimension, optional\n","sig":null,"attributes":[{"value":"/ Name of the dimension, optional","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1619379,"byte_end":1619414,"line_start":72,"line_end":72,"column_start":5,"column_end":40}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1619419,"byte_end":1619428,"line_start":73,"line_end":73,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":6752},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1620140,"byte_end":1620153,"line_start":98,"line_end":98,"column_start":12,"column_end":25},"name":"TensorDimArgs","qualname":"::ipc::gen::Tensor::TensorDimArgs","value":"TensorDimArgs { size_, name }","parent":null,"children":[{"krate":0,"index":6754},{"krate":0,"index":6755}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6754},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1620168,"byte_end":1620173,"line_start":99,"line_end":99,"column_start":9,"column_end":14},"name":"size_","qualname":"::ipc::gen::Tensor::TensorDimArgs::size_","value":"i64","parent":{"krate":0,"index":6752},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6755},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1620188,"byte_end":1620192,"line_start":100,"line_end":100,"column_start":9,"column_end":13},"name":"name","qualname":"::ipc::gen::Tensor::TensorDimArgs::name","value":"std::option::Option<flatbuffers::WIPOffset<&'a str>>","parent":{"krate":0,"index":6752},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6759},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1620418,"byte_end":1620434,"line_start":111,"line_end":111,"column_start":12,"column_end":28},"name":"TensorDimBuilder","qualname":"::ipc::gen::Tensor::TensorDimBuilder","value":"TensorDimBuilder {  }","parent":null,"children":[{"krate":0,"index":6762},{"krate":0,"index":6763}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6767},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1620649,"byte_end":1620658,"line_start":117,"line_end":117,"column_start":12,"column_end":21},"name":"add_size_","qualname":"<TensorDimBuilder>::add_size_","value":"pub fn add_size_(&mut Self, i64)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1620628,"byte_end":1620637,"line_start":116,"line_end":116,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6768},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1620782,"byte_end":1620790,"line_start":121,"line_end":121,"column_start":12,"column_end":20},"name":"add_name","qualname":"<TensorDimBuilder>::add_name","value":"pub fn add_name(&mut Self, flatbuffers::WIPOffset<&'b str>)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1620761,"byte_end":1620770,"line_start":120,"line_end":120,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6769},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1620978,"byte_end":1620981,"line_start":126,"line_end":126,"column_start":12,"column_end":15},"name":"new","qualname":"<TensorDimBuilder>::new","value":"pub fn new(&'b mut flatbuffers::FlatBufferBuilder) -> TensorDimBuilder","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1620957,"byte_end":1620966,"line_start":125,"line_end":125,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6770},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1621236,"byte_end":1621242,"line_start":136,"line_end":136,"column_start":12,"column_end":18},"name":"finish","qualname":"<TensorDimBuilder>::finish","value":"pub fn finish(Self) -> flatbuffers::WIPOffset<TensorDim>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1621215,"byte_end":1621224,"line_start":135,"line_end":135,"column_start":5,"column_end":14}}]},{"kind":"Enum","id":{"krate":0,"index":6773},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1621681,"byte_end":1621693,"line_start":150,"line_end":150,"column_start":10,"column_end":22},"name":"TensorOffset","qualname":"::ipc::gen::Tensor::TensorOffset","value":"pub enum TensorOffset { }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":9581},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1621743,"byte_end":1621749,"line_start":153,"line_end":153,"column_start":12,"column_end":18},"name":"Tensor","qualname":"::ipc::gen::Tensor::Tensor","value":"Tensor { _tab }","parent":null,"children":[{"krate":0,"index":9583}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9583},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1621764,"byte_end":1621768,"line_start":154,"line_end":154,"column_start":9,"column_end":13},"name":"_tab","qualname":"::ipc::gen::Tensor::Tensor::_tab","value":"flatbuffers::Table<'a>","parent":{"krate":0,"index":9581},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6780},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1622080,"byte_end":1622095,"line_start":169,"line_end":169,"column_start":12,"column_end":27},"name":"init_from_table","qualname":"<Tensor>::init_from_table","value":"pub fn init_from_table(flatbuffers::Table) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1622059,"byte_end":1622068,"line_start":168,"line_end":168,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6781},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1622210,"byte_end":1622216,"line_start":173,"line_end":173,"column_start":12,"column_end":18},"name":"create","qualname":"<Tensor>::create","value":"pub fn create<'bldr:'args, 'args:'mut_bldr,\n              'mut_bldr>(&'mut_bldr mut flatbuffers::FlatBufferBuilder,\n                         &'args TensorArgs) -> flatbuffers::WIPOffset<Tensor>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(unused_mut)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1622178,"byte_end":1622198,"line_start":172,"line_end":172,"column_start":5,"column_end":25}}]},{"kind":"Const","id":{"krate":0,"index":6785},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1622893,"byte_end":1622905,"line_start":194,"line_end":194,"column_start":15,"column_end":27},"name":"VT_TYPE_TYPE","qualname":"::ipc::gen::Tensor::Tensor::<'a>::VT_TYPE_TYPE","value":"flatbuffers::VOffsetT","parent":{"krate":0,"index":6778},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":6786},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1622948,"byte_end":1622956,"line_start":195,"line_end":195,"column_start":15,"column_end":23},"name":"VT_TYPE_","qualname":"::ipc::gen::Tensor::Tensor::<'a>::VT_TYPE_","value":"flatbuffers::VOffsetT","parent":{"krate":0,"index":6778},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":6787},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1622999,"byte_end":1623007,"line_start":196,"line_end":196,"column_start":15,"column_end":23},"name":"VT_SHAPE","qualname":"::ipc::gen::Tensor::Tensor::<'a>::VT_SHAPE","value":"flatbuffers::VOffsetT","parent":{"krate":0,"index":6778},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":6788},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1623050,"byte_end":1623060,"line_start":197,"line_end":197,"column_start":15,"column_end":25},"name":"VT_STRIDES","qualname":"::ipc::gen::Tensor::Tensor::<'a>::VT_STRIDES","value":"flatbuffers::VOffsetT","parent":{"krate":0,"index":6778},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":6789},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1623104,"byte_end":1623111,"line_start":198,"line_end":198,"column_start":15,"column_end":22},"name":"VT_DATA","qualname":"::ipc::gen::Tensor::Tensor::<'a>::VT_DATA","value":"flatbuffers::VOffsetT","parent":{"krate":0,"index":6778},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6790},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1623167,"byte_end":1623176,"line_start":201,"line_end":201,"column_start":12,"column_end":21},"name":"type_type","qualname":"<Tensor>::type_type","value":"pub fn type_type(&Self) -> Type","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1623146,"byte_end":1623155,"line_start":200,"line_end":200,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6791},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1623471,"byte_end":1623476,"line_start":209,"line_end":209,"column_start":12,"column_end":17},"name":"type_","qualname":"<Tensor>::type_","value":"pub fn type_(&Self) -> flatbuffers::Table","parent":null,"children":[],"decl_id":null,"docs":" The type of data contained in a value cell. Currently only fixed-width\n value types are supported, no strings or nested types\n","sig":null,"attributes":[{"value":"/ The type of data contained in a value cell. Currently only fixed-width","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1623309,"byte_end":1623383,"line_start":206,"line_end":206,"column_start":5,"column_end":79}},{"value":"/ value types are supported, no strings or nested types","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1623388,"byte_end":1623445,"line_start":207,"line_end":207,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1623450,"byte_end":1623459,"line_start":208,"line_end":208,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6792},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1623782,"byte_end":1623787,"line_start":219,"line_end":219,"column_start":12,"column_end":17},"name":"shape","qualname":"<Tensor>::shape","value":"pub fn shape(&Self) -> flatbuffers::Vector","parent":null,"children":[],"decl_id":null,"docs":" The dimensions of the tensor, optionally named\n","sig":null,"attributes":[{"value":"/ The dimensions of the tensor, optionally named","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1623706,"byte_end":1623756,"line_start":217,"line_end":217,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1623761,"byte_end":1623770,"line_start":218,"line_end":218,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6793},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1624263,"byte_end":1624270,"line_start":231,"line_end":231,"column_start":12,"column_end":19},"name":"strides","qualname":"<Tensor>::strides","value":"pub fn strides(&Self) -> Option<flatbuffers::Vector>","parent":null,"children":[],"decl_id":null,"docs":" Non-negative byte offsets to advance one value cell along each dimension\n If omitted, default to row-major order (C-like).\n","sig":null,"attributes":[{"value":"/ Non-negative byte offsets to advance one value cell along each dimension","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1624104,"byte_end":1624180,"line_start":228,"line_end":228,"column_start":5,"column_end":81}},{"value":"/ If omitted, default to row-major order (C-like).","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1624185,"byte_end":1624237,"line_start":229,"line_end":229,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1624242,"byte_end":1624251,"line_start":230,"line_end":230,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6794},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1624572,"byte_end":1624576,"line_start":240,"line_end":240,"column_start":12,"column_end":16},"name":"data","qualname":"<Tensor>::data","value":"pub fn data(&Self) -> &'a Buffer","parent":null,"children":[],"decl_id":null,"docs":" The location and size of the tensor's data\n","sig":null,"attributes":[{"value":"/ The location and size of the tensor's data","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1624500,"byte_end":1624546,"line_start":238,"line_end":238,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1624551,"byte_end":1624560,"line_start":239,"line_end":239,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6795},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1624724,"byte_end":1624736,"line_start":245,"line_end":245,"column_start":12,"column_end":24},"name":"type_as_null","qualname":"<Tensor>::type_as_null","value":"pub fn type_as_null(&Self) -> Option<Null>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1624674,"byte_end":1624683,"line_start":243,"line_end":243,"column_start":5,"column_end":14}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1624688,"byte_end":1624712,"line_start":244,"line_end":244,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6796},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1624992,"byte_end":1625003,"line_start":256,"line_end":256,"column_start":12,"column_end":23},"name":"type_as_int","qualname":"<Tensor>::type_as_int","value":"pub fn type_as_int(&Self) -> Option<Int>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1624942,"byte_end":1624951,"line_start":254,"line_end":254,"column_start":5,"column_end":14}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1624956,"byte_end":1624980,"line_start":255,"line_end":255,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6797},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1625256,"byte_end":1625278,"line_start":267,"line_end":267,"column_start":12,"column_end":34},"name":"type_as_floating_point","qualname":"<Tensor>::type_as_floating_point","value":"pub fn type_as_floating_point(&Self) -> Option<FloatingPoint>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1625206,"byte_end":1625215,"line_start":265,"line_end":265,"column_start":5,"column_end":14}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1625220,"byte_end":1625244,"line_start":266,"line_end":266,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6798},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1625561,"byte_end":1625575,"line_start":278,"line_end":278,"column_start":12,"column_end":26},"name":"type_as_binary","qualname":"<Tensor>::type_as_binary","value":"pub fn type_as_binary(&Self) -> Option<Binary>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1625511,"byte_end":1625520,"line_start":276,"line_end":276,"column_start":5,"column_end":14}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1625525,"byte_end":1625549,"line_start":277,"line_end":277,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6799},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1625837,"byte_end":1625850,"line_start":289,"line_end":289,"column_start":12,"column_end":25},"name":"type_as_utf_8","qualname":"<Tensor>::type_as_utf_8","value":"pub fn type_as_utf_8(&Self) -> Option<Utf8>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1625787,"byte_end":1625796,"line_start":287,"line_end":287,"column_start":5,"column_end":14}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1625801,"byte_end":1625825,"line_start":288,"line_end":288,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6800},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1626106,"byte_end":1626118,"line_start":300,"line_end":300,"column_start":12,"column_end":24},"name":"type_as_bool","qualname":"<Tensor>::type_as_bool","value":"pub fn type_as_bool(&Self) -> Option<Bool>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1626056,"byte_end":1626065,"line_start":298,"line_end":298,"column_start":5,"column_end":14}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1626070,"byte_end":1626094,"line_start":299,"line_end":299,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6801},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1626374,"byte_end":1626389,"line_start":311,"line_end":311,"column_start":12,"column_end":27},"name":"type_as_decimal","qualname":"<Tensor>::type_as_decimal","value":"pub fn type_as_decimal(&Self) -> Option<Decimal>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1626324,"byte_end":1626333,"line_start":309,"line_end":309,"column_start":5,"column_end":14}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1626338,"byte_end":1626362,"line_start":310,"line_end":310,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6802},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1626654,"byte_end":1626666,"line_start":322,"line_end":322,"column_start":12,"column_end":24},"name":"type_as_date","qualname":"<Tensor>::type_as_date","value":"pub fn type_as_date(&Self) -> Option<Date>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1626604,"byte_end":1626613,"line_start":320,"line_end":320,"column_start":5,"column_end":14}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1626618,"byte_end":1626642,"line_start":321,"line_end":321,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6803},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1626922,"byte_end":1626934,"line_start":333,"line_end":333,"column_start":12,"column_end":24},"name":"type_as_time","qualname":"<Tensor>::type_as_time","value":"pub fn type_as_time(&Self) -> Option<Time>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1626872,"byte_end":1626881,"line_start":331,"line_end":331,"column_start":5,"column_end":14}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1626886,"byte_end":1626910,"line_start":332,"line_end":332,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6804},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1627190,"byte_end":1627207,"line_start":344,"line_end":344,"column_start":12,"column_end":29},"name":"type_as_timestamp","qualname":"<Tensor>::type_as_timestamp","value":"pub fn type_as_timestamp(&Self) -> Option<Timestamp>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1627140,"byte_end":1627149,"line_start":342,"line_end":342,"column_start":5,"column_end":14}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1627154,"byte_end":1627178,"line_start":343,"line_end":343,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6805},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1627478,"byte_end":1627494,"line_start":355,"line_end":355,"column_start":12,"column_end":28},"name":"type_as_interval","qualname":"<Tensor>::type_as_interval","value":"pub fn type_as_interval(&Self) -> Option<Interval>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1627428,"byte_end":1627437,"line_start":353,"line_end":353,"column_start":5,"column_end":14}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1627442,"byte_end":1627466,"line_start":354,"line_end":354,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6806},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1627762,"byte_end":1627774,"line_start":366,"line_end":366,"column_start":12,"column_end":24},"name":"type_as_list","qualname":"<Tensor>::type_as_list","value":"pub fn type_as_list(&Self) -> Option<List>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1627712,"byte_end":1627721,"line_start":364,"line_end":364,"column_start":5,"column_end":14}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1627726,"byte_end":1627750,"line_start":365,"line_end":365,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6807},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1628030,"byte_end":1628045,"line_start":377,"line_end":377,"column_start":12,"column_end":27},"name":"type_as_struct_","qualname":"<Tensor>::type_as_struct_","value":"pub fn type_as_struct_(&Self) -> Option<Struct_>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1627980,"byte_end":1627989,"line_start":375,"line_end":375,"column_start":5,"column_end":14}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1627994,"byte_end":1628018,"line_start":376,"line_end":376,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6808},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1628310,"byte_end":1628323,"line_start":388,"line_end":388,"column_start":12,"column_end":25},"name":"type_as_union","qualname":"<Tensor>::type_as_union","value":"pub fn type_as_union(&Self) -> Option<Union>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1628260,"byte_end":1628269,"line_start":386,"line_end":386,"column_start":5,"column_end":14}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1628274,"byte_end":1628298,"line_start":387,"line_end":387,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6809},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1628582,"byte_end":1628607,"line_start":399,"line_end":399,"column_start":12,"column_end":37},"name":"type_as_fixed_size_binary","qualname":"<Tensor>::type_as_fixed_size_binary","value":"pub fn type_as_fixed_size_binary(&Self) -> Option<FixedSizeBinary>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1628532,"byte_end":1628541,"line_start":397,"line_end":397,"column_start":5,"column_end":14}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1628546,"byte_end":1628570,"line_start":398,"line_end":398,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6810},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1628896,"byte_end":1628919,"line_start":410,"line_end":410,"column_start":12,"column_end":35},"name":"type_as_fixed_size_list","qualname":"<Tensor>::type_as_fixed_size_list","value":"pub fn type_as_fixed_size_list(&Self) -> Option<FixedSizeList>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1628846,"byte_end":1628855,"line_start":408,"line_end":408,"column_start":5,"column_end":14}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1628860,"byte_end":1628884,"line_start":409,"line_end":409,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6811},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1629202,"byte_end":1629213,"line_start":421,"line_end":421,"column_start":12,"column_end":23},"name":"type_as_map","qualname":"<Tensor>::type_as_map","value":"pub fn type_as_map(&Self) -> Option<Map>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1629152,"byte_end":1629161,"line_start":419,"line_end":419,"column_start":5,"column_end":14}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1629166,"byte_end":1629190,"line_start":420,"line_end":420,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6812},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1629466,"byte_end":1629482,"line_start":432,"line_end":432,"column_start":12,"column_end":28},"name":"type_as_duration","qualname":"<Tensor>::type_as_duration","value":"pub fn type_as_duration(&Self) -> Option<Duration>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1629416,"byte_end":1629425,"line_start":430,"line_end":430,"column_start":5,"column_end":14}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1629430,"byte_end":1629454,"line_start":431,"line_end":431,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6813},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1629750,"byte_end":1629770,"line_start":443,"line_end":443,"column_start":12,"column_end":32},"name":"type_as_large_binary","qualname":"<Tensor>::type_as_large_binary","value":"pub fn type_as_large_binary(&Self) -> Option<LargeBinary>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1629700,"byte_end":1629709,"line_start":441,"line_end":441,"column_start":5,"column_end":14}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1629714,"byte_end":1629738,"line_start":442,"line_end":442,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6814},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1630047,"byte_end":1630066,"line_start":454,"line_end":454,"column_start":12,"column_end":31},"name":"type_as_large_utf_8","qualname":"<Tensor>::type_as_large_utf_8","value":"pub fn type_as_large_utf_8(&Self) -> Option<LargeUtf8>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1629997,"byte_end":1630006,"line_start":452,"line_end":452,"column_start":5,"column_end":14}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1630011,"byte_end":1630035,"line_start":453,"line_end":453,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6815},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1630337,"byte_end":1630355,"line_start":465,"line_end":465,"column_start":12,"column_end":30},"name":"type_as_large_list","qualname":"<Tensor>::type_as_large_list","value":"pub fn type_as_large_list(&Self) -> Option<LargeList>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1630287,"byte_end":1630296,"line_start":463,"line_end":463,"column_start":5,"column_end":14}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1630301,"byte_end":1630325,"line_start":464,"line_end":464,"column_start":5,"column_end":29}}]},{"kind":"Struct","id":{"krate":0,"index":6824},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1633801,"byte_end":1633811,"line_start":516,"line_end":516,"column_start":12,"column_end":22},"name":"TensorArgs","qualname":"::ipc::gen::Tensor::TensorArgs","value":"TensorArgs { type_type, type_, shape, strides, data }","parent":null,"children":[{"krate":0,"index":6826},{"krate":0,"index":6827},{"krate":0,"index":6828},{"krate":0,"index":6829},{"krate":0,"index":6830}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6826},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1633826,"byte_end":1633835,"line_start":517,"line_end":517,"column_start":9,"column_end":18},"name":"type_type","qualname":"::ipc::gen::Tensor::TensorArgs::type_type","value":"ipc::gen::Schema::Type","parent":{"krate":0,"index":6824},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6827},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1633851,"byte_end":1633856,"line_start":518,"line_end":518,"column_start":9,"column_end":14},"name":"type_","qualname":"::ipc::gen::Tensor::TensorArgs::type_","value":"std::option::Option<flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>>","parent":{"krate":0,"index":6824},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6828},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1633927,"byte_end":1633932,"line_start":519,"line_end":519,"column_start":9,"column_end":14},"name":"shape","qualname":"::ipc::gen::Tensor::TensorArgs::shape","value":"std::option::Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<ipc::gen::Tensor::TensorDim<'a>>>>>","parent":{"krate":0,"index":6824},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6829},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1634082,"byte_end":1634089,"line_start":524,"line_end":524,"column_start":9,"column_end":16},"name":"strides","qualname":"::ipc::gen::Tensor::TensorArgs::strides","value":"std::option::Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>","parent":{"krate":0,"index":6824},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6830},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1634161,"byte_end":1634165,"line_start":525,"line_end":525,"column_start":9,"column_end":13},"name":"data","qualname":"::ipc::gen::Tensor::TensorArgs::data","value":"std::option::Option<&'a ipc::gen::Schema::Buffer>","parent":{"krate":0,"index":6824},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6834},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1634508,"byte_end":1634521,"line_start":539,"line_end":539,"column_start":12,"column_end":25},"name":"TensorBuilder","qualname":"::ipc::gen::Tensor::TensorBuilder","value":"TensorBuilder {  }","parent":null,"children":[{"krate":0,"index":6837},{"krate":0,"index":6838}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6842},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1634733,"byte_end":1634746,"line_start":545,"line_end":545,"column_start":12,"column_end":25},"name":"add_type_type","qualname":"<TensorBuilder>::add_type_type","value":"pub fn add_type_type(&mut Self, Type)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1634712,"byte_end":1634721,"line_start":544,"line_end":544,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6843},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1634903,"byte_end":1634912,"line_start":550,"line_end":550,"column_start":12,"column_end":21},"name":"add_type_","qualname":"<TensorBuilder>::add_type_","value":"pub fn add_type_(&mut Self,\n                 flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1634882,"byte_end":1634891,"line_start":549,"line_end":549,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6844},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1635143,"byte_end":1635152,"line_start":558,"line_end":558,"column_start":12,"column_end":21},"name":"add_shape","qualname":"<TensorBuilder>::add_shape","value":"pub fn add_shape(&mut Self, flatbuffers::WIPOffset<flatbuffers::Vector>)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1635122,"byte_end":1635131,"line_start":557,"line_end":557,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6845},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1635447,"byte_end":1635458,"line_start":568,"line_end":568,"column_start":12,"column_end":23},"name":"add_strides","qualname":"<TensorBuilder>::add_strides","value":"pub fn add_strides(&mut Self, flatbuffers::WIPOffset<flatbuffers::Vector>)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1635426,"byte_end":1635435,"line_start":567,"line_end":567,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6846},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1635696,"byte_end":1635704,"line_start":576,"line_end":576,"column_start":12,"column_end":20},"name":"add_data","qualname":"<TensorBuilder>::add_data","value":"pub fn add_data(&mut Self, &Buffer)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1635675,"byte_end":1635684,"line_start":575,"line_end":575,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6847},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1635834,"byte_end":1635837,"line_start":580,"line_end":580,"column_start":12,"column_end":15},"name":"new","qualname":"<TensorBuilder>::new","value":"pub fn new(&'b mut flatbuffers::FlatBufferBuilder) -> TensorBuilder","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1635813,"byte_end":1635822,"line_start":579,"line_end":579,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6848},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1636086,"byte_end":1636092,"line_start":590,"line_end":590,"column_start":12,"column_end":18},"name":"finish","qualname":"<TensorBuilder>::finish","value":"pub fn finish(Self) -> flatbuffers::WIPOffset<Tensor>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1636065,"byte_end":1636074,"line_start":589,"line_end":589,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":6851},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1644637,"byte_end":1644655,"line_start":827,"line_end":827,"column_start":8,"column_end":26},"name":"get_root_as_tensor","qualname":"::ipc::gen::Tensor::get_root_as_tensor","value":"pub fn get_root_as_tensor<'a>(&'a [u8]) -> Tensor","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1644535,"byte_end":1644544,"line_start":825,"line_end":825,"column_start":1,"column_end":10}},{"value":"deprecated(since = \"1.13\", note =\n             \"Deprecated in favor of `root_as...` methods.\")","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1644545,"byte_end":1644629,"line_start":826,"line_end":826,"column_start":1,"column_end":85}}]},{"kind":"Function","id":{"krate":0,"index":6853},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1644858,"byte_end":1644890,"line_start":833,"line_end":833,"column_start":8,"column_end":40},"name":"get_size_prefixed_root_as_tensor","qualname":"::ipc::gen::Tensor::get_size_prefixed_root_as_tensor","value":"pub fn get_size_prefixed_root_as_tensor<'a>(&'a [u8]) -> Tensor","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1644756,"byte_end":1644765,"line_start":831,"line_end":831,"column_start":1,"column_end":10}},{"value":"deprecated(since = \"1.13\", note =\n             \"Deprecated in favor of `root_as...` methods.\")","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1644766,"byte_end":1644850,"line_start":832,"line_end":832,"column_start":1,"column_end":85}}]},{"kind":"Function","id":{"krate":0,"index":6855},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1645288,"byte_end":1645302,"line_start":844,"line_end":844,"column_start":8,"column_end":22},"name":"root_as_tensor","qualname":"::ipc::gen::Tensor::root_as_tensor","value":"pub fn root_as_tensor(&[u8]) -> Result<Tensor, flatbuffers::InvalidFlatbuffer>","parent":null,"children":[],"decl_id":null,"docs":" Verifies that a buffer of bytes contains a `Tensor`\n and returns it.\n Note that verification is still experimental and may not\n catch every error, or be maximally performant. For the\n previous, unchecked, behavior use\n `root_as_tensor_unchecked`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1645005,"byte_end":1645014,"line_start":837,"line_end":837,"column_start":1,"column_end":10}},{"value":"/ Verifies that a buffer of bytes contains a `Tensor`","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1645015,"byte_end":1645070,"line_start":838,"line_end":838,"column_start":1,"column_end":56}},{"value":"/ and returns it.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1645071,"byte_end":1645090,"line_start":839,"line_end":839,"column_start":1,"column_end":20}},{"value":"/ Note that verification is still experimental and may not","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1645091,"byte_end":1645151,"line_start":840,"line_end":840,"column_start":1,"column_end":61}},{"value":"/ catch every error, or be maximally performant. For the","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1645152,"byte_end":1645210,"line_start":841,"line_end":841,"column_start":1,"column_end":59}},{"value":"/ previous, unchecked, behavior use","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1645211,"byte_end":1645248,"line_start":842,"line_end":842,"column_start":1,"column_end":38}},{"value":"/ `root_as_tensor_unchecked`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1645249,"byte_end":1645280,"line_start":843,"line_end":843,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":6856},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1645717,"byte_end":1645745,"line_start":854,"line_end":854,"column_start":8,"column_end":36},"name":"size_prefixed_root_as_tensor","qualname":"::ipc::gen::Tensor::size_prefixed_root_as_tensor","value":"pub fn size_prefixed_root_as_tensor(&[u8])\n-> Result<Tensor, flatbuffers::InvalidFlatbuffer>","parent":null,"children":[],"decl_id":null,"docs":" Verifies that a buffer of bytes contains a size prefixed\n `Tensor` and returns it.\n Note that verification is still experimental and may not\n catch every error, or be maximally performant. For the\n previous, unchecked, behavior use\n `size_prefixed_root_as_tensor_unchecked`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1645406,"byte_end":1645415,"line_start":847,"line_end":847,"column_start":1,"column_end":10}},{"value":"/ Verifies that a buffer of bytes contains a size prefixed","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1645416,"byte_end":1645476,"line_start":848,"line_end":848,"column_start":1,"column_end":61}},{"value":"/ `Tensor` and returns it.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1645477,"byte_end":1645505,"line_start":849,"line_end":849,"column_start":1,"column_end":29}},{"value":"/ Note that verification is still experimental and may not","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1645506,"byte_end":1645566,"line_start":850,"line_end":850,"column_start":1,"column_end":61}},{"value":"/ catch every error, or be maximally performant. For the","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1645567,"byte_end":1645625,"line_start":851,"line_end":851,"column_start":1,"column_end":59}},{"value":"/ previous, unchecked, behavior use","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1645626,"byte_end":1645663,"line_start":852,"line_end":852,"column_start":1,"column_end":38}},{"value":"/ `size_prefixed_root_as_tensor_unchecked`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1645664,"byte_end":1645709,"line_start":853,"line_end":853,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":6857},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1646178,"byte_end":1646202,"line_start":866,"line_end":866,"column_start":8,"column_end":32},"name":"root_as_tensor_with_opts","qualname":"::ipc::gen::Tensor::root_as_tensor_with_opts","value":"pub fn root_as_tensor_with_opts<'b,\n                                'o>(&'o flatbuffers::VerifierOptions,\n                                    &'b [u8])\n-> Result<Tensor, flatbuffers::InvalidFlatbuffer>","parent":null,"children":[],"decl_id":null,"docs":" Verifies, with the given options, that a buffer of bytes\n contains a `Tensor` and returns it.\n Note that verification is still experimental and may not\n catch every error, or be maximally performant. For the\n previous, unchecked, behavior use\n `root_as_tensor_unchecked`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1645870,"byte_end":1645879,"line_start":859,"line_end":859,"column_start":1,"column_end":10}},{"value":"/ Verifies, with the given options, that a buffer of bytes","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1645880,"byte_end":1645940,"line_start":860,"line_end":860,"column_start":1,"column_end":61}},{"value":"/ contains a `Tensor` and returns it.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1645941,"byte_end":1645980,"line_start":861,"line_end":861,"column_start":1,"column_end":40}},{"value":"/ Note that verification is still experimental and may not","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1645981,"byte_end":1646041,"line_start":862,"line_end":862,"column_start":1,"column_end":61}},{"value":"/ catch every error, or be maximally performant. For the","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1646042,"byte_end":1646100,"line_start":863,"line_end":863,"column_start":1,"column_end":59}},{"value":"/ previous, unchecked, behavior use","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1646101,"byte_end":1646138,"line_start":864,"line_end":864,"column_start":1,"column_end":38}},{"value":"/ `root_as_tensor_unchecked`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1646139,"byte_end":1646170,"line_start":865,"line_end":865,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":6860},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1646723,"byte_end":1646761,"line_start":879,"line_end":879,"column_start":8,"column_end":46},"name":"size_prefixed_root_as_tensor_with_opts","qualname":"::ipc::gen::Tensor::size_prefixed_root_as_tensor_with_opts","value":"pub fn size_prefixed_root_as_tensor_with_opts<'b,\n                                              'o>(&'o flatbuffers::VerifierOptions,\n                                                  &'b [u8])\n-> Result<Tensor, flatbuffers::InvalidFlatbuffer>","parent":null,"children":[],"decl_id":null,"docs":" Verifies, with the given verifier options, that a buffer of\n bytes contains a size prefixed `Tensor` and returns\n it. Note that verification is still experimental and may not\n catch every error, or be maximally performant. For the\n previous, unchecked, behavior use\n `root_as_tensor_unchecked`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1646392,"byte_end":1646401,"line_start":872,"line_end":872,"column_start":1,"column_end":10}},{"value":"/ Verifies, with the given verifier options, that a buffer of","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1646402,"byte_end":1646465,"line_start":873,"line_end":873,"column_start":1,"column_end":64}},{"value":"/ bytes contains a size prefixed `Tensor` and returns","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1646466,"byte_end":1646521,"line_start":874,"line_end":874,"column_start":1,"column_end":56}},{"value":"/ it. Note that verification is still experimental and may not","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1646522,"byte_end":1646586,"line_start":875,"line_end":875,"column_start":1,"column_end":65}},{"value":"/ catch every error, or be maximally performant. For the","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1646587,"byte_end":1646645,"line_start":876,"line_end":876,"column_start":1,"column_end":59}},{"value":"/ previous, unchecked, behavior use","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1646646,"byte_end":1646683,"line_start":877,"line_end":877,"column_start":1,"column_end":38}},{"value":"/ `root_as_tensor_unchecked`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1646684,"byte_end":1646715,"line_start":878,"line_end":878,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":6863},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1647169,"byte_end":1647193,"line_start":889,"line_end":889,"column_start":15,"column_end":39},"name":"root_as_tensor_unchecked","qualname":"::ipc::gen::Tensor::root_as_tensor_unchecked","value":"pub unsafe fn root_as_tensor_unchecked(&[u8]) -> Tensor","parent":null,"children":[],"decl_id":null,"docs":" Assumes, without verification, that a buffer of bytes contains a Tensor and returns it.\n # Safety\n Callers must trust the given bytes do indeed contain a valid `Tensor`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1646965,"byte_end":1646974,"line_start":885,"line_end":885,"column_start":1,"column_end":10}},{"value":"/ Assumes, without verification, that a buffer of bytes contains a Tensor and returns it.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1646975,"byte_end":1647066,"line_start":886,"line_end":886,"column_start":1,"column_end":92}},{"value":"/ # Safety","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1647067,"byte_end":1647079,"line_start":887,"line_end":887,"column_start":1,"column_end":13}},{"value":"/ Callers must trust the given bytes do indeed contain a valid `Tensor`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1647080,"byte_end":1647154,"line_start":888,"line_end":888,"column_start":1,"column_end":75}}]},{"kind":"Function","id":{"krate":0,"index":6864},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1647499,"byte_end":1647537,"line_start":896,"line_end":896,"column_start":15,"column_end":53},"name":"size_prefixed_root_as_tensor_unchecked","qualname":"::ipc::gen::Tensor::size_prefixed_root_as_tensor_unchecked","value":"pub unsafe fn size_prefixed_root_as_tensor_unchecked(&[u8]) -> Tensor","parent":null,"children":[],"decl_id":null,"docs":" Assumes, without verification, that a buffer of bytes contains a size prefixed Tensor and returns it.\n # Safety\n Callers must trust the given bytes do indeed contain a valid size prefixed `Tensor`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1647267,"byte_end":1647276,"line_start":892,"line_end":892,"column_start":1,"column_end":10}},{"value":"/ Assumes, without verification, that a buffer of bytes contains a size prefixed Tensor and returns it.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1647277,"byte_end":1647382,"line_start":893,"line_end":893,"column_start":1,"column_end":106}},{"value":"/ # Safety","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1647383,"byte_end":1647395,"line_start":894,"line_end":894,"column_start":1,"column_end":13}},{"value":"/ Callers must trust the given bytes do indeed contain a valid size prefixed `Tensor`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1647396,"byte_end":1647484,"line_start":895,"line_end":895,"column_start":1,"column_end":89}}]},{"kind":"Function","id":{"krate":0,"index":6865},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1647642,"byte_end":1647662,"line_start":900,"line_end":900,"column_start":8,"column_end":28},"name":"finish_tensor_buffer","qualname":"::ipc::gen::Tensor::finish_tensor_buffer","value":"pub fn finish_tensor_buffer<'a,\n                            'b>(&'b mut flatbuffers::FlatBufferBuilder,\n                                flatbuffers::WIPOffset<Tensor>)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1647625,"byte_end":1647634,"line_start":899,"line_end":899,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":6868},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1647823,"byte_end":1647857,"line_start":908,"line_end":908,"column_start":8,"column_end":42},"name":"finish_size_prefixed_tensor_buffer","qualname":"::ipc::gen::Tensor::finish_size_prefixed_tensor_buffer","value":"pub fn finish_size_prefixed_tensor_buffer<'a,\n                                          'b>(&'b mut flatbuffers::FlatBufferBuilder,\n                                              flatbuffers::WIPOffset<Tensor>)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1647806,"byte_end":1647815,"line_start":907,"line_end":907,"column_start":1,"column_end":10}}]},{"kind":"Mod","id":{"krate":0,"index":6881},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"json","qualname":"::json","value":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/mod.rs","parent":null,"children":[{"krate":0,"index":6882},{"krate":0,"index":7029},{"krate":0,"index":7032}],"decl_id":null,"docs":" Transfer data between the Arrow memory format and JSON line-delimited records.\n","sig":null,"attributes":[{"value":"/ Transfer data between the Arrow memory format and JSON line-delimited records.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/mod.rs","byte_start":1648817,"byte_end":1648899,"line_start":18,"line_end":18,"column_start":1,"column_end":83}}]},{"kind":"Mod","id":{"krate":0,"index":6882},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"reader","qualname":"::json::reader","value":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","parent":null,"children":[{"krate":0,"index":6883},{"krate":0,"index":6884},{"krate":0,"index":6887},{"krate":0,"index":6890},{"krate":0,"index":6893},{"krate":0,"index":6896},{"krate":0,"index":6899},{"krate":0,"index":6902},{"krate":0,"index":6905},{"krate":0,"index":6908},{"krate":0,"index":6911},{"krate":0,"index":6914},{"krate":0,"index":6917},{"krate":0,"index":6918},{"krate":0,"index":6919},{"krate":0,"index":6922},{"krate":0,"index":6925},{"krate":0,"index":6928},{"krate":0,"index":6931},{"krate":0,"index":6932},{"krate":0,"index":6933},{"krate":0,"index":6936},{"krate":0,"index":6937},{"krate":0,"index":9595},{"krate":0,"index":9602},{"krate":0,"index":6940},{"krate":0,"index":6944},{"krate":0,"index":6950},{"krate":0,"index":6952},{"krate":0,"index":6954},{"krate":0,"index":9606},{"krate":0,"index":9610},{"krate":0,"index":6959},{"krate":0,"index":7008},{"krate":0,"index":7009},{"krate":0,"index":7011},{"krate":0,"index":9612},{"krate":0,"index":9616},{"krate":0,"index":7013},{"krate":0,"index":9619},{"krate":0,"index":9624},{"krate":0,"index":7019},{"krate":0,"index":7021}],"decl_id":null,"docs":" JSON Reader","sig":null,"attributes":[{"value":"/ JSON Reader","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1649788,"byte_end":1649803,"line_start":18,"line_end":18,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1649804,"byte_end":1649807,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ This JSON reader allows JSON line-delimited files to be read into the Arrow memory","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1649808,"byte_end":1649894,"line_start":20,"line_end":20,"column_start":1,"column_end":87}},{"value":"/ model. Records are loaded in batches and are then converted from row-based data to","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1649895,"byte_end":1649981,"line_start":21,"line_end":21,"column_start":1,"column_end":87}},{"value":"/ columnar data.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1649982,"byte_end":1650000,"line_start":22,"line_end":22,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1650001,"byte_end":1650004,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ Example:","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1650005,"byte_end":1650017,"line_start":24,"line_end":24,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1650018,"byte_end":1650021,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1650022,"byte_end":1650029,"line_start":26,"line_end":26,"column_start":1,"column_end":8}},{"value":"/ use arrow::datatypes::{DataType, Field, Schema};","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1650030,"byte_end":1650082,"line_start":27,"line_end":27,"column_start":1,"column_end":53}},{"value":"/ use arrow::json;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1650083,"byte_end":1650103,"line_start":28,"line_end":28,"column_start":1,"column_end":21}},{"value":"/ use std::fs::File;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1650104,"byte_end":1650126,"line_start":29,"line_end":29,"column_start":1,"column_end":23}},{"value":"/ use std::io::BufReader;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1650127,"byte_end":1650154,"line_start":30,"line_end":30,"column_start":1,"column_end":28}},{"value":"/ use std::sync::Arc;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1650155,"byte_end":1650178,"line_start":31,"line_end":31,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1650179,"byte_end":1650182,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ let schema = Schema::new(vec![","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1650183,"byte_end":1650217,"line_start":33,"line_end":33,"column_start":1,"column_end":35}},{"value":"/     Field::new(\"a\", DataType::Float64, false),","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1650218,"byte_end":1650268,"line_start":34,"line_end":34,"column_start":1,"column_end":51}},{"value":"/     Field::new(\"b\", DataType::Float64, false),","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1650269,"byte_end":1650319,"line_start":35,"line_end":35,"column_start":1,"column_end":51}},{"value":"/     Field::new(\"c\", DataType::Float64, false),","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1650320,"byte_end":1650370,"line_start":36,"line_end":36,"column_start":1,"column_end":51}},{"value":"/ ]);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1650371,"byte_end":1650378,"line_start":37,"line_end":37,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1650379,"byte_end":1650382,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ let file = File::open(\"test/data/basic.json\").unwrap();","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1650383,"byte_end":1650442,"line_start":39,"line_end":39,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1650443,"byte_end":1650446,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ let mut json = json::Reader::new(BufReader::new(file), Arc::new(schema), 1024, None);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1650447,"byte_end":1650536,"line_start":41,"line_end":41,"column_start":1,"column_end":90}},{"value":"/ let batch = json.next().unwrap().unwrap();","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1650537,"byte_end":1650583,"line_start":42,"line_end":42,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1650584,"byte_end":1650591,"line_start":43,"line_end":43,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":9595},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1656910,"byte_end":1656919,"line_start":210,"line_end":210,"column_start":12,"column_end":21},"name":"ValueIter","qualname":"::json::reader::ValueIter","value":"ValueIter {  }","parent":null,"children":[{"krate":0,"index":9598},{"krate":0,"index":9599},{"krate":0,"index":9600},{"krate":0,"index":9601}],"decl_id":null,"docs":" JSON file reader that produces a serde_json::Value iterator from a Read trait","sig":null,"attributes":[{"value":"/ JSON file reader that produces a serde_json::Value iterator from a Read trait","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1656418,"byte_end":1656499,"line_start":193,"line_end":193,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1656500,"byte_end":1656503,"line_start":194,"line_end":194,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1656504,"byte_end":1656517,"line_start":195,"line_end":195,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1656518,"byte_end":1656521,"line_start":196,"line_end":196,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1656522,"byte_end":1656529,"line_start":197,"line_end":197,"column_start":1,"column_end":8}},{"value":"/ use std::fs::File;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1656530,"byte_end":1656552,"line_start":198,"line_end":198,"column_start":1,"column_end":23}},{"value":"/ use std::io::BufReader;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1656553,"byte_end":1656580,"line_start":199,"line_end":199,"column_start":1,"column_end":28}},{"value":"/ use arrow::json::reader::ValueIter;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1656581,"byte_end":1656620,"line_start":200,"line_end":200,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1656621,"byte_end":1656624,"line_start":201,"line_end":201,"column_start":1,"column_end":4}},{"value":"/ let mut reader =","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1656625,"byte_end":1656645,"line_start":202,"line_end":202,"column_start":1,"column_end":21}},{"value":"/     BufReader::new(File::open(\"test/data/mixed_arrays.json\").unwrap());","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1656646,"byte_end":1656721,"line_start":203,"line_end":203,"column_start":1,"column_end":76}},{"value":"/ let mut value_reader = ValueIter::new(&mut reader, None);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1656722,"byte_end":1656783,"line_start":204,"line_end":204,"column_start":1,"column_end":62}},{"value":"/ for value in value_reader {","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1656784,"byte_end":1656815,"line_start":205,"line_end":205,"column_start":1,"column_end":32}},{"value":"/     println!(\"JSON value: {}\", value.unwrap());","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1656816,"byte_end":1656867,"line_start":206,"line_end":206,"column_start":1,"column_end":52}},{"value":"/ }","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1656868,"byte_end":1656873,"line_start":207,"line_end":207,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1656874,"byte_end":1656881,"line_start":208,"line_end":208,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":6943},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1657164,"byte_end":1657167,"line_start":219,"line_end":219,"column_start":12,"column_end":15},"name":"new","qualname":"<ValueIter>::new","value":"pub fn new(&'a mut BufReader<R>, Option<usize>) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":6950},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1659541,"byte_end":1659572,"line_start":289,"line_end":289,"column_start":8,"column_end":39},"name":"infer_json_schema_from_seekable","qualname":"::json::reader::infer_json_schema_from_seekable","value":"pub fn infer_json_schema_from_seekable<R: Read +\n                                       Seek>(&mut BufReader<R>, Option<usize>)\n-> Result<SchemaRef>","parent":null,"children":[],"decl_id":null,"docs":" Infer the fields of a JSON file by reading the first n records of the file, with\n `max_read_records` controlling the maximum number of records to read.","sig":null,"attributes":[{"value":"/ Infer the fields of a JSON file by reading the first n records of the file, with","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1658659,"byte_end":1658743,"line_start":269,"line_end":269,"column_start":1,"column_end":85}},{"value":"/ `max_read_records` controlling the maximum number of records to read.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1658744,"byte_end":1658817,"line_start":270,"line_end":270,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1658818,"byte_end":1658821,"line_start":271,"line_end":271,"column_start":1,"column_end":4}},{"value":"/ If `max_read_records` is not set, the whole file is read to infer its field types.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1658822,"byte_end":1658908,"line_start":272,"line_end":272,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1658909,"byte_end":1658912,"line_start":273,"line_end":273,"column_start":1,"column_end":4}},{"value":"/ Contrary to [`infer_json_schema`], this function will seek back to the start of the `reader`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1658913,"byte_end":1659010,"line_start":274,"line_end":274,"column_start":1,"column_end":98}},{"value":"/ That way, the `reader` can be used immediately afterwards to create a [`Reader`].","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1659011,"byte_end":1659096,"line_start":275,"line_end":275,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1659097,"byte_end":1659100,"line_start":276,"line_end":276,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1659101,"byte_end":1659115,"line_start":277,"line_end":277,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1659116,"byte_end":1659123,"line_start":278,"line_end":278,"column_start":1,"column_end":8}},{"value":"/ use std::fs::File;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1659124,"byte_end":1659146,"line_start":279,"line_end":279,"column_start":1,"column_end":23}},{"value":"/ use std::io::BufReader;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1659147,"byte_end":1659174,"line_start":280,"line_end":280,"column_start":1,"column_end":28}},{"value":"/ use arrow::json::reader::infer_json_schema_from_seekable;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1659175,"byte_end":1659236,"line_start":281,"line_end":281,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1659237,"byte_end":1659240,"line_start":282,"line_end":282,"column_start":1,"column_end":4}},{"value":"/ let file = File::open(\"test/data/mixed_arrays.json\").unwrap();","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1659241,"byte_end":1659307,"line_start":283,"line_end":283,"column_start":1,"column_end":67}},{"value":"/ // file's cursor's offset at 0","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1659308,"byte_end":1659342,"line_start":284,"line_end":284,"column_start":1,"column_end":35}},{"value":"/ let mut reader = BufReader::new(file);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1659343,"byte_end":1659385,"line_start":285,"line_end":285,"column_start":1,"column_end":43}},{"value":"/ let inferred_schema = infer_json_schema_from_seekable(&mut reader, None).unwrap();","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1659386,"byte_end":1659472,"line_start":286,"line_end":286,"column_start":1,"column_end":87}},{"value":"/ // file's cursor's offset automatically set at 0","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1659473,"byte_end":1659525,"line_start":287,"line_end":287,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1659526,"byte_end":1659533,"line_start":288,"line_end":288,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":6952},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1660973,"byte_end":1660990,"line_start":326,"line_end":326,"column_start":8,"column_end":25},"name":"infer_json_schema","qualname":"::json::reader::infer_json_schema","value":"pub fn infer_json_schema<R: Read>(&mut BufReader<R>, Option<usize>)\n-> Result<SchemaRef>","parent":null,"children":[],"decl_id":null,"docs":" Infer the fields of a JSON file by reading the first n records of the buffer, with\n `max_read_records` controlling the maximum number of records to read.","sig":null,"attributes":[{"value":"/ Infer the fields of a JSON file by reading the first n records of the buffer, with","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1659846,"byte_end":1659932,"line_start":300,"line_end":300,"column_start":1,"column_end":87}},{"value":"/ `max_read_records` controlling the maximum number of records to read.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1659933,"byte_end":1660006,"line_start":301,"line_end":301,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1660007,"byte_end":1660010,"line_start":302,"line_end":302,"column_start":1,"column_end":4}},{"value":"/ If `max_read_records` is not set, the whole file is read to infer its field types.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1660011,"byte_end":1660097,"line_start":303,"line_end":303,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1660098,"byte_end":1660101,"line_start":304,"line_end":304,"column_start":1,"column_end":4}},{"value":"/ This function will not seek back to the start of the `reader`. The user has to manage the","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1660102,"byte_end":1660195,"line_start":305,"line_end":305,"column_start":1,"column_end":94}},{"value":"/ original file's cursor. This function is useful when the `reader`'s cursor is not available","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1660196,"byte_end":1660291,"line_start":306,"line_end":306,"column_start":1,"column_end":96}},{"value":"/ (does not implement [`Seek`]), such is the case for compressed streams decoders.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1660292,"byte_end":1660376,"line_start":307,"line_end":307,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1660377,"byte_end":1660380,"line_start":308,"line_end":308,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1660381,"byte_end":1660395,"line_start":309,"line_end":309,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1660396,"byte_end":1660403,"line_start":310,"line_end":310,"column_start":1,"column_end":8}},{"value":"/ use std::fs::File;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1660404,"byte_end":1660426,"line_start":311,"line_end":311,"column_start":1,"column_end":23}},{"value":"/ use std::io::{BufReader, SeekFrom, Seek};","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1660427,"byte_end":1660472,"line_start":312,"line_end":312,"column_start":1,"column_end":46}},{"value":"/ use flate2::read::GzDecoder;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1660473,"byte_end":1660505,"line_start":313,"line_end":313,"column_start":1,"column_end":33}},{"value":"/ use arrow::json::reader::infer_json_schema;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1660506,"byte_end":1660553,"line_start":314,"line_end":314,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1660554,"byte_end":1660557,"line_start":315,"line_end":315,"column_start":1,"column_end":4}},{"value":"/ let mut file = File::open(\"test/data/mixed_arrays.json.gz\").unwrap();","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1660558,"byte_end":1660631,"line_start":316,"line_end":316,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1660632,"byte_end":1660635,"line_start":317,"line_end":317,"column_start":1,"column_end":4}},{"value":"/ // file's cursor's offset at 0","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1660636,"byte_end":1660670,"line_start":318,"line_end":318,"column_start":1,"column_end":35}},{"value":"/ let mut reader = BufReader::new(GzDecoder::new(&file));","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1660671,"byte_end":1660730,"line_start":319,"line_end":319,"column_start":1,"column_end":60}},{"value":"/ let inferred_schema = infer_json_schema(&mut reader, None).unwrap();","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1660731,"byte_end":1660803,"line_start":320,"line_end":320,"column_start":1,"column_end":73}},{"value":"/ // cursor's offset at end of file","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1660804,"byte_end":1660841,"line_start":321,"line_end":321,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1660842,"byte_end":1660845,"line_start":322,"line_end":322,"column_start":1,"column_end":4}},{"value":"/ // seek back to start so that the original file is usable again","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1660846,"byte_end":1660913,"line_start":323,"line_end":323,"column_start":1,"column_end":68}},{"value":"/ file.seek(SeekFrom::Start(0)).unwrap();","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1660914,"byte_end":1660957,"line_start":324,"line_end":324,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1660958,"byte_end":1660965,"line_start":325,"line_end":325,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":6954},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1661269,"byte_end":1661300,"line_start":334,"line_end":334,"column_start":8,"column_end":39},"name":"infer_json_schema_from_iterator","qualname":"::json::reader::infer_json_schema_from_iterator","value":"pub fn infer_json_schema_from_iterator<I>(I) -> Result<SchemaRef> where\nI: Iterator<Item = Result<Value>>","parent":null,"children":[],"decl_id":null,"docs":" Infer the fields of a JSON file by reading all items from the JSON Value Iterator.\n","sig":null,"attributes":[{"value":"/ Infer the fields of a JSON file by reading all items from the JSON Value Iterator.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1661175,"byte_end":1661261,"line_start":333,"line_end":333,"column_start":1,"column_end":87}}]},{"kind":"Struct","id":{"krate":0,"index":9606},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1669231,"byte_end":1669238,"line_start":499,"line_end":499,"column_start":12,"column_end":19},"name":"Decoder","qualname":"::json::reader::Decoder","value":"Decoder {  }","parent":null,"children":[{"krate":0,"index":9607},{"krate":0,"index":9608},{"krate":0,"index":9609}],"decl_id":null,"docs":" JSON values to Arrow record batch decoder. Decoder's next_batch method takes a JSON Value\n iterator as input and outputs Arrow record batch.","sig":null,"attributes":[{"value":"/ JSON values to Arrow record batch decoder. Decoder's next_batch method takes a JSON Value","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1668283,"byte_end":1668376,"line_start":476,"line_end":476,"column_start":1,"column_end":94}},{"value":"/ iterator as input and outputs Arrow record batch.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1668377,"byte_end":1668430,"line_start":477,"line_end":477,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1668431,"byte_end":1668434,"line_start":478,"line_end":478,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1668435,"byte_end":1668449,"line_start":479,"line_end":479,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1668450,"byte_end":1668457,"line_start":480,"line_end":480,"column_start":1,"column_end":8}},{"value":"/ use arrow::json::reader::{Decoder, ValueIter, infer_json_schema};","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1668458,"byte_end":1668527,"line_start":481,"line_end":481,"column_start":1,"column_end":70}},{"value":"/ use std::fs::File;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1668528,"byte_end":1668550,"line_start":482,"line_end":482,"column_start":1,"column_end":23}},{"value":"/ use std::io::{BufReader, Seek, SeekFrom};","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1668551,"byte_end":1668596,"line_start":483,"line_end":483,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1668597,"byte_end":1668600,"line_start":484,"line_end":484,"column_start":1,"column_end":4}},{"value":"/ let mut reader =","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1668601,"byte_end":1668621,"line_start":485,"line_end":485,"column_start":1,"column_end":21}},{"value":"/     BufReader::new(File::open(\"test/data/mixed_arrays.json\").unwrap());","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1668622,"byte_end":1668697,"line_start":486,"line_end":486,"column_start":1,"column_end":76}},{"value":"/ let inferred_schema = infer_json_schema(&mut reader, None).unwrap();","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1668698,"byte_end":1668770,"line_start":487,"line_end":487,"column_start":1,"column_end":73}},{"value":"/ let batch_size = 1024;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1668771,"byte_end":1668797,"line_start":488,"line_end":488,"column_start":1,"column_end":27}},{"value":"/ let decoder = Decoder::new(inferred_schema, batch_size, None);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1668798,"byte_end":1668864,"line_start":489,"line_end":489,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1668865,"byte_end":1668868,"line_start":490,"line_end":490,"column_start":1,"column_end":4}},{"value":"/ // seek back to start so that the original file is usable again","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1668869,"byte_end":1668936,"line_start":491,"line_end":491,"column_start":1,"column_end":68}},{"value":"/ reader.seek(SeekFrom::Start(0)).unwrap();","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1668937,"byte_end":1668982,"line_start":492,"line_end":492,"column_start":1,"column_end":46}},{"value":"/ let mut value_reader = ValueIter::new(&mut reader, None);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1668983,"byte_end":1669044,"line_start":493,"line_end":493,"column_start":1,"column_end":62}},{"value":"/ let batch = decoder.next_batch(&mut value_reader).unwrap().unwrap();","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1669045,"byte_end":1669117,"line_start":494,"line_end":494,"column_start":1,"column_end":73}},{"value":"/ assert_eq!(4, batch.num_rows());","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1669118,"byte_end":1669154,"line_start":495,"line_end":495,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(4, batch.num_columns());","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1669155,"byte_end":1669194,"line_start":496,"line_end":496,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1669195,"byte_end":1669202,"line_start":497,"line_end":497,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":6960},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1669644,"byte_end":1669647,"line_start":511,"line_end":511,"column_start":12,"column_end":15},"name":"new","qualname":"<Decoder>::new","value":"pub fn new(SchemaRef, usize, Option<Vec<String>>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new JSON decoder from any value that implements the `Iterator<Item=Result<Value>>`\n trait.\n","sig":null,"attributes":[{"value":"/ Create a new JSON decoder from any value that implements the `Iterator<Item=Result<Value>>`","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1669522,"byte_end":1669617,"line_start":509,"line_end":509,"column_start":5,"column_end":100}},{"value":"/ trait.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1669622,"byte_end":1669632,"line_start":510,"line_end":510,"column_start":5,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":6961},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1669982,"byte_end":1669988,"line_start":525,"line_end":525,"column_start":12,"column_end":18},"name":"schema","qualname":"<Decoder>::schema","value":"pub fn schema(&Self) -> SchemaRef","parent":null,"children":[],"decl_id":null,"docs":" Returns the schema of the reader, useful for getting the schema without reading\n record batches\n","sig":null,"attributes":[{"value":"/ Returns the schema of the reader, useful for getting the schema without reading","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1669864,"byte_end":1669947,"line_start":523,"line_end":523,"column_start":5,"column_end":88}},{"value":"/ record batches","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1669952,"byte_end":1669970,"line_start":524,"line_end":524,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":6963},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1670694,"byte_end":1670704,"line_start":547,"line_end":547,"column_start":12,"column_end":22},"name":"next_batch","qualname":"<Decoder>::next_batch","value":"pub fn next_batch<I>(&Self, &mut I) -> Result<Option<RecordBatch>> where\nI: Iterator<Item = Result<Value>>","parent":null,"children":[],"decl_id":null,"docs":" Read the next batch of records\n","sig":null,"attributes":[{"value":"/ Read the next batch of records","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1670648,"byte_end":1670682,"line_start":546,"line_end":546,"column_start":5,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":9612},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1703334,"byte_end":1703340,"line_start":1327,"line_end":1327,"column_start":12,"column_end":18},"name":"Reader","qualname":"::json::reader::Reader","value":"Reader {  }","parent":null,"children":[{"krate":0,"index":9614},{"krate":0,"index":9615}],"decl_id":null,"docs":" JSON file reader\n","sig":null,"attributes":[{"value":"/ JSON file reader","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1703285,"byte_end":1703305,"line_start":1325,"line_end":1325,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":7015},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1703681,"byte_end":1703684,"line_start":1338,"line_end":1338,"column_start":12,"column_end":15},"name":"new","qualname":"<Reader<R>>::new","value":"pub fn new(R, SchemaRef, usize, Option<Vec<String>>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new JSON Reader from any value that implements the `Read` trait.","sig":null,"attributes":[{"value":"/ Create a new JSON Reader from any value that implements the `Read` trait.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1703460,"byte_end":1703537,"line_start":1334,"line_end":1334,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1703542,"byte_end":1703545,"line_start":1335,"line_end":1335,"column_start":5,"column_end":8}},{"value":"/ If reading a `File`, you can customise the Reader, such as to enable schema","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1703550,"byte_end":1703629,"line_start":1336,"line_end":1336,"column_start":5,"column_end":84}},{"value":"/ inference, use `ReaderBuilder`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1703634,"byte_end":1703669,"line_start":1337,"line_end":1337,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":7016},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1704078,"byte_end":1704093,"line_start":1350,"line_end":1350,"column_start":12,"column_end":27},"name":"from_buf_reader","qualname":"<Reader<R>>::from_buf_reader","value":"pub fn from_buf_reader(BufReader<R>, SchemaRef, usize, Option<Vec<String>>)\n-> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new JSON Reader from a `BufReader<R: Read>`","sig":null,"attributes":[{"value":"/ Create a new JSON Reader from a `BufReader<R: Read>`","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1703913,"byte_end":1703969,"line_start":1347,"line_end":1347,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1703974,"byte_end":1703977,"line_start":1348,"line_end":1348,"column_start":5,"column_end":8}},{"value":"/ To customize the schema, such as to enable schema inference, use `ReaderBuilder`","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1703982,"byte_end":1704066,"line_start":1349,"line_end":1349,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":7017},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1704477,"byte_end":1704483,"line_start":1364,"line_end":1364,"column_start":12,"column_end":18},"name":"schema","qualname":"<Reader<R>>::schema","value":"pub fn schema(&Self) -> SchemaRef","parent":null,"children":[],"decl_id":null,"docs":" Returns the schema of the reader, useful for getting the schema without reading\n record batches\n","sig":null,"attributes":[{"value":"/ Returns the schema of the reader, useful for getting the schema without reading","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1704359,"byte_end":1704442,"line_start":1362,"line_end":1362,"column_start":5,"column_end":88}},{"value":"/ record batches","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1704447,"byte_end":1704465,"line_start":1363,"line_end":1363,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":7018},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1704638,"byte_end":1704642,"line_start":1370,"line_end":1370,"column_start":12,"column_end":16},"name":"next","qualname":"<Reader<R>>::next","value":"pub fn next(&mut Self) -> Result<Option<RecordBatch>>","parent":null,"children":[],"decl_id":null,"docs":" Read the next batch of records\n","sig":null,"attributes":[{"value":"/ Read the next batch of records","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1704547,"byte_end":1704581,"line_start":1368,"line_end":1368,"column_start":5,"column_end":39}},{"value":"allow(clippy :: should_implement_trait)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1704586,"byte_end":1704626,"line_start":1369,"line_end":1369,"column_start":5,"column_end":45}}]},{"kind":"Struct","id":{"krate":0,"index":9619},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1704843,"byte_end":1704856,"line_start":1378,"line_end":1378,"column_start":12,"column_end":25},"name":"ReaderBuilder","qualname":"::json::reader::ReaderBuilder","value":"ReaderBuilder {  }","parent":null,"children":[{"krate":0,"index":9620},{"krate":0,"index":9621},{"krate":0,"index":9622},{"krate":0,"index":9623}],"decl_id":null,"docs":" JSON file reader builder\n","sig":null,"attributes":[{"value":"/ JSON file reader builder","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1704786,"byte_end":1704814,"line_start":1376,"line_end":1376,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":7022},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1706454,"byte_end":1706457,"line_start":1431,"line_end":1431,"column_start":12,"column_end":15},"name":"new","qualname":"<ReaderBuilder>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new builder for configuring JSON parsing options.","sig":null,"attributes":[{"value":"/ Create a new builder for configuring JSON parsing options.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1705758,"byte_end":1705820,"line_start":1408,"line_end":1408,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1705825,"byte_end":1705828,"line_start":1409,"line_end":1409,"column_start":5,"column_end":8}},{"value":"/ To convert a builder into a reader, call `Reader::from_builder`","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1705833,"byte_end":1705900,"line_start":1410,"line_end":1410,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1705905,"byte_end":1705908,"line_start":1411,"line_end":1411,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1705913,"byte_end":1705926,"line_start":1412,"line_end":1412,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1705931,"byte_end":1705934,"line_start":1413,"line_end":1413,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1705939,"byte_end":1705946,"line_start":1414,"line_end":1414,"column_start":5,"column_end":12}},{"value":"/ extern crate arrow;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1705951,"byte_end":1705974,"line_start":1415,"line_end":1415,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1705979,"byte_end":1705982,"line_start":1416,"line_end":1416,"column_start":5,"column_end":8}},{"value":"/ use arrow::json;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1705987,"byte_end":1706007,"line_start":1417,"line_end":1417,"column_start":5,"column_end":25}},{"value":"/ use std::fs::File;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1706012,"byte_end":1706034,"line_start":1418,"line_end":1418,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1706039,"byte_end":1706042,"line_start":1419,"line_end":1419,"column_start":5,"column_end":8}},{"value":"/ fn example() -> json::Reader<File> {","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1706047,"byte_end":1706087,"line_start":1420,"line_end":1420,"column_start":5,"column_end":45}},{"value":"/     let file = File::open(\"test/data/basic.json\").unwrap();","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1706092,"byte_end":1706155,"line_start":1421,"line_end":1421,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1706160,"byte_end":1706163,"line_start":1422,"line_end":1422,"column_start":5,"column_end":8}},{"value":"/     // create a builder, inferring the schema with the first 100 records","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1706168,"byte_end":1706244,"line_start":1423,"line_end":1423,"column_start":5,"column_end":81}},{"value":"/     let builder = json::ReaderBuilder::new().infer_schema(Some(100));","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1706249,"byte_end":1706322,"line_start":1424,"line_end":1424,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1706327,"byte_end":1706330,"line_start":1425,"line_end":1425,"column_start":5,"column_end":8}},{"value":"/     let reader = builder.build::<File>(file).unwrap();","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1706335,"byte_end":1706393,"line_start":1426,"line_end":1426,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1706398,"byte_end":1706401,"line_start":1427,"line_end":1427,"column_start":5,"column_end":8}},{"value":"/     reader","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1706406,"byte_end":1706420,"line_start":1428,"line_end":1428,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1706425,"byte_end":1706430,"line_start":1429,"line_end":1429,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1706435,"byte_end":1706442,"line_start":1430,"line_end":1430,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":7023},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1706547,"byte_end":1706558,"line_start":1436,"line_end":1436,"column_start":12,"column_end":23},"name":"with_schema","qualname":"<ReaderBuilder>::with_schema","value":"pub fn with_schema(Self, SchemaRef) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set the JSON file's schema\n","sig":null,"attributes":[{"value":"/ Set the JSON file's schema","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1706505,"byte_end":1706535,"line_start":1435,"line_end":1435,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":7024},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1706725,"byte_end":1706737,"line_start":1442,"line_end":1442,"column_start":12,"column_end":24},"name":"infer_schema","qualname":"<ReaderBuilder>::infer_schema","value":"pub fn infer_schema(Self, Option<usize>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set the JSON reader to infer the schema of the file\n","sig":null,"attributes":[{"value":"/ Set the JSON reader to infer the schema of the file","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1706658,"byte_end":1706713,"line_start":1441,"line_end":1441,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":7025},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1706993,"byte_end":1707008,"line_start":1450,"line_end":1450,"column_start":12,"column_end":27},"name":"with_batch_size","qualname":"<ReaderBuilder>::with_batch_size","value":"pub fn with_batch_size(Self, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set the batch size (number of records to load at one time)\n","sig":null,"attributes":[{"value":"/ Set the batch size (number of records to load at one time)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1706919,"byte_end":1706981,"line_start":1449,"line_end":1449,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":7026},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1707160,"byte_end":1707175,"line_start":1456,"line_end":1456,"column_start":12,"column_end":27},"name":"with_projection","qualname":"<ReaderBuilder>::with_projection","value":"pub fn with_projection(Self, Vec<String>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set the reader's column projection\n","sig":null,"attributes":[{"value":"/ Set the reader's column projection","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1707110,"byte_end":1707148,"line_start":1455,"line_end":1455,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":7027},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1707351,"byte_end":1707356,"line_start":1462,"line_end":1462,"column_start":12,"column_end":17},"name":"build","qualname":"<ReaderBuilder>::build","value":"pub fn build<R>(Self, R) -> Result<Reader<R>> where R: Read + Seek","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Reader` from the `ReaderBuilder`\n","sig":null,"attributes":[{"value":"/ Create a new `Reader` from the `ReaderBuilder`","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1707289,"byte_end":1707339,"line_start":1461,"line_end":1461,"column_start":5,"column_end":55}}]},{"kind":"Mod","id":{"krate":0,"index":7035},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/memory.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"memory","qualname":"::memory","value":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/memory.rs","parent":null,"children":[{"krate":0,"index":7036},{"krate":0,"index":7039},{"krate":0,"index":7042},{"krate":0,"index":7043},{"krate":0,"index":7044},{"krate":0,"index":7047},{"krate":0,"index":7050},{"krate":0,"index":7053},{"krate":0,"index":7054},{"krate":0,"index":7055},{"krate":0,"index":7056},{"krate":0,"index":7057},{"krate":0,"index":7059},{"krate":0,"index":7060},{"krate":0,"index":7062},{"krate":0,"index":7063},{"krate":0,"index":7065}],"decl_id":null,"docs":" Defines memory-related functions, such as allocate/deallocate/reallocate memory\n regions, cache and allocation alignments.\n","sig":null,"attributes":[{"value":"/ Defines memory-related functions, such as allocate/deallocate/reallocate memory","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/memory.rs","byte_start":1749825,"byte_end":1749908,"line_start":18,"line_end":18,"column_start":1,"column_end":84}},{"value":"/ regions, cache and allocation alignments.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/memory.rs","byte_start":1749909,"byte_end":1749954,"line_start":19,"line_end":19,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":7053},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/memory.rs","byte_start":1751342,"byte_end":1751351,"line_start":48,"line_end":48,"column_start":11,"column_end":20},"name":"ALIGNMENT","qualname":"::memory::ALIGNMENT","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" Cache and allocation multiple alignment size\n","sig":null,"attributes":[{"value":"/ Cache and allocation multiple alignment size","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/memory.rs","byte_start":1751252,"byte_end":1751300,"line_start":46,"line_end":46,"column_start":1,"column_end":49}},{"value":"cfg(target_arch = \"x86_64\")","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/memory.rs","byte_start":1751301,"byte_end":1751331,"line_start":47,"line_end":47,"column_start":1,"column_end":31}}]},{"kind":"Static","id":{"krate":0,"index":7056},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/memory.rs","byte_start":1755210,"byte_end":1755221,"line_start":142,"line_end":142,"column_start":16,"column_end":27},"name":"ALLOCATIONS","qualname":"::memory::ALLOCATIONS","value":"AtomicIsize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":7057},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/memory.rs","byte_start":1755266,"byte_end":1755282,"line_start":144,"line_end":144,"column_start":8,"column_end":24},"name":"allocate_aligned","qualname":"::memory::allocate_aligned","value":"pub fn allocate_aligned(usize) -> NonNull<u8>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":7059},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/memory.rs","byte_start":1756247,"byte_end":1756259,"line_start":169,"line_end":169,"column_start":15,"column_end":27},"name":"free_aligned","qualname":"::memory::free_aligned","value":"pub unsafe fn free_aligned(NonNull<u8>, usize)","parent":null,"children":[],"decl_id":null,"docs":" # Safety","sig":null,"attributes":[{"value":"/ # Safety","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/memory.rs","byte_start":1755925,"byte_end":1755937,"line_start":161,"line_end":161,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/memory.rs","byte_start":1755938,"byte_end":1755941,"line_start":162,"line_end":162,"column_start":1,"column_end":4}},{"value":"/ This function is unsafe because undefined behavior can result if the caller does not ensure all","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/memory.rs","byte_start":1755942,"byte_end":1756041,"line_start":163,"line_end":163,"column_start":1,"column_end":100}},{"value":"/ of the following:","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/memory.rs","byte_start":1756042,"byte_end":1756063,"line_start":164,"line_end":164,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/memory.rs","byte_start":1756064,"byte_end":1756067,"line_start":165,"line_end":165,"column_start":1,"column_end":4}},{"value":"/ * ptr must denote a block of memory currently allocated via this allocator,","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/memory.rs","byte_start":1756068,"byte_end":1756147,"line_start":166,"line_end":166,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/memory.rs","byte_start":1756148,"byte_end":1756151,"line_start":167,"line_end":167,"column_start":1,"column_end":4}},{"value":"/ * size must be the same size that was used to allocate that block of memory,","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/memory.rs","byte_start":1756152,"byte_end":1756232,"line_start":168,"line_end":168,"column_start":1,"column_end":81}}]},{"kind":"Function","id":{"krate":0,"index":7060},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/memory.rs","byte_start":1756957,"byte_end":1756967,"line_start":190,"line_end":190,"column_start":15,"column_end":25},"name":"reallocate","qualname":"::memory::reallocate","value":"pub unsafe fn reallocate(NonNull<u8>, usize, usize) -> NonNull<u8>","parent":null,"children":[],"decl_id":null,"docs":" # Safety","sig":null,"attributes":[{"value":"/ # Safety","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/memory.rs","byte_start":1756542,"byte_end":1756554,"line_start":179,"line_end":179,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/memory.rs","byte_start":1756555,"byte_end":1756558,"line_start":180,"line_end":180,"column_start":1,"column_end":4}},{"value":"/ This function is unsafe because undefined behavior can result if the caller does not ensure all","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/memory.rs","byte_start":1756559,"byte_end":1756658,"line_start":181,"line_end":181,"column_start":1,"column_end":100}},{"value":"/ of the following:","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/memory.rs","byte_start":1756659,"byte_end":1756680,"line_start":182,"line_end":182,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/memory.rs","byte_start":1756681,"byte_end":1756684,"line_start":183,"line_end":183,"column_start":1,"column_end":4}},{"value":"/ * ptr must be currently allocated via this allocator,","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/memory.rs","byte_start":1756685,"byte_end":1756742,"line_start":184,"line_end":184,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/memory.rs","byte_start":1756743,"byte_end":1756746,"line_start":185,"line_end":185,"column_start":1,"column_end":4}},{"value":"/ * new_size must be greater than zero.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/memory.rs","byte_start":1756747,"byte_end":1756788,"line_start":186,"line_end":186,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/memory.rs","byte_start":1756789,"byte_end":1756792,"line_start":187,"line_end":187,"column_start":1,"column_end":4}},{"value":"/ * new_size, when rounded up to the nearest multiple of [ALIGNMENT], must not overflow (i.e.,","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/memory.rs","byte_start":1756793,"byte_end":1756889,"line_start":188,"line_end":188,"column_start":1,"column_end":97}},{"value":"/ the rounded value must be less than usize::MAX).","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/memory.rs","byte_start":1756890,"byte_end":1756942,"line_start":189,"line_end":189,"column_start":1,"column_end":53}}]},{"kind":"Function","id":{"krate":0,"index":7062},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/memory.rs","byte_start":1758358,"byte_end":1758364,"line_start":238,"line_end":238,"column_start":15,"column_end":21},"name":"memcpy","qualname":"::memory::memcpy","value":"pub unsafe fn memcpy(NonNull<u8>, NonNull<u8>, usize)","parent":null,"children":[],"decl_id":null,"docs":" # Safety","sig":null,"attributes":[{"value":"/ # Safety","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/memory.rs","byte_start":1757791,"byte_end":1757803,"line_start":225,"line_end":225,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/memory.rs","byte_start":1757804,"byte_end":1757807,"line_start":226,"line_end":226,"column_start":1,"column_end":4}},{"value":"/ Behavior is undefined if any of the following conditions are violated:","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/memory.rs","byte_start":1757808,"byte_end":1757882,"line_start":227,"line_end":227,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/memory.rs","byte_start":1757883,"byte_end":1757886,"line_start":228,"line_end":228,"column_start":1,"column_end":4}},{"value":"/ * `src` must be valid for reads of `len * size_of::<u8>()` bytes.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/memory.rs","byte_start":1757887,"byte_end":1757956,"line_start":229,"line_end":229,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/memory.rs","byte_start":1757957,"byte_end":1757960,"line_start":230,"line_end":230,"column_start":1,"column_end":4}},{"value":"/ * `dst` must be valid for writes of `len * size_of::<u8>()` bytes.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/memory.rs","byte_start":1757961,"byte_end":1758031,"line_start":231,"line_end":231,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/memory.rs","byte_start":1758032,"byte_end":1758035,"line_start":232,"line_end":232,"column_start":1,"column_end":4}},{"value":"/ * Both `src` and `dst` must be properly aligned.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/memory.rs","byte_start":1758036,"byte_end":1758088,"line_start":233,"line_end":233,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/memory.rs","byte_start":1758089,"byte_end":1758092,"line_start":234,"line_end":234,"column_start":1,"column_end":4}},{"value":"/ `memcpy` creates a bitwise copy of `T`, regardless of whether `T` is [`Copy`]. If `T` is not","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/memory.rs","byte_start":1758093,"byte_end":1758189,"line_start":235,"line_end":235,"column_start":1,"column_end":97}},{"value":"/ [`Copy`], using both the values in the region beginning at `*src` and the region beginning at","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/memory.rs","byte_start":1758190,"byte_end":1758287,"line_start":236,"line_end":236,"column_start":1,"column_end":98}},{"value":"/ `*dst` can [violate memory safety][read-ownership].","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/memory.rs","byte_start":1758288,"byte_end":1758343,"line_start":237,"line_end":237,"column_start":1,"column_end":56}}]},{"kind":"Function","id":{"krate":0,"index":7063},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/memory.rs","byte_start":1758588,"byte_end":1758598,"line_start":245,"line_end":245,"column_start":8,"column_end":18},"name":"is_aligned","qualname":"::memory::is_aligned","value":"pub fn is_aligned<T>(NonNull<T>, usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if the pointer `p` is aligned to offset `a`.\n","sig":null,"attributes":[{"value":"/ Check if the pointer `p` is aligned to offset `a`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/memory.rs","byte_start":1758526,"byte_end":1758580,"line_start":244,"line_end":244,"column_start":1,"column_end":55}}]},{"kind":"Function","id":{"krate":0,"index":7065},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/memory.rs","byte_start":1758754,"byte_end":1758768,"line_start":251,"line_end":251,"column_start":8,"column_end":22},"name":"is_ptr_aligned","qualname":"::memory::is_ptr_aligned","value":"pub fn is_ptr_aligned<T>(NonNull<T>) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":7067},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"record_batch","qualname":"::record_batch","value":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","parent":null,"children":[{"krate":0,"index":7068},{"krate":0,"index":7071},{"krate":0,"index":7072},{"krate":0,"index":7073},{"krate":0,"index":7074},{"krate":0,"index":7077},{"krate":0,"index":9626},{"krate":0,"index":9629},{"krate":0,"index":9631},{"krate":0,"index":7080},{"krate":0,"index":9633},{"krate":0,"index":9635},{"krate":0,"index":7089},{"krate":0,"index":7091},{"krate":0,"index":7093},{"krate":0,"index":7096}],"decl_id":null,"docs":" A two-dimensional batch of column-oriented data with a defined\n [schema](crate::datatypes::Schema).\n","sig":null,"attributes":[{"value":"/ A two-dimensional batch of column-oriented data with a defined","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1760631,"byte_end":1760697,"line_start":18,"line_end":18,"column_start":1,"column_end":67}},{"value":"/ [schema](crate::datatypes::Schema).","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1760698,"byte_end":1760737,"line_start":19,"line_end":19,"column_start":1,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":9626},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1761402,"byte_end":1761413,"line_start":40,"line_end":40,"column_start":12,"column_end":23},"name":"RecordBatch","qualname":"::record_batch::RecordBatch","value":"RecordBatch {  }","parent":null,"children":[{"krate":0,"index":9627},{"krate":0,"index":9628}],"decl_id":null,"docs":" A two-dimensional batch of column-oriented data with a defined\n [schema](crate::datatypes::Schema).","sig":null,"attributes":[{"value":"/ A two-dimensional batch of column-oriented data with a defined","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1760847,"byte_end":1760913,"line_start":27,"line_end":27,"column_start":1,"column_end":67}},{"value":"/ [schema](crate::datatypes::Schema).","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1760914,"byte_end":1760953,"line_start":28,"line_end":28,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1760954,"byte_end":1760957,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ A `RecordBatch` is a two-dimensional dataset of a number of","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1760958,"byte_end":1761021,"line_start":30,"line_end":30,"column_start":1,"column_end":64}},{"value":"/ contiguous arrays, each the same length.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1761022,"byte_end":1761066,"line_start":31,"line_end":31,"column_start":1,"column_end":45}},{"value":"/ A record batch has a schema which must match its arrays’","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1761067,"byte_end":1761129,"line_start":32,"line_end":32,"column_start":1,"column_end":61}},{"value":"/ datatypes.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1761130,"byte_end":1761144,"line_start":33,"line_end":33,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1761145,"byte_end":1761148,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ Record batches are a convenient unit of work for various","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1761149,"byte_end":1761209,"line_start":35,"line_end":35,"column_start":1,"column_end":61}},{"value":"/ serialization and computation functions, possibly incremental.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1761210,"byte_end":1761276,"line_start":36,"line_end":36,"column_start":1,"column_end":67}},{"value":"/ See also [CSV reader](crate::csv::Reader) and","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1761277,"byte_end":1761326,"line_start":37,"line_end":37,"column_start":1,"column_end":50}},{"value":"/ [JSON reader](crate::json::Reader).","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1761327,"byte_end":1761366,"line_start":38,"line_end":38,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":7081},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1762468,"byte_end":1762475,"line_start":77,"line_end":77,"column_start":12,"column_end":19},"name":"try_new","qualname":"<RecordBatch>::try_new","value":"pub fn try_new(SchemaRef, Vec<ArrayRef>) -> Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a `RecordBatch` from a schema and columns.","sig":null,"attributes":[{"value":"/ Creates a `RecordBatch` from a schema and columns.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1761495,"byte_end":1761549,"line_start":46,"line_end":46,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1761554,"byte_end":1761557,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ Expects the following:","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1761562,"byte_end":1761588,"line_start":48,"line_end":48,"column_start":5,"column_end":31}},{"value":"/  * the vec of columns to not be empty","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1761593,"byte_end":1761634,"line_start":49,"line_end":49,"column_start":5,"column_end":46}},{"value":"/  * the schema and column data types to have equal lengths","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1761639,"byte_end":1761700,"line_start":50,"line_end":50,"column_start":5,"column_end":66}},{"value":"/    and match","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1761705,"byte_end":1761721,"line_start":51,"line_end":51,"column_start":5,"column_end":21}},{"value":"/  * each array in columns to have the same length","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1761726,"byte_end":1761778,"line_start":52,"line_end":52,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1761783,"byte_end":1761786,"line_start":53,"line_end":53,"column_start":5,"column_end":8}},{"value":"/ If the conditions are not met, an error is returned.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1761791,"byte_end":1761847,"line_start":54,"line_end":54,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1761852,"byte_end":1761855,"line_start":55,"line_end":55,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1761860,"byte_end":1761873,"line_start":56,"line_end":56,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1761878,"byte_end":1761881,"line_start":57,"line_end":57,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1761886,"byte_end":1761893,"line_start":58,"line_end":58,"column_start":5,"column_end":12}},{"value":"/ use std::sync::Arc;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1761898,"byte_end":1761921,"line_start":59,"line_end":59,"column_start":5,"column_end":28}},{"value":"/ use arrow::array::Int32Array;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1761926,"byte_end":1761959,"line_start":60,"line_end":60,"column_start":5,"column_end":38}},{"value":"/ use arrow::datatypes::{Schema, Field, DataType};","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1761964,"byte_end":1762016,"line_start":61,"line_end":61,"column_start":5,"column_end":57}},{"value":"/ use arrow::record_batch::RecordBatch;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1762021,"byte_end":1762062,"line_start":62,"line_end":62,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1762067,"byte_end":1762070,"line_start":63,"line_end":63,"column_start":5,"column_end":8}},{"value":"/ # fn main() -> arrow::error::Result<()> {","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1762075,"byte_end":1762120,"line_start":64,"line_end":64,"column_start":5,"column_end":50}},{"value":"/ let id_array = Int32Array::from(vec![1, 2, 3, 4, 5]);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1762125,"byte_end":1762182,"line_start":65,"line_end":65,"column_start":5,"column_end":62}},{"value":"/ let schema = Schema::new(vec![","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1762187,"byte_end":1762221,"line_start":66,"line_end":66,"column_start":5,"column_end":39}},{"value":"/     Field::new(\"id\", DataType::Int32, false)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1762226,"byte_end":1762274,"line_start":67,"line_end":67,"column_start":5,"column_end":53}},{"value":"/ ]);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1762279,"byte_end":1762286,"line_start":68,"line_end":68,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1762291,"byte_end":1762294,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ let batch = RecordBatch::try_new(","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1762299,"byte_end":1762336,"line_start":70,"line_end":70,"column_start":5,"column_end":42}},{"value":"/     Arc::new(schema),","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1762341,"byte_end":1762366,"line_start":71,"line_end":71,"column_start":5,"column_end":30}},{"value":"/     vec![Arc::new(id_array)]","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1762371,"byte_end":1762403,"line_start":72,"line_end":72,"column_start":5,"column_end":37}},{"value":"/ )?;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1762408,"byte_end":1762415,"line_start":73,"line_end":73,"column_start":5,"column_end":12}},{"value":"/ # Ok(())","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1762420,"byte_end":1762432,"line_start":74,"line_end":74,"column_start":5,"column_end":17}},{"value":"/ # }","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1762437,"byte_end":1762444,"line_start":75,"line_end":75,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1762449,"byte_end":1762456,"line_start":76,"line_end":76,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":7082},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1762942,"byte_end":1762962,"line_start":87,"line_end":87,"column_start":12,"column_end":32},"name":"try_new_with_options","qualname":"<RecordBatch>::try_new_with_options","value":"pub fn try_new_with_options(SchemaRef, Vec<ArrayRef>, &RecordBatchOptions)\n-> Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a `RecordBatch` from a schema and columns, with additional options,\n such as whether to strictly validate field names.","sig":null,"attributes":[{"value":"/ Creates a `RecordBatch` from a schema and columns, with additional options,","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1762719,"byte_end":1762798,"line_start":83,"line_end":83,"column_start":5,"column_end":84}},{"value":"/ such as whether to strictly validate field names.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1762803,"byte_end":1762856,"line_start":84,"line_end":84,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1762861,"byte_end":1762864,"line_start":85,"line_end":85,"column_start":5,"column_end":8}},{"value":"/ See [`RecordBatch::try_new`] for the expected conditions.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1762869,"byte_end":1762930,"line_start":86,"line_end":86,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":7084},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1766084,"byte_end":1766090,"line_start":163,"line_end":163,"column_start":12,"column_end":18},"name":"schema","qualname":"<RecordBatch>::schema","value":"pub fn schema(&Self) -> SchemaRef","parent":null,"children":[],"decl_id":null,"docs":" Returns the [`Schema`](crate::datatypes::Schema) of the record batch.\n","sig":null,"attributes":[{"value":"/ Returns the [`Schema`](crate::datatypes::Schema) of the record batch.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1765999,"byte_end":1766072,"line_start":162,"line_end":162,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":7085},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1766845,"byte_end":1766856,"line_start":189,"line_end":189,"column_start":12,"column_end":23},"name":"num_columns","qualname":"<RecordBatch>::num_columns","value":"pub fn num_columns(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of columns in the record batch.","sig":null,"attributes":[{"value":"/ Returns the number of columns in the record batch.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1766152,"byte_end":1766206,"line_start":167,"line_end":167,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1766211,"byte_end":1766214,"line_start":168,"line_end":168,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1766219,"byte_end":1766232,"line_start":169,"line_end":169,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1766237,"byte_end":1766240,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1766245,"byte_end":1766252,"line_start":171,"line_end":171,"column_start":5,"column_end":12}},{"value":"/ use std::sync::Arc;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1766257,"byte_end":1766280,"line_start":172,"line_end":172,"column_start":5,"column_end":28}},{"value":"/ use arrow::array::Int32Array;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1766285,"byte_end":1766318,"line_start":173,"line_end":173,"column_start":5,"column_end":38}},{"value":"/ use arrow::datatypes::{Schema, Field, DataType};","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1766323,"byte_end":1766375,"line_start":174,"line_end":174,"column_start":5,"column_end":57}},{"value":"/ use arrow::record_batch::RecordBatch;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1766380,"byte_end":1766421,"line_start":175,"line_end":175,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1766426,"byte_end":1766429,"line_start":176,"line_end":176,"column_start":5,"column_end":8}},{"value":"/ # fn main() -> arrow::error::Result<()> {","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1766434,"byte_end":1766479,"line_start":177,"line_end":177,"column_start":5,"column_end":50}},{"value":"/ let id_array = Int32Array::from(vec![1, 2, 3, 4, 5]);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1766484,"byte_end":1766541,"line_start":178,"line_end":178,"column_start":5,"column_end":62}},{"value":"/ let schema = Schema::new(vec![","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1766546,"byte_end":1766580,"line_start":179,"line_end":179,"column_start":5,"column_end":39}},{"value":"/     Field::new(\"id\", DataType::Int32, false)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1766585,"byte_end":1766633,"line_start":180,"line_end":180,"column_start":5,"column_end":53}},{"value":"/ ]);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1766638,"byte_end":1766645,"line_start":181,"line_end":181,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1766650,"byte_end":1766653,"line_start":182,"line_end":182,"column_start":5,"column_end":8}},{"value":"/ let batch = RecordBatch::try_new(Arc::new(schema), vec![Arc::new(id_array)])?;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1766658,"byte_end":1766740,"line_start":183,"line_end":183,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1766745,"byte_end":1766748,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(batch.num_columns(), 1);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1766753,"byte_end":1766792,"line_start":185,"line_end":185,"column_start":5,"column_end":44}},{"value":"/ # Ok(())","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1766797,"byte_end":1766809,"line_start":186,"line_end":186,"column_start":5,"column_end":17}},{"value":"/ # }","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1766814,"byte_end":1766821,"line_start":187,"line_end":187,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1766826,"byte_end":1766833,"line_start":188,"line_end":188,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":7086},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1767685,"byte_end":1767693,"line_start":219,"line_end":219,"column_start":12,"column_end":20},"name":"num_rows","qualname":"<RecordBatch>::num_rows","value":"pub fn num_rows(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of rows in each column.","sig":null,"attributes":[{"value":"/ Returns the number of rows in each column.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1766913,"byte_end":1766959,"line_start":193,"line_end":193,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1766964,"byte_end":1766967,"line_start":194,"line_end":194,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1766972,"byte_end":1766984,"line_start":195,"line_end":195,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1766989,"byte_end":1766992,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ Panics if the `RecordBatch` contains no columns.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1766997,"byte_end":1767049,"line_start":197,"line_end":197,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1767054,"byte_end":1767057,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1767062,"byte_end":1767075,"line_start":199,"line_end":199,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1767080,"byte_end":1767083,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1767088,"byte_end":1767095,"line_start":201,"line_end":201,"column_start":5,"column_end":12}},{"value":"/ use std::sync::Arc;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1767100,"byte_end":1767123,"line_start":202,"line_end":202,"column_start":5,"column_end":28}},{"value":"/ use arrow::array::Int32Array;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1767128,"byte_end":1767161,"line_start":203,"line_end":203,"column_start":5,"column_end":38}},{"value":"/ use arrow::datatypes::{Schema, Field, DataType};","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1767166,"byte_end":1767218,"line_start":204,"line_end":204,"column_start":5,"column_end":57}},{"value":"/ use arrow::record_batch::RecordBatch;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1767223,"byte_end":1767264,"line_start":205,"line_end":205,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1767269,"byte_end":1767272,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/ # fn main() -> arrow::error::Result<()> {","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1767277,"byte_end":1767322,"line_start":207,"line_end":207,"column_start":5,"column_end":50}},{"value":"/ let id_array = Int32Array::from(vec![1, 2, 3, 4, 5]);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1767327,"byte_end":1767384,"line_start":208,"line_end":208,"column_start":5,"column_end":62}},{"value":"/ let schema = Schema::new(vec![","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1767389,"byte_end":1767423,"line_start":209,"line_end":209,"column_start":5,"column_end":39}},{"value":"/     Field::new(\"id\", DataType::Int32, false)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1767428,"byte_end":1767476,"line_start":210,"line_end":210,"column_start":5,"column_end":53}},{"value":"/ ]);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1767481,"byte_end":1767488,"line_start":211,"line_end":211,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1767493,"byte_end":1767496,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ let batch = RecordBatch::try_new(Arc::new(schema), vec![Arc::new(id_array)])?;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1767501,"byte_end":1767583,"line_start":213,"line_end":213,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1767588,"byte_end":1767591,"line_start":214,"line_end":214,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(batch.num_rows(), 5);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1767596,"byte_end":1767632,"line_start":215,"line_end":215,"column_start":5,"column_end":41}},{"value":"/ # Ok(())","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1767637,"byte_end":1767649,"line_start":216,"line_end":216,"column_start":5,"column_end":17}},{"value":"/ # }","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1767654,"byte_end":1767661,"line_start":217,"line_end":217,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1767666,"byte_end":1767673,"line_start":218,"line_end":218,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":7087},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1767912,"byte_end":1767918,"line_start":228,"line_end":228,"column_start":12,"column_end":18},"name":"column","qualname":"<RecordBatch>::column","value":"pub fn column(&Self, usize) -> &ArrayRef","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to a column's array by index.","sig":null,"attributes":[{"value":"/ Get a reference to a column's array by index.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1767760,"byte_end":1767809,"line_start":223,"line_end":223,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1767814,"byte_end":1767817,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1767822,"byte_end":1767834,"line_start":225,"line_end":225,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1767839,"byte_end":1767842,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ Panics if `index` is outside of `0..num_columns`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1767847,"byte_end":1767900,"line_start":227,"line_end":227,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":7088},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1768062,"byte_end":1768069,"line_start":233,"line_end":233,"column_start":12,"column_end":19},"name":"columns","qualname":"<RecordBatch>::columns","value":"pub fn columns(&Self) -> &[ArrayRef]","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to all columns in the record batch.\n","sig":null,"attributes":[{"value":"/ Get a reference to all columns in the record batch.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1767995,"byte_end":1768050,"line_start":232,"line_end":232,"column_start":5,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":9633},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1768234,"byte_end":1768252,"line_start":240,"line_end":240,"column_start":12,"column_end":30},"name":"RecordBatchOptions","qualname":"::record_batch::RecordBatchOptions","value":"RecordBatchOptions { match_field_names }","parent":null,"children":[{"krate":0,"index":9634}],"decl_id":null,"docs":" Options that control the behaviour used when creating a [`RecordBatch`].\n","sig":null,"attributes":[{"value":"/ Options that control the behaviour used when creating a [`RecordBatch`].","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1768129,"byte_end":1768205,"line_start":238,"line_end":238,"column_start":1,"column_end":77}}]},{"kind":"Field","id":{"krate":0,"index":9634},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1768351,"byte_end":1768368,"line_start":242,"line_end":242,"column_start":9,"column_end":26},"name":"match_field_names","qualname":"::record_batch::RecordBatchOptions::match_field_names","value":"bool","parent":{"krate":0,"index":9633},"children":[],"decl_id":null,"docs":" Match field names of structs and lists. If set to `true`, the names must match.\n","sig":null,"attributes":[{"value":"/ Match field names of structs and lists. If set to `true`, the names must match.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1768259,"byte_end":1768342,"line_start":241,"line_end":241,"column_start":5,"column_end":88}}]},{"kind":"Trait","id":{"krate":0,"index":7096},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1769478,"byte_end":1769495,"line_start":284,"line_end":284,"column_start":11,"column_end":28},"name":"RecordBatchReader","qualname":"::record_batch::RecordBatchReader","value":"RecordBatchReader: Iterator<Item = Result<RecordBatch>>","parent":null,"children":[{"krate":0,"index":7097},{"krate":0,"index":7098}],"decl_id":null,"docs":" Trait for types that can read `RecordBatch`'s.\n","sig":null,"attributes":[{"value":"/ Trait for types that can read `RecordBatch`'s.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1769417,"byte_end":1769467,"line_start":283,"line_end":283,"column_start":1,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":7097},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1769776,"byte_end":1769782,"line_start":289,"line_end":289,"column_start":8,"column_end":14},"name":"schema","qualname":"::record_batch::RecordBatchReader::schema","value":"pub fn schema(&Self) -> SchemaRef","parent":{"krate":0,"index":7096},"children":[],"decl_id":null,"docs":" Returns the schema of this `RecordBatchReader`.","sig":null,"attributes":[{"value":"/ Returns the schema of this `RecordBatchReader`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1769540,"byte_end":1769591,"line_start":285,"line_end":285,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1769596,"byte_end":1769599,"line_start":286,"line_end":286,"column_start":5,"column_end":8}},{"value":"/ Implementation of this trait should guarantee that all `RecordBatch`'s returned by this","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1769604,"byte_end":1769695,"line_start":287,"line_end":287,"column_start":5,"column_end":96}},{"value":"/ reader should have the same schema as returned from this method.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1769700,"byte_end":1769768,"line_start":288,"line_end":288,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":7098},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1769988,"byte_end":1769998,"line_start":296,"line_end":296,"column_start":8,"column_end":18},"name":"next_batch","qualname":"::record_batch::RecordBatchReader::next_batch","value":"pub fn next_batch(&mut Self) -> Result<Option<RecordBatch>>","parent":{"krate":0,"index":7096},"children":[],"decl_id":null,"docs":" Reads the next `RecordBatch`.\n","sig":null,"attributes":[{"value":"/ Reads the next `RecordBatch`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1769809,"byte_end":1769842,"line_start":291,"line_end":291,"column_start":5,"column_end":38}},{"value":"deprecated(since = \"2.0.0\", note =\n             \"This method is deprecated in favour of `next` from the trait Iterator.\")","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1769847,"byte_end":1769980,"line_start":292,"line_end":295,"column_start":5,"column_end":7}}]},{"kind":"Mod","id":{"krate":0,"index":7099},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/tensor.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"tensor","qualname":"::tensor","value":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/tensor.rs","parent":null,"children":[{"krate":0,"index":7100},{"krate":0,"index":7101},{"krate":0,"index":7103},{"krate":0,"index":7106},{"krate":0,"index":7109},{"krate":0,"index":7110},{"krate":0,"index":7111},{"krate":0,"index":7114},{"krate":0,"index":7117},{"krate":0,"index":7119},{"krate":0,"index":9637},{"krate":0,"index":9646},{"krate":0,"index":7121},{"krate":0,"index":7123},{"krate":0,"index":7125},{"krate":0,"index":7127},{"krate":0,"index":7129},{"krate":0,"index":7131},{"krate":0,"index":7133},{"krate":0,"index":7135},{"krate":0,"index":7137},{"krate":0,"index":7139},{"krate":0,"index":7141},{"krate":0,"index":7143}],"decl_id":null,"docs":" Arrow Tensor Type, defined in\n [`format/Tensor.fbs`](https://github.com/apache/arrow/blob/master/format/Tensor.fbs).\n","sig":null,"attributes":[{"value":"/ Arrow Tensor Type, defined in","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/tensor.rs","byte_start":1775239,"byte_end":1775272,"line_start":18,"line_end":18,"column_start":1,"column_end":34}},{"value":"/ [`format/Tensor.fbs`](https://github.com/apache/arrow/blob/master/format/Tensor.fbs).","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/tensor.rs","byte_start":1775273,"byte_end":1775362,"line_start":19,"line_end":19,"column_start":1,"column_end":90}}]},{"kind":"Struct","id":{"krate":0,"index":9637},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/tensor.rs","byte_start":1776888,"byte_end":1776894,"line_start":78,"line_end":78,"column_start":12,"column_end":18},"name":"Tensor","qualname":"::tensor::Tensor","value":"Tensor {  }","parent":null,"children":[{"krate":0,"index":9640},{"krate":0,"index":9641},{"krate":0,"index":9642},{"krate":0,"index":9643},{"krate":0,"index":9644},{"krate":0,"index":9645}],"decl_id":null,"docs":" Tensor of primitive types\n","sig":null,"attributes":[{"value":"/ Tensor of primitive types","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/tensor.rs","byte_start":1776830,"byte_end":1776859,"line_start":76,"line_end":76,"column_start":1,"column_end":30}}]},{"kind":"Type","id":{"krate":0,"index":7121},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/tensor.rs","byte_start":1777107,"byte_end":1777120,"line_start":87,"line_end":87,"column_start":10,"column_end":23},"name":"BooleanTensor","qualname":"::tensor::BooleanTensor","value":"Tensor","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":7123},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/tensor.rs","byte_start":1777161,"byte_end":1777171,"line_start":88,"line_end":88,"column_start":10,"column_end":20},"name":"Int8Tensor","qualname":"::tensor::Int8Tensor","value":"Tensor","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":7125},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/tensor.rs","byte_start":1777209,"byte_end":1777220,"line_start":89,"line_end":89,"column_start":10,"column_end":21},"name":"Int16Tensor","qualname":"::tensor::Int16Tensor","value":"Tensor","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":7127},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/tensor.rs","byte_start":1777259,"byte_end":1777270,"line_start":90,"line_end":90,"column_start":10,"column_end":21},"name":"Int32Tensor","qualname":"::tensor::Int32Tensor","value":"Tensor","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":7129},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/tensor.rs","byte_start":1777309,"byte_end":1777320,"line_start":91,"line_end":91,"column_start":10,"column_end":21},"name":"Int64Tensor","qualname":"::tensor::Int64Tensor","value":"Tensor","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":7131},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/tensor.rs","byte_start":1777359,"byte_end":1777370,"line_start":92,"line_end":92,"column_start":10,"column_end":21},"name":"UInt8Tensor","qualname":"::tensor::UInt8Tensor","value":"Tensor","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":7133},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/tensor.rs","byte_start":1777409,"byte_end":1777421,"line_start":93,"line_end":93,"column_start":10,"column_end":22},"name":"UInt16Tensor","qualname":"::tensor::UInt16Tensor","value":"Tensor","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":7135},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/tensor.rs","byte_start":1777461,"byte_end":1777473,"line_start":94,"line_end":94,"column_start":10,"column_end":22},"name":"UInt32Tensor","qualname":"::tensor::UInt32Tensor","value":"Tensor","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":7137},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/tensor.rs","byte_start":1777513,"byte_end":1777525,"line_start":95,"line_end":95,"column_start":10,"column_end":22},"name":"UInt64Tensor","qualname":"::tensor::UInt64Tensor","value":"Tensor","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":7139},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/tensor.rs","byte_start":1777565,"byte_end":1777578,"line_start":96,"line_end":96,"column_start":10,"column_end":23},"name":"Float32Tensor","qualname":"::tensor::Float32Tensor","value":"Tensor","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":7141},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/tensor.rs","byte_start":1777619,"byte_end":1777632,"line_start":97,"line_end":97,"column_start":10,"column_end":23},"name":"Float64Tensor","qualname":"::tensor::Float64Tensor","value":"Tensor","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7146},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/tensor.rs","byte_start":1777755,"byte_end":1777762,"line_start":101,"line_end":101,"column_start":12,"column_end":19},"name":"try_new","qualname":"<Tensor>::try_new","value":"pub fn try_new(Buffer, Option<Vec<usize>>, Option<Vec<usize>>,\n               Option<Vec<&'a str>>) -> Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Tensor`\n","sig":null,"attributes":[{"value":"/ Creates a new `Tensor`","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/tensor.rs","byte_start":1777717,"byte_end":1777743,"line_start":100,"line_end":100,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":7147},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/tensor.rs","byte_start":1781106,"byte_end":1781119,"line_start":193,"line_end":193,"column_start":12,"column_end":25},"name":"new_row_major","qualname":"<Tensor>::new_row_major","value":"pub fn new_row_major(Buffer, Option<Vec<usize>>, Option<Vec<&'a str>>)\n-> Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new Tensor using row major memory layout\n","sig":null,"attributes":[{"value":"/ Creates a new Tensor using row major memory layout","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/tensor.rs","byte_start":1781040,"byte_end":1781094,"line_start":192,"line_end":192,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":7148},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/tensor.rs","byte_start":1781650,"byte_end":1781666,"line_start":210,"line_end":210,"column_start":12,"column_end":28},"name":"new_column_major","qualname":"<Tensor>::new_column_major","value":"pub fn new_column_major(Buffer, Option<Vec<usize>>, Option<Vec<&'a str>>)\n-> Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new Tensor using column major memory layout\n","sig":null,"attributes":[{"value":"/ Creates a new Tensor using column major memory layout","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/tensor.rs","byte_start":1781581,"byte_end":1781638,"line_start":209,"line_end":209,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":7149},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/tensor.rs","byte_start":1782179,"byte_end":1782188,"line_start":227,"line_end":227,"column_start":12,"column_end":21},"name":"data_type","qualname":"<Tensor>::data_type","value":"pub fn data_type(&Self) -> &DataType","parent":null,"children":[],"decl_id":null,"docs":" The data type of the `Tensor`\n","sig":null,"attributes":[{"value":"/ The data type of the `Tensor`","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/tensor.rs","byte_start":1782134,"byte_end":1782167,"line_start":226,"line_end":226,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":7150},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/tensor.rs","byte_start":1782289,"byte_end":1782294,"line_start":232,"line_end":232,"column_start":12,"column_end":17},"name":"shape","qualname":"<Tensor>::shape","value":"pub fn shape(&Self) -> Option<&Vec<usize>>","parent":null,"children":[],"decl_id":null,"docs":" The sizes of the dimensions\n","sig":null,"attributes":[{"value":"/ The sizes of the dimensions","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/tensor.rs","byte_start":1782246,"byte_end":1782277,"line_start":231,"line_end":231,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":7151},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/tensor.rs","byte_start":1782428,"byte_end":1782432,"line_start":237,"line_end":237,"column_start":12,"column_end":16},"name":"data","qualname":"<Tensor>::data","value":"pub fn data(&Self) -> &Buffer","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the underlying `Buffer`\n","sig":null,"attributes":[{"value":"/ Returns a reference to the underlying `Buffer`","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/tensor.rs","byte_start":1782366,"byte_end":1782416,"line_start":236,"line_end":236,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":7152},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/tensor.rs","byte_start":1782555,"byte_end":1782562,"line_start":242,"line_end":242,"column_start":12,"column_end":19},"name":"strides","qualname":"<Tensor>::strides","value":"pub fn strides(&Self) -> Option<&Vec<usize>>","parent":null,"children":[],"decl_id":null,"docs":" The number of bytes between elements in each dimension\n","sig":null,"attributes":[{"value":"/ The number of bytes between elements in each dimension","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/tensor.rs","byte_start":1782485,"byte_end":1782543,"line_start":241,"line_end":241,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":7153},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/tensor.rs","byte_start":1782679,"byte_end":1782684,"line_start":247,"line_end":247,"column_start":12,"column_end":17},"name":"names","qualname":"<Tensor>::names","value":"pub fn names(&Self) -> Option<&Vec<&'a str>>","parent":null,"children":[],"decl_id":null,"docs":" The names of the dimensions\n","sig":null,"attributes":[{"value":"/ The names of the dimensions","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/tensor.rs","byte_start":1782636,"byte_end":1782667,"line_start":246,"line_end":246,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":7154},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/tensor.rs","byte_start":1782798,"byte_end":1782802,"line_start":252,"line_end":252,"column_start":12,"column_end":16},"name":"ndim","qualname":"<Tensor>::ndim","value":"pub fn ndim(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" The number of dimensions\n","sig":null,"attributes":[{"value":"/ The number of dimensions","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/tensor.rs","byte_start":1782758,"byte_end":1782786,"line_start":251,"line_end":251,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":7155},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/tensor.rs","byte_start":1782964,"byte_end":1782972,"line_start":260,"line_end":260,"column_start":12,"column_end":20},"name":"dim_name","qualname":"<Tensor>::dim_name","value":"pub fn dim_name(&Self, usize) -> Option<&'a str>","parent":null,"children":[],"decl_id":null,"docs":" The name of dimension i\n","sig":null,"attributes":[{"value":"/ The name of dimension i","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/tensor.rs","byte_start":1782925,"byte_end":1782952,"line_start":259,"line_end":259,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":7157},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/tensor.rs","byte_start":1783136,"byte_end":1783140,"line_start":265,"line_end":265,"column_start":12,"column_end":16},"name":"size","qualname":"<Tensor>::size","value":"pub fn size(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" The total number of elements in the `Tensor`\n","sig":null,"attributes":[{"value":"/ The total number of elements in the `Tensor`","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/tensor.rs","byte_start":1783076,"byte_end":1783124,"line_start":264,"line_end":264,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":7158},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/tensor.rs","byte_start":1783349,"byte_end":1783362,"line_start":273,"line_end":273,"column_start":12,"column_end":25},"name":"is_contiguous","qualname":"<Tensor>::is_contiguous","value":"pub fn is_contiguous(&Self) -> Result<bool>","parent":null,"children":[],"decl_id":null,"docs":" Indicates if the data is laid out contiguously in memory\n","sig":null,"attributes":[{"value":"/ Indicates if the data is laid out contiguously in memory","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/tensor.rs","byte_start":1783277,"byte_end":1783337,"line_start":272,"line_end":272,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":7159},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/tensor.rs","byte_start":1783515,"byte_end":1783527,"line_start":278,"line_end":278,"column_start":12,"column_end":24},"name":"is_row_major","qualname":"<Tensor>::is_row_major","value":"pub fn is_row_major(&Self) -> Result<bool>","parent":null,"children":[],"decl_id":null,"docs":" Indicates if the memory layout row major\n","sig":null,"attributes":[{"value":"/ Indicates if the memory layout row major","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/tensor.rs","byte_start":1783459,"byte_end":1783503,"line_start":277,"line_end":277,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":7160},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/tensor.rs","byte_start":1783780,"byte_end":1783795,"line_start":286,"line_end":286,"column_start":12,"column_end":27},"name":"is_column_major","qualname":"<Tensor>::is_column_major","value":"pub fn is_column_major(&Self) -> Result<bool>","parent":null,"children":[],"decl_id":null,"docs":" Indicates if the memory layout column major\n","sig":null,"attributes":[{"value":"/ Indicates if the memory layout column major","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/tensor.rs","byte_start":1783721,"byte_end":1783768,"line_start":285,"line_end":285,"column_start":5,"column_end":52}}]},{"kind":"Mod","id":{"krate":0,"index":7161},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"util","qualname":"::util","value":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/mod.rs","parent":null,"children":[{"krate":0,"index":7162},{"krate":0,"index":7189},{"krate":0,"index":7201},{"krate":0,"index":7262},{"krate":0,"index":7317},{"krate":0,"index":7320},{"krate":0,"index":7343}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":7162},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/bit_chunk_iterator.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"bit_chunk_iterator","qualname":"::util::bit_chunk_iterator","value":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/bit_chunk_iterator.rs","parent":null,"children":[{"krate":0,"index":7163},{"krate":0,"index":7166},{"krate":0,"index":7167},{"krate":0,"index":9650},{"krate":0,"index":9656},{"krate":0,"index":7169},{"krate":0,"index":9659},{"krate":0,"index":9665},{"krate":0,"index":7172},{"krate":0,"index":7178},{"krate":0,"index":7183},{"krate":0,"index":7187}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":9650},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/bit_chunk_iterator.rs","byte_start":1792531,"byte_end":1792540,"line_start":21,"line_end":21,"column_start":12,"column_end":21},"name":"BitChunks","qualname":"::util::bit_chunk_iterator::BitChunks","value":"BitChunks {  }","parent":null,"children":[{"krate":0,"index":9652},{"krate":0,"index":9653},{"krate":0,"index":9654},{"krate":0,"index":9655}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7171},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/bit_chunk_iterator.rs","byte_start":1792872,"byte_end":1792875,"line_start":32,"line_end":32,"column_start":12,"column_end":15},"name":"new","qualname":"<BitChunks>::new","value":"pub fn new(&'a [u8], usize, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":9659},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/bit_chunk_iterator.rs","byte_start":1793412,"byte_end":1793428,"line_start":53,"line_end":53,"column_start":12,"column_end":28},"name":"BitChunkIterator","qualname":"::util::bit_chunk_iterator::BitChunkIterator","value":"BitChunkIterator {  }","parent":null,"children":[{"krate":0,"index":9661},{"krate":0,"index":9662},{"krate":0,"index":9663},{"krate":0,"index":9664}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7174},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/bit_chunk_iterator.rs","byte_start":1793671,"byte_end":1793684,"line_start":63,"line_end":63,"column_start":18,"column_end":31},"name":"remainder_len","qualname":"<BitChunks>::remainder_len","value":"pub const fn remainder_len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of remaining bits, guaranteed to be between 0 and 63 (inclusive)\n","sig":null,"attributes":[{"value":"/ Returns the number of remaining bits, guaranteed to be between 0 and 63 (inclusive)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/bit_chunk_iterator.rs","byte_start":1793552,"byte_end":1793639,"line_start":61,"line_end":61,"column_start":5,"column_end":92}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/bit_chunk_iterator.rs","byte_start":1793644,"byte_end":1793653,"line_start":62,"line_end":62,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":7175},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/bit_chunk_iterator.rs","byte_start":1793805,"byte_end":1793814,"line_start":69,"line_end":69,"column_start":18,"column_end":27},"name":"chunk_len","qualname":"<BitChunks>::chunk_len","value":"pub const fn chunk_len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of chunks\n","sig":null,"attributes":[{"value":"/ Returns the number of chunks","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/bit_chunk_iterator.rs","byte_start":1793741,"byte_end":1793773,"line_start":67,"line_end":67,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/bit_chunk_iterator.rs","byte_start":1793778,"byte_end":1793787,"line_start":68,"line_end":68,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":7176},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/bit_chunk_iterator.rs","byte_start":1793934,"byte_end":1793948,"line_start":75,"line_end":75,"column_start":12,"column_end":26},"name":"remainder_bits","qualname":"<BitChunks>::remainder_bits","value":"pub fn remainder_bits(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the bitmask of remaining bits\n","sig":null,"attributes":[{"value":"/ Returns the bitmask of remaining bits","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/bit_chunk_iterator.rs","byte_start":1793867,"byte_end":1793908,"line_start":73,"line_end":73,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/bit_chunk_iterator.rs","byte_start":1793913,"byte_end":1793922,"line_start":74,"line_end":74,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":7177},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/bit_chunk_iterator.rs","byte_start":1794964,"byte_end":1794968,"line_start":103,"line_end":103,"column_start":18,"column_end":22},"name":"iter","qualname":"<BitChunks>::iter","value":"pub const fn iter(&Self) -> BitChunkIterator","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over chunks of 64 bits represented as an u64\n","sig":null,"attributes":[{"value":"/ Returns an iterator over chunks of 64 bits represented as an u64","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/bit_chunk_iterator.rs","byte_start":1794864,"byte_end":1794932,"line_start":101,"line_end":101,"column_start":5,"column_end":73}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/bit_chunk_iterator.rs","byte_start":1794937,"byte_end":1794946,"line_start":102,"line_end":102,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":7189},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/bit_util.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"bit_util","qualname":"::util::bit_util","value":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/bit_util.rs","parent":null,"children":[{"krate":0,"index":7190},{"krate":0,"index":7192},{"krate":0,"index":7193},{"krate":0,"index":7194},{"krate":0,"index":7195},{"krate":0,"index":7196},{"krate":0,"index":7197},{"krate":0,"index":7198},{"krate":0,"index":7199},{"krate":0,"index":7200}],"decl_id":null,"docs":" Utils for working with bits\n","sig":null,"attributes":[{"value":"/ Utils for working with bits","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/bit_util.rs","byte_start":1800281,"byte_end":1800312,"line_start":18,"line_end":18,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":7192},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/bit_util.rs","byte_start":1800518,"byte_end":1800543,"line_start":27,"line_end":27,"column_start":8,"column_end":33},"name":"round_upto_multiple_of_64","qualname":"::util::bit_util::round_upto_multiple_of_64","value":"pub fn round_upto_multiple_of_64(usize) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the nearest number that is `>=` than `num` and is a multiple of 64\n","sig":null,"attributes":[{"value":"/ Returns the nearest number that is `>=` than `num` and is a multiple of 64","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/bit_util.rs","byte_start":1800422,"byte_end":1800500,"line_start":25,"line_end":25,"column_start":1,"column_end":79}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/bit_util.rs","byte_start":1800501,"byte_end":1800510,"line_start":26,"line_end":26,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":7193},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/bit_util.rs","byte_start":1800722,"byte_end":1800743,"line_start":33,"line_end":33,"column_start":8,"column_end":29},"name":"round_upto_power_of_2","qualname":"::util::bit_util::round_upto_power_of_2","value":"pub fn round_upto_power_of_2(usize, usize) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the nearest multiple of `factor` that is `>=` than `num`. Here `factor` must\n be a power of 2.\n","sig":null,"attributes":[{"value":"/ Returns the nearest multiple of `factor` that is `>=` than `num`. Here `factor` must","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/bit_util.rs","byte_start":1800605,"byte_end":1800693,"line_start":31,"line_end":31,"column_start":1,"column_end":89}},{"value":"/ be a power of 2.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/bit_util.rs","byte_start":1800694,"byte_end":1800714,"line_start":32,"line_end":32,"column_start":1,"column_end":21}}]},{"kind":"Function","id":{"krate":0,"index":7194},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/bit_util.rs","byte_start":1800970,"byte_end":1800977,"line_start":40,"line_end":40,"column_start":8,"column_end":15},"name":"get_bit","qualname":"::util::bit_util::get_bit","value":"pub fn get_bit(&[u8], usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether bit at position `i` in `data` is set or not\n","sig":null,"attributes":[{"value":"/ Returns whether bit at position `i` in `data` is set or not","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/bit_util.rs","byte_start":1800889,"byte_end":1800952,"line_start":38,"line_end":38,"column_start":1,"column_end":64}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/bit_util.rs","byte_start":1800953,"byte_end":1800962,"line_start":39,"line_end":39,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":7195},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/bit_util.rs","byte_start":1801305,"byte_end":1801316,"line_start":51,"line_end":51,"column_start":15,"column_end":26},"name":"get_bit_raw","qualname":"::util::bit_util::get_bit_raw","value":"pub unsafe fn get_bit_raw(*const u8, usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether bit at position `i` in `data` is set or not.","sig":null,"attributes":[{"value":"/ Returns whether bit at position `i` in `data` is set or not.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/bit_util.rs","byte_start":1801056,"byte_end":1801120,"line_start":44,"line_end":44,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/bit_util.rs","byte_start":1801121,"byte_end":1801124,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/bit_util.rs","byte_start":1801125,"byte_end":1801137,"line_start":46,"line_end":46,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/bit_util.rs","byte_start":1801138,"byte_end":1801141,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ Note this doesn't do any bound checking, for performance reason. The caller is","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/bit_util.rs","byte_start":1801142,"byte_end":1801224,"line_start":48,"line_end":48,"column_start":1,"column_end":83}},{"value":"/ responsible to guarantee that `i` is within bounds.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/bit_util.rs","byte_start":1801225,"byte_end":1801280,"line_start":49,"line_end":49,"column_start":1,"column_end":56}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/bit_util.rs","byte_start":1801281,"byte_end":1801290,"line_start":50,"line_end":50,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":7196},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/bit_util.rs","byte_start":1801461,"byte_end":1801468,"line_start":57,"line_end":57,"column_start":8,"column_end":15},"name":"set_bit","qualname":"::util::bit_util::set_bit","value":"pub fn set_bit(&mut [u8], usize)","parent":null,"children":[],"decl_id":null,"docs":" Sets bit at position `i` for `data`\n","sig":null,"attributes":[{"value":"/ Sets bit at position `i` for `data`","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/bit_util.rs","byte_start":1801404,"byte_end":1801443,"line_start":55,"line_end":55,"column_start":1,"column_end":40}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/bit_util.rs","byte_start":1801444,"byte_end":1801453,"line_start":56,"line_end":56,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":7197},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/bit_util.rs","byte_start":1801762,"byte_end":1801773,"line_start":68,"line_end":68,"column_start":15,"column_end":26},"name":"set_bit_raw","qualname":"::util::bit_util::set_bit_raw","value":"pub unsafe fn set_bit_raw(*mut u8, usize)","parent":null,"children":[],"decl_id":null,"docs":" Sets bit at position `i` for `data`","sig":null,"attributes":[{"value":"/ Sets bit at position `i` for `data`","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/bit_util.rs","byte_start":1801538,"byte_end":1801577,"line_start":61,"line_end":61,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/bit_util.rs","byte_start":1801578,"byte_end":1801581,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/bit_util.rs","byte_start":1801582,"byte_end":1801594,"line_start":63,"line_end":63,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/bit_util.rs","byte_start":1801595,"byte_end":1801598,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ Note this doesn't do any bound checking, for performance reason. The caller is","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/bit_util.rs","byte_start":1801599,"byte_end":1801681,"line_start":65,"line_end":65,"column_start":1,"column_end":83}},{"value":"/ responsible to guarantee that `i` is within bounds.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/bit_util.rs","byte_start":1801682,"byte_end":1801737,"line_start":66,"line_end":66,"column_start":1,"column_end":56}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/bit_util.rs","byte_start":1801738,"byte_end":1801747,"line_start":67,"line_end":67,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":7198},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/bit_util.rs","byte_start":1801908,"byte_end":1801917,"line_start":74,"line_end":74,"column_start":8,"column_end":17},"name":"unset_bit","qualname":"::util::bit_util::unset_bit","value":"pub fn unset_bit(&mut [u8], usize)","parent":null,"children":[],"decl_id":null,"docs":" Sets bit at position `i` for `data` to 0\n","sig":null,"attributes":[{"value":"/ Sets bit at position `i` for `data` to 0","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/bit_util.rs","byte_start":1801846,"byte_end":1801890,"line_start":72,"line_end":72,"column_start":1,"column_end":45}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/bit_util.rs","byte_start":1801891,"byte_end":1801900,"line_start":73,"line_end":73,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":7199},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/bit_util.rs","byte_start":1802216,"byte_end":1802229,"line_start":85,"line_end":85,"column_start":15,"column_end":28},"name":"unset_bit_raw","qualname":"::util::bit_util::unset_bit_raw","value":"pub unsafe fn unset_bit_raw(*mut u8, usize)","parent":null,"children":[],"decl_id":null,"docs":" Sets bit at position `i` for `data` to 0","sig":null,"attributes":[{"value":"/ Sets bit at position `i` for `data` to 0","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/bit_util.rs","byte_start":1801987,"byte_end":1802031,"line_start":78,"line_end":78,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/bit_util.rs","byte_start":1802032,"byte_end":1802035,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/bit_util.rs","byte_start":1802036,"byte_end":1802048,"line_start":80,"line_end":80,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/bit_util.rs","byte_start":1802049,"byte_end":1802052,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ Note this doesn't do any bound checking, for performance reason. The caller is","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/bit_util.rs","byte_start":1802053,"byte_end":1802135,"line_start":82,"line_end":82,"column_start":1,"column_end":83}},{"value":"/ responsible to guarantee that `i` is within bounds.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/bit_util.rs","byte_start":1802136,"byte_end":1802191,"line_start":83,"line_end":83,"column_start":1,"column_end":56}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/bit_util.rs","byte_start":1802192,"byte_end":1802201,"line_start":84,"line_end":84,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":7200},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/bit_util.rs","byte_start":1802361,"byte_end":1802365,"line_start":91,"line_end":91,"column_start":8,"column_end":12},"name":"ceil","qualname":"::util::bit_util::ceil","value":"pub fn ceil(usize, usize) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the ceil of `value`/`divisor`\n","sig":null,"attributes":[{"value":"/ Returns the ceil of `value`/`divisor`","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/bit_util.rs","byte_start":1802302,"byte_end":1802343,"line_start":89,"line_end":89,"column_start":1,"column_end":42}},{"value":"inline","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/bit_util.rs","byte_start":1802344,"byte_end":1802353,"line_start":90,"line_end":90,"column_start":1,"column_end":10}}]},{"kind":"Mod","id":{"krate":0,"index":7201},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/display.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"display","qualname":"::util::display","value":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/display.rs","parent":null,"children":[{"krate":0,"index":7202},{"krate":0,"index":7205},{"krate":0,"index":7208},{"krate":0,"index":7209},{"krate":0,"index":7212},{"krate":0,"index":7215},{"krate":0,"index":7218},{"krate":0,"index":7221},{"krate":0,"index":7224},{"krate":0,"index":7227},{"krate":0,"index":7230},{"krate":0,"index":7233},{"krate":0,"index":7236},{"krate":0,"index":7239},{"krate":0,"index":7242},{"krate":0,"index":7245},{"krate":0,"index":7248},{"krate":0,"index":7249},{"krate":0,"index":7252},{"krate":0,"index":7258},{"krate":0,"index":7259}],"decl_id":null,"docs":" Functions for printing array values, as strings, for debugging\n purposes. See the `pretty` crate for additional functions for\n record batch pretty printing.\n","sig":null,"attributes":[{"value":"/ Functions for printing array values, as strings, for debugging","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/display.rs","byte_start":1810163,"byte_end":1810229,"line_start":18,"line_end":18,"column_start":1,"column_end":67}},{"value":"/ purposes. See the `pretty` crate for additional functions for","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/display.rs","byte_start":1810230,"byte_end":1810295,"line_start":19,"line_end":19,"column_start":1,"column_end":66}},{"value":"/ record batch pretty printing.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/display.rs","byte_start":1810296,"byte_end":1810329,"line_start":20,"line_end":20,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":7258},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/display.rs","byte_start":1812276,"byte_end":1812297,"line_start":88,"line_end":88,"column_start":8,"column_end":29},"name":"array_value_to_string","qualname":"::util::display::array_value_to_string","value":"pub fn array_value_to_string(&array::ArrayRef, usize) -> Result<String>","parent":null,"children":[],"decl_id":null,"docs":" Get the value at the given row in an array as a String.","sig":null,"attributes":[{"value":"/ Get the value at the given row in an array as a String.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/display.rs","byte_start":1812079,"byte_end":1812138,"line_start":84,"line_end":84,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/display.rs","byte_start":1812139,"byte_end":1812142,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ Note this function is quite inefficient and is unlikely to be","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/display.rs","byte_start":1812143,"byte_end":1812208,"line_start":86,"line_end":86,"column_start":1,"column_end":66}},{"value":"/ suitable for converting large arrays or record batches.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/display.rs","byte_start":1812209,"byte_end":1812268,"line_start":87,"line_end":87,"column_start":1,"column_end":60}}]},{"kind":"Mod","id":{"krate":0,"index":7262},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/integration_util.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"integration_util","qualname":"::util::integration_util","value":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/integration_util.rs","parent":null,"children":[{"krate":0,"index":7263},{"krate":0,"index":7264},{"krate":0,"index":7267},{"krate":0,"index":7270},{"krate":0,"index":7271},{"krate":0,"index":7274},{"krate":0,"index":7277},{"krate":0,"index":7280},{"krate":0,"index":7281},{"krate":0,"index":7282},{"krate":0,"index":7285},{"krate":0,"index":7286},{"krate":0,"index":7289},{"krate":0,"index":9669},{"krate":0,"index":9672},{"krate":0,"index":9717},{"krate":0,"index":9723},{"krate":0,"index":9726},{"krate":0,"index":9728},{"krate":0,"index":9769},{"krate":0,"index":9775},{"krate":0,"index":9777},{"krate":0,"index":9781},{"krate":0,"index":9832},{"krate":0,"index":9838},{"krate":0,"index":7292},{"krate":0,"index":9843},{"krate":0,"index":9845},{"krate":0,"index":9890},{"krate":0,"index":9896},{"krate":0,"index":9900},{"krate":0,"index":9902},{"krate":0,"index":9947},{"krate":0,"index":9953},{"krate":0,"index":9957},{"krate":0,"index":9960},{"krate":0,"index":10003},{"krate":0,"index":10009},{"krate":0,"index":10011},{"krate":0,"index":10014},{"krate":0,"index":10057},{"krate":0,"index":10063},{"krate":0,"index":10065},{"krate":0,"index":10069},{"krate":0,"index":10120},{"krate":0,"index":10126},{"krate":0,"index":10128},{"krate":0,"index":7294},{"krate":0,"index":7297},{"krate":0,"index":7299},{"krate":0,"index":7302},{"krate":0,"index":7308},{"krate":0,"index":7310},{"krate":0,"index":7312},{"krate":0,"index":7314},{"krate":0,"index":7316}],"decl_id":null,"docs":" Utils for JSON integration testing","sig":null,"attributes":[{"value":"/ Utils for JSON integration testing","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/integration_util.rs","byte_start":1817712,"byte_end":1817750,"line_start":18,"line_end":18,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/integration_util.rs","byte_start":1817751,"byte_end":1817754,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ These utilities define structs that read the integration JSON format for integration testing purposes.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/integration_util.rs","byte_start":1817755,"byte_end":1817861,"line_start":20,"line_end":20,"column_start":1,"column_end":107}}]},{"kind":"Struct","id":{"krate":0,"index":9669},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/integration_util.rs","byte_start":1818226,"byte_end":1818235,"line_start":32,"line_end":32,"column_start":12,"column_end":21},"name":"ArrowJson","qualname":"::util::integration_util::ArrowJson","value":"ArrowJson { schema, batches, dictionaries }","parent":null,"children":[{"krate":0,"index":9670},{"krate":0,"index":9671},{"krate":0,"index":9725}],"decl_id":null,"docs":" A struct that represents an Arrow file with a schema and record batches\n","sig":null,"attributes":[{"value":"/ A struct that represents an Arrow file with a schema and record batches","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/integration_util.rs","byte_start":1818098,"byte_end":1818173,"line_start":30,"line_end":30,"column_start":1,"column_end":76}}]},{"kind":"Field","id":{"krate":0,"index":9670},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/integration_util.rs","byte_start":1818246,"byte_end":1818252,"line_start":33,"line_end":33,"column_start":9,"column_end":15},"name":"schema","qualname":"::util::integration_util::ArrowJson::schema","value":"util::integration_util::ArrowJsonSchema","parent":{"krate":0,"index":9669},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9671},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/integration_util.rs","byte_start":1818279,"byte_end":1818286,"line_start":34,"line_end":34,"column_start":9,"column_end":16},"name":"batches","qualname":"::util::integration_util::ArrowJson::batches","value":"std::vec::Vec<util::integration_util::ArrowJsonBatch>","parent":{"krate":0,"index":9669},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9725},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/integration_util.rs","byte_start":1818371,"byte_end":1818383,"line_start":36,"line_end":36,"column_start":9,"column_end":21},"name":"dictionaries","qualname":"::util::integration_util::ArrowJson::dictionaries","value":"std::option::Option<std::vec::Vec<util::integration_util::ArrowJsonDictionaryBatch>>","parent":{"krate":0,"index":9669},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"serde(skip_serializing_if = \"Option::is_none\")","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/integration_util.rs","byte_start":1818313,"byte_end":1818362,"line_start":35,"line_end":35,"column_start":5,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":9726},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/integration_util.rs","byte_start":1818603,"byte_end":1818618,"line_start":43,"line_end":43,"column_start":12,"column_end":27},"name":"ArrowJsonSchema","qualname":"::util::integration_util::ArrowJsonSchema","value":"ArrowJsonSchema { fields }","parent":null,"children":[{"krate":0,"index":9727}],"decl_id":null,"docs":" A struct that partially reads the Arrow JSON schema.","sig":null,"attributes":[{"value":"/ A struct that partially reads the Arrow JSON schema.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/integration_util.rs","byte_start":1818427,"byte_end":1818483,"line_start":39,"line_end":39,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/integration_util.rs","byte_start":1818484,"byte_end":1818487,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ Fields are left as JSON `Value` as they vary by `DataType`","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/integration_util.rs","byte_start":1818488,"byte_end":1818550,"line_start":41,"line_end":41,"column_start":1,"column_end":63}}]},{"kind":"Field","id":{"krate":0,"index":9727},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/integration_util.rs","byte_start":1818629,"byte_end":1818635,"line_start":44,"line_end":44,"column_start":9,"column_end":15},"name":"fields","qualname":"::util::integration_util::ArrowJsonSchema::fields","value":"std::vec::Vec<util::integration_util::ArrowJsonField>","parent":{"krate":0,"index":9726},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":9777},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/integration_util.rs","byte_start":1818776,"byte_end":1818790,"line_start":49,"line_end":49,"column_start":12,"column_end":26},"name":"ArrowJsonField","qualname":"::util::integration_util::ArrowJsonField","value":"ArrowJsonField { name, field_type, nullable, children, dictionary, metadata }","parent":null,"children":[{"krate":0,"index":9778},{"krate":0,"index":9840},{"krate":0,"index":9779},{"krate":0,"index":9780},{"krate":0,"index":9841},{"krate":0,"index":9842}],"decl_id":null,"docs":" Fields are left as JSON `Value` as they vary by `DataType`\n","sig":null,"attributes":[{"value":"/ Fields are left as JSON `Value` as they vary by `DataType`","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/integration_util.rs","byte_start":1818661,"byte_end":1818723,"line_start":47,"line_end":47,"column_start":1,"column_end":63}}]},{"kind":"Field","id":{"krate":0,"index":9778},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/integration_util.rs","byte_start":1818801,"byte_end":1818805,"line_start":50,"line_end":50,"column_start":9,"column_end":13},"name":"name","qualname":"::util::integration_util::ArrowJsonField::name","value":"std::string::String","parent":{"krate":0,"index":9777},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9840},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/integration_util.rs","byte_start":1818853,"byte_end":1818863,"line_start":52,"line_end":52,"column_start":9,"column_end":19},"name":"field_type","qualname":"::util::integration_util::ArrowJsonField::field_type","value":"serde_json::Value","parent":{"krate":0,"index":9777},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"serde(rename = \"type\")","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/integration_util.rs","byte_start":1818819,"byte_end":1818844,"line_start":51,"line_end":51,"column_start":5,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":9779},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/integration_util.rs","byte_start":1818880,"byte_end":1818888,"line_start":53,"line_end":53,"column_start":9,"column_end":17},"name":"nullable","qualname":"::util::integration_util::ArrowJsonField::nullable","value":"bool","parent":{"krate":0,"index":9777},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9780},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/integration_util.rs","byte_start":1818904,"byte_end":1818912,"line_start":54,"line_end":54,"column_start":9,"column_end":17},"name":"children","qualname":"::util::integration_util::ArrowJsonField::children","value":"std::vec::Vec<util::integration_util::ArrowJsonField>","parent":{"krate":0,"index":9777},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9841},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/integration_util.rs","byte_start":1818997,"byte_end":1819007,"line_start":56,"line_end":56,"column_start":9,"column_end":19},"name":"dictionary","qualname":"::util::integration_util::ArrowJsonField::dictionary","value":"std::option::Option<util::integration_util::ArrowJsonFieldDictionary>","parent":{"krate":0,"index":9777},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"serde(skip_serializing_if = \"Option::is_none\")","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/integration_util.rs","byte_start":1818939,"byte_end":1818988,"line_start":55,"line_end":55,"column_start":5,"column_end":54}}]},{"kind":"Field","id":{"krate":0,"index":9842},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/integration_util.rs","byte_start":1819105,"byte_end":1819113,"line_start":58,"line_end":58,"column_start":9,"column_end":17},"name":"metadata","qualname":"::util::integration_util::ArrowJsonField::metadata","value":"std::option::Option<serde_json::Value>","parent":{"krate":0,"index":9777},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"serde(skip_serializing_if = \"Option::is_none\")","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/integration_util.rs","byte_start":1819047,"byte_end":1819096,"line_start":57,"line_end":57,"column_start":5,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":9843},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/integration_util.rs","byte_start":1820125,"byte_end":1820149,"line_start":92,"line_end":92,"column_start":12,"column_end":36},"name":"ArrowJsonFieldDictionary","qualname":"::util::integration_util::ArrowJsonFieldDictionary","value":"ArrowJsonFieldDictionary { id, index_type, is_ordered }","parent":null,"children":[{"krate":0,"index":9844},{"krate":0,"index":9898},{"krate":0,"index":9899}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9844},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/integration_util.rs","byte_start":1820160,"byte_end":1820162,"line_start":93,"line_end":93,"column_start":9,"column_end":11},"name":"id","qualname":"::util::integration_util::ArrowJsonFieldDictionary::id","value":"i64","parent":{"krate":0,"index":9843},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9898},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/integration_util.rs","byte_start":1820212,"byte_end":1820222,"line_start":95,"line_end":95,"column_start":9,"column_end":19},"name":"index_type","qualname":"::util::integration_util::ArrowJsonFieldDictionary::index_type","value":"util::integration_util::DictionaryIndexType","parent":{"krate":0,"index":9843},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"serde(rename = \"indexType\")","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/integration_util.rs","byte_start":1820173,"byte_end":1820203,"line_start":94,"line_end":94,"column_start":5,"column_end":35}}]},{"kind":"Field","id":{"krate":0,"index":9899},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/integration_util.rs","byte_start":1820288,"byte_end":1820298,"line_start":97,"line_end":97,"column_start":9,"column_end":19},"name":"is_ordered","qualname":"::util::integration_util::ArrowJsonFieldDictionary::is_ordered","value":"bool","parent":{"krate":0,"index":9843},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"serde(rename = \"isOrdered\")","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/integration_util.rs","byte_start":1820249,"byte_end":1820279,"line_start":96,"line_end":96,"column_start":5,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":9900},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/integration_util.rs","byte_start":1820361,"byte_end":1820380,"line_start":101,"line_end":101,"column_start":12,"column_end":31},"name":"DictionaryIndexType","qualname":"::util::integration_util::DictionaryIndexType","value":"DictionaryIndexType { name, is_signed, bit_width }","parent":null,"children":[{"krate":0,"index":9901},{"krate":0,"index":9955},{"krate":0,"index":9956}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9901},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/integration_util.rs","byte_start":1820391,"byte_end":1820395,"line_start":102,"line_end":102,"column_start":9,"column_end":13},"name":"name","qualname":"::util::integration_util::DictionaryIndexType::name","value":"std::string::String","parent":{"krate":0,"index":9900},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9955},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/integration_util.rs","byte_start":1820447,"byte_end":1820456,"line_start":104,"line_end":104,"column_start":9,"column_end":18},"name":"is_signed","qualname":"::util::integration_util::DictionaryIndexType::is_signed","value":"bool","parent":{"krate":0,"index":9900},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"serde(rename = \"isSigned\")","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/integration_util.rs","byte_start":1820409,"byte_end":1820438,"line_start":103,"line_end":103,"column_start":5,"column_end":34}}]},{"kind":"Field","id":{"krate":0,"index":9956},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/integration_util.rs","byte_start":1820506,"byte_end":1820515,"line_start":106,"line_end":106,"column_start":9,"column_end":18},"name":"bit_width","qualname":"::util::integration_util::DictionaryIndexType::bit_width","value":"i64","parent":{"krate":0,"index":9900},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"serde(rename = \"bitWidth\")","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/integration_util.rs","byte_start":1820468,"byte_end":1820497,"line_start":105,"line_end":105,"column_start":5,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":9957},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/integration_util.rs","byte_start":1820639,"byte_end":1820653,"line_start":111,"line_end":111,"column_start":12,"column_end":26},"name":"ArrowJsonBatch","qualname":"::util::integration_util::ArrowJsonBatch","value":"ArrowJsonBatch { columns }","parent":null,"children":[{"krate":0,"index":9958},{"krate":0,"index":9959}],"decl_id":null,"docs":" A struct that partially reads the Arrow JSON record batch\n","sig":null,"attributes":[{"value":"/ A struct that partially reads the Arrow JSON record batch","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/integration_util.rs","byte_start":1820525,"byte_end":1820586,"line_start":109,"line_end":109,"column_start":1,"column_end":62}}]},{"kind":"Field","id":{"krate":0,"index":9959},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/integration_util.rs","byte_start":1820682,"byte_end":1820689,"line_start":113,"line_end":113,"column_start":9,"column_end":16},"name":"columns","qualname":"::util::integration_util::ArrowJsonBatch::columns","value":"std::vec::Vec<util::integration_util::ArrowJsonColumn>","parent":{"krate":0,"index":9957},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":10011},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/integration_util.rs","byte_start":1820859,"byte_end":1820883,"line_start":119,"line_end":119,"column_start":12,"column_end":36},"name":"ArrowJsonDictionaryBatch","qualname":"::util::integration_util::ArrowJsonDictionaryBatch","value":"ArrowJsonDictionaryBatch { id, data }","parent":null,"children":[{"krate":0,"index":10012},{"krate":0,"index":10013}],"decl_id":null,"docs":" A struct that partially reads the Arrow JSON dictionary batch\n","sig":null,"attributes":[{"value":"/ A struct that partially reads the Arrow JSON dictionary batch","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/integration_util.rs","byte_start":1820716,"byte_end":1820781,"line_start":116,"line_end":116,"column_start":1,"column_end":66}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/integration_util.rs","byte_start":1820823,"byte_end":1820847,"line_start":118,"line_end":118,"column_start":1,"column_end":25}}]},{"kind":"Field","id":{"krate":0,"index":10012},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/integration_util.rs","byte_start":1820894,"byte_end":1820896,"line_start":120,"line_end":120,"column_start":9,"column_end":11},"name":"id","qualname":"::util::integration_util::ArrowJsonDictionaryBatch::id","value":"i64","parent":{"krate":0,"index":10011},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":10013},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/integration_util.rs","byte_start":1820911,"byte_end":1820915,"line_start":121,"line_end":121,"column_start":9,"column_end":13},"name":"data","qualname":"::util::integration_util::ArrowJsonDictionaryBatch::data","value":"util::integration_util::ArrowJsonBatch","parent":{"krate":0,"index":10011},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":10065},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/integration_util.rs","byte_start":1821057,"byte_end":1821072,"line_start":126,"line_end":126,"column_start":12,"column_end":27},"name":"ArrowJsonColumn","qualname":"::util::integration_util::ArrowJsonColumn","value":"ArrowJsonColumn { count, validity, data, offset, children }","parent":null,"children":[{"krate":0,"index":10066},{"krate":0,"index":10067},{"krate":0,"index":10130},{"krate":0,"index":10131},{"krate":0,"index":10132},{"krate":0,"index":10068}],"decl_id":null,"docs":" A struct that partially reads the Arrow JSON column/array\n","sig":null,"attributes":[{"value":"/ A struct that partially reads the Arrow JSON column/array","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/integration_util.rs","byte_start":1820936,"byte_end":1820997,"line_start":124,"line_end":124,"column_start":1,"column_end":62}}]},{"kind":"Field","id":{"krate":0,"index":10067},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/integration_util.rs","byte_start":1821101,"byte_end":1821106,"line_start":128,"line_end":128,"column_start":9,"column_end":14},"name":"count","qualname":"::util::integration_util::ArrowJsonColumn::count","value":"usize","parent":{"krate":0,"index":10065},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":10130},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/integration_util.rs","byte_start":1821157,"byte_end":1821165,"line_start":130,"line_end":130,"column_start":9,"column_end":17},"name":"validity","qualname":"::util::integration_util::ArrowJsonColumn::validity","value":"std::option::Option<std::vec::Vec<u8>>","parent":{"krate":0,"index":10065},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"serde(rename = \"VALIDITY\")","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/integration_util.rs","byte_start":1821119,"byte_end":1821148,"line_start":129,"line_end":129,"column_start":5,"column_end":34}}]},{"kind":"Field","id":{"krate":0,"index":10131},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/integration_util.rs","byte_start":1821222,"byte_end":1821226,"line_start":132,"line_end":132,"column_start":9,"column_end":13},"name":"data","qualname":"::util::integration_util::ArrowJsonColumn::data","value":"std::option::Option<std::vec::Vec<serde_json::Value>>","parent":{"krate":0,"index":10065},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"serde(rename = \"DATA\")","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/integration_util.rs","byte_start":1821188,"byte_end":1821213,"line_start":131,"line_end":131,"column_start":5,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":10132},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/integration_util.rs","byte_start":1821288,"byte_end":1821294,"line_start":134,"line_end":134,"column_start":9,"column_end":15},"name":"offset","qualname":"::util::integration_util::ArrowJsonColumn::offset","value":"std::option::Option<std::vec::Vec<serde_json::Value>>","parent":{"krate":0,"index":10065},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"serde(rename = \"OFFSET\")","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/integration_util.rs","byte_start":1821252,"byte_end":1821279,"line_start":133,"line_end":133,"column_start":5,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":10068},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/integration_util.rs","byte_start":1821374,"byte_end":1821382,"line_start":135,"line_end":135,"column_start":9,"column_end":17},"name":"children","qualname":"::util::integration_util::ArrowJsonColumn::children","value":"std::option::Option<std::vec::Vec<util::integration_util::ArrowJsonColumn>>","parent":{"krate":0,"index":10065},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7295},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/integration_util.rs","byte_start":1821503,"byte_end":1821516,"line_start":140,"line_end":140,"column_start":12,"column_end":25},"name":"equals_reader","qualname":"<ArrowJson>::equals_reader","value":"pub fn equals_reader(&Self, &mut dyn RecordBatchReader) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Compare the Arrow JSON with a record batch reader\n","sig":null,"attributes":[{"value":"/ Compare the Arrow JSON with a record batch reader","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/integration_util.rs","byte_start":1821438,"byte_end":1821491,"line_start":139,"line_end":139,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":7307},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/integration_util.rs","byte_start":1835591,"byte_end":1835601,"line_start":435,"line_end":435,"column_start":12,"column_end":22},"name":"from_batch","qualname":"<ArrowJsonBatch>::from_batch","value":"pub fn from_batch(&RecordBatch) -> ArrowJsonBatch","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":7320},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/string_writer.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"string_writer","qualname":"::util::string_writer","value":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/string_writer.rs","parent":null,"children":[{"krate":0,"index":7321},{"krate":0,"index":7322},{"krate":0,"index":7325},{"krate":0,"index":7328},{"krate":0,"index":7331},{"krate":0,"index":10133},{"krate":0,"index":10135},{"krate":0,"index":7334},{"krate":0,"index":7336},{"krate":0,"index":7338},{"krate":0,"index":7340}],"decl_id":null,"docs":" String Writer\n This string writer encapsulates `std::string::String` and\n implements `std::io::Write` trait, which makes String as a\n writable object like File.","sig":null,"attributes":[{"value":"/ String Writer","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/string_writer.rs","byte_start":1857166,"byte_end":1857183,"line_start":18,"line_end":18,"column_start":1,"column_end":18}},{"value":"/ This string writer encapsulates `std::string::String` and","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/string_writer.rs","byte_start":1857184,"byte_end":1857245,"line_start":19,"line_end":19,"column_start":1,"column_end":62}},{"value":"/ implements `std::io::Write` trait, which makes String as a","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/string_writer.rs","byte_start":1857246,"byte_end":1857308,"line_start":20,"line_end":20,"column_start":1,"column_end":63}},{"value":"/ writable object like File.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/string_writer.rs","byte_start":1857309,"byte_end":1857339,"line_start":21,"line_end":21,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/string_writer.rs","byte_start":1857340,"byte_end":1857343,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ Example:","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/string_writer.rs","byte_start":1857344,"byte_end":1857356,"line_start":23,"line_end":23,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/string_writer.rs","byte_start":1857357,"byte_end":1857360,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/string_writer.rs","byte_start":1857361,"byte_end":1857368,"line_start":25,"line_end":25,"column_start":1,"column_end":8}},{"value":"/ use arrow::array::*;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/string_writer.rs","byte_start":1857369,"byte_end":1857393,"line_start":26,"line_end":26,"column_start":1,"column_end":25}},{"value":"/ use arrow::csv;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/string_writer.rs","byte_start":1857394,"byte_end":1857413,"line_start":27,"line_end":27,"column_start":1,"column_end":20}},{"value":"/ use arrow::datatypes::*;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/string_writer.rs","byte_start":1857414,"byte_end":1857442,"line_start":28,"line_end":28,"column_start":1,"column_end":29}},{"value":"/ use arrow::record_batch::RecordBatch;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/string_writer.rs","byte_start":1857443,"byte_end":1857484,"line_start":29,"line_end":29,"column_start":1,"column_end":42}},{"value":"/ use arrow::util::string_writer::StringWriter;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/string_writer.rs","byte_start":1857485,"byte_end":1857534,"line_start":30,"line_end":30,"column_start":1,"column_end":50}},{"value":"/ use std::sync::Arc;","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/string_writer.rs","byte_start":1857535,"byte_end":1857558,"line_start":31,"line_end":31,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/string_writer.rs","byte_start":1857559,"byte_end":1857562,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ let schema = Schema::new(vec![","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/string_writer.rs","byte_start":1857563,"byte_end":1857597,"line_start":33,"line_end":33,"column_start":1,"column_end":35}},{"value":"/     Field::new(\"c1\", DataType::Utf8, false),","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/string_writer.rs","byte_start":1857598,"byte_end":1857646,"line_start":34,"line_end":34,"column_start":1,"column_end":49}},{"value":"/     Field::new(\"c2\", DataType::Float64, true),","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/string_writer.rs","byte_start":1857647,"byte_end":1857697,"line_start":35,"line_end":35,"column_start":1,"column_end":51}},{"value":"/     Field::new(\"c3\", DataType::UInt32, false),","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/string_writer.rs","byte_start":1857698,"byte_end":1857748,"line_start":36,"line_end":36,"column_start":1,"column_end":51}},{"value":"/     Field::new(\"c3\", DataType::Boolean, true),","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/string_writer.rs","byte_start":1857749,"byte_end":1857799,"line_start":37,"line_end":37,"column_start":1,"column_end":51}},{"value":"/ ]);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/string_writer.rs","byte_start":1857800,"byte_end":1857807,"line_start":38,"line_end":38,"column_start":1,"column_end":8}},{"value":"/ let c1 = StringArray::from(vec![","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/string_writer.rs","byte_start":1857808,"byte_end":1857844,"line_start":39,"line_end":39,"column_start":1,"column_end":37}},{"value":"/     \"Lorem ipsum dolor sit amet\",","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/string_writer.rs","byte_start":1857845,"byte_end":1857882,"line_start":40,"line_end":40,"column_start":1,"column_end":38}},{"value":"/     \"consectetur adipiscing elit\",","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/string_writer.rs","byte_start":1857883,"byte_end":1857921,"line_start":41,"line_end":41,"column_start":1,"column_end":39}},{"value":"/     \"sed do eiusmod tempor\",","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/string_writer.rs","byte_start":1857922,"byte_end":1857954,"line_start":42,"line_end":42,"column_start":1,"column_end":33}},{"value":"/ ]);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/string_writer.rs","byte_start":1857955,"byte_end":1857962,"line_start":43,"line_end":43,"column_start":1,"column_end":8}},{"value":"/ let c2 = PrimitiveArray::<Float64Type>::from(vec![","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/string_writer.rs","byte_start":1857963,"byte_end":1858017,"line_start":44,"line_end":44,"column_start":1,"column_end":55}},{"value":"/     Some(123.564532),","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/string_writer.rs","byte_start":1858018,"byte_end":1858043,"line_start":45,"line_end":45,"column_start":1,"column_end":26}},{"value":"/     None,","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/string_writer.rs","byte_start":1858044,"byte_end":1858057,"line_start":46,"line_end":46,"column_start":1,"column_end":14}},{"value":"/     Some(-556132.25),","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/string_writer.rs","byte_start":1858058,"byte_end":1858083,"line_start":47,"line_end":47,"column_start":1,"column_end":26}},{"value":"/ ]);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/string_writer.rs","byte_start":1858084,"byte_end":1858091,"line_start":48,"line_end":48,"column_start":1,"column_end":8}},{"value":"/ let c3 = PrimitiveArray::<UInt32Type>::from(vec![3, 2, 1]);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/string_writer.rs","byte_start":1858092,"byte_end":1858155,"line_start":49,"line_end":49,"column_start":1,"column_end":64}},{"value":"/ let c4 = BooleanArray::from(vec![Some(true), Some(false), None]);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/string_writer.rs","byte_start":1858156,"byte_end":1858225,"line_start":50,"line_end":50,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/string_writer.rs","byte_start":1858226,"byte_end":1858229,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ let batch = RecordBatch::try_new(","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/string_writer.rs","byte_start":1858230,"byte_end":1858267,"line_start":52,"line_end":52,"column_start":1,"column_end":38}},{"value":"/     Arc::new(schema),","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/string_writer.rs","byte_start":1858268,"byte_end":1858293,"line_start":53,"line_end":53,"column_start":1,"column_end":26}},{"value":"/     vec![Arc::new(c1), Arc::new(c2), Arc::new(c3), Arc::new(c4)],","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/string_writer.rs","byte_start":1858294,"byte_end":1858363,"line_start":54,"line_end":54,"column_start":1,"column_end":70}},{"value":"/ )","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/string_writer.rs","byte_start":1858364,"byte_end":1858369,"line_start":55,"line_end":55,"column_start":1,"column_end":6}},{"value":"/ .unwrap();","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/string_writer.rs","byte_start":1858370,"byte_end":1858384,"line_start":56,"line_end":56,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/string_writer.rs","byte_start":1858385,"byte_end":1858388,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ let sw = StringWriter::new();","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/string_writer.rs","byte_start":1858389,"byte_end":1858422,"line_start":58,"line_end":58,"column_start":1,"column_end":34}},{"value":"/ let mut writer = csv::Writer::new(sw);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/string_writer.rs","byte_start":1858423,"byte_end":1858465,"line_start":59,"line_end":59,"column_start":1,"column_end":43}},{"value":"/ writer.write(&batch).unwrap();","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/string_writer.rs","byte_start":1858466,"byte_end":1858500,"line_start":60,"line_end":60,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/string_writer.rs","byte_start":1858501,"byte_end":1858508,"line_start":61,"line_end":61,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":10133},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/string_writer.rs","byte_start":1858587,"byte_end":1858599,"line_start":66,"line_end":66,"column_start":12,"column_end":24},"name":"StringWriter","qualname":"::util::string_writer::StringWriter","value":"StringWriter {  }","parent":null,"children":[{"krate":0,"index":10134}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7335},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/string_writer.rs","byte_start":1858654,"byte_end":1858657,"line_start":71,"line_end":71,"column_start":12,"column_end":15},"name":"new","qualname":"<StringWriter>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":7343},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/test_util.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"test_util","qualname":"::util::test_util","value":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/test_util.rs","parent":null,"children":[{"krate":0,"index":7344},{"krate":0,"index":7345},{"krate":0,"index":7348},{"krate":0,"index":7351},{"krate":0,"index":7354},{"krate":0,"index":7355},{"krate":0,"index":7356},{"krate":0,"index":7358},{"krate":0,"index":7361},{"krate":0,"index":7364},{"krate":0,"index":7367},{"krate":0,"index":7370},{"krate":0,"index":7371},{"krate":0,"index":7372},{"krate":0,"index":7373},{"krate":0,"index":7374},{"krate":0,"index":7375}],"decl_id":null,"docs":" Utils to make testing easier\n","sig":null,"attributes":[{"value":"/ Utils to make testing easier","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/test_util.rs","byte_start":1860158,"byte_end":1860190,"line_start":18,"line_end":18,"column_start":1,"column_end":33}}]},{"kind":"Function","id":{"krate":0,"index":7370},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/test_util.rs","byte_start":1860376,"byte_end":1860388,"line_start":24,"line_end":24,"column_start":8,"column_end":20},"name":"random_bytes","qualname":"::util::test_util::random_bytes","value":"pub fn random_bytes(usize) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Returns a vector of size `n`, filled with randomly generated bytes.\n","sig":null,"attributes":[{"value":"/ Returns a vector of size `n`, filled with randomly generated bytes.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/test_util.rs","byte_start":1860297,"byte_end":1860368,"line_start":23,"line_end":23,"column_start":1,"column_end":72}}]},{"kind":"Function","id":{"krate":0,"index":7371},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/test_util.rs","byte_start":1860597,"byte_end":1860609,"line_start":34,"line_end":34,"column_start":8,"column_end":20},"name":"seedable_rng","qualname":"::util::test_util::seedable_rng","value":"pub fn seedable_rng() -> StdRng","parent":null,"children":[],"decl_id":null,"docs":" Returns fixed seedable RNG\n","sig":null,"attributes":[{"value":"/ Returns fixed seedable RNG","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/test_util.rs","byte_start":1860559,"byte_end":1860589,"line_start":33,"line_end":33,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":7372},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/test_util.rs","byte_start":1860827,"byte_end":1860840,"line_start":41,"line_end":41,"column_start":8,"column_end":21},"name":"get_temp_file","qualname":"::util::test_util::get_temp_file","value":"pub fn get_temp_file(&str, &[u8]) -> fs::File","parent":null,"children":[],"decl_id":null,"docs":" Returns file handle for a temp file in 'target' directory with a provided content","sig":null,"attributes":[{"value":"/ Returns file handle for a temp file in 'target' directory with a provided content","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/test_util.rs","byte_start":1860657,"byte_end":1860742,"line_start":38,"line_end":38,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/test_util.rs","byte_start":1860743,"byte_end":1860746,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ TODO: Originates from `parquet` utils, can be merged in [ARROW-4064]","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/test_util.rs","byte_start":1860747,"byte_end":1860819,"line_start":40,"line_end":40,"column_start":1,"column_end":73}}]},{"kind":"Function","id":{"krate":0,"index":7373},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/test_util.rs","byte_start":1862050,"byte_end":1862065,"line_start":78,"line_end":78,"column_start":8,"column_end":23},"name":"arrow_test_data","qualname":"::util::test_util::arrow_test_data","value":"pub fn arrow_test_data() -> String","parent":null,"children":[],"decl_id":null,"docs":" Returns the arrow test data directory, which is by default stored\n in a git submodule rooted at `arrow/testing/data`.","sig":null,"attributes":[{"value":"/ Returns the arrow test data directory, which is by default stored","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/test_util.rs","byte_start":1861547,"byte_end":1861616,"line_start":64,"line_end":64,"column_start":1,"column_end":70}},{"value":"/ in a git submodule rooted at `arrow/testing/data`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/test_util.rs","byte_start":1861617,"byte_end":1861671,"line_start":65,"line_end":65,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/test_util.rs","byte_start":1861672,"byte_end":1861675,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ The default can be overridden by the optional environment","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/test_util.rs","byte_start":1861676,"byte_end":1861737,"line_start":67,"line_end":67,"column_start":1,"column_end":62}},{"value":"/ variable `ARROW_TEST_DATA`","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/test_util.rs","byte_start":1861738,"byte_end":1861768,"line_start":68,"line_end":68,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/test_util.rs","byte_start":1861769,"byte_end":1861772,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ panics when the directory can not be found.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/test_util.rs","byte_start":1861773,"byte_end":1861820,"line_start":70,"line_end":70,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/test_util.rs","byte_start":1861821,"byte_end":1861824,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ Example:","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/test_util.rs","byte_start":1861825,"byte_end":1861837,"line_start":72,"line_end":72,"column_start":1,"column_end":13}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/test_util.rs","byte_start":1861838,"byte_end":1861845,"line_start":73,"line_end":73,"column_start":1,"column_end":8}},{"value":"/ let testdata = arrow::util::test_util::arrow_test_data();","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/test_util.rs","byte_start":1861846,"byte_end":1861907,"line_start":74,"line_end":74,"column_start":1,"column_end":62}},{"value":"/ let csvdata = format!(\"{}/csv/aggregate_test_100.csv\", testdata);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/test_util.rs","byte_start":1861908,"byte_end":1861977,"line_start":75,"line_end":75,"column_start":1,"column_end":70}},{"value":"/ assert!(std::path::PathBuf::from(csvdata).exists());","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/test_util.rs","byte_start":1861978,"byte_end":1862034,"line_start":76,"line_end":76,"column_start":1,"column_end":57}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/test_util.rs","byte_start":1862035,"byte_end":1862042,"line_start":77,"line_end":77,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":7374},"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/test_util.rs","byte_start":1862805,"byte_end":1862822,"line_start":100,"line_end":100,"column_start":8,"column_end":25},"name":"parquet_test_data","qualname":"::util::test_util::parquet_test_data","value":"pub fn parquet_test_data() -> String","parent":null,"children":[],"decl_id":null,"docs":" Returns the parquest test data directory, which is by default\n stored in a git submodule rooted at\n `arrow/cpp/submodules/parquest-testing/data`.","sig":null,"attributes":[{"value":"/ Returns the parquest test data directory, which is by default","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/test_util.rs","byte_start":1862277,"byte_end":1862342,"line_start":85,"line_end":85,"column_start":1,"column_end":66}},{"value":"/ stored in a git submodule rooted at","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/test_util.rs","byte_start":1862343,"byte_end":1862382,"line_start":86,"line_end":86,"column_start":1,"column_end":40}},{"value":"/ `arrow/cpp/submodules/parquest-testing/data`.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/test_util.rs","byte_start":1862383,"byte_end":1862432,"line_start":87,"line_end":87,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/test_util.rs","byte_start":1862433,"byte_end":1862436,"line_start":88,"line_end":88,"column_start":1,"column_end":4}},{"value":"/ The default can be overridden by the optional environment variable","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/test_util.rs","byte_start":1862437,"byte_end":1862507,"line_start":89,"line_end":89,"column_start":1,"column_end":71}},{"value":"/ `PARQUET_TEST_DATA`","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/test_util.rs","byte_start":1862508,"byte_end":1862531,"line_start":90,"line_end":90,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/test_util.rs","byte_start":1862532,"byte_end":1862535,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ panics when the directory can not be found.","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/test_util.rs","byte_start":1862536,"byte_end":1862583,"line_start":92,"line_end":92,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/test_util.rs","byte_start":1862584,"byte_end":1862587,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"/ Example:","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/test_util.rs","byte_start":1862588,"byte_end":1862600,"line_start":94,"line_end":94,"column_start":1,"column_end":13}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/test_util.rs","byte_start":1862601,"byte_end":1862608,"line_start":95,"line_end":95,"column_start":1,"column_end":8}},{"value":"/ let testdata = arrow::util::test_util::parquet_test_data();","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/test_util.rs","byte_start":1862609,"byte_end":1862672,"line_start":96,"line_end":96,"column_start":1,"column_end":64}},{"value":"/ let filename = format!(\"{}/binary.parquet\", testdata);","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/test_util.rs","byte_start":1862673,"byte_end":1862731,"line_start":97,"line_end":97,"column_start":1,"column_end":59}},{"value":"/ assert!(std::path::PathBuf::from(filename).exists());","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/test_util.rs","byte_start":1862732,"byte_end":1862789,"line_start":98,"line_end":98,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/test_util.rs","byte_start":1862790,"byte_end":1862797,"line_start":99,"line_end":99,"column_start":1,"column_end":8}}]}],"impls":[{"id":2,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":35495,"byte_end":35513,"line_start":54,"line_end":54,"column_start":41,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":136},{"krate":0,"index":137},{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":140},{"krate":0,"index":141},{"krate":0,"index":142},{"krate":0,"index":143},{"krate":0,"index":144}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":38984,"byte_end":39002,"line_start":150,"line_end":150,"column_start":36,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":148}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":39209,"byte_end":39227,"line_start":157,"line_end":157,"column_start":56,"column_end":74},"value":"","parent":null,"children":[{"krate":0,"index":151}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":39566,"byte_end":39584,"line_start":167,"line_end":167,"column_start":51,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":159}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":40264,"byte_end":40282,"line_start":192,"line_end":192,"column_start":9,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":162}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":41042,"byte_end":41060,"line_start":216,"line_end":216,"column_start":9,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":166}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":43051,"byte_end":43069,"line_start":272,"line_end":272,"column_start":9,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":178}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":43261,"byte_end":43279,"line_start":280,"line_end":280,"column_start":9,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":181}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":43455,"byte_end":43473,"line_start":287,"line_end":287,"column_start":62,"column_end":80},"value":"","parent":null,"children":[{"krate":0,"index":184}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":43758,"byte_end":43778,"line_start":300,"line_end":300,"column_start":6,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":190},{"krate":0,"index":191},{"krate":0,"index":192},{"krate":0,"index":193},{"krate":0,"index":194}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":45069,"byte_end":45089,"line_start":344,"line_end":344,"column_start":29,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":196}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":45617,"byte_end":45637,"line_start":359,"line_end":359,"column_start":37,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":198}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":46872,"byte_end":46892,"line_start":397,"line_end":397,"column_start":29,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":204}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":47563,"byte_end":47583,"line_start":418,"line_end":418,"column_start":35,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":206}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":48523,"byte_end":48543,"line_start":444,"line_end":444,"column_start":21,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":208}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":48845,"byte_end":48865,"line_start":454,"line_end":454,"column_start":16,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":211},{"krate":0,"index":212},{"krate":0,"index":213},{"krate":0,"index":214},{"krate":0,"index":215}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":49700,"byte_end":49712,"line_start":487,"line_end":487,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":223},{"krate":0,"index":224},{"krate":0,"index":225},{"krate":0,"index":226},{"krate":0,"index":227},{"krate":0,"index":228},{"krate":0,"index":229},{"krate":0,"index":230}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":52297,"byte_end":52309,"line_start":568,"line_end":568,"column_start":29,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":232}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":52974,"byte_end":52986,"line_start":591,"line_end":591,"column_start":21,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":234}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":53291,"byte_end":53303,"line_start":601,"line_end":601,"column_start":16,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":237},{"krate":0,"index":238},{"krate":0,"index":239},{"krate":0,"index":240},{"krate":0,"index":241}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_boolean.rs","byte_start":70395,"byte_end":70407,"line_start":37,"line_end":37,"column_start":21,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":292}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_boolean.rs","byte_start":70666,"byte_end":70678,"line_start":47,"line_end":47,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":295},{"krate":0,"index":296},{"krate":0,"index":297},{"krate":0,"index":298},{"krate":0,"index":299}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_boolean.rs","byte_start":71581,"byte_end":71593,"line_start":79,"line_end":79,"column_start":16,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":301},{"krate":0,"index":302},{"krate":0,"index":303},{"krate":0,"index":304},{"krate":0,"index":305}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_boolean.rs","byte_start":72233,"byte_end":72245,"line_start":103,"line_end":103,"column_start":26,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":307}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_boolean.rs","byte_start":72818,"byte_end":72830,"line_start":122,"line_end":122,"column_start":34,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":309}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_boolean.rs","byte_start":72962,"byte_end":72974,"line_start":128,"line_end":128,"column_start":29,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":311}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_boolean.rs","byte_start":73548,"byte_end":73560,"line_start":152,"line_end":152,"column_start":10,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":319}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_boolean.rs","byte_start":73745,"byte_end":73757,"line_start":159,"line_end":159,"column_start":55,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":322}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_dictionary.rs","byte_start":80694,"byte_end":80709,"line_start":72,"line_end":72,"column_start":33,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":402},{"krate":0,"index":403},{"krate":0,"index":404},{"krate":0,"index":406},{"krate":0,"index":407},{"krate":0,"index":408},{"krate":0,"index":409},{"krate":0,"index":410}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_dictionary.rs","byte_start":82499,"byte_end":82514,"line_start":131,"line_end":131,"column_start":52,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":413}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_dictionary.rs","byte_start":83954,"byte_end":83969,"line_start":173,"line_end":173,"column_start":9,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":417}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_dictionary.rs","byte_start":85086,"byte_end":85101,"line_start":201,"line_end":201,"column_start":9,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":423}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_dictionary.rs","byte_start":85684,"byte_end":85699,"line_start":219,"line_end":219,"column_start":39,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":428},{"krate":0,"index":429},{"krate":0,"index":430},{"krate":0,"index":431},{"krate":0,"index":432}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_dictionary.rs","byte_start":86383,"byte_end":86398,"line_start":245,"line_end":245,"column_start":44,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":435}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_list.rs","byte_start":94529,"byte_end":94545,"line_start":65,"line_end":65,"column_start":35,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":493},{"krate":0,"index":494},{"krate":0,"index":495},{"krate":0,"index":496},{"krate":0,"index":497},{"krate":0,"index":498}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_list.rs","byte_start":95856,"byte_end":95872,"line_start":107,"line_end":107,"column_start":58,"column_end":74},"value":"","parent":null,"children":[{"krate":0,"index":501}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_list.rs","byte_start":96778,"byte_end":96794,"line_start":137,"line_end":137,"column_start":55,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":504},{"krate":0,"index":505},{"krate":0,"index":506},{"krate":0,"index":507},{"krate":0,"index":508}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_list.rs","byte_start":97464,"byte_end":97480,"line_start":161,"line_end":161,"column_start":50,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":511}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_list.rs","byte_start":98429,"byte_end":98447,"line_start":187,"line_end":187,"column_start":6,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":520},{"krate":0,"index":521},{"krate":0,"index":522},{"krate":0,"index":523},{"krate":0,"index":524},{"krate":0,"index":525}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_list.rs","byte_start":99550,"byte_end":99568,"line_start":226,"line_end":226,"column_start":29,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":527}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_list.rs","byte_start":100674,"byte_end":100692,"line_start":262,"line_end":262,"column_start":16,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":529},{"krate":0,"index":530},{"krate":0,"index":531},{"krate":0,"index":532},{"krate":0,"index":533}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_list.rs","byte_start":101444,"byte_end":101462,"line_start":288,"line_end":288,"column_start":21,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":535}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_primitive.rs","byte_start":122542,"byte_end":122556,"line_start":57,"line_end":57,"column_start":29,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":591},{"krate":0,"index":592},{"krate":0,"index":593},{"krate":0,"index":594},{"krate":0,"index":595}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_primitive.rs","byte_start":123850,"byte_end":123864,"line_start":99,"line_end":99,"column_start":39,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":598},{"krate":0,"index":599},{"krate":0,"index":600},{"krate":0,"index":601},{"krate":0,"index":602}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_primitive.rs","byte_start":128463,"byte_end":128477,"line_start":215,"line_end":215,"column_start":47,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":613},{"krate":0,"index":614},{"krate":0,"index":616}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_primitive.rs","byte_start":129517,"byte_end":129531,"line_start":242,"line_end":242,"column_start":44,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":619}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_primitive.rs","byte_start":131053,"byte_end":131067,"line_start":282,"line_end":282,"column_start":33,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":630}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_primitive.rs","byte_start":131321,"byte_end":131335,"line_start":290,"line_end":290,"column_start":27,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":634}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_primitive.rs","byte_start":134645,"byte_end":134659,"line_start":380,"line_end":380,"column_start":29,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":640}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_primitive.rs","byte_start":135131,"byte_end":135145,"line_start":392,"line_end":392,"column_start":29,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":643}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_primitive.rs","byte_start":136483,"byte_end":136497,"line_start":424,"line_end":424,"column_start":52,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":646}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_string.rs","byte_start":152307,"byte_end":152325,"line_start":52,"line_end":52,"column_start":41,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":719},{"krate":0,"index":720},{"krate":0,"index":721},{"krate":0,"index":722},{"krate":0,"index":723},{"krate":0,"index":724},{"krate":0,"index":725},{"krate":0,"index":726},{"krate":0,"index":727}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_string.rs","byte_start":155806,"byte_end":155824,"line_start":152,"line_end":152,"column_start":9,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":732}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_string.rs","byte_start":157567,"byte_end":157585,"line_start":202,"line_end":202,"column_start":36,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":743}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_string.rs","byte_start":157792,"byte_end":157810,"line_start":209,"line_end":209,"column_start":56,"column_end":74},"value":"","parent":null,"children":[{"krate":0,"index":746}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_string.rs","byte_start":158149,"byte_end":158167,"line_start":219,"line_end":219,"column_start":51,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":750},{"krate":0,"index":751},{"krate":0,"index":752},{"krate":0,"index":753},{"krate":0,"index":754}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_string.rs","byte_start":158847,"byte_end":158865,"line_start":244,"line_end":244,"column_start":9,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":757}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_string.rs","byte_start":159616,"byte_end":159634,"line_start":268,"line_end":268,"column_start":9,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":760}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_string.rs","byte_start":159824,"byte_end":159842,"line_start":276,"line_end":276,"column_start":9,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":763}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_string.rs","byte_start":160426,"byte_end":160444,"line_start":291,"line_end":291,"column_start":62,"column_end":80},"value":"","parent":null,"children":[{"krate":0,"index":768}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_struct.rs","byte_start":166477,"byte_end":166488,"line_start":39,"line_end":39,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":834},{"krate":0,"index":835},{"krate":0,"index":836},{"krate":0,"index":837},{"krate":0,"index":838},{"krate":0,"index":840}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_struct.rs","byte_start":167732,"byte_end":167743,"line_start":80,"line_end":80,"column_start":29,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":844}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_struct.rs","byte_start":168219,"byte_end":168230,"line_start":95,"line_end":95,"column_start":41,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":846},{"krate":0,"index":847}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_struct.rs","byte_start":170860,"byte_end":170871,"line_start":164,"line_end":164,"column_start":16,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":849},{"krate":0,"index":850},{"krate":0,"index":851},{"krate":0,"index":852},{"krate":0,"index":853},{"krate":0,"index":854}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_struct.rs","byte_start":171656,"byte_end":171667,"line_start":193,"line_end":193,"column_start":39,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":856}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_struct.rs","byte_start":172591,"byte_end":172602,"line_start":220,"line_end":220,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":859}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_struct.rs","byte_start":173177,"byte_end":173188,"line_start":239,"line_end":239,"column_start":49,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":861}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_union.rs","byte_start":186980,"byte_end":186990,"line_start":94,"line_end":94,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":910},{"krate":0,"index":912},{"krate":0,"index":915},{"krate":0,"index":916},{"krate":0,"index":917},{"krate":0,"index":918},{"krate":0,"index":919},{"krate":0,"index":921}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_union.rs","byte_start":193834,"byte_end":193844,"line_start":263,"line_end":263,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":923}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_union.rs","byte_start":194091,"byte_end":194101,"line_start":273,"line_end":273,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":925},{"krate":0,"index":926},{"krate":0,"index":927},{"krate":0,"index":928},{"krate":0,"index":929}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_union.rs","byte_start":195051,"byte_end":195061,"line_start":306,"line_end":306,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":931}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":217769,"byte_end":217782,"line_start":89,"line_end":89,"column_start":26,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":976},{"krate":0,"index":977},{"krate":0,"index":978},{"krate":0,"index":979},{"krate":0,"index":980},{"krate":0,"index":981},{"krate":0,"index":982},{"krate":0,"index":983},{"krate":0,"index":984},{"krate":0,"index":985},{"krate":0,"index":986}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":223564,"byte_end":223584,"line_start":299,"line_end":299,"column_start":6,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":988},{"krate":0,"index":989},{"krate":0,"index":990},{"krate":0,"index":991},{"krate":0,"index":992},{"krate":0,"index":993},{"krate":0,"index":994},{"krate":0,"index":995},{"krate":0,"index":997},{"krate":0,"index":998}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":227888,"byte_end":227902,"line_start":437,"line_end":437,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1007},{"krate":0,"index":1008},{"krate":0,"index":1009},{"krate":0,"index":1010},{"krate":0,"index":1011},{"krate":0,"index":1012},{"krate":0,"index":1013},{"krate":0,"index":1014}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":230312,"byte_end":230326,"line_start":509,"line_end":509,"column_start":23,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1016},{"krate":0,"index":1017},{"krate":0,"index":1018},{"krate":0,"index":1019},{"krate":0,"index":1020},{"krate":0,"index":1021}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":231335,"byte_end":231351,"line_start":548,"line_end":548,"column_start":46,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":1024},{"krate":0,"index":1025},{"krate":0,"index":1026},{"krate":0,"index":1027},{"krate":0,"index":1028},{"krate":0,"index":1029}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":232134,"byte_end":232150,"line_start":580,"line_end":580,"column_start":29,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1032},{"krate":0,"index":1033},{"krate":0,"index":1034},{"krate":0,"index":1035},{"krate":0,"index":1036},{"krate":0,"index":1037},{"krate":0,"index":1038},{"krate":0,"index":1039},{"krate":0,"index":1040}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":235711,"byte_end":235729,"line_start":684,"line_end":684,"column_start":52,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":1044},{"krate":0,"index":1045}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":236604,"byte_end":236622,"line_start":707,"line_end":707,"column_start":9,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1049},{"krate":0,"index":1050},{"krate":0,"index":1051},{"krate":0,"index":1052},{"krate":0,"index":1053},{"krate":0,"index":1054}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":237467,"byte_end":237485,"line_start":742,"line_end":742,"column_start":52,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":1058},{"krate":0,"index":1059},{"krate":0,"index":1060}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":239705,"byte_end":239725,"line_start":811,"line_end":811,"column_start":23,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1067},{"krate":0,"index":1068}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":240670,"byte_end":240690,"line_start":834,"line_end":834,"column_start":40,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":1071},{"krate":0,"index":1072},{"krate":0,"index":1073},{"krate":0,"index":1074},{"krate":0,"index":1075},{"krate":0,"index":1076}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":241457,"byte_end":241477,"line_start":869,"line_end":869,"column_start":23,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1079},{"krate":0,"index":1080},{"krate":0,"index":1081},{"krate":0,"index":1082}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":244118,"byte_end":244138,"line_start":958,"line_end":958,"column_start":9,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1089},{"krate":0,"index":1090},{"krate":0,"index":1091},{"krate":0,"index":1092},{"krate":0,"index":1093},{"krate":0,"index":1094}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":244951,"byte_end":244971,"line_start":992,"line_end":992,"column_start":9,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1097},{"krate":0,"index":1098},{"krate":0,"index":1099},{"krate":0,"index":1100},{"krate":0,"index":1101},{"krate":0,"index":1102}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":245799,"byte_end":245821,"line_start":1026,"line_end":1026,"column_start":23,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1104},{"krate":0,"index":1105},{"krate":0,"index":1106},{"krate":0,"index":1107},{"krate":0,"index":1108},{"krate":0,"index":1109}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":246583,"byte_end":246597,"line_start":1058,"line_end":1058,"column_start":23,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1111},{"krate":0,"index":1112},{"krate":0,"index":1113},{"krate":0,"index":1114},{"krate":0,"index":1115},{"krate":0,"index":1116}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":247377,"byte_end":247397,"line_start":1090,"line_end":1090,"column_start":41,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":1119},{"krate":0,"index":1120},{"krate":0,"index":1121},{"krate":0,"index":1122},{"krate":0,"index":1123},{"krate":0,"index":1124}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":248927,"byte_end":248947,"line_start":1135,"line_end":1135,"column_start":41,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":1127},{"krate":0,"index":1128},{"krate":0,"index":1129},{"krate":0,"index":1130},{"krate":0,"index":1131},{"krate":0,"index":1132}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":250640,"byte_end":250662,"line_start":1181,"line_end":1181,"column_start":6,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1134},{"krate":0,"index":1135},{"krate":0,"index":1136},{"krate":0,"index":1137}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":252041,"byte_end":252055,"line_start":1218,"line_end":1218,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1139},{"krate":0,"index":1140},{"krate":0,"index":1141},{"krate":0,"index":1142},{"krate":0,"index":1143}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":254575,"byte_end":254588,"line_start":1291,"line_end":1291,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1151}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":254937,"byte_end":254950,"line_start":1302,"line_end":1302,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1153},{"krate":0,"index":1154},{"krate":0,"index":1155},{"krate":0,"index":1156},{"krate":0,"index":1157},{"krate":0,"index":1158}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":259994,"byte_end":260007,"line_start":1422,"line_end":1422,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1161},{"krate":0,"index":1162},{"krate":0,"index":1163},{"krate":0,"index":1165},{"krate":0,"index":1166},{"krate":0,"index":1167},{"krate":0,"index":1168}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":262936,"byte_end":262949,"line_start":1504,"line_end":1504,"column_start":15,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1170}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":263759,"byte_end":263768,"line_start":1527,"line_end":1527,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1172},{"krate":0,"index":1173},{"krate":0,"index":1175},{"krate":0,"index":1177}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":268051,"byte_end":268063,"line_start":1636,"line_end":1636,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1179},{"krate":0,"index":1180},{"krate":0,"index":1181},{"krate":0,"index":1182},{"krate":0,"index":1184}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":273326,"byte_end":273352,"line_start":1793,"line_end":1793,"column_start":12,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1192}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":273782,"byte_end":273808,"line_start":1811,"line_end":1811,"column_start":29,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1196},{"krate":0,"index":1197},{"krate":0,"index":1198},{"krate":0,"index":1199},{"krate":0,"index":1200},{"krate":0,"index":1201}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":274637,"byte_end":274663,"line_start":1847,"line_end":1847,"column_start":12,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1205},{"krate":0,"index":1206},{"krate":0,"index":1207}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":276371,"byte_end":276394,"line_start":1896,"line_end":1896,"column_start":9,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1210},{"krate":0,"index":1211}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":278746,"byte_end":278769,"line_start":1962,"line_end":1962,"column_start":26,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1214},{"krate":0,"index":1215},{"krate":0,"index":1216},{"krate":0,"index":1217},{"krate":0,"index":1218},{"krate":0,"index":1219}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":279569,"byte_end":279592,"line_start":1997,"line_end":1997,"column_start":9,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1222},{"krate":0,"index":1223},{"krate":0,"index":1224}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/data.rs","byte_start":324153,"byte_end":324162,"line_start":77,"line_end":77,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1261},{"krate":0,"index":1262},{"krate":0,"index":1263},{"krate":0,"index":1264},{"krate":0,"index":1265},{"krate":0,"index":1266},{"krate":0,"index":1267},{"krate":0,"index":1268},{"krate":0,"index":1270},{"krate":0,"index":1271},{"krate":0,"index":1272},{"krate":0,"index":1273},{"krate":0,"index":1274},{"krate":0,"index":1275},{"krate":0,"index":1276},{"krate":0,"index":1277},{"krate":0,"index":1278}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/data.rs","byte_start":329534,"byte_end":329543,"line_start":251,"line_end":251,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1281}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/data.rs","byte_start":329900,"byte_end":329916,"line_start":269,"line_end":269,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1283},{"krate":0,"index":1284},{"krate":0,"index":1285},{"krate":0,"index":1286},{"krate":0,"index":1287},{"krate":0,"index":1288},{"krate":0,"index":1289},{"krate":0,"index":1290},{"krate":0,"index":1291}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal/mod.rs","byte_start":337878,"byte_end":337887,"line_start":72,"line_end":72,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1658}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal/mod.rs","byte_start":338046,"byte_end":338060,"line_start":78,"line_end":78,"column_start":43,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1661}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal/mod.rs","byte_start":338207,"byte_end":338219,"line_start":84,"line_end":84,"column_start":20,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1663}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal/mod.rs","byte_start":338393,"byte_end":338411,"line_start":90,"line_end":90,"column_start":55,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":1666}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal/mod.rs","byte_start":338589,"byte_end":338607,"line_start":96,"line_end":96,"column_start":55,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":1669}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal/mod.rs","byte_start":338750,"byte_end":338770,"line_start":102,"line_end":102,"column_start":20,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1671}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal/mod.rs","byte_start":338901,"byte_end":338913,"line_start":108,"line_end":108,"column_start":20,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1673}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal/mod.rs","byte_start":339073,"byte_end":339089,"line_start":114,"line_end":114,"column_start":49,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":1676}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal/mod.rs","byte_start":339232,"byte_end":339250,"line_start":120,"line_end":120,"column_start":20,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1678}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal/mod.rs","byte_start":339381,"byte_end":339392,"line_start":126,"line_end":126,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1680}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal_json.rs","byte_start":418521,"byte_end":418535,"line_start":39,"line_end":39,"column_start":43,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1711}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal_json.rs","byte_start":418974,"byte_end":418986,"line_start":53,"line_end":53,"column_start":20,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1714}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal_json.rs","byte_start":419408,"byte_end":419422,"line_start":66,"line_end":66,"column_start":50,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":1718}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal_json.rs","byte_start":419662,"byte_end":419667,"line_start":75,"line_end":75,"column_start":62,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":1721}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal_json.rs","byte_start":419905,"byte_end":419921,"line_start":84,"line_end":84,"column_start":49,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":1724}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal_json.rs","byte_start":420377,"byte_end":420393,"line_start":98,"line_end":98,"column_start":56,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":1728}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal_json.rs","byte_start":420668,"byte_end":420673,"line_start":107,"line_end":107,"column_start":79,"column_end":84},"value":"","parent":null,"children":[{"krate":0,"index":1731}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal_json.rs","byte_start":420925,"byte_end":420940,"line_start":116,"line_end":116,"column_start":43,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1734}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal_json.rs","byte_start":421156,"byte_end":421171,"line_start":123,"line_end":123,"column_start":50,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":1737}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal_json.rs","byte_start":421421,"byte_end":421426,"line_start":132,"line_end":132,"column_start":63,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":1740}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal_json.rs","byte_start":421645,"byte_end":421663,"line_start":141,"line_end":141,"column_start":20,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1742}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal_json.rs","byte_start":422072,"byte_end":422090,"line_start":155,"line_end":155,"column_start":27,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1745}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal_json.rs","byte_start":422314,"byte_end":422319,"line_start":164,"line_end":164,"column_start":40,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1747}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal_json.rs","byte_start":422538,"byte_end":422549,"line_start":173,"line_end":173,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1749}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal_json.rs","byte_start":423321,"byte_end":423332,"line_start":204,"line_end":204,"column_start":27,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1754}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal_json.rs","byte_start":423550,"byte_end":423555,"line_start":213,"line_end":213,"column_start":33,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1756}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal_json.rs","byte_start":423803,"byte_end":423821,"line_start":222,"line_end":222,"column_start":55,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":1759}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal_json.rs","byte_start":424531,"byte_end":424549,"line_start":243,"line_end":243,"column_start":9,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1763}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal_json.rs","byte_start":424837,"byte_end":424842,"line_start":254,"line_end":254,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":1766}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal_json.rs","byte_start":425109,"byte_end":425127,"line_start":264,"line_end":264,"column_start":55,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":1769}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal_json.rs","byte_start":425540,"byte_end":425558,"line_start":279,"line_end":279,"column_start":9,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1773}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal_json.rs","byte_start":425846,"byte_end":425851,"line_start":290,"line_end":290,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":1776}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal_json.rs","byte_start":426083,"byte_end":426103,"line_start":300,"line_end":300,"column_start":20,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1778}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal_json.rs","byte_start":426762,"byte_end":426782,"line_start":320,"line_end":320,"column_start":27,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1781}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal_json.rs","byte_start":427009,"byte_end":427014,"line_start":329,"line_end":329,"column_start":42,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1783}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal_json.rs","byte_start":427236,"byte_end":427248,"line_start":338,"line_end":338,"column_start":20,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1785}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal_json.rs","byte_start":427750,"byte_end":427762,"line_start":357,"line_end":357,"column_start":27,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1790}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal_json.rs","byte_start":427981,"byte_end":427986,"line_start":366,"line_end":366,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1792}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal_json.rs","byte_start":428200,"byte_end":428210,"line_start":375,"line_end":375,"column_start":20,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1794}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal_json.rs","byte_start":428414,"byte_end":428423,"line_start":383,"line_end":383,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1796}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal_json.rs","byte_start":428676,"byte_end":428681,"line_start":394,"line_end":394,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1799}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal_json.rs","byte_start":428899,"byte_end":428908,"line_start":403,"line_end":403,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1801}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/ffi.rs","byte_start":448983,"byte_end":448992,"line_start":29,"line_end":29,"column_start":35,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1821},{"krate":0,"index":1822}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/ffi.rs","byte_start":449721,"byte_end":449731,"line_start":54,"line_end":54,"column_start":34,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1824},{"krate":0,"index":1825}],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/iterator.rs","byte_start":453139,"byte_end":453152,"line_start":34,"line_end":34,"column_start":33,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1855}],"docs":"","sig":null,"attributes":[]},{"id":157,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/iterator.rs","byte_start":453432,"byte_end":453445,"line_start":45,"line_end":45,"column_start":57,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":1859},{"krate":0,"index":1860},{"krate":0,"index":1861}],"docs":"","sig":null,"attributes":[]},{"id":158,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/iterator.rs","byte_start":454034,"byte_end":454047,"line_start":66,"line_end":66,"column_start":68,"column_end":81},"value":"","parent":null,"children":[{"krate":0,"index":1865}],"docs":"","sig":null,"attributes":[]},{"id":159,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/iterator.rs","byte_start":454513,"byte_end":454526,"line_start":82,"line_end":82,"column_start":66,"column_end":79},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":160,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/iterator.rs","byte_start":454785,"byte_end":454796,"line_start":93,"line_end":93,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1871}],"docs":"","sig":null,"attributes":[]},{"id":161,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/iterator.rs","byte_start":455038,"byte_end":455049,"line_start":104,"line_end":104,"column_start":34,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1874},{"krate":0,"index":1875},{"krate":0,"index":1876}],"docs":"","sig":null,"attributes":[]},{"id":162,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/iterator.rs","byte_start":455607,"byte_end":455618,"line_start":125,"line_end":125,"column_start":45,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1879}],"docs":"","sig":null,"attributes":[]},{"id":163,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/iterator.rs","byte_start":456058,"byte_end":456069,"line_start":141,"line_end":141,"column_start":43,"column_end":54},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":164,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/iterator.rs","byte_start":456346,"byte_end":456363,"line_start":154,"line_end":154,"column_start":36,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1885}],"docs":"","sig":null,"attributes":[]},{"id":165,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/iterator.rs","byte_start":456640,"byte_end":456657,"line_start":165,"line_end":165,"column_start":60,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":1889},{"krate":0,"index":1890},{"krate":0,"index":1891}],"docs":"","sig":null,"attributes":[]},{"id":166,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/iterator.rs","byte_start":457209,"byte_end":457226,"line_start":188,"line_end":188,"column_start":9,"column_end":26},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":167,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/iterator.rs","byte_start":457508,"byte_end":457525,"line_start":203,"line_end":203,"column_start":36,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1898}],"docs":"","sig":null,"attributes":[]},{"id":168,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/iterator.rs","byte_start":457802,"byte_end":457819,"line_start":214,"line_end":214,"column_start":60,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":1902},{"krate":0,"index":1903},{"krate":0,"index":1904}],"docs":"","sig":null,"attributes":[]},{"id":169,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/iterator.rs","byte_start":458372,"byte_end":458389,"line_start":237,"line_end":237,"column_start":9,"column_end":26},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":170,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/null.rs","byte_start":462409,"byte_end":462418,"line_start":49,"line_end":49,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1932}],"docs":"","sig":null,"attributes":[]},{"id":171,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/null.rs","byte_start":462658,"byte_end":462667,"line_start":57,"line_end":57,"column_start":16,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1934},{"krate":0,"index":1935},{"krate":0,"index":1936},{"krate":0,"index":1937},{"krate":0,"index":1938},{"krate":0,"index":1939},{"krate":0,"index":1940},{"krate":0,"index":1941}],"docs":"","sig":null,"attributes":[]},{"id":172,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/null.rs","byte_start":463868,"byte_end":463877,"line_start":99,"line_end":99,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1943}],"docs":"","sig":null,"attributes":[]},{"id":173,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/null.rs","byte_start":464267,"byte_end":464276,"line_start":114,"line_end":114,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1945}],"docs":"","sig":null,"attributes":[]},{"id":174,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/raw_pointer.rs","byte_start":477981,"byte_end":477990,"line_start":27,"line_end":27,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":2005},{"krate":0,"index":2006}],"docs":"","sig":null,"attributes":[]},{"id":175,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/raw_pointer.rs","byte_start":478915,"byte_end":478924,"line_start":51,"line_end":51,"column_start":25,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":176,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/raw_pointer.rs","byte_start":478955,"byte_end":478964,"line_start":52,"line_end":52,"column_start":25,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":177,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/transform/mod.rs","byte_start":480994,"byte_end":481011,"line_start":57,"line_end":57,"column_start":10,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2234}],"docs":"","sig":null,"attributes":[]},{"id":178,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/transform/mod.rs","byte_start":485268,"byte_end":485284,"line_start":166,"line_end":166,"column_start":30,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2250}],"docs":"","sig":null,"attributes":[]},{"id":179,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/transform/mod.rs","byte_start":490686,"byte_end":490702,"line_start":279,"line_end":279,"column_start":10,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2257},{"krate":0,"index":2265},{"krate":0,"index":2266},{"krate":0,"index":2267}],"docs":"","sig":null,"attributes":[]},{"id":180,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/bitmap.rs","byte_start":546417,"byte_end":546423,"line_start":33,"line_end":33,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":2553},{"krate":0,"index":2554},{"krate":0,"index":2555},{"krate":0,"index":2556},{"krate":0,"index":2557},{"krate":0,"index":2558},{"krate":0,"index":2559},{"krate":0,"index":2560}],"docs":"","sig":null,"attributes":[]},{"id":181,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/bitmap.rs","byte_start":548020,"byte_end":548026,"line_start":95,"line_end":95,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2572}],"docs":"","sig":null,"attributes":[]},{"id":182,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/bitmap.rs","byte_start":548119,"byte_end":548125,"line_start":101,"line_end":101,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2574}],"docs":"","sig":null,"attributes":[]},{"id":183,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":551767,"byte_end":551773,"line_start":58,"line_end":58,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":2639},{"krate":0,"index":2640},{"krate":0,"index":2641},{"krate":0,"index":2642},{"krate":0,"index":2643},{"krate":0,"index":2644},{"krate":0,"index":2645},{"krate":0,"index":2646},{"krate":0,"index":2647},{"krate":0,"index":2648},{"krate":0,"index":2650},{"krate":0,"index":2652},{"krate":0,"index":2653},{"krate":0,"index":2654}],"docs":"","sig":null,"attributes":[]},{"id":184,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":557963,"byte_end":557969,"line_start":218,"line_end":218,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":2658}],"docs":"","sig":null,"attributes":[]},{"id":185,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":558981,"byte_end":558987,"line_start":244,"line_end":244,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2660},{"krate":0,"index":2661}],"docs":"","sig":null,"attributes":[]},{"id":186,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":572338,"byte_end":572344,"line_start":696,"line_end":696,"column_start":22,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":187,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":572369,"byte_end":572375,"line_start":697,"line_end":697,"column_start":22,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":188,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":572409,"byte_end":572415,"line_start":699,"line_end":699,"column_start":30,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2690}],"docs":"","sig":null,"attributes":[]},{"id":189,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":572792,"byte_end":572805,"line_start":715,"line_end":715,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":2692},{"krate":0,"index":2693},{"krate":0,"index":2694},{"krate":0,"index":2695},{"krate":0,"index":2696},{"krate":0,"index":2697},{"krate":0,"index":2698},{"krate":0,"index":2699},{"krate":0,"index":2700},{"krate":0,"index":2701},{"krate":0,"index":2702},{"krate":0,"index":2703},{"krate":0,"index":2704},{"krate":0,"index":2705},{"krate":0,"index":2706},{"krate":0,"index":2707},{"krate":0,"index":2708},{"krate":0,"index":2710},{"krate":0,"index":2711}],"docs":"","sig":null,"attributes":[]},{"id":190,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":579412,"byte_end":579425,"line_start":907,"line_end":907,"column_start":26,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2713},{"krate":0,"index":2714}],"docs":"","sig":null,"attributes":[]},{"id":191,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":579592,"byte_end":579605,"line_start":915,"line_end":915,"column_start":29,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":2716}],"docs":"","sig":null,"attributes":[]},{"id":192,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":579753,"byte_end":579766,"line_start":921,"line_end":921,"column_start":15,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2718}],"docs":"","sig":null,"attributes":[]},{"id":193,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":579889,"byte_end":579902,"line_start":927,"line_end":927,"column_start":20,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2720}],"docs":"","sig":null,"attributes":[]},{"id":194,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":580181,"byte_end":580194,"line_start":939,"line_end":939,"column_start":22,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":195,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":580219,"byte_end":580232,"line_start":940,"line_end":940,"column_start":22,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":196,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/bytes.rs","byte_start":592972,"byte_end":592984,"line_start":37,"line_end":37,"column_start":16,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2755}],"docs":"","sig":null,"attributes":[]},{"id":197,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/bytes.rs","byte_start":594244,"byte_end":594249,"line_start":69,"line_end":69,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":2761},{"krate":0,"index":2762},{"krate":0,"index":2763},{"krate":0,"index":2764},{"krate":0,"index":2765},{"krate":0,"index":2766}],"docs":"","sig":null,"attributes":[]},{"id":198,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/bytes.rs","byte_start":595570,"byte_end":595575,"line_start":123,"line_end":123,"column_start":15,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":2768}],"docs":"","sig":null,"attributes":[]},{"id":199,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/bytes.rs","byte_start":595937,"byte_end":595942,"line_start":136,"line_end":136,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2770},{"krate":0,"index":2771}],"docs":"","sig":null,"attributes":[]},{"id":200,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/bytes.rs","byte_start":596099,"byte_end":596104,"line_start":144,"line_end":144,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2773}],"docs":"","sig":null,"attributes":[]},{"id":201,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/bytes.rs","byte_start":596217,"byte_end":596222,"line_start":150,"line_end":150,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":2775}],"docs":"","sig":null,"attributes":[]},{"id":202,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/filter.rs","byte_start":850730,"byte_end":850744,"line_start":59,"line_end":59,"column_start":10,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":3225},{"krate":0,"index":3226},{"krate":0,"index":3227},{"krate":0,"index":3228}],"docs":"","sig":null,"attributes":[]},{"id":203,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/filter.rs","byte_start":853536,"byte_end":853550,"line_start":143,"line_end":143,"column_start":23,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":3231},{"krate":0,"index":3232}],"docs":"","sig":null,"attributes":[]},{"id":204,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/sort.rs","byte_start":895540,"byte_end":895551,"line_start":250,"line_end":250,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":3312}],"docs":"","sig":null,"attributes":[]},{"id":205,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/take.rs","byte_start":963013,"byte_end":963024,"line_start":249,"line_end":249,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":3442}],"docs":"","sig":null,"attributes":[]},{"id":206,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1031936,"byte_end":1031942,"line_start":249,"line_end":249,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3625}],"docs":"","sig":null,"attributes":[]},{"id":207,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1032255,"byte_end":1032261,"line_start":262,"line_end":262,"column_start":15,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":3628},{"krate":0,"index":3629},{"krate":0,"index":3631}],"docs":"","sig":null,"attributes":[]},{"id":208,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1035304,"byte_end":1035310,"line_start":355,"line_end":355,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3634},{"krate":0,"index":3635}],"docs":"","sig":null,"attributes":[]},{"id":209,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1039989,"byte_end":1040000,"line_start":488,"line_end":488,"column_start":17,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":3645}],"docs":"","sig":null,"attributes":[]},{"id":210,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1040123,"byte_end":1040134,"line_start":493,"line_end":493,"column_start":17,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":3647}],"docs":"","sig":null,"attributes":[]},{"id":211,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1040258,"byte_end":1040268,"line_start":499,"line_end":499,"column_start":17,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":212,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1040289,"byte_end":1040299,"line_start":501,"line_end":501,"column_start":17,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":213,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1040320,"byte_end":1040330,"line_start":503,"line_end":503,"column_start":17,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":214,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1040351,"byte_end":1040360,"line_start":505,"line_end":505,"column_start":17,"column_end":26},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":215,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1040381,"byte_end":1040390,"line_start":507,"line_end":507,"column_start":17,"column_end":26},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":216,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1040411,"byte_end":1040420,"line_start":509,"line_end":509,"column_start":17,"column_end":26},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":217,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1040441,"byte_end":1040450,"line_start":511,"line_end":511,"column_start":17,"column_end":26},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":218,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1040471,"byte_end":1040479,"line_start":513,"line_end":513,"column_start":17,"column_end":25},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":219,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1040595,"byte_end":1040605,"line_start":518,"line_end":518,"column_start":17,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":3658}],"docs":"","sig":null,"attributes":[]},{"id":220,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1040991,"byte_end":1041001,"line_start":532,"line_end":532,"column_start":17,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":3663}],"docs":"","sig":null,"attributes":[]},{"id":221,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1041357,"byte_end":1041380,"line_start":544,"line_end":544,"column_start":17,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":3665}],"docs":"","sig":null,"attributes":[]},{"id":222,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1041743,"byte_end":1041767,"line_start":556,"line_end":556,"column_start":17,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":3667}],"docs":"","sig":null,"attributes":[]},{"id":223,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1045830,"byte_end":1045843,"line_start":679,"line_end":679,"column_start":18,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":3679}],"docs":"","sig":null,"attributes":[]},{"id":224,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1046115,"byte_end":1046128,"line_start":693,"line_end":693,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":3681},{"krate":0,"index":3682},{"krate":0,"index":3683},{"krate":0,"index":3684},{"krate":0,"index":3685},{"krate":0,"index":3686},{"krate":0,"index":3687},{"krate":0,"index":3688}],"docs":"","sig":null,"attributes":[]},{"id":225,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1068160,"byte_end":1068166,"line_start":108,"line_end":108,"column_start":16,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":3720},{"krate":0,"index":3721},{"krate":0,"index":3723}],"docs":"","sig":null,"attributes":[]},{"id":226,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1076094,"byte_end":1076107,"line_start":297,"line_end":297,"column_start":18,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":3726}],"docs":"","sig":null,"attributes":[]},{"id":227,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1076438,"byte_end":1076451,"line_start":309,"line_end":309,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":3728},{"krate":0,"index":3729},{"krate":0,"index":3730},{"krate":0,"index":3731},{"krate":0,"index":3732},{"krate":0,"index":3733},{"krate":0,"index":3734}],"docs":"","sig":null,"attributes":[]},{"id":249,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1098413,"byte_end":1098424,"line_start":394,"line_end":394,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":3864}],"docs":"","sig":null,"attributes":[]},{"id":250,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1100931,"byte_end":1100939,"line_start":493,"line_end":493,"column_start":33,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":251,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1100976,"byte_end":1100985,"line_start":495,"line_end":495,"column_start":33,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":252,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1101022,"byte_end":1101031,"line_start":497,"line_end":497,"column_start":33,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":253,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1101068,"byte_end":1101077,"line_start":499,"line_end":499,"column_start":33,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":254,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1101114,"byte_end":1101123,"line_start":501,"line_end":501,"column_start":33,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":255,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1101160,"byte_end":1101170,"line_start":503,"line_end":503,"column_start":33,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":256,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1101207,"byte_end":1101217,"line_start":505,"line_end":505,"column_start":33,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":257,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1101254,"byte_end":1101264,"line_start":507,"line_end":507,"column_start":33,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":290,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1115966,"byte_end":1115985,"line_start":899,"line_end":899,"column_start":28,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":291,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1116016,"byte_end":1116040,"line_start":900,"line_end":900,"column_start":28,"column_end":52},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":292,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1116071,"byte_end":1116095,"line_start":901,"line_end":901,"column_start":28,"column_end":52},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":293,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1116126,"byte_end":1116149,"line_start":902,"line_end":902,"column_start":28,"column_end":51},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":294,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1116180,"byte_end":1116190,"line_start":903,"line_end":903,"column_start":28,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":295,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1116221,"byte_end":1116231,"line_start":904,"line_end":904,"column_start":28,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":296,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1116262,"byte_end":1116278,"line_start":905,"line_end":905,"column_start":28,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":297,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1116309,"byte_end":1116330,"line_start":906,"line_end":906,"column_start":28,"column_end":49},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":298,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1116361,"byte_end":1116382,"line_start":907,"line_end":907,"column_start":28,"column_end":49},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":299,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1116413,"byte_end":1116433,"line_start":908,"line_end":908,"column_start":28,"column_end":48},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":300,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1116792,"byte_end":1116811,"line_start":918,"line_end":918,"column_start":29,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":3893}],"docs":"","sig":null,"attributes":[]},{"id":301,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1116912,"byte_end":1116936,"line_start":923,"line_end":923,"column_start":29,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":3895}],"docs":"","sig":null,"attributes":[]},{"id":302,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1117042,"byte_end":1117066,"line_start":928,"line_end":928,"column_start":29,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":3897}],"docs":"","sig":null,"attributes":[]},{"id":303,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1117172,"byte_end":1117195,"line_start":933,"line_end":933,"column_start":29,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":3899}],"docs":"","sig":null,"attributes":[]},{"id":304,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1117723,"byte_end":1117724,"line_start":952,"line_end":952,"column_start":42,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":3907}],"docs":"","sig":null,"attributes":[]},{"id":305,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1117909,"byte_end":1117917,"line_start":959,"line_end":959,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":3909}],"docs":"","sig":null,"attributes":[]},{"id":306,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1118025,"byte_end":1118033,"line_start":965,"line_end":965,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":3911},{"krate":0,"index":3912},{"krate":0,"index":3913},{"krate":0,"index":3915}],"docs":"","sig":null,"attributes":[]},{"id":307,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1133913,"byte_end":1133918,"line_start":1283,"line_end":1283,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":3918},{"krate":0,"index":3919},{"krate":0,"index":3920},{"krate":0,"index":3921},{"krate":0,"index":3922},{"krate":0,"index":3923},{"krate":0,"index":3924},{"krate":0,"index":3925},{"krate":0,"index":3926},{"krate":0,"index":3927},{"krate":0,"index":3929},{"krate":0,"index":3931}],"docs":"","sig":null,"attributes":[]},{"id":308,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1152619,"byte_end":1152624,"line_start":1735,"line_end":1735,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":3933}],"docs":"","sig":null,"attributes":[]},{"id":311,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1153208,"byte_end":1153214,"line_start":1753,"line_end":1753,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":3935},{"krate":0,"index":3936},{"krate":0,"index":3937},{"krate":0,"index":3938},{"krate":0,"index":3939},{"krate":0,"index":3940},{"krate":0,"index":3941},{"krate":0,"index":3942},{"krate":0,"index":3944},{"krate":0,"index":3946},{"krate":0,"index":3947},{"krate":0,"index":3949},{"krate":0,"index":3950},{"krate":0,"index":3952}],"docs":"","sig":null,"attributes":[]},{"id":312,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1161726,"byte_end":1161732,"line_start":2000,"line_end":2000,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":3956}],"docs":"","sig":null,"attributes":[]},{"id":314,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/error.rs","byte_start":1210642,"byte_end":1210652,"line_start":43,"line_end":43,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":3977}],"docs":"","sig":null,"attributes":[]},{"id":315,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/error.rs","byte_start":1210890,"byte_end":1210900,"line_start":52,"line_end":52,"column_start":33,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":3979}],"docs":"","sig":null,"attributes":[]},{"id":316,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/error.rs","byte_start":1211036,"byte_end":1211046,"line_start":58,"line_end":58,"column_start":33,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":3981}],"docs":"","sig":null,"attributes":[]},{"id":317,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/error.rs","byte_start":1211878,"byte_end":1211888,"line_start":78,"line_end":78,"column_start":45,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":3983}],"docs":"","sig":null,"attributes":[]},{"id":318,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/error.rs","byte_start":1212040,"byte_end":1212050,"line_start":84,"line_end":84,"column_start":34,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":3985}],"docs":"","sig":null,"attributes":[]},{"id":319,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/error.rs","byte_start":1212176,"byte_end":1212186,"line_start":90,"line_end":90,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":3987}],"docs":"","sig":null,"attributes":[]},{"id":320,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/error.rs","byte_start":1213551,"byte_end":1213561,"line_start":118,"line_end":118,"column_start":16,"column_end":26},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":321,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1217836,"byte_end":1217851,"line_start":120,"line_end":120,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":4040},{"krate":0,"index":4041},{"krate":0,"index":4042}],"docs":"","sig":null,"attributes":[]},{"id":322,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1219121,"byte_end":1219136,"line_start":160,"line_end":160,"column_start":15,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":4044}],"docs":"","sig":null,"attributes":[]},{"id":323,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1226621,"byte_end":1226635,"line_start":345,"line_end":345,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":4053},{"krate":0,"index":4055}],"docs":"","sig":null,"attributes":[]},{"id":324,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1229406,"byte_end":1229420,"line_start":428,"line_end":428,"column_start":15,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":4059}],"docs":"","sig":null,"attributes":[]},{"id":325,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1230798,"byte_end":1230808,"line_start":463,"line_end":463,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":4061},{"krate":0,"index":4063},{"krate":0,"index":4064},{"krate":0,"index":4065},{"krate":0,"index":4066},{"krate":0,"index":4067},{"krate":0,"index":4068},{"krate":0,"index":4071},{"krate":0,"index":4072},{"krate":0,"index":4073},{"krate":0,"index":4074},{"krate":0,"index":4075}],"docs":"","sig":null,"attributes":[]},{"id":326,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/convert.rs","byte_start":1246646,"byte_end":1246651,"line_start":73,"line_end":73,"column_start":35,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":4136}],"docs":"","sig":null,"attributes":[]},{"id":327,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/reader.rs","byte_start":1298387,"byte_end":1298397,"line_start":533,"line_end":533,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":4245},{"krate":0,"index":4255},{"krate":0,"index":4256},{"krate":0,"index":4257},{"krate":0,"index":4258}],"docs":"","sig":null,"attributes":[]},{"id":328,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/reader.rs","byte_start":1305661,"byte_end":1305671,"line_start":725,"line_end":725,"column_start":35,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":4264},{"krate":0,"index":4265}],"docs":"","sig":null,"attributes":[]},{"id":329,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/reader.rs","byte_start":1305981,"byte_end":1305991,"line_start":738,"line_end":738,"column_start":44,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":4268}],"docs":"","sig":null,"attributes":[]},{"id":330,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/reader.rs","byte_start":1306642,"byte_end":1306654,"line_start":763,"line_end":763,"column_start":15,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":4277},{"krate":0,"index":4282},{"krate":0,"index":4283},{"krate":0,"index":4284}],"docs":"","sig":null,"attributes":[]},{"id":331,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/reader.rs","byte_start":1312006,"byte_end":1312018,"line_start":904,"line_end":904,"column_start":28,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":4292},{"krate":0,"index":4293}],"docs":"","sig":null,"attributes":[]},{"id":332,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/reader.rs","byte_start":1312192,"byte_end":1312204,"line_start":912,"line_end":912,"column_start":37,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":4296}],"docs":"","sig":null,"attributes":[]},{"id":333,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/writer.rs","byte_start":1319978,"byte_end":1319993,"line_start":50,"line_end":50,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":4346}],"docs":"","sig":null,"attributes":[]},{"id":334,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/writer.rs","byte_start":1321537,"byte_end":1321552,"line_start":92,"line_end":92,"column_start":18,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":4348}],"docs":"","sig":null,"attributes":[]},{"id":335,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/writer.rs","byte_start":1321804,"byte_end":1321820,"line_start":105,"line_end":105,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":4350},{"krate":0,"index":4351},{"krate":0,"index":4352},{"krate":0,"index":4353}],"docs":"","sig":null,"attributes":[]},{"id":336,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/writer.rs","byte_start":1328160,"byte_end":1328177,"line_start":294,"line_end":294,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":4358},{"krate":0,"index":4359}],"docs":"","sig":null,"attributes":[]},{"id":337,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/writer.rs","byte_start":1330769,"byte_end":1330779,"line_start":356,"line_end":356,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":4373},{"krate":0,"index":4374},{"krate":0,"index":4375},{"krate":0,"index":4376}],"docs":"","sig":null,"attributes":[]},{"id":338,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/writer.rs","byte_start":1334735,"byte_end":1334745,"line_start":460,"line_end":460,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":4379}],"docs":"","sig":null,"attributes":[]},{"id":339,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/writer.rs","byte_start":1335355,"byte_end":1335367,"line_start":483,"line_end":483,"column_start":16,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":4390},{"krate":0,"index":4391},{"krate":0,"index":4392},{"krate":0,"index":4393}],"docs":"","sig":null,"attributes":[]},{"id":340,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/writer.rs","byte_start":1337476,"byte_end":1337488,"line_start":542,"line_end":542,"column_start":25,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":4396}],"docs":"","sig":null,"attributes":[]},{"id":341,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1353132,"byte_end":1353137,"line_start":35,"line_end":35,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":4425}],"docs":"","sig":null,"attributes":[]},{"id":342,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1353475,"byte_end":1353480,"line_start":45,"line_end":45,"column_start":45,"column_end":50},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":343,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1353522,"byte_end":1353527,"line_start":46,"line_end":46,"column_start":39,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":344,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1353568,"byte_end":1353573,"line_start":47,"line_end":47,"column_start":38,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":4430},{"krate":0,"index":4431}],"docs":"","sig":null,"attributes":[]},{"id":345,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1353966,"byte_end":1353971,"line_start":61,"line_end":61,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":4438},{"krate":0,"index":4439}],"docs":"","sig":null,"attributes":[]},{"id":346,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1354577,"byte_end":1354582,"line_start":83,"line_end":83,"column_start":38,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":4446}],"docs":"","sig":null,"attributes":[]},{"id":347,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1354832,"byte_end":1354837,"line_start":93,"line_end":93,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":4453},{"krate":0,"index":4454},{"krate":0,"index":4455},{"krate":0,"index":4456}],"docs":"","sig":null,"attributes":[]},{"id":348,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1355910,"byte_end":1355916,"line_start":128,"line_end":128,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":4460},{"krate":0,"index":4461}],"docs":"","sig":null,"attributes":[]},{"id":349,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1356118,"byte_end":1356124,"line_start":138,"line_end":138,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":4464},{"krate":0,"index":4465},{"krate":0,"index":4469},{"krate":0,"index":4470},{"krate":0,"index":4471},{"krate":0,"index":4472},{"krate":0,"index":4473},{"krate":0,"index":4474},{"krate":0,"index":4475},{"krate":0,"index":4476},{"krate":0,"index":4478},{"krate":0,"index":4480}],"docs":"","sig":null,"attributes":[]},{"id":350,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1358620,"byte_end":1358626,"line_start":211,"line_end":211,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":4482}],"docs":"","sig":null,"attributes":[]},{"id":351,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1360245,"byte_end":1360255,"line_start":253,"line_end":253,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":4497}],"docs":"","sig":null,"attributes":[]},{"id":352,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1360697,"byte_end":1360710,"line_start":269,"line_end":269,"column_start":18,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":4506},{"krate":0,"index":4507},{"krate":0,"index":4508},{"krate":0,"index":4509},{"krate":0,"index":4510},{"krate":0,"index":4511},{"krate":0,"index":4512}],"docs":"","sig":null,"attributes":[]},{"id":353,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1362620,"byte_end":1362626,"line_start":335,"line_end":335,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":4514}],"docs":"","sig":null,"attributes":[]},{"id":354,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1368388,"byte_end":1368403,"line_start":50,"line_end":50,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":4554},{"krate":0,"index":4555},{"krate":0,"index":4556},{"krate":0,"index":4557},{"krate":0,"index":4558},{"krate":0,"index":4559}],"docs":"","sig":null,"attributes":[]},{"id":355,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1368911,"byte_end":1368926,"line_start":66,"line_end":66,"column_start":26,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":4561}],"docs":"","sig":null,"attributes":[]},{"id":356,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1369214,"byte_end":1369229,"line_start":75,"line_end":75,"column_start":38,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":4564},{"krate":0,"index":4565}],"docs":"","sig":null,"attributes":[]},{"id":357,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1369440,"byte_end":1369455,"line_start":84,"line_end":84,"column_start":28,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":4567},{"krate":0,"index":4568}],"docs":"","sig":null,"attributes":[]},{"id":358,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1369658,"byte_end":1369673,"line_start":92,"line_end":92,"column_start":36,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":4570},{"krate":0,"index":4571}],"docs":"","sig":null,"attributes":[]},{"id":359,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1369942,"byte_end":1369957,"line_start":105,"line_end":105,"column_start":38,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":4574}],"docs":"","sig":null,"attributes":[]},{"id":360,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1370247,"byte_end":1370262,"line_start":116,"line_end":116,"column_start":45,"column_end":60},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":361,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1371256,"byte_end":1371277,"line_start":142,"line_end":142,"column_start":6,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":4586},{"krate":0,"index":4587},{"krate":0,"index":4588},{"krate":0,"index":4589},{"krate":0,"index":4590}],"docs":"","sig":null,"attributes":[]},{"id":362,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1372195,"byte_end":1372216,"line_start":163,"line_end":163,"column_start":26,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":4592}],"docs":"","sig":null,"attributes":[]},{"id":363,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1372504,"byte_end":1372525,"line_start":172,"line_end":172,"column_start":38,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":4595},{"krate":0,"index":4596}],"docs":"","sig":null,"attributes":[]},{"id":364,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1372736,"byte_end":1372757,"line_start":181,"line_end":181,"column_start":28,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":4598},{"krate":0,"index":4599}],"docs":"","sig":null,"attributes":[]},{"id":365,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1372966,"byte_end":1372987,"line_start":189,"line_end":189,"column_start":36,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":4601},{"krate":0,"index":4602}],"docs":"","sig":null,"attributes":[]},{"id":366,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1373256,"byte_end":1373277,"line_start":202,"line_end":202,"column_start":38,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":4605}],"docs":"","sig":null,"attributes":[]},{"id":367,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1373567,"byte_end":1373588,"line_start":213,"line_end":213,"column_start":45,"column_end":66},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":368,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1374943,"byte_end":1374956,"line_start":250,"line_end":250,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":4617},{"krate":0,"index":4618},{"krate":0,"index":4619},{"krate":0,"index":4620},{"krate":0,"index":4621},{"krate":0,"index":4622},{"krate":0,"index":4623},{"krate":0,"index":4624},{"krate":0,"index":4625},{"krate":0,"index":4626}],"docs":"","sig":null,"attributes":[]},{"id":369,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1375971,"byte_end":1375984,"line_start":281,"line_end":281,"column_start":26,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":4628}],"docs":"","sig":null,"attributes":[]},{"id":370,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1376316,"byte_end":1376329,"line_start":291,"line_end":291,"column_start":38,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":4632},{"krate":0,"index":4633}],"docs":"","sig":null,"attributes":[]},{"id":371,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1376540,"byte_end":1376553,"line_start":300,"line_end":300,"column_start":28,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":4635},{"krate":0,"index":4636}],"docs":"","sig":null,"attributes":[]},{"id":372,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1376754,"byte_end":1376767,"line_start":308,"line_end":308,"column_start":36,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":4638},{"krate":0,"index":4639}],"docs":"","sig":null,"attributes":[]},{"id":373,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1377036,"byte_end":1377049,"line_start":321,"line_end":321,"column_start":38,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":4642}],"docs":"","sig":null,"attributes":[]},{"id":374,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1377339,"byte_end":1377352,"line_start":332,"line_end":332,"column_start":45,"column_end":58},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":375,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1378058,"byte_end":1378067,"line_start":349,"line_end":349,"column_start":26,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":4650}],"docs":"","sig":null,"attributes":[]},{"id":376,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1378348,"byte_end":1378357,"line_start":358,"line_end":358,"column_start":45,"column_end":54},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":377,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1378399,"byte_end":1378408,"line_start":359,"line_end":359,"column_start":39,"column_end":48},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":378,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1378449,"byte_end":1378458,"line_start":360,"line_end":360,"column_start":38,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":4655},{"krate":0,"index":4656}],"docs":"","sig":null,"attributes":[]},{"id":379,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1378871,"byte_end":1378880,"line_start":374,"line_end":374,"column_start":32,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":4663},{"krate":0,"index":4664}],"docs":"","sig":null,"attributes":[]},{"id":380,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1379600,"byte_end":1379609,"line_start":402,"line_end":402,"column_start":38,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":4671}],"docs":"","sig":null,"attributes":[]},{"id":381,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1379859,"byte_end":1379868,"line_start":412,"line_end":412,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":4678},{"krate":0,"index":4679},{"krate":0,"index":4680}],"docs":"","sig":null,"attributes":[]},{"id":382,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1380903,"byte_end":1380918,"line_start":442,"line_end":442,"column_start":38,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":4684},{"krate":0,"index":4685}],"docs":"","sig":null,"attributes":[]},{"id":383,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1381129,"byte_end":1381144,"line_start":452,"line_end":452,"column_start":10,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":4688},{"krate":0,"index":4689},{"krate":0,"index":4693},{"krate":0,"index":4694},{"krate":0,"index":4695},{"krate":0,"index":4696}],"docs":"","sig":null,"attributes":[]},{"id":384,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1382452,"byte_end":1382467,"line_start":493,"line_end":493,"column_start":34,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":4698}],"docs":"","sig":null,"attributes":[]},{"id":385,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1383040,"byte_end":1383059,"line_start":511,"line_end":511,"column_start":22,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":4709}],"docs":"","sig":null,"attributes":[]},{"id":386,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1383445,"byte_end":1383467,"line_start":524,"line_end":524,"column_start":18,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":4718},{"krate":0,"index":4719},{"krate":0,"index":4720},{"krate":0,"index":4721}],"docs":"","sig":null,"attributes":[]},{"id":387,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1384455,"byte_end":1384470,"line_start":558,"line_end":558,"column_start":26,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":4723}],"docs":"","sig":null,"attributes":[]},{"id":388,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1385061,"byte_end":1385072,"line_start":576,"line_end":576,"column_start":38,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":4727},{"krate":0,"index":4728}],"docs":"","sig":null,"attributes":[]},{"id":389,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1385279,"byte_end":1385290,"line_start":586,"line_end":586,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":4731},{"krate":0,"index":4732},{"krate":0,"index":4736},{"krate":0,"index":4737},{"krate":0,"index":4738},{"krate":0,"index":4739},{"krate":0,"index":4740},{"krate":0,"index":4741},{"krate":0,"index":4743},{"krate":0,"index":4745}],"docs":"","sig":null,"attributes":[]},{"id":390,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1387871,"byte_end":1387882,"line_start":659,"line_end":659,"column_start":34,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":4747}],"docs":"","sig":null,"attributes":[]},{"id":391,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1388888,"byte_end":1388903,"line_start":681,"line_end":681,"column_start":22,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":4761}],"docs":"","sig":null,"attributes":[]},{"id":392,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1389293,"byte_end":1389311,"line_start":696,"line_end":696,"column_start":18,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":4770},{"krate":0,"index":4771},{"krate":0,"index":4772},{"krate":0,"index":4773},{"krate":0,"index":4774},{"krate":0,"index":4775}],"docs":"","sig":null,"attributes":[]},{"id":393,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1390803,"byte_end":1390814,"line_start":748,"line_end":748,"column_start":26,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":4777}],"docs":"","sig":null,"attributes":[]},{"id":394,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1391656,"byte_end":1391671,"line_start":771,"line_end":771,"column_start":38,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":4781},{"krate":0,"index":4782}],"docs":"","sig":null,"attributes":[]},{"id":395,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1391882,"byte_end":1391897,"line_start":781,"line_end":781,"column_start":10,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":4785},{"krate":0,"index":4786},{"krate":0,"index":4790},{"krate":0,"index":4791},{"krate":0,"index":4792},{"krate":0,"index":4793},{"krate":0,"index":4794},{"krate":0,"index":4795}],"docs":"","sig":null,"attributes":[]},{"id":396,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1393453,"byte_end":1393468,"line_start":828,"line_end":828,"column_start":34,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":4797}],"docs":"","sig":null,"attributes":[]},{"id":397,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1394209,"byte_end":1394228,"line_start":852,"line_end":852,"column_start":22,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":4810}],"docs":"","sig":null,"attributes":[]},{"id":398,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1394591,"byte_end":1394613,"line_start":866,"line_end":866,"column_start":18,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":4819},{"krate":0,"index":4820},{"krate":0,"index":4821},{"krate":0,"index":4822},{"krate":0,"index":4823}],"docs":"","sig":null,"attributes":[]},{"id":399,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1395672,"byte_end":1395687,"line_start":901,"line_end":901,"column_start":26,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":4825}],"docs":"","sig":null,"attributes":[]},{"id":400,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1396137,"byte_end":1396144,"line_start":917,"line_end":917,"column_start":38,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":4829},{"krate":0,"index":4830}],"docs":"","sig":null,"attributes":[]},{"id":401,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1396347,"byte_end":1396354,"line_start":927,"line_end":927,"column_start":10,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":4833},{"krate":0,"index":4834},{"krate":0,"index":4838},{"krate":0,"index":4839},{"krate":0,"index":4840},{"krate":0,"index":4841},{"krate":0,"index":4842},{"krate":0,"index":4843},{"krate":0,"index":4844},{"krate":0,"index":4845},{"krate":0,"index":4846},{"krate":0,"index":4847},{"krate":0,"index":4848},{"krate":0,"index":4849},{"krate":0,"index":4850},{"krate":0,"index":4851},{"krate":0,"index":4852}],"docs":"","sig":null,"attributes":[]},{"id":402,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1399979,"byte_end":1399986,"line_start":1041,"line_end":1041,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":4854}],"docs":"","sig":null,"attributes":[]},{"id":403,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1401856,"byte_end":1401867,"line_start":1077,"line_end":1077,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":4870}],"docs":"","sig":null,"attributes":[]},{"id":404,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1402319,"byte_end":1402333,"line_start":1093,"line_end":1093,"column_start":18,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":4879},{"krate":0,"index":4880},{"krate":0,"index":4881},{"krate":0,"index":4882},{"krate":0,"index":4883},{"krate":0,"index":4884},{"krate":0,"index":4885}],"docs":"","sig":null,"attributes":[]},{"id":405,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1404051,"byte_end":1404058,"line_start":1152,"line_end":1152,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":4887}],"docs":"","sig":null,"attributes":[]},{"id":406,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1411846,"byte_end":1411861,"line_start":52,"line_end":52,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":4924},{"krate":0,"index":4925},{"krate":0,"index":4926},{"krate":0,"index":4927},{"krate":0,"index":4928},{"krate":0,"index":4929},{"krate":0,"index":4930},{"krate":0,"index":4931},{"krate":0,"index":4932}],"docs":"","sig":null,"attributes":[]},{"id":407,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1413212,"byte_end":1413227,"line_start":86,"line_end":86,"column_start":26,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":4934}],"docs":"","sig":null,"attributes":[]},{"id":408,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1413515,"byte_end":1413530,"line_start":95,"line_end":95,"column_start":38,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":4937},{"krate":0,"index":4938}],"docs":"","sig":null,"attributes":[]},{"id":409,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1413742,"byte_end":1413757,"line_start":104,"line_end":104,"column_start":28,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":4940},{"krate":0,"index":4941}],"docs":"","sig":null,"attributes":[]},{"id":410,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1413961,"byte_end":1413976,"line_start":112,"line_end":112,"column_start":36,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":4943},{"krate":0,"index":4944}],"docs":"","sig":null,"attributes":[]},{"id":411,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1414247,"byte_end":1414262,"line_start":125,"line_end":125,"column_start":38,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":4947}],"docs":"","sig":null,"attributes":[]},{"id":412,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1414553,"byte_end":1414568,"line_start":136,"line_end":136,"column_start":45,"column_end":60},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":413,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1416208,"byte_end":1416215,"line_start":179,"line_end":179,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":4959},{"krate":0,"index":4960},{"krate":0,"index":4961},{"krate":0,"index":4962},{"krate":0,"index":4963},{"krate":0,"index":4964},{"krate":0,"index":4965}],"docs":"","sig":null,"attributes":[]},{"id":414,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1417233,"byte_end":1417240,"line_start":207,"line_end":207,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":4967}],"docs":"","sig":null,"attributes":[]},{"id":415,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1417528,"byte_end":1417535,"line_start":216,"line_end":216,"column_start":38,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":4970},{"krate":0,"index":4971}],"docs":"","sig":null,"attributes":[]},{"id":416,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1417747,"byte_end":1417754,"line_start":225,"line_end":225,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":4973},{"krate":0,"index":4974}],"docs":"","sig":null,"attributes":[]},{"id":417,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1417950,"byte_end":1417957,"line_start":233,"line_end":233,"column_start":36,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":4976},{"krate":0,"index":4977}],"docs":"","sig":null,"attributes":[]},{"id":418,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1418228,"byte_end":1418235,"line_start":246,"line_end":246,"column_start":38,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":4980}],"docs":"","sig":null,"attributes":[]},{"id":419,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1418526,"byte_end":1418533,"line_start":257,"line_end":257,"column_start":45,"column_end":52},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":420,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1419268,"byte_end":1419277,"line_start":279,"line_end":279,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":4992},{"krate":0,"index":4993},{"krate":0,"index":4994},{"krate":0,"index":4995},{"krate":0,"index":4996},{"krate":0,"index":4997}],"docs":"","sig":null,"attributes":[]},{"id":421,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1419779,"byte_end":1419788,"line_start":295,"line_end":295,"column_start":26,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":4999}],"docs":"","sig":null,"attributes":[]},{"id":422,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1420076,"byte_end":1420085,"line_start":304,"line_end":304,"column_start":38,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":5002},{"krate":0,"index":5003}],"docs":"","sig":null,"attributes":[]},{"id":423,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1420297,"byte_end":1420306,"line_start":313,"line_end":313,"column_start":28,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":5005},{"krate":0,"index":5006}],"docs":"","sig":null,"attributes":[]},{"id":424,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1420504,"byte_end":1420513,"line_start":321,"line_end":321,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":5008},{"krate":0,"index":5009}],"docs":"","sig":null,"attributes":[]},{"id":425,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1420784,"byte_end":1420793,"line_start":334,"line_end":334,"column_start":38,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":5012}],"docs":"","sig":null,"attributes":[]},{"id":426,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1421084,"byte_end":1421093,"line_start":345,"line_end":345,"column_start":45,"column_end":54},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":427,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1421847,"byte_end":1421856,"line_start":368,"line_end":368,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":5024},{"krate":0,"index":5025},{"krate":0,"index":5026},{"krate":0,"index":5027},{"krate":0,"index":5028},{"krate":0,"index":5029},{"krate":0,"index":5030}],"docs":"","sig":null,"attributes":[]},{"id":428,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1422450,"byte_end":1422459,"line_start":386,"line_end":386,"column_start":26,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":5032}],"docs":"","sig":null,"attributes":[]},{"id":429,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1422747,"byte_end":1422756,"line_start":395,"line_end":395,"column_start":38,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":5035},{"krate":0,"index":5036}],"docs":"","sig":null,"attributes":[]},{"id":430,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1422968,"byte_end":1422977,"line_start":404,"line_end":404,"column_start":28,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":5038},{"krate":0,"index":5039}],"docs":"","sig":null,"attributes":[]},{"id":431,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1423175,"byte_end":1423184,"line_start":412,"line_end":412,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":5041},{"krate":0,"index":5042}],"docs":"","sig":null,"attributes":[]},{"id":432,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1423455,"byte_end":1423464,"line_start":425,"line_end":425,"column_start":38,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":5045}],"docs":"","sig":null,"attributes":[]},{"id":433,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1423755,"byte_end":1423764,"line_start":436,"line_end":436,"column_start":45,"column_end":54},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":434,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1424495,"byte_end":1424503,"line_start":458,"line_end":458,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":5057},{"krate":0,"index":5058},{"krate":0,"index":5059},{"krate":0,"index":5060},{"krate":0,"index":5061},{"krate":0,"index":5062}],"docs":"","sig":null,"attributes":[]},{"id":435,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1425017,"byte_end":1425025,"line_start":474,"line_end":474,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":5064}],"docs":"","sig":null,"attributes":[]},{"id":436,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1425313,"byte_end":1425321,"line_start":483,"line_end":483,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":5067},{"krate":0,"index":5068}],"docs":"","sig":null,"attributes":[]},{"id":437,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1425533,"byte_end":1425541,"line_start":492,"line_end":492,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":5070},{"krate":0,"index":5071}],"docs":"","sig":null,"attributes":[]},{"id":438,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1425738,"byte_end":1425746,"line_start":500,"line_end":500,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":5073},{"krate":0,"index":5074}],"docs":"","sig":null,"attributes":[]},{"id":439,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1426017,"byte_end":1426025,"line_start":513,"line_end":513,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":5077}],"docs":"","sig":null,"attributes":[]},{"id":440,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1426316,"byte_end":1426324,"line_start":524,"line_end":524,"column_start":45,"column_end":53},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":441,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1427122,"byte_end":1427130,"line_start":551,"line_end":551,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":5089},{"krate":0,"index":5090},{"krate":0,"index":5091},{"krate":0,"index":5092},{"krate":0,"index":5093},{"krate":0,"index":5094},{"krate":0,"index":5095},{"krate":0,"index":5096}],"docs":"","sig":null,"attributes":[]},{"id":442,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1427923,"byte_end":1427931,"line_start":576,"line_end":576,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":5098}],"docs":"","sig":null,"attributes":[]},{"id":443,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1428219,"byte_end":1428227,"line_start":585,"line_end":585,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":5101},{"krate":0,"index":5102}],"docs":"","sig":null,"attributes":[]},{"id":444,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1428439,"byte_end":1428447,"line_start":594,"line_end":594,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":5104},{"krate":0,"index":5105}],"docs":"","sig":null,"attributes":[]},{"id":445,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1428644,"byte_end":1428652,"line_start":602,"line_end":602,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":5107},{"krate":0,"index":5108}],"docs":"","sig":null,"attributes":[]},{"id":446,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1428923,"byte_end":1428931,"line_start":615,"line_end":615,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":5111}],"docs":"","sig":null,"attributes":[]},{"id":447,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1429222,"byte_end":1429230,"line_start":626,"line_end":626,"column_start":45,"column_end":53},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":448,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1429997,"byte_end":1430009,"line_start":649,"line_end":649,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":5123},{"krate":0,"index":5124},{"krate":0,"index":5125},{"krate":0,"index":5126},{"krate":0,"index":5127},{"krate":0,"index":5128}],"docs":"","sig":null,"attributes":[]},{"id":449,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1430539,"byte_end":1430551,"line_start":665,"line_end":665,"column_start":26,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":5130}],"docs":"","sig":null,"attributes":[]},{"id":450,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1430839,"byte_end":1430851,"line_start":674,"line_end":674,"column_start":38,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":5133},{"krate":0,"index":5134}],"docs":"","sig":null,"attributes":[]},{"id":451,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1431063,"byte_end":1431075,"line_start":683,"line_end":683,"column_start":28,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":5136},{"krate":0,"index":5137}],"docs":"","sig":null,"attributes":[]},{"id":452,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1431276,"byte_end":1431288,"line_start":691,"line_end":691,"column_start":36,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":5139},{"krate":0,"index":5140}],"docs":"","sig":null,"attributes":[]},{"id":453,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1431559,"byte_end":1431571,"line_start":704,"line_end":704,"column_start":38,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":5143}],"docs":"","sig":null,"attributes":[]},{"id":454,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1431862,"byte_end":1431874,"line_start":715,"line_end":715,"column_start":45,"column_end":57},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":455,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1433191,"byte_end":1433195,"line_start":763,"line_end":763,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":5155},{"krate":0,"index":5156},{"krate":0,"index":5157},{"krate":0,"index":5158},{"krate":0,"index":5159},{"krate":0,"index":5160},{"krate":0,"index":5161},{"krate":0,"index":5162},{"krate":0,"index":5163},{"krate":0,"index":5164},{"krate":0,"index":5165},{"krate":0,"index":5166},{"krate":0,"index":5167},{"krate":0,"index":5168},{"krate":0,"index":5169},{"krate":0,"index":5170},{"krate":0,"index":5171},{"krate":0,"index":5172},{"krate":0,"index":5173},{"krate":0,"index":5174},{"krate":0,"index":5175},{"krate":0,"index":5176},{"krate":0,"index":5177},{"krate":0,"index":5178},{"krate":0,"index":5179},{"krate":0,"index":5180}],"docs":"","sig":null,"attributes":[]},{"id":456,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1435903,"byte_end":1435907,"line_start":842,"line_end":842,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":5182}],"docs":"","sig":null,"attributes":[]},{"id":457,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1436230,"byte_end":1436234,"line_start":852,"line_end":852,"column_start":38,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":5186},{"krate":0,"index":5187}],"docs":"","sig":null,"attributes":[]},{"id":458,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1436445,"byte_end":1436449,"line_start":861,"line_end":861,"column_start":28,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":5189},{"krate":0,"index":5190}],"docs":"","sig":null,"attributes":[]},{"id":459,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1436641,"byte_end":1436645,"line_start":869,"line_end":869,"column_start":36,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":5192},{"krate":0,"index":5193}],"docs":"","sig":null,"attributes":[]},{"id":460,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1436914,"byte_end":1436918,"line_start":882,"line_end":882,"column_start":38,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":5196}],"docs":"","sig":null,"attributes":[]},{"id":461,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1437208,"byte_end":1437212,"line_start":893,"line_end":893,"column_start":45,"column_end":49},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":462,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1438241,"byte_end":1438255,"line_start":920,"line_end":920,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":5208},{"krate":0,"index":5209},{"krate":0,"index":5210},{"krate":0,"index":5211},{"krate":0,"index":5212}],"docs":"","sig":null,"attributes":[]},{"id":463,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1438681,"byte_end":1438695,"line_start":934,"line_end":934,"column_start":26,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":5214}],"docs":"","sig":null,"attributes":[]},{"id":464,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1438983,"byte_end":1438997,"line_start":943,"line_end":943,"column_start":38,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":5217},{"krate":0,"index":5218}],"docs":"","sig":null,"attributes":[]},{"id":465,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1439209,"byte_end":1439223,"line_start":952,"line_end":952,"column_start":28,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":5220},{"krate":0,"index":5221}],"docs":"","sig":null,"attributes":[]},{"id":466,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1439426,"byte_end":1439440,"line_start":960,"line_end":960,"column_start":36,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":5223},{"krate":0,"index":5224}],"docs":"","sig":null,"attributes":[]},{"id":467,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1439711,"byte_end":1439725,"line_start":973,"line_end":973,"column_start":38,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":5227}],"docs":"","sig":null,"attributes":[]},{"id":468,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1440016,"byte_end":1440030,"line_start":984,"line_end":984,"column_start":45,"column_end":59},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":469,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1440892,"byte_end":1440902,"line_start":1008,"line_end":1008,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":5239},{"krate":0,"index":5240},{"krate":0,"index":5241},{"krate":0,"index":5242},{"krate":0,"index":5243},{"krate":0,"index":5244}],"docs":"","sig":null,"attributes":[]},{"id":470,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1441396,"byte_end":1441406,"line_start":1024,"line_end":1024,"column_start":26,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":5246}],"docs":"","sig":null,"attributes":[]},{"id":471,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1441694,"byte_end":1441704,"line_start":1033,"line_end":1033,"column_start":38,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":5249},{"krate":0,"index":5250}],"docs":"","sig":null,"attributes":[]},{"id":472,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1441916,"byte_end":1441926,"line_start":1042,"line_end":1042,"column_start":28,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":5252},{"krate":0,"index":5253}],"docs":"","sig":null,"attributes":[]},{"id":473,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1442125,"byte_end":1442135,"line_start":1050,"line_end":1050,"column_start":36,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":5255},{"krate":0,"index":5256}],"docs":"","sig":null,"attributes":[]},{"id":474,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1442406,"byte_end":1442416,"line_start":1063,"line_end":1063,"column_start":38,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":5259}],"docs":"","sig":null,"attributes":[]},{"id":475,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1442707,"byte_end":1442717,"line_start":1074,"line_end":1074,"column_start":45,"column_end":55},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":476,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1443045,"byte_end":1443051,"line_start":1084,"line_end":1084,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":5267}],"docs":"","sig":null,"attributes":[]},{"id":477,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1443321,"byte_end":1443327,"line_start":1093,"line_end":1093,"column_start":45,"column_end":51},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":478,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1443369,"byte_end":1443375,"line_start":1094,"line_end":1094,"column_start":39,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":479,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1443416,"byte_end":1443422,"line_start":1095,"line_end":1095,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":5272},{"krate":0,"index":5273}],"docs":"","sig":null,"attributes":[]},{"id":480,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1443820,"byte_end":1443826,"line_start":1109,"line_end":1109,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":5280},{"krate":0,"index":5281}],"docs":"","sig":null,"attributes":[]},{"id":481,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1444484,"byte_end":1444490,"line_start":1134,"line_end":1134,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":5288}],"docs":"","sig":null,"attributes":[]},{"id":482,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1444740,"byte_end":1444746,"line_start":1144,"line_end":1144,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":5295},{"krate":0,"index":5296},{"krate":0,"index":5297}],"docs":"","sig":null,"attributes":[]},{"id":483,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1445774,"byte_end":1445778,"line_start":1174,"line_end":1174,"column_start":38,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":5301},{"krate":0,"index":5302}],"docs":"","sig":null,"attributes":[]},{"id":484,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1445978,"byte_end":1445982,"line_start":1184,"line_end":1184,"column_start":10,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":5305},{"krate":0,"index":5306}],"docs":"","sig":null,"attributes":[]},{"id":485,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1446457,"byte_end":1446461,"line_start":1199,"line_end":1199,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":5311}],"docs":"","sig":null,"attributes":[]},{"id":486,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1446774,"byte_end":1446782,"line_start":1211,"line_end":1211,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":5320}],"docs":"","sig":null,"attributes":[]},{"id":487,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1447039,"byte_end":1447050,"line_start":1221,"line_end":1221,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":5329},{"krate":0,"index":5330}],"docs":"","sig":null,"attributes":[]},{"id":488,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1447501,"byte_end":1447505,"line_start":1237,"line_end":1237,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":5332}],"docs":"","sig":null,"attributes":[]},{"id":489,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1448010,"byte_end":1448017,"line_start":1253,"line_end":1253,"column_start":38,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":5336},{"krate":0,"index":5337}],"docs":"","sig":null,"attributes":[]},{"id":490,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1448220,"byte_end":1448227,"line_start":1263,"line_end":1263,"column_start":10,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":5340},{"krate":0,"index":5341}],"docs":"","sig":null,"attributes":[]},{"id":491,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1448714,"byte_end":1448721,"line_start":1278,"line_end":1278,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":5346}],"docs":"","sig":null,"attributes":[]},{"id":492,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1449037,"byte_end":1449048,"line_start":1290,"line_end":1290,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":5355}],"docs":"","sig":null,"attributes":[]},{"id":493,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1449311,"byte_end":1449325,"line_start":1300,"line_end":1300,"column_start":18,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":5364},{"krate":0,"index":5365}],"docs":"","sig":null,"attributes":[]},{"id":494,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1449800,"byte_end":1449807,"line_start":1318,"line_end":1318,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":5367}],"docs":"","sig":null,"attributes":[]},{"id":495,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1450121,"byte_end":1450125,"line_start":1331,"line_end":1331,"column_start":38,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":5371},{"krate":0,"index":5372}],"docs":"","sig":null,"attributes":[]},{"id":496,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1450325,"byte_end":1450329,"line_start":1341,"line_end":1341,"column_start":10,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":5375},{"krate":0,"index":5376}],"docs":"","sig":null,"attributes":[]},{"id":497,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1450804,"byte_end":1450808,"line_start":1356,"line_end":1356,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":5381}],"docs":"","sig":null,"attributes":[]},{"id":498,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1451121,"byte_end":1451129,"line_start":1368,"line_end":1368,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":5390}],"docs":"","sig":null,"attributes":[]},{"id":499,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1451386,"byte_end":1451397,"line_start":1378,"line_end":1378,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":5399},{"krate":0,"index":5400}],"docs":"","sig":null,"attributes":[]},{"id":500,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1451848,"byte_end":1451852,"line_start":1394,"line_end":1394,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":5402}],"docs":"","sig":null,"attributes":[]},{"id":501,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1452271,"byte_end":1452280,"line_start":1409,"line_end":1409,"column_start":38,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":5406},{"krate":0,"index":5407}],"docs":"","sig":null,"attributes":[]},{"id":502,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1452485,"byte_end":1452494,"line_start":1419,"line_end":1419,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":5410},{"krate":0,"index":5411}],"docs":"","sig":null,"attributes":[]},{"id":503,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1452989,"byte_end":1452998,"line_start":1434,"line_end":1434,"column_start":34,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":5416}],"docs":"","sig":null,"attributes":[]},{"id":504,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1453316,"byte_end":1453329,"line_start":1446,"line_end":1446,"column_start":22,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":5425}],"docs":"","sig":null,"attributes":[]},{"id":505,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1453596,"byte_end":1453612,"line_start":1456,"line_end":1456,"column_start":18,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":5434},{"krate":0,"index":5435}],"docs":"","sig":null,"attributes":[]},{"id":506,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1454093,"byte_end":1454102,"line_start":1474,"line_end":1474,"column_start":26,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":5437}],"docs":"","sig":null,"attributes":[]},{"id":507,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1454436,"byte_end":1454449,"line_start":1487,"line_end":1487,"column_start":38,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":5441},{"krate":0,"index":5442}],"docs":"","sig":null,"attributes":[]},{"id":508,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1454658,"byte_end":1454671,"line_start":1497,"line_end":1497,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":5445},{"krate":0,"index":5446},{"krate":0,"index":5450},{"krate":0,"index":5451}],"docs":"","sig":null,"attributes":[]},{"id":509,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1455478,"byte_end":1455491,"line_start":1523,"line_end":1523,"column_start":34,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":5453}],"docs":"","sig":null,"attributes":[]},{"id":510,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1455922,"byte_end":1455939,"line_start":1539,"line_end":1539,"column_start":22,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":5463}],"docs":"","sig":null,"attributes":[]},{"id":511,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1456227,"byte_end":1456247,"line_start":1549,"line_end":1549,"column_start":18,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":5472},{"krate":0,"index":5473},{"krate":0,"index":5474}],"docs":"","sig":null,"attributes":[]},{"id":512,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1456902,"byte_end":1456915,"line_start":1572,"line_end":1572,"column_start":26,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":5476}],"docs":"","sig":null,"attributes":[]},{"id":513,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1458335,"byte_end":1458338,"line_start":1611,"line_end":1611,"column_start":38,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":5480},{"krate":0,"index":5481}],"docs":"","sig":null,"attributes":[]},{"id":514,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1458537,"byte_end":1458540,"line_start":1621,"line_end":1621,"column_start":10,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":5484},{"krate":0,"index":5485},{"krate":0,"index":5489},{"krate":0,"index":5490}],"docs":"","sig":null,"attributes":[]},{"id":515,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1459335,"byte_end":1459338,"line_start":1647,"line_end":1647,"column_start":34,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":5492}],"docs":"","sig":null,"attributes":[]},{"id":516,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1459767,"byte_end":1459774,"line_start":1663,"line_end":1663,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":5502}],"docs":"","sig":null,"attributes":[]},{"id":517,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1460048,"byte_end":1460058,"line_start":1673,"line_end":1673,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":5511},{"krate":0,"index":5512},{"krate":0,"index":5513}],"docs":"","sig":null,"attributes":[]},{"id":518,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1460672,"byte_end":1460675,"line_start":1694,"line_end":1694,"column_start":26,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":5515}],"docs":"","sig":null,"attributes":[]},{"id":519,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1461326,"byte_end":1461331,"line_start":1712,"line_end":1712,"column_start":38,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":5519},{"krate":0,"index":5520}],"docs":"","sig":null,"attributes":[]},{"id":520,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1461532,"byte_end":1461537,"line_start":1722,"line_end":1722,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":5523},{"krate":0,"index":5524},{"krate":0,"index":5528},{"krate":0,"index":5529},{"krate":0,"index":5530},{"krate":0,"index":5531}],"docs":"","sig":null,"attributes":[]},{"id":521,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1462676,"byte_end":1462681,"line_start":1759,"line_end":1759,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":5533}],"docs":"","sig":null,"attributes":[]},{"id":522,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1463375,"byte_end":1463384,"line_start":1781,"line_end":1781,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":5545}],"docs":"","sig":null,"attributes":[]},{"id":523,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1463720,"byte_end":1463732,"line_start":1794,"line_end":1794,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":5554},{"krate":0,"index":5555},{"krate":0,"index":5556},{"krate":0,"index":5557}],"docs":"","sig":null,"attributes":[]},{"id":524,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1464600,"byte_end":1464605,"line_start":1823,"line_end":1823,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":5559}],"docs":"","sig":null,"attributes":[]},{"id":525,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1465001,"byte_end":1465004,"line_start":1838,"line_end":1838,"column_start":38,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":5563},{"krate":0,"index":5564}],"docs":"","sig":null,"attributes":[]},{"id":526,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1465203,"byte_end":1465206,"line_start":1848,"line_end":1848,"column_start":10,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":5567},{"krate":0,"index":5568},{"krate":0,"index":5572},{"krate":0,"index":5573},{"krate":0,"index":5574},{"krate":0,"index":5575}],"docs":"","sig":null,"attributes":[]},{"id":527,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1466155,"byte_end":1466158,"line_start":1879,"line_end":1879,"column_start":34,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":5577}],"docs":"","sig":null,"attributes":[]},{"id":528,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1466679,"byte_end":1466686,"line_start":1897,"line_end":1897,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":5588}],"docs":"","sig":null,"attributes":[]},{"id":529,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1467005,"byte_end":1467015,"line_start":1910,"line_end":1910,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":5597},{"krate":0,"index":5598},{"krate":0,"index":5599},{"krate":0,"index":5600}],"docs":"","sig":null,"attributes":[]},{"id":530,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1467764,"byte_end":1467767,"line_start":1935,"line_end":1935,"column_start":26,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":5602}],"docs":"","sig":null,"attributes":[]},{"id":531,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1468193,"byte_end":1468206,"line_start":1950,"line_end":1950,"column_start":38,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":5606},{"krate":0,"index":5607}],"docs":"","sig":null,"attributes":[]},{"id":532,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1468415,"byte_end":1468428,"line_start":1960,"line_end":1960,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":5610},{"krate":0,"index":5611},{"krate":0,"index":5615},{"krate":0,"index":5616}],"docs":"","sig":null,"attributes":[]},{"id":533,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1469227,"byte_end":1469240,"line_start":1985,"line_end":1985,"column_start":34,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":5618}],"docs":"","sig":null,"attributes":[]},{"id":534,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1469686,"byte_end":1469703,"line_start":2001,"line_end":2001,"column_start":22,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":5628}],"docs":"","sig":null,"attributes":[]},{"id":535,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1470027,"byte_end":1470047,"line_start":2013,"line_end":2013,"column_start":18,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":5637},{"krate":0,"index":5638},{"krate":0,"index":5639}],"docs":"","sig":null,"attributes":[]},{"id":536,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1470766,"byte_end":1470779,"line_start":2039,"line_end":2039,"column_start":26,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":5641}],"docs":"","sig":null,"attributes":[]},{"id":537,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1471181,"byte_end":1471185,"line_start":2054,"line_end":2054,"column_start":38,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":5645},{"krate":0,"index":5646}],"docs":"","sig":null,"attributes":[]},{"id":538,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1471385,"byte_end":1471389,"line_start":2064,"line_end":2064,"column_start":10,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":5649},{"krate":0,"index":5650}],"docs":"","sig":null,"attributes":[]},{"id":539,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1471864,"byte_end":1471868,"line_start":2079,"line_end":2079,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":5655}],"docs":"","sig":null,"attributes":[]},{"id":540,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1472181,"byte_end":1472189,"line_start":2091,"line_end":2091,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":5664}],"docs":"","sig":null,"attributes":[]},{"id":541,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1472446,"byte_end":1472457,"line_start":2101,"line_end":2101,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":5673},{"krate":0,"index":5674}],"docs":"","sig":null,"attributes":[]},{"id":542,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1472908,"byte_end":1472912,"line_start":2117,"line_end":2117,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":5676}],"docs":"","sig":null,"attributes":[]},{"id":543,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1473250,"byte_end":1473256,"line_start":2131,"line_end":2131,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":5680},{"krate":0,"index":5681}],"docs":"","sig":null,"attributes":[]},{"id":544,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1473458,"byte_end":1473464,"line_start":2141,"line_end":2141,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":5684},{"krate":0,"index":5685}],"docs":"","sig":null,"attributes":[]},{"id":545,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1473947,"byte_end":1473953,"line_start":2156,"line_end":2156,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":5690}],"docs":"","sig":null,"attributes":[]},{"id":546,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1474268,"byte_end":1474278,"line_start":2168,"line_end":2168,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":5699}],"docs":"","sig":null,"attributes":[]},{"id":547,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1474539,"byte_end":1474552,"line_start":2178,"line_end":2178,"column_start":18,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":5708},{"krate":0,"index":5709}],"docs":"","sig":null,"attributes":[]},{"id":548,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1475024,"byte_end":1475030,"line_start":2196,"line_end":2196,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":5711}],"docs":"","sig":null,"attributes":[]},{"id":549,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1475451,"byte_end":1475460,"line_start":2211,"line_end":2211,"column_start":38,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":5715},{"krate":0,"index":5716}],"docs":"","sig":null,"attributes":[]},{"id":550,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1475665,"byte_end":1475674,"line_start":2221,"line_end":2221,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":5719},{"krate":0,"index":5720}],"docs":"","sig":null,"attributes":[]},{"id":551,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1476169,"byte_end":1476178,"line_start":2236,"line_end":2236,"column_start":34,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":5725}],"docs":"","sig":null,"attributes":[]},{"id":552,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1476496,"byte_end":1476509,"line_start":2248,"line_end":2248,"column_start":22,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":5734}],"docs":"","sig":null,"attributes":[]},{"id":553,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1476776,"byte_end":1476792,"line_start":2258,"line_end":2258,"column_start":18,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":5743},{"krate":0,"index":5744}],"docs":"","sig":null,"attributes":[]},{"id":554,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1477273,"byte_end":1477282,"line_start":2276,"line_end":2276,"column_start":26,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":5746}],"docs":"","sig":null,"attributes":[]},{"id":555,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1477712,"byte_end":1477723,"line_start":2291,"line_end":2291,"column_start":38,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":5750},{"krate":0,"index":5751}],"docs":"","sig":null,"attributes":[]},{"id":556,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1477930,"byte_end":1477941,"line_start":2301,"line_end":2301,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":5754},{"krate":0,"index":5755}],"docs":"","sig":null,"attributes":[]},{"id":557,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1478444,"byte_end":1478455,"line_start":2316,"line_end":2316,"column_start":34,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":5760}],"docs":"","sig":null,"attributes":[]},{"id":558,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1478775,"byte_end":1478790,"line_start":2328,"line_end":2328,"column_start":22,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":5769}],"docs":"","sig":null,"attributes":[]},{"id":559,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1479061,"byte_end":1479079,"line_start":2338,"line_end":2338,"column_start":18,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":5778},{"krate":0,"index":5779}],"docs":"","sig":null,"attributes":[]},{"id":560,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1479566,"byte_end":1479577,"line_start":2356,"line_end":2356,"column_start":26,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":5781}],"docs":"","sig":null,"attributes":[]},{"id":561,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1479917,"byte_end":1479932,"line_start":2369,"line_end":2369,"column_start":38,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":5785},{"krate":0,"index":5786}],"docs":"","sig":null,"attributes":[]},{"id":562,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1480143,"byte_end":1480158,"line_start":2379,"line_end":2379,"column_start":10,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":5789},{"krate":0,"index":5790},{"krate":0,"index":5794},{"krate":0,"index":5795}],"docs":"","sig":null,"attributes":[]},{"id":563,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1480975,"byte_end":1480990,"line_start":2405,"line_end":2405,"column_start":34,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":5797}],"docs":"","sig":null,"attributes":[]},{"id":564,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1481426,"byte_end":1481445,"line_start":2421,"line_end":2421,"column_start":22,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":5807}],"docs":"","sig":null,"attributes":[]},{"id":565,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1481738,"byte_end":1481760,"line_start":2431,"line_end":2431,"column_start":18,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":5816},{"krate":0,"index":5817},{"krate":0,"index":5818}],"docs":"","sig":null,"attributes":[]},{"id":566,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1482427,"byte_end":1482442,"line_start":2454,"line_end":2454,"column_start":26,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":5820}],"docs":"","sig":null,"attributes":[]},{"id":567,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1482814,"byte_end":1482818,"line_start":2468,"line_end":2468,"column_start":38,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":5824},{"krate":0,"index":5825}],"docs":"","sig":null,"attributes":[]},{"id":568,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1483018,"byte_end":1483022,"line_start":2478,"line_end":2478,"column_start":10,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":5828},{"krate":0,"index":5829}],"docs":"","sig":null,"attributes":[]},{"id":569,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1483497,"byte_end":1483501,"line_start":2493,"line_end":2493,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":5834}],"docs":"","sig":null,"attributes":[]},{"id":570,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1483814,"byte_end":1483822,"line_start":2505,"line_end":2505,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":5843}],"docs":"","sig":null,"attributes":[]},{"id":571,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1484079,"byte_end":1484090,"line_start":2515,"line_end":2515,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":5852},{"krate":0,"index":5853}],"docs":"","sig":null,"attributes":[]},{"id":572,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1484541,"byte_end":1484545,"line_start":2531,"line_end":2531,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":5855}],"docs":"","sig":null,"attributes":[]},{"id":573,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1485089,"byte_end":1485096,"line_start":2548,"line_end":2548,"column_start":38,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":5859},{"krate":0,"index":5860}],"docs":"","sig":null,"attributes":[]},{"id":574,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1485299,"byte_end":1485306,"line_start":2558,"line_end":2558,"column_start":10,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":5863},{"krate":0,"index":5864},{"krate":0,"index":5868},{"krate":0,"index":5869},{"krate":0,"index":5870},{"krate":0,"index":5871},{"krate":0,"index":5872},{"krate":0,"index":5873}],"docs":"","sig":null,"attributes":[]},{"id":575,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1486738,"byte_end":1486745,"line_start":2601,"line_end":2601,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":5875}],"docs":"","sig":null,"attributes":[]},{"id":576,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1487354,"byte_end":1487365,"line_start":2621,"line_end":2621,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":5887}],"docs":"","sig":null,"attributes":[]},{"id":577,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1487712,"byte_end":1487726,"line_start":2635,"line_end":2635,"column_start":18,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":5896},{"krate":0,"index":5897},{"krate":0,"index":5898},{"krate":0,"index":5899},{"krate":0,"index":5900}],"docs":"","sig":null,"attributes":[]},{"id":578,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1488650,"byte_end":1488657,"line_start":2667,"line_end":2667,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":5902}],"docs":"","sig":null,"attributes":[]},{"id":579,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1489441,"byte_end":1489445,"line_start":2689,"line_end":2689,"column_start":38,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":5906},{"krate":0,"index":5907}],"docs":"","sig":null,"attributes":[]},{"id":580,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1489645,"byte_end":1489649,"line_start":2699,"line_end":2699,"column_start":10,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":5910},{"krate":0,"index":5911},{"krate":0,"index":5915},{"krate":0,"index":5916}],"docs":"","sig":null,"attributes":[]},{"id":581,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1490382,"byte_end":1490386,"line_start":2724,"line_end":2724,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":5918}],"docs":"","sig":null,"attributes":[]},{"id":582,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1490806,"byte_end":1490814,"line_start":2740,"line_end":2740,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":5928}],"docs":"","sig":null,"attributes":[]},{"id":583,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1491121,"byte_end":1491132,"line_start":2752,"line_end":2752,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":5937},{"krate":0,"index":5938},{"krate":0,"index":5939}],"docs":"","sig":null,"attributes":[]},{"id":584,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1491750,"byte_end":1491754,"line_start":2773,"line_end":2773,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":5941}],"docs":"","sig":null,"attributes":[]},{"id":585,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1492246,"byte_end":1492250,"line_start":2790,"line_end":2790,"column_start":38,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":5945},{"krate":0,"index":5946}],"docs":"","sig":null,"attributes":[]},{"id":586,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1492450,"byte_end":1492454,"line_start":2800,"line_end":2800,"column_start":10,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":5949},{"krate":0,"index":5950},{"krate":0,"index":5954},{"krate":0,"index":5955},{"krate":0,"index":5956},{"krate":0,"index":5957}],"docs":"","sig":null,"attributes":[]},{"id":587,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1493409,"byte_end":1493413,"line_start":2831,"line_end":2831,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":5959}],"docs":"","sig":null,"attributes":[]},{"id":588,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1493928,"byte_end":1493936,"line_start":2849,"line_end":2849,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":5970}],"docs":"","sig":null,"attributes":[]},{"id":589,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1494269,"byte_end":1494280,"line_start":2862,"line_end":2862,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":5979},{"krate":0,"index":5980},{"krate":0,"index":5981},{"krate":0,"index":5982}],"docs":"","sig":null,"attributes":[]},{"id":590,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1495039,"byte_end":1495043,"line_start":2887,"line_end":2887,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":5984}],"docs":"","sig":null,"attributes":[]},{"id":591,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1495777,"byte_end":1495786,"line_start":2908,"line_end":2908,"column_start":38,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":5988},{"krate":0,"index":5989}],"docs":"","sig":null,"attributes":[]},{"id":592,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1495991,"byte_end":1496000,"line_start":2918,"line_end":2918,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":5992},{"krate":0,"index":5993},{"krate":0,"index":5997},{"krate":0,"index":5998},{"krate":0,"index":5999},{"krate":0,"index":6000}],"docs":"","sig":null,"attributes":[]},{"id":593,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1498176,"byte_end":1498185,"line_start":2972,"line_end":2972,"column_start":34,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":6002}],"docs":"","sig":null,"attributes":[]},{"id":594,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1498839,"byte_end":1498852,"line_start":2994,"line_end":2994,"column_start":22,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":6014}],"docs":"","sig":null,"attributes":[]},{"id":595,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1499196,"byte_end":1499212,"line_start":3007,"line_end":3007,"column_start":18,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":6023},{"krate":0,"index":6024},{"krate":0,"index":6025},{"krate":0,"index":6026}],"docs":"","sig":null,"attributes":[]},{"id":596,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1500094,"byte_end":1500103,"line_start":3037,"line_end":3037,"column_start":26,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":6028}],"docs":"","sig":null,"attributes":[]},{"id":597,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1500515,"byte_end":1500523,"line_start":3052,"line_end":3052,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":6032},{"krate":0,"index":6033}],"docs":"","sig":null,"attributes":[]},{"id":598,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1500727,"byte_end":1500735,"line_start":3062,"line_end":3062,"column_start":10,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":6036},{"krate":0,"index":6037},{"krate":0,"index":6041},{"krate":0,"index":6042}],"docs":"","sig":null,"attributes":[]},{"id":599,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1501499,"byte_end":1501507,"line_start":3087,"line_end":3087,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":6044}],"docs":"","sig":null,"attributes":[]},{"id":600,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1501939,"byte_end":1501951,"line_start":3103,"line_end":3103,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":6054}],"docs":"","sig":null,"attributes":[]},{"id":601,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1502269,"byte_end":1502284,"line_start":3115,"line_end":3115,"column_start":18,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":6063},{"krate":0,"index":6064},{"krate":0,"index":6065}],"docs":"","sig":null,"attributes":[]},{"id":602,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1502978,"byte_end":1502986,"line_start":3141,"line_end":3141,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":6067}],"docs":"","sig":null,"attributes":[]},{"id":603,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1503349,"byte_end":1503357,"line_start":3155,"line_end":3155,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":6071},{"krate":0,"index":6072}],"docs":"","sig":null,"attributes":[]},{"id":604,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1503561,"byte_end":1503569,"line_start":3165,"line_end":3165,"column_start":10,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":6075},{"krate":0,"index":6076},{"krate":0,"index":6080},{"krate":0,"index":6081}],"docs":"","sig":null,"attributes":[]},{"id":605,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1504322,"byte_end":1504330,"line_start":3190,"line_end":3190,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":6083}],"docs":"","sig":null,"attributes":[]},{"id":606,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1504754,"byte_end":1504766,"line_start":3206,"line_end":3206,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":6093}],"docs":"","sig":null,"attributes":[]},{"id":607,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1505081,"byte_end":1505096,"line_start":3218,"line_end":3218,"column_start":18,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":6102},{"krate":0,"index":6103},{"krate":0,"index":6104}],"docs":"","sig":null,"attributes":[]},{"id":608,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1505745,"byte_end":1505753,"line_start":3241,"line_end":3241,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":6106}],"docs":"","sig":null,"attributes":[]},{"id":609,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1506310,"byte_end":1506318,"line_start":3258,"line_end":3258,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":6110},{"krate":0,"index":6111}],"docs":"","sig":null,"attributes":[]},{"id":610,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1506522,"byte_end":1506530,"line_start":3268,"line_end":3268,"column_start":10,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":6114},{"krate":0,"index":6115},{"krate":0,"index":6119},{"krate":0,"index":6120},{"krate":0,"index":6121},{"krate":0,"index":6122}],"docs":"","sig":null,"attributes":[]},{"id":611,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1507613,"byte_end":1507621,"line_start":3303,"line_end":3303,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":6124}],"docs":"","sig":null,"attributes":[]},{"id":612,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1508382,"byte_end":1508394,"line_start":3329,"line_end":3329,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":6136}],"docs":"","sig":null,"attributes":[]},{"id":613,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1508720,"byte_end":1508735,"line_start":3342,"line_end":3342,"column_start":18,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":6145},{"krate":0,"index":6146},{"krate":0,"index":6147},{"krate":0,"index":6148}],"docs":"","sig":null,"attributes":[]},{"id":614,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1509603,"byte_end":1509611,"line_start":3370,"line_end":3370,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":6150}],"docs":"","sig":null,"attributes":[]},{"id":615,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1510034,"byte_end":1510052,"line_start":3385,"line_end":3385,"column_start":38,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":6154},{"krate":0,"index":6155}],"docs":"","sig":null,"attributes":[]},{"id":616,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1510266,"byte_end":1510284,"line_start":3395,"line_end":3395,"column_start":10,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":6158},{"krate":0,"index":6159},{"krate":0,"index":6163},{"krate":0,"index":6164},{"krate":0,"index":6165},{"krate":0,"index":6166},{"krate":0,"index":6167},{"krate":0,"index":6168},{"krate":0,"index":6169},{"krate":0,"index":6170}],"docs":"","sig":null,"attributes":[]},{"id":617,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1512906,"byte_end":1512924,"line_start":3462,"line_end":3462,"column_start":34,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":6172}],"docs":"","sig":null,"attributes":[]},{"id":618,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1513871,"byte_end":1513893,"line_start":3492,"line_end":3492,"column_start":22,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":6186}],"docs":"","sig":null,"attributes":[]},{"id":619,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1514325,"byte_end":1514350,"line_start":3507,"line_end":3507,"column_start":18,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":6195},{"krate":0,"index":6196},{"krate":0,"index":6197},{"krate":0,"index":6198},{"krate":0,"index":6199},{"krate":0,"index":6200}],"docs":"","sig":null,"attributes":[]},{"id":620,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1515686,"byte_end":1515704,"line_start":3549,"line_end":3549,"column_start":26,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":6202}],"docs":"","sig":null,"attributes":[]},{"id":621,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1516395,"byte_end":1516400,"line_start":3569,"line_end":3569,"column_start":38,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":6206},{"krate":0,"index":6207}],"docs":"","sig":null,"attributes":[]},{"id":622,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1516601,"byte_end":1516606,"line_start":3579,"line_end":3579,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":6210},{"krate":0,"index":6211},{"krate":0,"index":6215},{"krate":0,"index":6216},{"krate":0,"index":6217},{"krate":0,"index":6218},{"krate":0,"index":6219},{"krate":0,"index":6220},{"krate":0,"index":6221},{"krate":0,"index":6222},{"krate":0,"index":6223},{"krate":0,"index":6224},{"krate":0,"index":6225},{"krate":0,"index":6226},{"krate":0,"index":6227},{"krate":0,"index":6228},{"krate":0,"index":6229},{"krate":0,"index":6230},{"krate":0,"index":6231},{"krate":0,"index":6232},{"krate":0,"index":6233},{"krate":0,"index":6234},{"krate":0,"index":6235},{"krate":0,"index":6236},{"krate":0,"index":6237},{"krate":0,"index":6238},{"krate":0,"index":6239},{"krate":0,"index":6240},{"krate":0,"index":6241},{"krate":0,"index":6242},{"krate":0,"index":6243},{"krate":0,"index":6244},{"krate":0,"index":6245},{"krate":0,"index":6246},{"krate":0,"index":6247},{"krate":0,"index":6248},{"krate":0,"index":6249}],"docs":"","sig":null,"attributes":[]},{"id":623,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1525413,"byte_end":1525418,"line_start":3885,"line_end":3885,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":6251}],"docs":"","sig":null,"attributes":[]},{"id":624,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1529483,"byte_end":1529492,"line_start":3945,"line_end":3945,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":6269}],"docs":"","sig":null,"attributes":[]},{"id":625,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1529970,"byte_end":1529982,"line_start":3963,"line_end":3963,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":6278},{"krate":0,"index":6279},{"krate":0,"index":6280},{"krate":0,"index":6281},{"krate":0,"index":6282},{"krate":0,"index":6283},{"krate":0,"index":6284},{"krate":0,"index":6285},{"krate":0,"index":6286}],"docs":"","sig":null,"attributes":[]},{"id":626,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1532189,"byte_end":1532194,"line_start":4035,"line_end":4035,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":6288}],"docs":"","sig":null,"attributes":[]},{"id":627,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1540689,"byte_end":1540695,"line_start":4272,"line_end":4272,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":6292},{"krate":0,"index":6293}],"docs":"","sig":null,"attributes":[]},{"id":628,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1540897,"byte_end":1540903,"line_start":4282,"line_end":4282,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":6296},{"krate":0,"index":6297},{"krate":0,"index":6301},{"krate":0,"index":6302},{"krate":0,"index":6303},{"krate":0,"index":6304},{"krate":0,"index":6305},{"krate":0,"index":6306},{"krate":0,"index":6307},{"krate":0,"index":6308}],"docs":"","sig":null,"attributes":[]},{"id":629,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1543232,"byte_end":1543238,"line_start":4347,"line_end":4347,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":6310}],"docs":"","sig":null,"attributes":[]},{"id":630,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1544513,"byte_end":1544523,"line_start":4377,"line_end":4377,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":6324}],"docs":"","sig":null,"attributes":[]},{"id":631,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1544930,"byte_end":1544943,"line_start":4392,"line_end":4392,"column_start":18,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":6333},{"krate":0,"index":6334},{"krate":0,"index":6335},{"krate":0,"index":6336},{"krate":0,"index":6337},{"krate":0,"index":6338}],"docs":"","sig":null,"attributes":[]},{"id":632,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1546569,"byte_end":1546575,"line_start":4448,"line_end":4448,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":6340}],"docs":"","sig":null,"attributes":[]},{"id":633,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1552328,"byte_end":1552354,"line_start":51,"line_end":51,"column_start":6,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":6379},{"krate":0,"index":6380},{"krate":0,"index":6381},{"krate":0,"index":6382},{"krate":0,"index":6383},{"krate":0,"index":6384}],"docs":"","sig":null,"attributes":[]},{"id":634,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1552848,"byte_end":1552874,"line_start":67,"line_end":67,"column_start":26,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":6386}],"docs":"","sig":null,"attributes":[]},{"id":635,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1553162,"byte_end":1553188,"line_start":76,"line_end":76,"column_start":38,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":6389},{"krate":0,"index":6390}],"docs":"","sig":null,"attributes":[]},{"id":636,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1553400,"byte_end":1553426,"line_start":85,"line_end":85,"column_start":28,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":6392},{"krate":0,"index":6393}],"docs":"","sig":null,"attributes":[]},{"id":637,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1553641,"byte_end":1553667,"line_start":93,"line_end":93,"column_start":36,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":6395},{"krate":0,"index":6396}],"docs":"","sig":null,"attributes":[]},{"id":638,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1553938,"byte_end":1553964,"line_start":106,"line_end":106,"column_start":38,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":6399}],"docs":"","sig":null,"attributes":[]},{"id":639,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1554255,"byte_end":1554281,"line_start":117,"line_end":117,"column_start":45,"column_end":71},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":640,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1555186,"byte_end":1555203,"line_start":144,"line_end":144,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":6411},{"krate":0,"index":6412},{"krate":0,"index":6413},{"krate":0,"index":6414},{"krate":0,"index":6415},{"krate":0,"index":6416},{"krate":0,"index":6417},{"krate":0,"index":6418}],"docs":"","sig":null,"attributes":[]},{"id":641,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1556098,"byte_end":1556115,"line_start":169,"line_end":169,"column_start":26,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":6420}],"docs":"","sig":null,"attributes":[]},{"id":642,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1556451,"byte_end":1556468,"line_start":179,"line_end":179,"column_start":38,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":6424},{"krate":0,"index":6425}],"docs":"","sig":null,"attributes":[]},{"id":643,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1556679,"byte_end":1556696,"line_start":188,"line_end":188,"column_start":28,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":6427},{"krate":0,"index":6428}],"docs":"","sig":null,"attributes":[]},{"id":644,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1556901,"byte_end":1556918,"line_start":196,"line_end":196,"column_start":36,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":6430},{"krate":0,"index":6431}],"docs":"","sig":null,"attributes":[]},{"id":645,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1557187,"byte_end":1557204,"line_start":209,"line_end":209,"column_start":38,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":6434}],"docs":"","sig":null,"attributes":[]},{"id":646,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1557494,"byte_end":1557511,"line_start":220,"line_end":220,"column_start":45,"column_end":62},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":647,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1558934,"byte_end":1558954,"line_start":260,"line_end":260,"column_start":38,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":6444},{"krate":0,"index":6445}],"docs":"","sig":null,"attributes":[]},{"id":648,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1559170,"byte_end":1559190,"line_start":270,"line_end":270,"column_start":10,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":6448},{"krate":0,"index":6449},{"krate":0,"index":6453},{"krate":0,"index":6454},{"krate":0,"index":6455},{"krate":0,"index":6456},{"krate":0,"index":6457},{"krate":0,"index":6458},{"krate":0,"index":6459},{"krate":0,"index":6460}],"docs":"","sig":null,"attributes":[]},{"id":649,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1561778,"byte_end":1561798,"line_start":339,"line_end":339,"column_start":34,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":6462}],"docs":"","sig":null,"attributes":[]},{"id":650,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1562898,"byte_end":1562922,"line_start":369,"line_end":369,"column_start":22,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":6476}],"docs":"","sig":null,"attributes":[]},{"id":651,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1563390,"byte_end":1563417,"line_start":384,"line_end":384,"column_start":18,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":6485},{"krate":0,"index":6486},{"krate":0,"index":6487},{"krate":0,"index":6488},{"krate":0,"index":6489},{"krate":0,"index":6490}],"docs":"","sig":null,"attributes":[]},{"id":652,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1565145,"byte_end":1565165,"line_start":438,"line_end":438,"column_start":26,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":6492}],"docs":"","sig":null,"attributes":[]},{"id":653,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1565805,"byte_end":1565825,"line_start":456,"line_end":456,"column_start":38,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":6496},{"krate":0,"index":6497}],"docs":"","sig":null,"attributes":[]},{"id":654,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1566041,"byte_end":1566061,"line_start":466,"line_end":466,"column_start":10,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":6500},{"krate":0,"index":6501},{"krate":0,"index":6505},{"krate":0,"index":6506},{"krate":0,"index":6507},{"krate":0,"index":6508},{"krate":0,"index":6509},{"krate":0,"index":6510},{"krate":0,"index":6511},{"krate":0,"index":6512},{"krate":0,"index":6513},{"krate":0,"index":6514}],"docs":"","sig":null,"attributes":[]},{"id":655,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1569828,"byte_end":1569848,"line_start":575,"line_end":575,"column_start":34,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":6516}],"docs":"","sig":null,"attributes":[]},{"id":656,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1571129,"byte_end":1571153,"line_start":611,"line_end":611,"column_start":22,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":6531}],"docs":"","sig":null,"attributes":[]},{"id":657,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1571720,"byte_end":1571747,"line_start":627,"line_end":627,"column_start":18,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":6540},{"krate":0,"index":6541},{"krate":0,"index":6542},{"krate":0,"index":6543},{"krate":0,"index":6544},{"krate":0,"index":6545},{"krate":0,"index":6546}],"docs":"","sig":null,"attributes":[]},{"id":658,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1573912,"byte_end":1573932,"line_start":689,"line_end":689,"column_start":26,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":6548}],"docs":"","sig":null,"attributes":[]},{"id":659,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1574626,"byte_end":1574646,"line_start":708,"line_end":708,"column_start":38,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":6552},{"krate":0,"index":6553}],"docs":"","sig":null,"attributes":[]},{"id":660,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1574862,"byte_end":1574882,"line_start":718,"line_end":718,"column_start":10,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":6556},{"krate":0,"index":6557},{"krate":0,"index":6561},{"krate":0,"index":6562},{"krate":0,"index":6563},{"krate":0,"index":6564},{"krate":0,"index":6565},{"krate":0,"index":6566},{"krate":0,"index":6567},{"krate":0,"index":6569},{"krate":0,"index":6570},{"krate":0,"index":6572}],"docs":"","sig":null,"attributes":[]},{"id":661,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1580112,"byte_end":1580132,"line_start":865,"line_end":865,"column_start":34,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":6574}],"docs":"","sig":null,"attributes":[]},{"id":662,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1581795,"byte_end":1581819,"line_start":909,"line_end":909,"column_start":22,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":6589}],"docs":"","sig":null,"attributes":[]},{"id":663,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1582381,"byte_end":1582408,"line_start":925,"line_end":925,"column_start":18,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":6598},{"krate":0,"index":6599},{"krate":0,"index":6600},{"krate":0,"index":6601},{"krate":0,"index":6602},{"krate":0,"index":6603},{"krate":0,"index":6604}],"docs":"","sig":null,"attributes":[]},{"id":664,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1584846,"byte_end":1584866,"line_start":997,"line_end":997,"column_start":26,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":6606}],"docs":"","sig":null,"attributes":[]},{"id":665,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1585483,"byte_end":1585495,"line_start":1015,"line_end":1015,"column_start":38,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":6610},{"krate":0,"index":6611}],"docs":"","sig":null,"attributes":[]},{"id":666,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1585703,"byte_end":1585715,"line_start":1025,"line_end":1025,"column_start":10,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":6614},{"krate":0,"index":6615},{"krate":0,"index":6619},{"krate":0,"index":6620},{"krate":0,"index":6621},{"krate":0,"index":6622},{"krate":0,"index":6623},{"krate":0,"index":6624},{"krate":0,"index":6625},{"krate":0,"index":6626},{"krate":0,"index":6627},{"krate":0,"index":6628},{"krate":0,"index":6629},{"krate":0,"index":6630},{"krate":0,"index":6631},{"krate":0,"index":6632},{"krate":0,"index":6633},{"krate":0,"index":6634},{"krate":0,"index":6635},{"krate":0,"index":6636},{"krate":0,"index":6637},{"krate":0,"index":6638},{"krate":0,"index":6639},{"krate":0,"index":6640},{"krate":0,"index":6641},{"krate":0,"index":6642},{"krate":0,"index":6643},{"krate":0,"index":6644},{"krate":0,"index":6645},{"krate":0,"index":6646},{"krate":0,"index":6647},{"krate":0,"index":6648},{"krate":0,"index":6649},{"krate":0,"index":6650},{"krate":0,"index":6651},{"krate":0,"index":6652},{"krate":0,"index":6653},{"krate":0,"index":6654},{"krate":0,"index":6655},{"krate":0,"index":6656}],"docs":"","sig":null,"attributes":[]},{"id":667,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1596167,"byte_end":1596179,"line_start":1395,"line_end":1395,"column_start":34,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":6658}],"docs":"","sig":null,"attributes":[]},{"id":668,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1600570,"byte_end":1600586,"line_start":1457,"line_end":1457,"column_start":22,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":6677}],"docs":"","sig":null,"attributes":[]},{"id":669,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1601178,"byte_end":1601197,"line_start":1475,"line_end":1475,"column_start":18,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":6686},{"krate":0,"index":6687},{"krate":0,"index":6688},{"krate":0,"index":6689},{"krate":0,"index":6690},{"krate":0,"index":6691},{"krate":0,"index":6692},{"krate":0,"index":6693},{"krate":0,"index":6694}],"docs":"","sig":null,"attributes":[]},{"id":670,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1603613,"byte_end":1603625,"line_start":1549,"line_end":1549,"column_start":26,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":6696}],"docs":"","sig":null,"attributes":[]},{"id":671,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1618316,"byte_end":1618325,"line_start":36,"line_end":36,"column_start":38,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":6732},{"krate":0,"index":6733}],"docs":"","sig":null,"attributes":[]},{"id":672,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1618530,"byte_end":1618539,"line_start":46,"line_end":46,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":6736},{"krate":0,"index":6737},{"krate":0,"index":6741},{"krate":0,"index":6742},{"krate":0,"index":6743},{"krate":0,"index":6744}],"docs":"","sig":null,"attributes":[]},{"id":673,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1619614,"byte_end":1619623,"line_start":80,"line_end":80,"column_start":34,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":6746}],"docs":"","sig":null,"attributes":[]},{"id":674,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1620258,"byte_end":1620271,"line_start":102,"line_end":102,"column_start":22,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":6758}],"docs":"","sig":null,"attributes":[]},{"id":675,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1620597,"byte_end":1620613,"line_start":115,"line_end":115,"column_start":18,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":6767},{"krate":0,"index":6768},{"krate":0,"index":6769},{"krate":0,"index":6770}],"docs":"","sig":null,"attributes":[]},{"id":676,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1621423,"byte_end":1621432,"line_start":142,"line_end":142,"column_start":26,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":6772}],"docs":"","sig":null,"attributes":[]},{"id":677,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1621834,"byte_end":1621840,"line_start":157,"line_end":157,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":6776},{"krate":0,"index":6777}],"docs":"","sig":null,"attributes":[]},{"id":678,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1622042,"byte_end":1622048,"line_start":167,"line_end":167,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":6780},{"krate":0,"index":6781},{"krate":0,"index":6785},{"krate":0,"index":6786},{"krate":0,"index":6787},{"krate":0,"index":6788},{"krate":0,"index":6789},{"krate":0,"index":6790},{"krate":0,"index":6791},{"krate":0,"index":6792},{"krate":0,"index":6793},{"krate":0,"index":6794},{"krate":0,"index":6795},{"krate":0,"index":6796},{"krate":0,"index":6797},{"krate":0,"index":6798},{"krate":0,"index":6799},{"krate":0,"index":6800},{"krate":0,"index":6801},{"krate":0,"index":6802},{"krate":0,"index":6803},{"krate":0,"index":6804},{"krate":0,"index":6805},{"krate":0,"index":6806},{"krate":0,"index":6807},{"krate":0,"index":6808},{"krate":0,"index":6809},{"krate":0,"index":6810},{"krate":0,"index":6811},{"krate":0,"index":6812},{"krate":0,"index":6813},{"krate":0,"index":6814},{"krate":0,"index":6815}],"docs":"","sig":null,"attributes":[]},{"id":679,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1630607,"byte_end":1630613,"line_start":475,"line_end":475,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":6817}],"docs":"","sig":null,"attributes":[]},{"id":680,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1634210,"byte_end":1634220,"line_start":527,"line_end":527,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":6833}],"docs":"","sig":null,"attributes":[]},{"id":681,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1634684,"byte_end":1634697,"line_start":543,"line_end":543,"column_start":18,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":6842},{"krate":0,"index":6843},{"krate":0,"index":6844},{"krate":0,"index":6845},{"krate":0,"index":6846},{"krate":0,"index":6847},{"krate":0,"index":6848}],"docs":"","sig":null,"attributes":[]},{"id":682,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1636442,"byte_end":1636448,"line_start":599,"line_end":599,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":6850}],"docs":"","sig":null,"attributes":[]},{"id":683,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1657134,"byte_end":1657143,"line_start":218,"line_end":218,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":6943}],"docs":"","sig":null,"attributes":[]},{"id":684,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1657422,"byte_end":1657431,"line_start":229,"line_end":229,"column_start":32,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":6947},{"krate":0,"index":6948}],"docs":"","sig":null,"attributes":[]},{"id":685,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1669508,"byte_end":1669515,"line_start":508,"line_end":508,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":6960},{"krate":0,"index":6961},{"krate":0,"index":6963},{"krate":0,"index":6969},{"krate":0,"index":6970},{"krate":0,"index":6975},{"krate":0,"index":6977},{"krate":0,"index":6978},{"krate":0,"index":6979},{"krate":0,"index":6983},{"krate":0,"index":6991},{"krate":0,"index":7001},{"krate":0,"index":7003}],"docs":"","sig":null,"attributes":[]},{"id":686,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1703444,"byte_end":1703450,"line_start":1333,"line_end":1333,"column_start":15,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":7015},{"krate":0,"index":7016},{"krate":0,"index":7017},{"krate":0,"index":7018}],"docs":"","sig":null,"attributes":[]},{"id":687,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1705539,"byte_end":1705552,"line_start":1396,"line_end":1396,"column_start":18,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":7020}],"docs":"","sig":null,"attributes":[]},{"id":688,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1705738,"byte_end":1705751,"line_start":1407,"line_end":1407,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":7022},{"krate":0,"index":7023},{"krate":0,"index":7024},{"krate":0,"index":7025},{"krate":0,"index":7026},{"krate":0,"index":7027}],"docs":"","sig":null,"attributes":[]},{"id":689,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1761477,"byte_end":1761488,"line_start":45,"line_end":45,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":7081},{"krate":0,"index":7082},{"krate":0,"index":7083},{"krate":0,"index":7084},{"krate":0,"index":7085},{"krate":0,"index":7086},{"krate":0,"index":7087},{"krate":0,"index":7088}],"docs":"","sig":null,"attributes":[]},{"id":690,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1768396,"byte_end":1768414,"line_start":245,"line_end":245,"column_start":18,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":7090}],"docs":"","sig":null,"attributes":[]},{"id":691,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1768543,"byte_end":1768554,"line_start":253,"line_end":253,"column_start":29,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":7092}],"docs":"","sig":null,"attributes":[]},{"id":692,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1769143,"byte_end":1769154,"line_start":271,"line_end":271,"column_start":28,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":7094}],"docs":"","sig":null,"attributes":[]},{"id":693,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/tensor.rs","byte_start":1777697,"byte_end":1777703,"line_start":99,"line_end":99,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":7146},{"krate":0,"index":7147},{"krate":0,"index":7148},{"krate":0,"index":7149},{"krate":0,"index":7150},{"krate":0,"index":7151},{"krate":0,"index":7152},{"krate":0,"index":7153},{"krate":0,"index":7154},{"krate":0,"index":7155},{"krate":0,"index":7157},{"krate":0,"index":7158},{"krate":0,"index":7159},{"krate":0,"index":7160}],"docs":"","sig":null,"attributes":[]},{"id":694,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/bit_chunk_iterator.rs","byte_start":1792845,"byte_end":1792854,"line_start":31,"line_end":31,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":7171}],"docs":"","sig":null,"attributes":[]},{"id":695,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/bit_chunk_iterator.rs","byte_start":1793532,"byte_end":1793541,"line_start":60,"line_end":60,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":7174},{"krate":0,"index":7175},{"krate":0,"index":7176},{"krate":0,"index":7177}],"docs":"","sig":null,"attributes":[]},{"id":696,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/bit_chunk_iterator.rs","byte_start":1795215,"byte_end":1795224,"line_start":113,"line_end":113,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":7180},{"krate":0,"index":7181},{"krate":0,"index":7182}],"docs":"","sig":null,"attributes":[]},{"id":697,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/bit_chunk_iterator.rs","byte_start":1795385,"byte_end":1795401,"line_start":122,"line_end":122,"column_start":19,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":7184},{"krate":0,"index":7185},{"krate":0,"index":7186}],"docs":"","sig":null,"attributes":[]},{"id":698,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/bit_chunk_iterator.rs","byte_start":1796646,"byte_end":1796662,"line_start":164,"line_end":164,"column_start":28,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":7188}],"docs":"","sig":null,"attributes":[]},{"id":705,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/integration_util.rs","byte_start":1819155,"byte_end":1819169,"line_start":61,"line_end":61,"column_start":23,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":7293}],"docs":"","sig":null,"attributes":[]},{"id":716,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/integration_util.rs","byte_start":1821422,"byte_end":1821431,"line_start":138,"line_end":138,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":7295}],"docs":"","sig":null,"attributes":[]},{"id":717,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/integration_util.rs","byte_start":1821897,"byte_end":1821912,"line_start":154,"line_end":154,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":7298}],"docs":"","sig":null,"attributes":[]},{"id":718,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/integration_util.rs","byte_start":1822408,"byte_end":1822422,"line_start":172,"line_end":172,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":7300},{"krate":0,"index":7301}],"docs":"","sig":null,"attributes":[]},{"id":719,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/integration_util.rs","byte_start":1823287,"byte_end":1823301,"line_start":200,"line_end":200,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":7303},{"krate":0,"index":7307}],"docs":"","sig":null,"attributes":[]},{"id":720,"kind":"Inherent","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/string_writer.rs","byte_start":1858628,"byte_end":1858640,"line_start":70,"line_end":70,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":7335}],"docs":"","sig":null,"attributes":[]},{"id":721,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/string_writer.rs","byte_start":1858762,"byte_end":1858774,"line_start":78,"line_end":78,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":7337}],"docs":"","sig":null,"attributes":[]},{"id":722,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/string_writer.rs","byte_start":1858851,"byte_end":1858863,"line_start":84,"line_end":84,"column_start":19,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":7339}],"docs":"","sig":null,"attributes":[]},{"id":723,"kind":"Direct","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/string_writer.rs","byte_start":1858952,"byte_end":1858964,"line_start":90,"line_end":90,"column_start":16,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":7341},{"krate":0,"index":7342}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":7083,"byte_end":7088,"line_start":139,"line_end":139,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":4}},{"kind":"Mod","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":7098,"byte_end":7104,"line_start":140,"line_end":140,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":2532}},{"kind":"Mod","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":7114,"byte_end":7120,"line_start":141,"line_end":141,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":2575}},{"kind":"Mod","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":7130,"byte_end":7135,"line_start":142,"line_end":142,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":2723}},{"kind":"Mod","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":7145,"byte_end":7152,"line_start":143,"line_end":143,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":2776}},{"kind":"Mod","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/mod.rs","byte_start":597658,"byte_end":597665,"line_start":20,"line_end":20,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":2777}},{"kind":"Mod","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/mod.rs","byte_start":598912,"byte_end":598921,"line_start":20,"line_end":20,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":2778}},{"kind":"Mod","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/mod.rs","byte_start":598931,"byte_end":598941,"line_start":21,"line_end":21,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":2836}},{"kind":"Mod","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/mod.rs","byte_start":598951,"byte_end":598958,"line_start":22,"line_end":22,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":2915}},{"kind":"Mod","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/mod.rs","byte_start":598968,"byte_end":598972,"line_start":23,"line_end":23,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":2984}},{"kind":"Mod","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/mod.rs","byte_start":598982,"byte_end":598992,"line_start":24,"line_end":24,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":3089}},{"kind":"Mod","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/mod.rs","byte_start":599002,"byte_end":599008,"line_start":25,"line_end":25,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":3186}},{"kind":"Mod","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/mod.rs","byte_start":599018,"byte_end":599024,"line_start":26,"line_end":26,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":3202}},{"kind":"Mod","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/mod.rs","byte_start":599034,"byte_end":599040,"line_start":27,"line_end":27,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":3240}},{"kind":"Mod","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/mod.rs","byte_start":599050,"byte_end":599055,"line_start":28,"line_end":28,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":3268}},{"kind":"Mod","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/mod.rs","byte_start":599065,"byte_end":599069,"line_start":29,"line_end":29,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":3273}},{"kind":"Mod","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/mod.rs","byte_start":599079,"byte_end":599088,"line_start":30,"line_end":30,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":3358}},{"kind":"Mod","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/mod.rs","byte_start":599098,"byte_end":599102,"line_start":31,"line_end":31,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":3387}},{"kind":"Mod","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/mod.rs","byte_start":599112,"byte_end":599120,"line_start":32,"line_end":32,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":3471}},{"kind":"Mod","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":7162,"byte_end":7165,"line_start":144,"line_end":144,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":3536}},{"kind":"Mod","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/mod.rs","byte_start":1023264,"byte_end":1023270,"line_start":20,"line_end":20,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":3537}},{"kind":"Mod","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/mod.rs","byte_start":1023280,"byte_end":1023286,"line_start":21,"line_end":21,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":3690}},{"kind":"Mod","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":7175,"byte_end":7184,"line_start":145,"line_end":145,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":3754}},{"kind":"Mod","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":7194,"byte_end":7199,"line_start":146,"line_end":146,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":3959}},{"kind":"Mod","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":7209,"byte_end":7212,"line_start":147,"line_end":147,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":3991}},{"kind":"Mod","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":7222,"byte_end":7225,"line_start":148,"line_end":148,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":4076}},{"kind":"Mod","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/mod.rs","byte_start":1243685,"byte_end":1243692,"line_start":21,"line_end":21,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":4077}},{"kind":"Mod","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/mod.rs","byte_start":1243702,"byte_end":1243708,"line_start":22,"line_end":22,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":4152}},{"kind":"Mod","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/mod.rs","byte_start":1243718,"byte_end":1243724,"line_start":23,"line_end":23,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":4297}},{"kind":"Mod","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/mod.rs","byte_start":1243934,"byte_end":1243937,"line_start":30,"line_end":30,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":4411}},{"kind":"Mod","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/mod.rs","byte_start":1351713,"byte_end":1351717,"line_start":23,"line_end":23,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":4412}},{"kind":"Mod","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/mod.rs","byte_start":1351749,"byte_end":1351756,"line_start":25,"line_end":25,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":4535}},{"kind":"Mod","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/mod.rs","byte_start":1351788,"byte_end":1351794,"line_start":27,"line_end":27,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":4908}},{"kind":"Mod","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/mod.rs","byte_start":1351826,"byte_end":1351838,"line_start":29,"line_end":29,"column_start":9,"column_end":21},"ref_id":{"krate":0,"index":6361}},{"kind":"Mod","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/mod.rs","byte_start":1351870,"byte_end":1351876,"line_start":31,"line_end":31,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":6717}},{"kind":"Mod","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":7235,"byte_end":7239,"line_start":149,"line_end":149,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":6881}},{"kind":"Mod","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/mod.rs","byte_start":1648909,"byte_end":1648915,"line_start":20,"line_end":20,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":6882}},{"kind":"Mod","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":7249,"byte_end":7255,"line_start":150,"line_end":150,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":7035}},{"kind":"Mod","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":7265,"byte_end":7277,"line_start":151,"line_end":151,"column_start":9,"column_end":21},"ref_id":{"krate":0,"index":7067}},{"kind":"Mod","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":7287,"byte_end":7293,"line_start":152,"line_end":152,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":7099}},{"kind":"Mod","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/lib.rs","byte_start":7303,"byte_end":7307,"line_start":153,"line_end":153,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":7161}},{"kind":"Mod","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/mod.rs","byte_start":1791445,"byte_end":1791463,"line_start":18,"line_end":18,"column_start":9,"column_end":27},"ref_id":{"krate":0,"index":7162}},{"kind":"Mod","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/mod.rs","byte_start":1791473,"byte_end":1791481,"line_start":19,"line_end":19,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":7189}},{"kind":"Mod","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/mod.rs","byte_start":1791491,"byte_end":1791498,"line_start":20,"line_end":20,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":7201}},{"kind":"Mod","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/mod.rs","byte_start":1791508,"byte_end":1791524,"line_start":21,"line_end":21,"column_start":9,"column_end":25},"ref_id":{"krate":0,"index":7262}},{"kind":"Mod","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/mod.rs","byte_start":1791612,"byte_end":1791625,"line_start":25,"line_end":25,"column_start":9,"column_end":22},"ref_id":{"krate":0,"index":7320}},{"kind":"Mod","span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/mod.rs","byte_start":1791635,"byte_end":1791644,"line_start":26,"line_end":26,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":7343}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":21062,"byte_end":21067,"line_start":30,"line_end":30,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":2,"index":8887},"to":{"krate":0,"index":32}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":21070,"byte_end":21074,"line_start":30,"line_end":30,"column_start":31,"column_end":35},"kind":"SuperTrait","from":{"krate":2,"index":2853},"to":{"krate":0,"index":32}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":21077,"byte_end":21081,"line_start":30,"line_end":30,"column_start":38,"column_end":42},"kind":"SuperTrait","from":{"krate":2,"index":2865},"to":{"krate":0,"index":32}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array.rs","byte_start":21084,"byte_end":21093,"line_start":30,"line_end":30,"column_start":45,"column_end":54},"kind":"SuperTrait","from":{"krate":0,"index":1706},"to":{"krate":0,"index":32}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":35051,"byte_end":35066,"line_start":36,"line_end":36,"column_start":34,"column_end":49},"kind":"SuperTrait","from":{"krate":0,"index":477},"to":{"krate":0,"index":123}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":35495,"byte_end":35513,"line_start":54,"line_end":54,"column_start":41,"column_end":59},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":129},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":38984,"byte_end":39002,"line_start":150,"line_end":150,"column_start":36,"column_end":54},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":129},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":39209,"byte_end":39227,"line_start":157,"line_end":157,"column_start":56,"column_end":74},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":129},"to":{"krate":2,"index":8887}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":39566,"byte_end":39584,"line_start":167,"line_end":167,"column_start":51,"column_end":69},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":129},"to":{"krate":0,"index":32}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":40264,"byte_end":40282,"line_start":192,"line_end":192,"column_start":9,"column_end":27},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":129},"to":{"krate":2,"index":2759}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":41042,"byte_end":41060,"line_start":216,"line_end":216,"column_start":9,"column_end":27},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":129},"to":{"krate":2,"index":7143}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":43051,"byte_end":43069,"line_start":272,"line_end":272,"column_start":9,"column_end":27},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":129},"to":{"krate":2,"index":2759}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":43261,"byte_end":43279,"line_start":280,"line_end":280,"column_start":9,"column_end":27},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":129},"to":{"krate":2,"index":2759}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":43455,"byte_end":43473,"line_start":287,"line_end":287,"column_start":62,"column_end":80},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":129},"to":{"krate":2,"index":2759}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":43758,"byte_end":43778,"line_start":300,"line_end":300,"column_start":6,"column_end":26},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":185},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":45069,"byte_end":45089,"line_start":344,"line_end":344,"column_start":29,"column_end":49},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":185},"to":{"krate":2,"index":2759}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":45617,"byte_end":45637,"line_start":359,"line_end":359,"column_start":37,"column_end":57},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":185},"to":{"krate":2,"index":2759}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":46872,"byte_end":46892,"line_start":397,"line_end":397,"column_start":29,"column_end":49},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":185},"to":{"krate":2,"index":2759}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":47563,"byte_end":47583,"line_start":418,"line_end":418,"column_start":35,"column_end":55},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":185},"to":{"krate":2,"index":2759}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":48523,"byte_end":48543,"line_start":444,"line_end":444,"column_start":21,"column_end":41},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":185},"to":{"krate":2,"index":8887}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":48845,"byte_end":48865,"line_start":454,"line_end":454,"column_start":16,"column_end":36},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":185},"to":{"krate":0,"index":32}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":49700,"byte_end":49712,"line_start":487,"line_end":487,"column_start":6,"column_end":18},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":216},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":52297,"byte_end":52309,"line_start":568,"line_end":568,"column_start":29,"column_end":41},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":216},"to":{"krate":2,"index":2759}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":52974,"byte_end":52986,"line_start":591,"line_end":591,"column_start":21,"column_end":33},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":216},"to":{"krate":2,"index":8887}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_binary.rs","byte_start":53291,"byte_end":53303,"line_start":601,"line_end":601,"column_start":16,"column_end":28},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":216},"to":{"krate":0,"index":32}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_boolean.rs","byte_start":70395,"byte_end":70407,"line_start":37,"line_end":37,"column_start":21,"column_end":33},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":288},"to":{"krate":2,"index":8887}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_boolean.rs","byte_start":70666,"byte_end":70678,"line_start":47,"line_end":47,"column_start":6,"column_end":18},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":288},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_boolean.rs","byte_start":71581,"byte_end":71593,"line_start":79,"line_end":79,"column_start":16,"column_end":28},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":288},"to":{"krate":0,"index":32}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_boolean.rs","byte_start":72233,"byte_end":72245,"line_start":103,"line_end":103,"column_start":26,"column_end":38},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":288},"to":{"krate":2,"index":2759}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_boolean.rs","byte_start":72818,"byte_end":72830,"line_start":122,"line_end":122,"column_start":34,"column_end":46},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":288},"to":{"krate":2,"index":2759}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_boolean.rs","byte_start":72962,"byte_end":72974,"line_start":128,"line_end":128,"column_start":29,"column_end":41},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":288},"to":{"krate":2,"index":2759}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_boolean.rs","byte_start":73548,"byte_end":73560,"line_start":152,"line_end":152,"column_start":10,"column_end":22},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":288},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_boolean.rs","byte_start":73745,"byte_end":73757,"line_start":159,"line_end":159,"column_start":55,"column_end":67},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":288},"to":{"krate":2,"index":7143}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_dictionary.rs","byte_start":80694,"byte_end":80709,"line_start":72,"line_end":72,"column_start":33,"column_end":48},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":393},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_dictionary.rs","byte_start":82499,"byte_end":82514,"line_start":131,"line_end":131,"column_start":52,"column_end":67},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":393},"to":{"krate":2,"index":2759}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_dictionary.rs","byte_start":83954,"byte_end":83969,"line_start":173,"line_end":173,"column_start":9,"column_end":24},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":393},"to":{"krate":2,"index":7143}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_dictionary.rs","byte_start":85086,"byte_end":85101,"line_start":201,"line_end":201,"column_start":9,"column_end":24},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":393},"to":{"krate":2,"index":7143}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_dictionary.rs","byte_start":85684,"byte_end":85699,"line_start":219,"line_end":219,"column_start":39,"column_end":54},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":393},"to":{"krate":0,"index":32}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_dictionary.rs","byte_start":86383,"byte_end":86398,"line_start":245,"line_end":245,"column_start":44,"column_end":59},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":393},"to":{"krate":2,"index":8887}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_list.rs","byte_start":93883,"byte_end":93898,"line_start":33,"line_end":33,"column_start":28,"column_end":43},"kind":"SuperTrait","from":{"krate":0,"index":3812},"to":{"krate":0,"index":477}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_list.rs","byte_start":93901,"byte_end":93904,"line_start":33,"line_end":33,"column_start":46,"column_end":49},"kind":"SuperTrait","from":{"krate":22,"index":923},"to":{"krate":0,"index":477}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_list.rs","byte_start":93907,"byte_end":93910,"line_start":33,"line_end":33,"column_start":52,"column_end":55},"kind":"SuperTrait","from":{"krate":2,"index":2540},"to":{"krate":0,"index":477}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_list.rs","byte_start":93923,"byte_end":93932,"line_start":33,"line_end":33,"column_start":68,"column_end":77},"kind":"SuperTrait","from":{"krate":2,"index":2951},"to":{"krate":0,"index":477}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_list.rs","byte_start":94529,"byte_end":94545,"line_start":65,"line_end":65,"column_start":35,"column_end":51},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":486},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_list.rs","byte_start":95856,"byte_end":95872,"line_start":107,"line_end":107,"column_start":58,"column_end":74},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":486},"to":{"krate":2,"index":2759}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_list.rs","byte_start":96778,"byte_end":96794,"line_start":137,"line_end":137,"column_start":55,"column_end":71},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":486},"to":{"krate":0,"index":32}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_list.rs","byte_start":97464,"byte_end":97480,"line_start":161,"line_end":161,"column_start":50,"column_end":66},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":486},"to":{"krate":2,"index":8887}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_list.rs","byte_start":98429,"byte_end":98447,"line_start":187,"line_end":187,"column_start":6,"column_end":24},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":515},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_list.rs","byte_start":99550,"byte_end":99568,"line_start":226,"line_end":226,"column_start":29,"column_end":47},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":515},"to":{"krate":2,"index":2759}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_list.rs","byte_start":100674,"byte_end":100692,"line_start":262,"line_end":262,"column_start":16,"column_end":34},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":515},"to":{"krate":0,"index":32}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_list.rs","byte_start":101444,"byte_end":101462,"line_start":288,"line_end":288,"column_start":21,"column_end":39},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":515},"to":{"krate":2,"index":8887}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_primitive.rs","byte_start":122542,"byte_end":122556,"line_start":57,"line_end":57,"column_start":29,"column_end":43},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":585},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_primitive.rs","byte_start":123850,"byte_end":123864,"line_start":99,"line_end":99,"column_start":39,"column_end":53},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":585},"to":{"krate":0,"index":32}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_primitive.rs","byte_start":128463,"byte_end":128477,"line_start":215,"line_end":215,"column_start":47,"column_end":61},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":585},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_primitive.rs","byte_start":129517,"byte_end":129531,"line_start":242,"line_end":242,"column_start":44,"column_end":58},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":585},"to":{"krate":2,"index":8887}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_primitive.rs","byte_start":131053,"byte_end":131067,"line_start":282,"line_end":282,"column_start":33,"column_end":47},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":585},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_primitive.rs","byte_start":131321,"byte_end":131335,"line_start":290,"line_end":290,"column_start":27,"column_end":41},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":585},"to":{"krate":2,"index":7143}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_primitive.rs","byte_start":134645,"byte_end":134659,"line_start":380,"line_end":380,"column_start":29,"column_end":43},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":585},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_primitive.rs","byte_start":135131,"byte_end":135145,"line_start":392,"line_end":392,"column_start":29,"column_end":43},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":585},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_primitive.rs","byte_start":136483,"byte_end":136497,"line_start":424,"line_end":424,"column_start":52,"column_end":66},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":585},"to":{"krate":2,"index":2759}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_string.rs","byte_start":151823,"byte_end":151838,"line_start":33,"line_end":33,"column_start":34,"column_end":49},"kind":"SuperTrait","from":{"krate":0,"index":477},"to":{"krate":0,"index":706}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_string.rs","byte_start":152307,"byte_end":152325,"line_start":52,"line_end":52,"column_start":41,"column_end":59},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":712},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_string.rs","byte_start":155806,"byte_end":155824,"line_start":152,"line_end":152,"column_start":9,"column_end":27},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":712},"to":{"krate":2,"index":7143}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_string.rs","byte_start":157567,"byte_end":157585,"line_start":202,"line_end":202,"column_start":36,"column_end":54},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":712},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_string.rs","byte_start":157792,"byte_end":157810,"line_start":209,"line_end":209,"column_start":56,"column_end":74},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":712},"to":{"krate":2,"index":8887}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_string.rs","byte_start":158149,"byte_end":158167,"line_start":219,"line_end":219,"column_start":51,"column_end":69},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":712},"to":{"krate":0,"index":32}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_string.rs","byte_start":158847,"byte_end":158865,"line_start":244,"line_end":244,"column_start":9,"column_end":27},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":712},"to":{"krate":2,"index":2759}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_string.rs","byte_start":159616,"byte_end":159634,"line_start":268,"line_end":268,"column_start":9,"column_end":27},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":712},"to":{"krate":2,"index":2759}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_string.rs","byte_start":159824,"byte_end":159842,"line_start":276,"line_end":276,"column_start":9,"column_end":27},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":712},"to":{"krate":2,"index":2759}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_string.rs","byte_start":160426,"byte_end":160444,"line_start":291,"line_end":291,"column_start":62,"column_end":80},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":712},"to":{"krate":2,"index":2759}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_struct.rs","byte_start":166477,"byte_end":166488,"line_start":39,"line_end":39,"column_start":6,"column_end":17},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":830},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_struct.rs","byte_start":167732,"byte_end":167743,"line_start":80,"line_end":80,"column_start":29,"column_end":40},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":830},"to":{"krate":2,"index":2759}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_struct.rs","byte_start":168219,"byte_end":168230,"line_start":95,"line_end":95,"column_start":41,"column_end":52},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":830},"to":{"krate":2,"index":2766}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_struct.rs","byte_start":170860,"byte_end":170871,"line_start":164,"line_end":164,"column_start":16,"column_end":27},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":830},"to":{"krate":0,"index":32}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_struct.rs","byte_start":171656,"byte_end":171667,"line_start":193,"line_end":193,"column_start":39,"column_end":50},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":830},"to":{"krate":2,"index":2759}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_struct.rs","byte_start":172591,"byte_end":172602,"line_start":220,"line_end":220,"column_start":21,"column_end":32},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":830},"to":{"krate":2,"index":8887}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_struct.rs","byte_start":173177,"byte_end":173188,"line_start":239,"line_end":239,"column_start":49,"column_end":60},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":830},"to":{"krate":2,"index":2759}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_union.rs","byte_start":186980,"byte_end":186990,"line_start":94,"line_end":94,"column_start":6,"column_end":16},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":906},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_union.rs","byte_start":193834,"byte_end":193844,"line_start":263,"line_end":263,"column_start":29,"column_end":39},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":906},"to":{"krate":2,"index":2759}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_union.rs","byte_start":194091,"byte_end":194101,"line_start":273,"line_end":273,"column_start":16,"column_end":26},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":906},"to":{"krate":0,"index":32}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/array_union.rs","byte_start":195051,"byte_end":195061,"line_start":306,"line_end":306,"column_start":21,"column_end":31},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":906},"to":{"krate":2,"index":8887}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":217769,"byte_end":217782,"line_start":89,"line_end":89,"column_start":26,"column_end":39},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":7476},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":223564,"byte_end":223584,"line_start":299,"line_end":299,"column_start":6,"column_end":26},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":7484},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":226673,"byte_end":226676,"line_start":402,"line_end":402,"column_start":25,"column_end":28},"kind":"SuperTrait","from":{"krate":2,"index":3516},"to":{"krate":0,"index":999}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":227888,"byte_end":227902,"line_start":437,"line_end":437,"column_start":6,"column_end":20},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":7489},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":230312,"byte_end":230326,"line_start":509,"line_end":509,"column_start":23,"column_end":37},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":7489},"to":{"krate":0,"index":999}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":231335,"byte_end":231351,"line_start":548,"line_end":548,"column_start":46,"column_end":62},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":7494},"to":{"krate":0,"index":999}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":232134,"byte_end":232150,"line_start":580,"line_end":580,"column_start":29,"column_end":45},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":7494},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":235711,"byte_end":235729,"line_start":684,"line_end":684,"column_start":52,"column_end":70},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":7501},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":236604,"byte_end":236622,"line_start":707,"line_end":707,"column_start":9,"column_end":27},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":7501},"to":{"krate":0,"index":999}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":237467,"byte_end":237485,"line_start":742,"line_end":742,"column_start":52,"column_end":70},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":7501},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":239705,"byte_end":239725,"line_start":811,"line_end":811,"column_start":23,"column_end":43},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":7512},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":240670,"byte_end":240690,"line_start":834,"line_end":834,"column_start":40,"column_end":60},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":7512},"to":{"krate":0,"index":999}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":241457,"byte_end":241477,"line_start":869,"line_end":869,"column_start":23,"column_end":43},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":7512},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":244118,"byte_end":244138,"line_start":958,"line_end":958,"column_start":9,"column_end":29},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":7521},"to":{"krate":0,"index":999}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":244951,"byte_end":244971,"line_start":992,"line_end":992,"column_start":9,"column_end":29},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":7527},"to":{"krate":0,"index":999}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":245799,"byte_end":245821,"line_start":1026,"line_end":1026,"column_start":23,"column_end":45},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":7533},"to":{"krate":0,"index":999}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":246583,"byte_end":246597,"line_start":1058,"line_end":1058,"column_start":23,"column_end":37},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":7537},"to":{"krate":0,"index":999}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":247377,"byte_end":247397,"line_start":1090,"line_end":1090,"column_start":41,"column_end":61},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":7521},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":248927,"byte_end":248947,"line_start":1135,"line_end":1135,"column_start":41,"column_end":61},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":7527},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":250640,"byte_end":250662,"line_start":1181,"line_end":1181,"column_start":6,"column_end":28},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":7533},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":252041,"byte_end":252055,"line_start":1218,"line_end":1218,"column_start":6,"column_end":20},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":7537},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":254575,"byte_end":254588,"line_start":1291,"line_end":1291,"column_start":21,"column_end":34},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":1144},"to":{"krate":2,"index":8887}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":254937,"byte_end":254950,"line_start":1302,"line_end":1302,"column_start":23,"column_end":36},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":1144},"to":{"krate":0,"index":999}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":259994,"byte_end":260007,"line_start":1422,"line_end":1422,"column_start":6,"column_end":19},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":1144},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":262936,"byte_end":262949,"line_start":1504,"line_end":1504,"column_start":15,"column_end":28},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":1144},"to":{"krate":2,"index":3088}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":263759,"byte_end":263768,"line_start":1527,"line_end":1527,"column_start":6,"column_end":15},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":7543},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":268051,"byte_end":268063,"line_start":1636,"line_end":1636,"column_start":6,"column_end":18},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":7551},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":273326,"byte_end":273352,"line_start":1793,"line_end":1793,"column_start":12,"column_end":38},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":7559},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":273782,"byte_end":273808,"line_start":1811,"line_end":1811,"column_start":29,"column_end":55},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":7559},"to":{"krate":0,"index":999}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":274637,"byte_end":274663,"line_start":1847,"line_end":1847,"column_start":12,"column_end":38},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":7559},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":276371,"byte_end":276394,"line_start":1896,"line_end":1896,"column_start":9,"column_end":32},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":7569},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":278746,"byte_end":278769,"line_start":1962,"line_end":1962,"column_start":26,"column_end":49},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":7569},"to":{"krate":0,"index":999}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/builder.rs","byte_start":279569,"byte_end":279592,"line_start":1997,"line_end":1997,"column_start":9,"column_end":32},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":7569},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/data.rs","byte_start":324153,"byte_end":324162,"line_start":77,"line_end":77,"column_start":6,"column_end":15},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":7582},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/data.rs","byte_start":329534,"byte_end":329543,"line_start":251,"line_end":251,"column_start":20,"column_end":29},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":7582},"to":{"krate":2,"index":2504}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/data.rs","byte_start":329900,"byte_end":329916,"line_start":269,"line_end":269,"column_start":6,"column_end":22},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":7594},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal/mod.rs","byte_start":337878,"byte_end":337887,"line_start":72,"line_end":72,"column_start":20,"column_end":29},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":1929},"to":{"krate":2,"index":2504}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal/mod.rs","byte_start":338046,"byte_end":338060,"line_start":78,"line_end":78,"column_start":43,"column_end":57},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":585},"to":{"krate":2,"index":2504}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal/mod.rs","byte_start":338207,"byte_end":338219,"line_start":84,"line_end":84,"column_start":20,"column_end":32},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":288},"to":{"krate":2,"index":2504}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal/mod.rs","byte_start":338393,"byte_end":338411,"line_start":90,"line_end":90,"column_start":55,"column_end":73},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":712},"to":{"krate":2,"index":2504}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal/mod.rs","byte_start":338589,"byte_end":338607,"line_start":96,"line_end":96,"column_start":55,"column_end":73},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":129},"to":{"krate":2,"index":2504}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal/mod.rs","byte_start":338750,"byte_end":338770,"line_start":102,"line_end":102,"column_start":20,"column_end":40},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":185},"to":{"krate":2,"index":2504}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal/mod.rs","byte_start":338901,"byte_end":338913,"line_start":108,"line_end":108,"column_start":20,"column_end":32},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":216},"to":{"krate":2,"index":2504}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal/mod.rs","byte_start":339073,"byte_end":339089,"line_start":114,"line_end":114,"column_start":49,"column_end":65},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":486},"to":{"krate":2,"index":2504}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal/mod.rs","byte_start":339232,"byte_end":339250,"line_start":120,"line_end":120,"column_start":20,"column_end":38},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":515},"to":{"krate":2,"index":2504}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal/mod.rs","byte_start":339381,"byte_end":339392,"line_start":126,"line_end":126,"column_start":20,"column_end":31},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":830},"to":{"krate":2,"index":2504}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal_json.rs","byte_start":418521,"byte_end":418535,"line_start":39,"line_end":39,"column_start":43,"column_end":57},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":585},"to":{"krate":0,"index":1706}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal_json.rs","byte_start":418974,"byte_end":418986,"line_start":53,"line_end":53,"column_start":20,"column_end":32},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":288},"to":{"krate":0,"index":1706}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal_json.rs","byte_start":419408,"byte_end":419422,"line_start":66,"line_end":66,"column_start":50,"column_end":64},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":585},"to":{"krate":2,"index":2504}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal_json.rs","byte_start":419662,"byte_end":419667,"line_start":75,"line_end":75,"column_start":62,"column_end":67},"kind":{"Impl":{"id":125}},"from":{"krate":30,"index":2522},"to":{"krate":2,"index":2504}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal_json.rs","byte_start":419905,"byte_end":419921,"line_start":84,"line_end":84,"column_start":49,"column_end":65},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":486},"to":{"krate":0,"index":1706}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal_json.rs","byte_start":420377,"byte_end":420393,"line_start":98,"line_end":98,"column_start":56,"column_end":72},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":486},"to":{"krate":2,"index":2504}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal_json.rs","byte_start":420668,"byte_end":420673,"line_start":107,"line_end":107,"column_start":79,"column_end":84},"kind":{"Impl":{"id":128}},"from":{"krate":30,"index":2522},"to":{"krate":2,"index":2504}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal_json.rs","byte_start":420925,"byte_end":420940,"line_start":116,"line_end":116,"column_start":43,"column_end":58},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":393},"to":{"krate":0,"index":1706}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal_json.rs","byte_start":421156,"byte_end":421171,"line_start":123,"line_end":123,"column_start":50,"column_end":65},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":393},"to":{"krate":2,"index":2504}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal_json.rs","byte_start":421421,"byte_end":421426,"line_start":132,"line_end":132,"column_start":63,"column_end":68},"kind":{"Impl":{"id":131}},"from":{"krate":30,"index":2522},"to":{"krate":2,"index":2504}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal_json.rs","byte_start":421645,"byte_end":421663,"line_start":141,"line_end":141,"column_start":20,"column_end":38},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":515},"to":{"krate":0,"index":1706}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal_json.rs","byte_start":422072,"byte_end":422090,"line_start":155,"line_end":155,"column_start":27,"column_end":45},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":515},"to":{"krate":2,"index":2504}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal_json.rs","byte_start":422314,"byte_end":422319,"line_start":164,"line_end":164,"column_start":40,"column_end":45},"kind":{"Impl":{"id":134}},"from":{"krate":30,"index":2522},"to":{"krate":2,"index":2504}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal_json.rs","byte_start":422538,"byte_end":422549,"line_start":173,"line_end":173,"column_start":20,"column_end":31},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":830},"to":{"krate":0,"index":1706}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal_json.rs","byte_start":423321,"byte_end":423332,"line_start":204,"line_end":204,"column_start":27,"column_end":38},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":830},"to":{"krate":2,"index":2504}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal_json.rs","byte_start":423550,"byte_end":423555,"line_start":213,"line_end":213,"column_start":33,"column_end":38},"kind":{"Impl":{"id":137}},"from":{"krate":30,"index":2522},"to":{"krate":2,"index":2504}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal_json.rs","byte_start":423803,"byte_end":423821,"line_start":222,"line_end":222,"column_start":55,"column_end":73},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":129},"to":{"krate":0,"index":1706}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal_json.rs","byte_start":424531,"byte_end":424549,"line_start":243,"line_end":243,"column_start":9,"column_end":27},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":129},"to":{"krate":2,"index":2504}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal_json.rs","byte_start":424837,"byte_end":424842,"line_start":254,"line_end":254,"column_start":9,"column_end":14},"kind":{"Impl":{"id":140}},"from":{"krate":30,"index":2522},"to":{"krate":2,"index":2504}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal_json.rs","byte_start":425109,"byte_end":425127,"line_start":264,"line_end":264,"column_start":55,"column_end":73},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":712},"to":{"krate":0,"index":1706}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal_json.rs","byte_start":425540,"byte_end":425558,"line_start":279,"line_end":279,"column_start":9,"column_end":27},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":712},"to":{"krate":2,"index":2504}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal_json.rs","byte_start":425846,"byte_end":425851,"line_start":290,"line_end":290,"column_start":9,"column_end":14},"kind":{"Impl":{"id":143}},"from":{"krate":30,"index":2522},"to":{"krate":2,"index":2504}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal_json.rs","byte_start":426083,"byte_end":426103,"line_start":300,"line_end":300,"column_start":20,"column_end":40},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":185},"to":{"krate":0,"index":1706}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal_json.rs","byte_start":426762,"byte_end":426782,"line_start":320,"line_end":320,"column_start":27,"column_end":47},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":185},"to":{"krate":2,"index":2504}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal_json.rs","byte_start":427009,"byte_end":427014,"line_start":329,"line_end":329,"column_start":42,"column_end":47},"kind":{"Impl":{"id":146}},"from":{"krate":30,"index":2522},"to":{"krate":2,"index":2504}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal_json.rs","byte_start":427236,"byte_end":427248,"line_start":338,"line_end":338,"column_start":20,"column_end":32},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":216},"to":{"krate":0,"index":1706}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal_json.rs","byte_start":427750,"byte_end":427762,"line_start":357,"line_end":357,"column_start":27,"column_end":39},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":216},"to":{"krate":2,"index":2504}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal_json.rs","byte_start":427981,"byte_end":427986,"line_start":366,"line_end":366,"column_start":34,"column_end":39},"kind":{"Impl":{"id":149}},"from":{"krate":30,"index":2522},"to":{"krate":2,"index":2504}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal_json.rs","byte_start":428200,"byte_end":428210,"line_start":375,"line_end":375,"column_start":20,"column_end":30},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":906},"to":{"krate":0,"index":1706}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal_json.rs","byte_start":428414,"byte_end":428423,"line_start":383,"line_end":383,"column_start":20,"column_end":29},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":1929},"to":{"krate":0,"index":1706}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal_json.rs","byte_start":428676,"byte_end":428681,"line_start":394,"line_end":394,"column_start":31,"column_end":36},"kind":{"Impl":{"id":152}},"from":{"krate":30,"index":2522},"to":{"krate":2,"index":2504}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/equal_json.rs","byte_start":428899,"byte_end":428908,"line_start":403,"line_end":403,"column_start":27,"column_end":36},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":1929},"to":{"krate":2,"index":2504}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/ffi.rs","byte_start":448983,"byte_end":448992,"line_start":29,"line_end":29,"column_start":35,"column_end":44},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":7582},"to":{"krate":2,"index":2766}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/ffi.rs","byte_start":449721,"byte_end":449731,"line_start":54,"line_end":54,"column_start":34,"column_end":44},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":8743},"to":{"krate":2,"index":2766}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/iterator.rs","byte_start":453139,"byte_end":453152,"line_start":34,"line_end":34,"column_start":33,"column_end":46},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":7604},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/iterator.rs","byte_start":453432,"byte_end":453445,"line_start":45,"line_end":45,"column_start":57,"column_end":70},"kind":{"Impl":{"id":157}},"from":{"krate":0,"index":7604},"to":{"krate":2,"index":7310}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/iterator.rs","byte_start":454034,"byte_end":454047,"line_start":66,"line_end":66,"column_start":68,"column_end":81},"kind":{"Impl":{"id":158}},"from":{"krate":0,"index":7604},"to":{"krate":2,"index":7174}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/iterator.rs","byte_start":454513,"byte_end":454526,"line_start":82,"line_end":82,"column_start":66,"column_end":79},"kind":{"Impl":{"id":159}},"from":{"krate":0,"index":7604},"to":{"krate":2,"index":7199}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/iterator.rs","byte_start":454785,"byte_end":454796,"line_start":93,"line_end":93,"column_start":10,"column_end":21},"kind":{"Impl":{"id":160}},"from":{"krate":0,"index":7614},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/iterator.rs","byte_start":455038,"byte_end":455049,"line_start":104,"line_end":104,"column_start":34,"column_end":45},"kind":{"Impl":{"id":161}},"from":{"krate":0,"index":7614},"to":{"krate":2,"index":7310}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/iterator.rs","byte_start":455607,"byte_end":455618,"line_start":125,"line_end":125,"column_start":45,"column_end":56},"kind":{"Impl":{"id":162}},"from":{"krate":0,"index":7614},"to":{"krate":2,"index":7174}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/iterator.rs","byte_start":456058,"byte_end":456069,"line_start":141,"line_end":141,"column_start":43,"column_end":54},"kind":{"Impl":{"id":163}},"from":{"krate":0,"index":7614},"to":{"krate":2,"index":7199}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/iterator.rs","byte_start":456346,"byte_end":456363,"line_start":154,"line_end":154,"column_start":36,"column_end":53},"kind":{"Impl":{"id":164}},"from":{"krate":0,"index":7622},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/iterator.rs","byte_start":456640,"byte_end":456657,"line_start":165,"line_end":165,"column_start":60,"column_end":77},"kind":{"Impl":{"id":165}},"from":{"krate":0,"index":7622},"to":{"krate":2,"index":7310}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/iterator.rs","byte_start":457209,"byte_end":457226,"line_start":188,"line_end":188,"column_start":9,"column_end":26},"kind":{"Impl":{"id":166}},"from":{"krate":0,"index":7622},"to":{"krate":2,"index":7199}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/iterator.rs","byte_start":457508,"byte_end":457525,"line_start":203,"line_end":203,"column_start":36,"column_end":53},"kind":{"Impl":{"id":167}},"from":{"krate":0,"index":7632},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/iterator.rs","byte_start":457802,"byte_end":457819,"line_start":214,"line_end":214,"column_start":60,"column_end":77},"kind":{"Impl":{"id":168}},"from":{"krate":0,"index":7632},"to":{"krate":2,"index":7310}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/iterator.rs","byte_start":458372,"byte_end":458389,"line_start":237,"line_end":237,"column_start":9,"column_end":26},"kind":{"Impl":{"id":169}},"from":{"krate":0,"index":7632},"to":{"krate":2,"index":7199}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/null.rs","byte_start":462409,"byte_end":462418,"line_start":49,"line_end":49,"column_start":6,"column_end":15},"kind":{"Impl":{"id":170}},"from":{"krate":0,"index":1929},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/null.rs","byte_start":462658,"byte_end":462667,"line_start":57,"line_end":57,"column_start":16,"column_end":25},"kind":{"Impl":{"id":171}},"from":{"krate":0,"index":1929},"to":{"krate":0,"index":32}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/null.rs","byte_start":463868,"byte_end":463877,"line_start":99,"line_end":99,"column_start":29,"column_end":38},"kind":{"Impl":{"id":172}},"from":{"krate":0,"index":1929},"to":{"krate":2,"index":2759}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/null.rs","byte_start":464267,"byte_end":464276,"line_start":114,"line_end":114,"column_start":21,"column_end":30},"kind":{"Impl":{"id":173}},"from":{"krate":0,"index":1929},"to":{"krate":2,"index":8887}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/raw_pointer.rs","byte_start":477981,"byte_end":477990,"line_start":27,"line_end":27,"column_start":9,"column_end":18},"kind":{"Impl":{"id":174}},"from":{"krate":0,"index":2000},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/raw_pointer.rs","byte_start":478915,"byte_end":478924,"line_start":51,"line_end":51,"column_start":25,"column_end":34},"kind":{"Impl":{"id":175}},"from":{"krate":0,"index":2000},"to":{"krate":2,"index":2853}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/raw_pointer.rs","byte_start":478955,"byte_end":478964,"line_start":52,"line_end":52,"column_start":25,"column_end":34},"kind":{"Impl":{"id":176}},"from":{"krate":0,"index":2000},"to":{"krate":2,"index":2865}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/transform/mod.rs","byte_start":480994,"byte_end":481011,"line_start":57,"line_end":57,"column_start":10,"column_end":27},"kind":{"Impl":{"id":177}},"from":{"krate":0,"index":7642},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/transform/mod.rs","byte_start":485268,"byte_end":485284,"line_start":166,"line_end":166,"column_start":30,"column_end":46},"kind":{"Impl":{"id":178}},"from":{"krate":0,"index":2240},"to":{"krate":2,"index":8887}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/array/transform/mod.rs","byte_start":490686,"byte_end":490702,"line_start":279,"line_end":279,"column_start":10,"column_end":26},"kind":{"Impl":{"id":179}},"from":{"krate":0,"index":2240},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/bitmap.rs","byte_start":546417,"byte_end":546423,"line_start":33,"line_end":33,"column_start":6,"column_end":12},"kind":{"Impl":{"id":180}},"from":{"krate":0,"index":7654},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/bitmap.rs","byte_start":548020,"byte_end":548026,"line_start":95,"line_end":95,"column_start":23,"column_end":29},"kind":{"Impl":{"id":181}},"from":{"krate":0,"index":7654},"to":{"krate":2,"index":2759}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/bitmap.rs","byte_start":548119,"byte_end":548125,"line_start":101,"line_end":101,"column_start":20,"column_end":26},"kind":{"Impl":{"id":182}},"from":{"krate":0,"index":7654},"to":{"krate":2,"index":2504}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":551767,"byte_end":551773,"line_start":58,"line_end":58,"column_start":6,"column_end":12},"kind":{"Impl":{"id":183}},"from":{"krate":0,"index":7660},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":557963,"byte_end":557969,"line_start":218,"line_end":218,"column_start":34,"column_end":40},"kind":{"Impl":{"id":184}},"from":{"krate":0,"index":7660},"to":{"krate":2,"index":2759}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":558981,"byte_end":558987,"line_start":244,"line_end":244,"column_start":26,"column_end":32},"kind":{"Impl":{"id":185}},"from":{"krate":0,"index":7660},"to":{"krate":2,"index":3064}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":572338,"byte_end":572344,"line_start":696,"line_end":696,"column_start":22,"column_end":28},"kind":{"Impl":{"id":186}},"from":{"krate":0,"index":7660},"to":{"krate":2,"index":2865}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":572369,"byte_end":572375,"line_start":697,"line_end":697,"column_start":22,"column_end":28},"kind":{"Impl":{"id":187}},"from":{"krate":0,"index":7660},"to":{"krate":2,"index":2853}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":572409,"byte_end":572415,"line_start":699,"line_end":699,"column_start":30,"column_end":36},"kind":{"Impl":{"id":188}},"from":{"krate":0,"index":7660},"to":{"krate":2,"index":2759}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":572792,"byte_end":572805,"line_start":715,"line_end":715,"column_start":6,"column_end":19},"kind":{"Impl":{"id":189}},"from":{"krate":0,"index":7671},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":579412,"byte_end":579425,"line_start":907,"line_end":907,"column_start":26,"column_end":39},"kind":{"Impl":{"id":190}},"from":{"krate":0,"index":7671},"to":{"krate":2,"index":3064}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":579592,"byte_end":579605,"line_start":915,"line_end":915,"column_start":29,"column_end":42},"kind":{"Impl":{"id":191}},"from":{"krate":0,"index":7671},"to":{"krate":2,"index":3077}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":579753,"byte_end":579766,"line_start":921,"line_end":921,"column_start":15,"column_end":28},"kind":{"Impl":{"id":192}},"from":{"krate":0,"index":7671},"to":{"krate":2,"index":3088}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":579889,"byte_end":579902,"line_start":927,"line_end":927,"column_start":20,"column_end":33},"kind":{"Impl":{"id":193}},"from":{"krate":0,"index":7671},"to":{"krate":2,"index":2504}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":580181,"byte_end":580194,"line_start":939,"line_end":939,"column_start":22,"column_end":35},"kind":{"Impl":{"id":194}},"from":{"krate":0,"index":7671},"to":{"krate":2,"index":2865}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/buffer.rs","byte_start":580219,"byte_end":580232,"line_start":940,"line_end":940,"column_start":22,"column_end":35},"kind":{"Impl":{"id":195}},"from":{"krate":0,"index":7671},"to":{"krate":2,"index":2853}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/bytes.rs","byte_start":592972,"byte_end":592984,"line_start":37,"line_end":37,"column_start":16,"column_end":28},"kind":{"Impl":{"id":196}},"from":{"krate":0,"index":2747},"to":{"krate":2,"index":8887}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/bytes.rs","byte_start":594244,"byte_end":594249,"line_start":69,"line_end":69,"column_start":6,"column_end":11},"kind":{"Impl":{"id":197}},"from":{"krate":0,"index":2756},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/bytes.rs","byte_start":595570,"byte_end":595575,"line_start":123,"line_end":123,"column_start":15,"column_end":20},"kind":{"Impl":{"id":198}},"from":{"krate":0,"index":2756},"to":{"krate":2,"index":3088}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/bytes.rs","byte_start":595937,"byte_end":595942,"line_start":136,"line_end":136,"column_start":26,"column_end":31},"kind":{"Impl":{"id":199}},"from":{"krate":0,"index":2756},"to":{"krate":2,"index":3064}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/bytes.rs","byte_start":596099,"byte_end":596104,"line_start":144,"line_end":144,"column_start":20,"column_end":25},"kind":{"Impl":{"id":200}},"from":{"krate":0,"index":2756},"to":{"krate":2,"index":2504}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/bytes.rs","byte_start":596217,"byte_end":596222,"line_start":150,"line_end":150,"column_start":16,"column_end":21},"kind":{"Impl":{"id":201}},"from":{"krate":0,"index":2756},"to":{"krate":2,"index":8887}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/filter.rs","byte_start":850730,"byte_end":850744,"line_start":59,"line_end":59,"column_start":10,"column_end":24},"kind":{"Impl":{"id":202}},"from":{"krate":0,"index":7717},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/filter.rs","byte_start":853536,"byte_end":853550,"line_start":143,"line_end":143,"column_start":23,"column_end":37},"kind":{"Impl":{"id":203}},"from":{"krate":0,"index":7717},"to":{"krate":2,"index":7310}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/sort.rs","byte_start":895540,"byte_end":895551,"line_start":250,"line_end":250,"column_start":18,"column_end":29},"kind":{"Impl":{"id":204}},"from":{"krate":0,"index":7733},"to":{"krate":2,"index":2831}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/compute/kernels/take.rs","byte_start":963013,"byte_end":963024,"line_start":249,"line_end":249,"column_start":18,"column_end":29},"kind":{"Impl":{"id":205}},"from":{"krate":0,"index":7748},"to":{"krate":2,"index":2831}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1031936,"byte_end":1031942,"line_start":249,"line_end":249,"column_start":24,"column_end":30},"kind":{"Impl":{"id":206}},"from":{"krate":0,"index":3614},"to":{"krate":2,"index":8887}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1032255,"byte_end":1032261,"line_start":262,"line_end":262,"column_start":15,"column_end":21},"kind":{"Impl":{"id":207}},"from":{"krate":0,"index":3614},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1035304,"byte_end":1035310,"line_start":355,"line_end":355,"column_start":28,"column_end":34},"kind":{"Impl":{"id":208}},"from":{"krate":0,"index":3614},"to":{"krate":2,"index":7310}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1039846,"byte_end":1039864,"line_start":482,"line_end":482,"column_start":15,"column_end":33},"kind":"SuperTrait","from":{"krate":0,"index":3818},"to":{"krate":0,"index":3642}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1039989,"byte_end":1040000,"line_start":488,"line_end":488,"column_start":17,"column_end":28},"kind":{"Impl":{"id":209}},"from":{"krate":0,"index":8431},"to":{"krate":0,"index":3642}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1040123,"byte_end":1040134,"line_start":493,"line_end":493,"column_start":17,"column_end":28},"kind":{"Impl":{"id":210}},"from":{"krate":0,"index":8437},"to":{"krate":0,"index":3642}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1040258,"byte_end":1040268,"line_start":499,"line_end":499,"column_start":17,"column_end":27},"kind":{"Impl":{"id":211}},"from":{"krate":0,"index":8425},"to":{"krate":0,"index":3642}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1040289,"byte_end":1040299,"line_start":501,"line_end":501,"column_start":17,"column_end":27},"kind":{"Impl":{"id":212}},"from":{"krate":0,"index":8419},"to":{"krate":0,"index":3642}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1040320,"byte_end":1040330,"line_start":503,"line_end":503,"column_start":17,"column_end":27},"kind":{"Impl":{"id":213}},"from":{"krate":0,"index":8413},"to":{"krate":0,"index":3642}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1040351,"byte_end":1040360,"line_start":505,"line_end":505,"column_start":17,"column_end":26},"kind":{"Impl":{"id":214}},"from":{"krate":0,"index":8407},"to":{"krate":0,"index":3642}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1040381,"byte_end":1040390,"line_start":507,"line_end":507,"column_start":17,"column_end":26},"kind":{"Impl":{"id":215}},"from":{"krate":0,"index":8401},"to":{"krate":0,"index":3642}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1040411,"byte_end":1040420,"line_start":509,"line_end":509,"column_start":17,"column_end":26},"kind":{"Impl":{"id":216}},"from":{"krate":0,"index":8395},"to":{"krate":0,"index":3642}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1040441,"byte_end":1040450,"line_start":511,"line_end":511,"column_start":17,"column_end":26},"kind":{"Impl":{"id":217}},"from":{"krate":0,"index":8389},"to":{"krate":0,"index":3642}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1040471,"byte_end":1040479,"line_start":513,"line_end":513,"column_start":17,"column_end":25},"kind":{"Impl":{"id":218}},"from":{"krate":0,"index":8383},"to":{"krate":0,"index":3642}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1040595,"byte_end":1040605,"line_start":518,"line_end":518,"column_start":17,"column_end":27},"kind":{"Impl":{"id":219}},"from":{"krate":0,"index":8467},"to":{"krate":0,"index":3642}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1040991,"byte_end":1041001,"line_start":532,"line_end":532,"column_start":17,"column_end":27},"kind":{"Impl":{"id":220}},"from":{"krate":0,"index":8473},"to":{"krate":0,"index":3642}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1041357,"byte_end":1041380,"line_start":544,"line_end":544,"column_start":17,"column_end":40},"kind":{"Impl":{"id":221}},"from":{"krate":0,"index":8461},"to":{"krate":0,"index":3642}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1041743,"byte_end":1041767,"line_start":556,"line_end":556,"column_start":17,"column_end":41},"kind":{"Impl":{"id":222}},"from":{"krate":0,"index":8455},"to":{"krate":0,"index":3642}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1045830,"byte_end":1045843,"line_start":679,"line_end":679,"column_start":18,"column_end":31},"kind":{"Impl":{"id":223}},"from":{"krate":0,"index":7809},"to":{"krate":2,"index":2831}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/reader.rs","byte_start":1046115,"byte_end":1046128,"line_start":693,"line_end":693,"column_start":6,"column_end":19},"kind":{"Impl":{"id":224}},"from":{"krate":0,"index":7809},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1068160,"byte_end":1068166,"line_start":108,"line_end":108,"column_start":16,"column_end":22},"kind":{"Impl":{"id":225}},"from":{"krate":0,"index":7819},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1076094,"byte_end":1076107,"line_start":297,"line_end":297,"column_start":18,"column_end":31},"kind":{"Impl":{"id":226}},"from":{"krate":0,"index":7831},"to":{"krate":2,"index":2831}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/csv/writer.rs","byte_start":1076438,"byte_end":1076451,"line_start":309,"line_end":309,"column_start":6,"column_end":19},"kind":{"Impl":{"id":227}},"from":{"krate":0,"index":7831},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1093904,"byte_end":1093909,"line_start":203,"line_end":203,"column_start":10,"column_end":15},"kind":"SuperTrait","from":{"krate":2,"index":8887},"to":{"krate":0,"index":3812}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1093912,"byte_end":1093916,"line_start":203,"line_end":203,"column_start":18,"column_end":22},"kind":"SuperTrait","from":{"krate":2,"index":2853},"to":{"krate":0,"index":3812}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1093919,"byte_end":1093923,"line_start":203,"line_end":203,"column_start":25,"column_end":29},"kind":"SuperTrait","from":{"krate":2,"index":2865},"to":{"krate":0,"index":3812}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1093926,"byte_end":1093930,"line_start":203,"line_end":203,"column_start":32,"column_end":36},"kind":"SuperTrait","from":{"krate":2,"index":2863},"to":{"krate":0,"index":3812}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1093933,"byte_end":1093943,"line_start":203,"line_end":203,"column_start":39,"column_end":49},"kind":"SuperTrait","from":{"krate":2,"index":2551},"to":{"krate":0,"index":3812}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1093946,"byte_end":1093953,"line_start":203,"line_end":203,"column_start":52,"column_end":59},"kind":"SuperTrait","from":{"krate":2,"index":11370},"to":{"krate":0,"index":3812}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1093956,"byte_end":1093963,"line_start":203,"line_end":203,"column_start":62,"column_end":69},"kind":"SuperTrait","from":{"krate":2,"index":2831},"to":{"krate":0,"index":3812}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1098413,"byte_end":1098424,"line_start":394,"line_end":394,"column_start":6,"column_end":17},"kind":{"Impl":{"id":249}},"from":{"krate":0,"index":8377},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1100876,"byte_end":1100894,"line_start":491,"line_end":491,"column_start":35,"column_end":53},"kind":"SuperTrait","from":{"krate":0,"index":3818},"to":{"krate":0,"index":3866}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1100931,"byte_end":1100939,"line_start":493,"line_end":493,"column_start":33,"column_end":41},"kind":{"Impl":{"id":250}},"from":{"krate":0,"index":8383},"to":{"krate":0,"index":3866}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1100976,"byte_end":1100985,"line_start":495,"line_end":495,"column_start":33,"column_end":42},"kind":{"Impl":{"id":251}},"from":{"krate":0,"index":8389},"to":{"krate":0,"index":3866}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1101022,"byte_end":1101031,"line_start":497,"line_end":497,"column_start":33,"column_end":42},"kind":{"Impl":{"id":252}},"from":{"krate":0,"index":8395},"to":{"krate":0,"index":3866}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1101068,"byte_end":1101077,"line_start":499,"line_end":499,"column_start":33,"column_end":42},"kind":{"Impl":{"id":253}},"from":{"krate":0,"index":8401},"to":{"krate":0,"index":3866}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1101114,"byte_end":1101123,"line_start":501,"line_end":501,"column_start":33,"column_end":42},"kind":{"Impl":{"id":254}},"from":{"krate":0,"index":8407},"to":{"krate":0,"index":3866}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1101160,"byte_end":1101170,"line_start":503,"line_end":503,"column_start":33,"column_end":43},"kind":{"Impl":{"id":255}},"from":{"krate":0,"index":8413},"to":{"krate":0,"index":3866}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1101207,"byte_end":1101217,"line_start":505,"line_end":505,"column_start":33,"column_end":43},"kind":{"Impl":{"id":256}},"from":{"krate":0,"index":8419},"to":{"krate":0,"index":3866}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1101254,"byte_end":1101264,"line_start":507,"line_end":507,"column_start":33,"column_end":43},"kind":{"Impl":{"id":257}},"from":{"krate":0,"index":8425},"to":{"krate":0,"index":3866}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1104334,"byte_end":1104352,"line_start":595,"line_end":595,"column_start":29,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":3818},"to":{"krate":0,"index":3875}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1114548,"byte_end":1114564,"line_start":853,"line_end":853,"column_start":35,"column_end":51},"kind":"SuperTrait","from":{"krate":0,"index":3875},"to":{"krate":0,"index":3877}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1115916,"byte_end":1115934,"line_start":897,"line_end":897,"column_start":30,"column_end":48},"kind":"SuperTrait","from":{"krate":0,"index":3818},"to":{"krate":0,"index":3879}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1115966,"byte_end":1115985,"line_start":899,"line_end":899,"column_start":28,"column_end":47},"kind":{"Impl":{"id":290}},"from":{"krate":0,"index":8443},"to":{"krate":0,"index":3879}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1116016,"byte_end":1116040,"line_start":900,"line_end":900,"column_start":28,"column_end":52},"kind":{"Impl":{"id":291}},"from":{"krate":0,"index":8449},"to":{"krate":0,"index":3879}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1116071,"byte_end":1116095,"line_start":901,"line_end":901,"column_start":28,"column_end":52},"kind":{"Impl":{"id":292}},"from":{"krate":0,"index":8455},"to":{"krate":0,"index":3879}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1116126,"byte_end":1116149,"line_start":902,"line_end":902,"column_start":28,"column_end":51},"kind":{"Impl":{"id":293}},"from":{"krate":0,"index":8461},"to":{"krate":0,"index":3879}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1116180,"byte_end":1116190,"line_start":903,"line_end":903,"column_start":28,"column_end":38},"kind":{"Impl":{"id":294}},"from":{"krate":0,"index":8467},"to":{"krate":0,"index":3879}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1116221,"byte_end":1116231,"line_start":904,"line_end":904,"column_start":28,"column_end":38},"kind":{"Impl":{"id":295}},"from":{"krate":0,"index":8473},"to":{"krate":0,"index":3879}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1116262,"byte_end":1116278,"line_start":905,"line_end":905,"column_start":28,"column_end":44},"kind":{"Impl":{"id":296}},"from":{"krate":0,"index":8479},"to":{"krate":0,"index":3879}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1116309,"byte_end":1116330,"line_start":906,"line_end":906,"column_start":28,"column_end":49},"kind":{"Impl":{"id":297}},"from":{"krate":0,"index":8485},"to":{"krate":0,"index":3879}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1116361,"byte_end":1116382,"line_start":907,"line_end":907,"column_start":28,"column_end":49},"kind":{"Impl":{"id":298}},"from":{"krate":0,"index":8491},"to":{"krate":0,"index":3879}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1116413,"byte_end":1116433,"line_start":908,"line_end":908,"column_start":28,"column_end":48},"kind":{"Impl":{"id":299}},"from":{"krate":0,"index":8497},"to":{"krate":0,"index":3879}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1116655,"byte_end":1116672,"line_start":913,"line_end":913,"column_start":31,"column_end":48},"kind":"SuperTrait","from":{"krate":0,"index":3879},"to":{"krate":0,"index":3890}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1116792,"byte_end":1116811,"line_start":918,"line_end":918,"column_start":29,"column_end":48},"kind":{"Impl":{"id":300}},"from":{"krate":0,"index":8443},"to":{"krate":0,"index":3890}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1116912,"byte_end":1116936,"line_start":923,"line_end":923,"column_start":29,"column_end":53},"kind":{"Impl":{"id":301}},"from":{"krate":0,"index":8449},"to":{"krate":0,"index":3890}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1117042,"byte_end":1117066,"line_start":928,"line_end":928,"column_start":29,"column_end":53},"kind":{"Impl":{"id":302}},"from":{"krate":0,"index":8455},"to":{"krate":0,"index":3890}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1117172,"byte_end":1117195,"line_start":933,"line_end":933,"column_start":29,"column_end":52},"kind":{"Impl":{"id":303}},"from":{"krate":0,"index":8461},"to":{"krate":0,"index":3890}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1117723,"byte_end":1117724,"line_start":952,"line_end":952,"column_start":42,"column_end":43},"kind":{"Impl":{"id":304}},"from":{"krate":0,"index":3906},"to":{"krate":0,"index":3900}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1117909,"byte_end":1117917,"line_start":959,"line_end":959,"column_start":23,"column_end":31},"kind":{"Impl":{"id":305}},"from":{"krate":0,"index":7839},"to":{"krate":2,"index":8894}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1118025,"byte_end":1118033,"line_start":965,"line_end":965,"column_start":6,"column_end":14},"kind":{"Impl":{"id":306}},"from":{"krate":0,"index":7839},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1133913,"byte_end":1133918,"line_start":1283,"line_end":1283,"column_start":6,"column_end":11},"kind":{"Impl":{"id":307}},"from":{"krate":0,"index":8295},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1152619,"byte_end":1152624,"line_start":1735,"line_end":1735,"column_start":23,"column_end":28},"kind":{"Impl":{"id":308}},"from":{"krate":0,"index":8295},"to":{"krate":2,"index":8894}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1153208,"byte_end":1153214,"line_start":1753,"line_end":1753,"column_start":6,"column_end":12},"kind":{"Impl":{"id":311}},"from":{"krate":0,"index":8568},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/datatypes.rs","byte_start":1161726,"byte_end":1161732,"line_start":2000,"line_end":2000,"column_start":23,"column_end":29},"kind":{"Impl":{"id":312}},"from":{"krate":0,"index":8568},"to":{"krate":2,"index":8894}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/error.rs","byte_start":1210642,"byte_end":1210652,"line_start":43,"line_end":43,"column_start":6,"column_end":16},"kind":{"Impl":{"id":314}},"from":{"krate":0,"index":8678},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/error.rs","byte_start":1210890,"byte_end":1210900,"line_start":52,"line_end":52,"column_start":33,"column_end":43},"kind":{"Impl":{"id":315}},"from":{"krate":0,"index":8678},"to":{"krate":2,"index":2759}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/error.rs","byte_start":1211036,"byte_end":1211046,"line_start":58,"line_end":58,"column_start":33,"column_end":43},"kind":{"Impl":{"id":316}},"from":{"krate":0,"index":8678},"to":{"krate":2,"index":2759}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/error.rs","byte_start":1211878,"byte_end":1211888,"line_start":78,"line_end":78,"column_start":45,"column_end":55},"kind":{"Impl":{"id":317}},"from":{"krate":0,"index":8678},"to":{"krate":2,"index":2759}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/error.rs","byte_start":1212040,"byte_end":1212050,"line_start":84,"line_end":84,"column_start":34,"column_end":44},"kind":{"Impl":{"id":318}},"from":{"krate":0,"index":8678},"to":{"krate":2,"index":2759}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/error.rs","byte_start":1212176,"byte_end":1212186,"line_start":90,"line_end":90,"column_start":18,"column_end":28},"kind":{"Impl":{"id":319}},"from":{"krate":0,"index":8678},"to":{"krate":2,"index":8894}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/error.rs","byte_start":1213551,"byte_end":1213561,"line_start":118,"line_end":118,"column_start":16,"column_end":26},"kind":{"Impl":{"id":320}},"from":{"krate":0,"index":8678},"to":{"krate":1,"index":2326}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1217836,"byte_end":1217851,"line_start":120,"line_end":120,"column_start":6,"column_end":21},"kind":{"Impl":{"id":321}},"from":{"krate":0,"index":8718},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1219121,"byte_end":1219136,"line_start":160,"line_end":160,"column_start":15,"column_end":30},"kind":{"Impl":{"id":322}},"from":{"krate":0,"index":8718},"to":{"krate":2,"index":3088}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1226621,"byte_end":1226635,"line_start":345,"line_end":345,"column_start":6,"column_end":20},"kind":{"Impl":{"id":323}},"from":{"krate":0,"index":8730},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1229406,"byte_end":1229420,"line_start":428,"line_end":428,"column_start":15,"column_end":29},"kind":{"Impl":{"id":324}},"from":{"krate":0,"index":8730},"to":{"krate":2,"index":3088}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ffi.rs","byte_start":1230798,"byte_end":1230808,"line_start":463,"line_end":463,"column_start":6,"column_end":16},"kind":{"Impl":{"id":325}},"from":{"krate":0,"index":8743},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/convert.rs","byte_start":1246646,"byte_end":1246651,"line_start":73,"line_end":73,"column_start":35,"column_end":40},"kind":{"Impl":{"id":326}},"from":{"krate":0,"index":8295},"to":{"krate":2,"index":2759}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/reader.rs","byte_start":1298387,"byte_end":1298397,"line_start":533,"line_end":533,"column_start":22,"column_end":32},"kind":{"Impl":{"id":327}},"from":{"krate":0,"index":4234},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/reader.rs","byte_start":1305661,"byte_end":1305671,"line_start":725,"line_end":725,"column_start":35,"column_end":45},"kind":{"Impl":{"id":328}},"from":{"krate":0,"index":4234},"to":{"krate":2,"index":7310}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/reader.rs","byte_start":1305981,"byte_end":1305991,"line_start":738,"line_end":738,"column_start":44,"column_end":54},"kind":{"Impl":{"id":329}},"from":{"krate":0,"index":4234},"to":{"krate":0,"index":7096}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/reader.rs","byte_start":1306642,"byte_end":1306654,"line_start":763,"line_end":763,"column_start":15,"column_end":27},"kind":{"Impl":{"id":330}},"from":{"krate":0,"index":4269},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/reader.rs","byte_start":1312006,"byte_end":1312018,"line_start":904,"line_end":904,"column_start":28,"column_end":40},"kind":{"Impl":{"id":331}},"from":{"krate":0,"index":4269},"to":{"krate":2,"index":7310}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/reader.rs","byte_start":1312192,"byte_end":1312204,"line_start":912,"line_end":912,"column_start":37,"column_end":49},"kind":{"Impl":{"id":332}},"from":{"krate":0,"index":4269},"to":{"krate":0,"index":7096}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/writer.rs","byte_start":1319978,"byte_end":1319993,"line_start":50,"line_end":50,"column_start":6,"column_end":21},"kind":{"Impl":{"id":333}},"from":{"krate":0,"index":8748},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/writer.rs","byte_start":1321537,"byte_end":1321552,"line_start":92,"line_end":92,"column_start":18,"column_end":33},"kind":{"Impl":{"id":334}},"from":{"krate":0,"index":8748},"to":{"krate":2,"index":2831}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/writer.rs","byte_start":1321804,"byte_end":1321820,"line_start":105,"line_end":105,"column_start":6,"column_end":22},"kind":{"Impl":{"id":335}},"from":{"krate":0,"index":8754},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/writer.rs","byte_start":1328160,"byte_end":1328177,"line_start":294,"line_end":294,"column_start":6,"column_end":23},"kind":{"Impl":{"id":336}},"from":{"krate":0,"index":4354},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/writer.rs","byte_start":1330769,"byte_end":1330779,"line_start":356,"line_end":356,"column_start":16,"column_end":26},"kind":{"Impl":{"id":337}},"from":{"krate":0,"index":4360},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/writer.rs","byte_start":1334735,"byte_end":1334745,"line_start":460,"line_end":460,"column_start":25,"column_end":35},"kind":{"Impl":{"id":338}},"from":{"krate":0,"index":4360},"to":{"krate":2,"index":3088}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/writer.rs","byte_start":1335355,"byte_end":1335367,"line_start":483,"line_end":483,"column_start":16,"column_end":28},"kind":{"Impl":{"id":339}},"from":{"krate":0,"index":4380},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/writer.rs","byte_start":1337476,"byte_end":1337488,"line_start":542,"line_end":542,"column_start":25,"column_end":37},"kind":{"Impl":{"id":340}},"from":{"krate":0,"index":4380},"to":{"krate":2,"index":3088}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1353132,"byte_end":1353137,"line_start":35,"line_end":35,"column_start":26,"column_end":31},"kind":{"Impl":{"id":341}},"from":{"krate":0,"index":8759},"to":{"krate":2,"index":8887}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1353475,"byte_end":1353480,"line_start":45,"line_end":45,"column_start":45,"column_end":50},"kind":{"Impl":{"id":342}},"from":{"krate":0,"index":8759},"to":{"krate":46,"index":754}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1353522,"byte_end":1353527,"line_start":46,"line_end":46,"column_start":39,"column_end":44},"kind":{"Impl":{"id":343}},"from":{"krate":0,"index":8759},"to":{"krate":46,"index":578}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1353568,"byte_end":1353573,"line_start":47,"line_end":47,"column_start":38,"column_end":43},"kind":{"Impl":{"id":344}},"from":{"krate":0,"index":8759},"to":{"krate":46,"index":249}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1353966,"byte_end":1353971,"line_start":61,"line_end":61,"column_start":32,"column_end":37},"kind":{"Impl":{"id":345}},"from":{"krate":0,"index":8759},"to":{"krate":46,"index":469}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1354577,"byte_end":1354582,"line_start":83,"line_end":83,"column_start":38,"column_end":43},"kind":{"Impl":{"id":346}},"from":{"krate":0,"index":8759},"to":{"krate":46,"index":747}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1354832,"byte_end":1354837,"line_start":93,"line_end":93,"column_start":6,"column_end":11},"kind":{"Impl":{"id":347}},"from":{"krate":0,"index":8759},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1355910,"byte_end":1355916,"line_start":128,"line_end":128,"column_start":38,"column_end":44},"kind":{"Impl":{"id":348}},"from":{"krate":0,"index":8771},"to":{"krate":46,"index":249}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1356118,"byte_end":1356124,"line_start":138,"line_end":138,"column_start":10,"column_end":16},"kind":{"Impl":{"id":349}},"from":{"krate":0,"index":8771},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1358620,"byte_end":1358626,"line_start":211,"line_end":211,"column_start":34,"column_end":40},"kind":{"Impl":{"id":350}},"from":{"krate":0,"index":8771},"to":{"krate":46,"index":747}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1360245,"byte_end":1360255,"line_start":253,"line_end":253,"column_start":22,"column_end":32},"kind":{"Impl":{"id":351}},"from":{"krate":0,"index":4488},"to":{"krate":2,"index":2831}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1360697,"byte_end":1360710,"line_start":269,"line_end":269,"column_start":18,"column_end":31},"kind":{"Impl":{"id":352}},"from":{"krate":0,"index":4498},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/File.rs","byte_start":1362620,"byte_end":1362626,"line_start":335,"line_end":335,"column_start":26,"column_end":32},"kind":{"Impl":{"id":353}},"from":{"krate":0,"index":8771},"to":{"krate":2,"index":8887}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1368388,"byte_end":1368403,"line_start":50,"line_end":50,"column_start":6,"column_end":21},"kind":{"Impl":{"id":354}},"from":{"krate":0,"index":8785},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1368911,"byte_end":1368926,"line_start":66,"line_end":66,"column_start":26,"column_end":41},"kind":{"Impl":{"id":355}},"from":{"krate":0,"index":8785},"to":{"krate":2,"index":8887}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1369214,"byte_end":1369229,"line_start":75,"line_end":75,"column_start":38,"column_end":53},"kind":{"Impl":{"id":356}},"from":{"krate":0,"index":8785},"to":{"krate":46,"index":249}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1369440,"byte_end":1369455,"line_start":84,"line_end":84,"column_start":28,"column_end":43},"kind":{"Impl":{"id":357}},"from":{"krate":0,"index":8785},"to":{"krate":46,"index":469}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1369658,"byte_end":1369673,"line_start":92,"line_end":92,"column_start":36,"column_end":51},"kind":{"Impl":{"id":358}},"from":{"krate":0,"index":8785},"to":{"krate":46,"index":226}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1369942,"byte_end":1369957,"line_start":105,"line_end":105,"column_start":38,"column_end":53},"kind":{"Impl":{"id":359}},"from":{"krate":0,"index":8785},"to":{"krate":46,"index":747}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1370247,"byte_end":1370262,"line_start":116,"line_end":116,"column_start":45,"column_end":60},"kind":{"Impl":{"id":360}},"from":{"krate":0,"index":8785},"to":{"krate":46,"index":754}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1371256,"byte_end":1371277,"line_start":142,"line_end":142,"column_start":6,"column_end":27},"kind":{"Impl":{"id":361}},"from":{"krate":0,"index":8805},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1372195,"byte_end":1372216,"line_start":163,"line_end":163,"column_start":26,"column_end":47},"kind":{"Impl":{"id":362}},"from":{"krate":0,"index":8805},"to":{"krate":2,"index":8887}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1372504,"byte_end":1372525,"line_start":172,"line_end":172,"column_start":38,"column_end":59},"kind":{"Impl":{"id":363}},"from":{"krate":0,"index":8805},"to":{"krate":46,"index":249}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1372736,"byte_end":1372757,"line_start":181,"line_end":181,"column_start":28,"column_end":49},"kind":{"Impl":{"id":364}},"from":{"krate":0,"index":8805},"to":{"krate":46,"index":469}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1372966,"byte_end":1372987,"line_start":189,"line_end":189,"column_start":36,"column_end":57},"kind":{"Impl":{"id":365}},"from":{"krate":0,"index":8805},"to":{"krate":46,"index":226}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1373256,"byte_end":1373277,"line_start":202,"line_end":202,"column_start":38,"column_end":59},"kind":{"Impl":{"id":366}},"from":{"krate":0,"index":8805},"to":{"krate":46,"index":747}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1373567,"byte_end":1373588,"line_start":213,"line_end":213,"column_start":45,"column_end":66},"kind":{"Impl":{"id":367}},"from":{"krate":0,"index":8805},"to":{"krate":46,"index":754}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1374943,"byte_end":1374956,"line_start":250,"line_end":250,"column_start":6,"column_end":19},"kind":{"Impl":{"id":368}},"from":{"krate":0,"index":8825},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1375971,"byte_end":1375984,"line_start":281,"line_end":281,"column_start":26,"column_end":39},"kind":{"Impl":{"id":369}},"from":{"krate":0,"index":8825},"to":{"krate":2,"index":8887}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1376316,"byte_end":1376329,"line_start":291,"line_end":291,"column_start":38,"column_end":51},"kind":{"Impl":{"id":370}},"from":{"krate":0,"index":8825},"to":{"krate":46,"index":249}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1376540,"byte_end":1376553,"line_start":300,"line_end":300,"column_start":28,"column_end":41},"kind":{"Impl":{"id":371}},"from":{"krate":0,"index":8825},"to":{"krate":46,"index":469}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1376754,"byte_end":1376767,"line_start":308,"line_end":308,"column_start":36,"column_end":49},"kind":{"Impl":{"id":372}},"from":{"krate":0,"index":8825},"to":{"krate":46,"index":226}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1377036,"byte_end":1377049,"line_start":321,"line_end":321,"column_start":38,"column_end":51},"kind":{"Impl":{"id":373}},"from":{"krate":0,"index":8825},"to":{"krate":46,"index":747}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1377339,"byte_end":1377352,"line_start":332,"line_end":332,"column_start":45,"column_end":58},"kind":{"Impl":{"id":374}},"from":{"krate":0,"index":8825},"to":{"krate":46,"index":754}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1378058,"byte_end":1378067,"line_start":349,"line_end":349,"column_start":26,"column_end":35},"kind":{"Impl":{"id":375}},"from":{"krate":0,"index":8845},"to":{"krate":2,"index":8887}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1378348,"byte_end":1378357,"line_start":358,"line_end":358,"column_start":45,"column_end":54},"kind":{"Impl":{"id":376}},"from":{"krate":0,"index":8845},"to":{"krate":46,"index":754}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1378399,"byte_end":1378408,"line_start":359,"line_end":359,"column_start":39,"column_end":48},"kind":{"Impl":{"id":377}},"from":{"krate":0,"index":8845},"to":{"krate":46,"index":578}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1378449,"byte_end":1378458,"line_start":360,"line_end":360,"column_start":38,"column_end":47},"kind":{"Impl":{"id":378}},"from":{"krate":0,"index":8845},"to":{"krate":46,"index":249}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1378871,"byte_end":1378880,"line_start":374,"line_end":374,"column_start":32,"column_end":41},"kind":{"Impl":{"id":379}},"from":{"krate":0,"index":8845},"to":{"krate":46,"index":469}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1379600,"byte_end":1379609,"line_start":402,"line_end":402,"column_start":38,"column_end":47},"kind":{"Impl":{"id":380}},"from":{"krate":0,"index":8845},"to":{"krate":46,"index":747}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1379859,"byte_end":1379868,"line_start":412,"line_end":412,"column_start":6,"column_end":15},"kind":{"Impl":{"id":381}},"from":{"krate":0,"index":8845},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1380903,"byte_end":1380918,"line_start":442,"line_end":442,"column_start":38,"column_end":53},"kind":{"Impl":{"id":382}},"from":{"krate":0,"index":8855},"to":{"krate":46,"index":249}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1381129,"byte_end":1381144,"line_start":452,"line_end":452,"column_start":10,"column_end":25},"kind":{"Impl":{"id":383}},"from":{"krate":0,"index":8855},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1382452,"byte_end":1382467,"line_start":493,"line_end":493,"column_start":34,"column_end":49},"kind":{"Impl":{"id":384}},"from":{"krate":0,"index":8855},"to":{"krate":46,"index":747}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1383040,"byte_end":1383059,"line_start":511,"line_end":511,"column_start":22,"column_end":41},"kind":{"Impl":{"id":385}},"from":{"krate":0,"index":4704},"to":{"krate":2,"index":2831}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1383445,"byte_end":1383467,"line_start":524,"line_end":524,"column_start":18,"column_end":40},"kind":{"Impl":{"id":386}},"from":{"krate":0,"index":4710},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1384455,"byte_end":1384470,"line_start":558,"line_end":558,"column_start":26,"column_end":41},"kind":{"Impl":{"id":387}},"from":{"krate":0,"index":8855},"to":{"krate":2,"index":8887}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1385061,"byte_end":1385072,"line_start":576,"line_end":576,"column_start":38,"column_end":49},"kind":{"Impl":{"id":388}},"from":{"krate":0,"index":8869},"to":{"krate":46,"index":249}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1385279,"byte_end":1385290,"line_start":586,"line_end":586,"column_start":10,"column_end":21},"kind":{"Impl":{"id":389}},"from":{"krate":0,"index":8869},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1387871,"byte_end":1387882,"line_start":659,"line_end":659,"column_start":34,"column_end":45},"kind":{"Impl":{"id":390}},"from":{"krate":0,"index":8869},"to":{"krate":46,"index":747}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1388888,"byte_end":1388903,"line_start":681,"line_end":681,"column_start":22,"column_end":37},"kind":{"Impl":{"id":391}},"from":{"krate":0,"index":4753},"to":{"krate":2,"index":2831}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1389293,"byte_end":1389311,"line_start":696,"line_end":696,"column_start":18,"column_end":36},"kind":{"Impl":{"id":392}},"from":{"krate":0,"index":4762},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1390803,"byte_end":1390814,"line_start":748,"line_end":748,"column_start":26,"column_end":37},"kind":{"Impl":{"id":393}},"from":{"krate":0,"index":8869},"to":{"krate":2,"index":8887}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1391656,"byte_end":1391671,"line_start":771,"line_end":771,"column_start":38,"column_end":53},"kind":{"Impl":{"id":394}},"from":{"krate":0,"index":8883},"to":{"krate":46,"index":249}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1391882,"byte_end":1391897,"line_start":781,"line_end":781,"column_start":10,"column_end":25},"kind":{"Impl":{"id":395}},"from":{"krate":0,"index":8883},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1393453,"byte_end":1393468,"line_start":828,"line_end":828,"column_start":34,"column_end":49},"kind":{"Impl":{"id":396}},"from":{"krate":0,"index":8883},"to":{"krate":46,"index":747}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1394209,"byte_end":1394228,"line_start":852,"line_end":852,"column_start":22,"column_end":41},"kind":{"Impl":{"id":397}},"from":{"krate":0,"index":4803},"to":{"krate":2,"index":2831}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1394591,"byte_end":1394613,"line_start":866,"line_end":866,"column_start":18,"column_end":40},"kind":{"Impl":{"id":398}},"from":{"krate":0,"index":4811},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1395672,"byte_end":1395687,"line_start":901,"line_end":901,"column_start":26,"column_end":41},"kind":{"Impl":{"id":399}},"from":{"krate":0,"index":8883},"to":{"krate":2,"index":8887}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1396137,"byte_end":1396144,"line_start":917,"line_end":917,"column_start":38,"column_end":45},"kind":{"Impl":{"id":400}},"from":{"krate":0,"index":8897},"to":{"krate":46,"index":249}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1396347,"byte_end":1396354,"line_start":927,"line_end":927,"column_start":10,"column_end":17},"kind":{"Impl":{"id":401}},"from":{"krate":0,"index":8897},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1399979,"byte_end":1399986,"line_start":1041,"line_end":1041,"column_start":34,"column_end":41},"kind":{"Impl":{"id":402}},"from":{"krate":0,"index":8897},"to":{"krate":46,"index":747}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1401856,"byte_end":1401867,"line_start":1077,"line_end":1077,"column_start":22,"column_end":33},"kind":{"Impl":{"id":403}},"from":{"krate":0,"index":4861},"to":{"krate":2,"index":2831}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1402319,"byte_end":1402333,"line_start":1093,"line_end":1093,"column_start":18,"column_end":32},"kind":{"Impl":{"id":404}},"from":{"krate":0,"index":4871},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Message.rs","byte_start":1404051,"byte_end":1404058,"line_start":1152,"line_end":1152,"column_start":26,"column_end":33},"kind":{"Impl":{"id":405}},"from":{"krate":0,"index":8897},"to":{"krate":2,"index":8887}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1411846,"byte_end":1411861,"line_start":52,"line_end":52,"column_start":6,"column_end":21},"kind":{"Impl":{"id":406}},"from":{"krate":0,"index":8911},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1413212,"byte_end":1413227,"line_start":86,"line_end":86,"column_start":26,"column_end":41},"kind":{"Impl":{"id":407}},"from":{"krate":0,"index":8911},"to":{"krate":2,"index":8887}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1413515,"byte_end":1413530,"line_start":95,"line_end":95,"column_start":38,"column_end":53},"kind":{"Impl":{"id":408}},"from":{"krate":0,"index":8911},"to":{"krate":46,"index":249}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1413742,"byte_end":1413757,"line_start":104,"line_end":104,"column_start":28,"column_end":43},"kind":{"Impl":{"id":409}},"from":{"krate":0,"index":8911},"to":{"krate":46,"index":469}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1413961,"byte_end":1413976,"line_start":112,"line_end":112,"column_start":36,"column_end":51},"kind":{"Impl":{"id":410}},"from":{"krate":0,"index":8911},"to":{"krate":46,"index":226}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1414247,"byte_end":1414262,"line_start":125,"line_end":125,"column_start":38,"column_end":53},"kind":{"Impl":{"id":411}},"from":{"krate":0,"index":8911},"to":{"krate":46,"index":747}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1414553,"byte_end":1414568,"line_start":136,"line_end":136,"column_start":45,"column_end":60},"kind":{"Impl":{"id":412}},"from":{"krate":0,"index":8911},"to":{"krate":46,"index":754}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1416208,"byte_end":1416215,"line_start":179,"line_end":179,"column_start":6,"column_end":13},"kind":{"Impl":{"id":413}},"from":{"krate":0,"index":8931},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1417233,"byte_end":1417240,"line_start":207,"line_end":207,"column_start":26,"column_end":33},"kind":{"Impl":{"id":414}},"from":{"krate":0,"index":8931},"to":{"krate":2,"index":8887}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1417528,"byte_end":1417535,"line_start":216,"line_end":216,"column_start":38,"column_end":45},"kind":{"Impl":{"id":415}},"from":{"krate":0,"index":8931},"to":{"krate":46,"index":249}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1417747,"byte_end":1417754,"line_start":225,"line_end":225,"column_start":28,"column_end":35},"kind":{"Impl":{"id":416}},"from":{"krate":0,"index":8931},"to":{"krate":46,"index":469}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1417950,"byte_end":1417957,"line_start":233,"line_end":233,"column_start":36,"column_end":43},"kind":{"Impl":{"id":417}},"from":{"krate":0,"index":8931},"to":{"krate":46,"index":226}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1418228,"byte_end":1418235,"line_start":246,"line_end":246,"column_start":38,"column_end":45},"kind":{"Impl":{"id":418}},"from":{"krate":0,"index":8931},"to":{"krate":46,"index":747}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1418526,"byte_end":1418533,"line_start":257,"line_end":257,"column_start":45,"column_end":52},"kind":{"Impl":{"id":419}},"from":{"krate":0,"index":8931},"to":{"krate":46,"index":754}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1419268,"byte_end":1419277,"line_start":279,"line_end":279,"column_start":6,"column_end":15},"kind":{"Impl":{"id":420}},"from":{"krate":0,"index":8951},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1419779,"byte_end":1419788,"line_start":295,"line_end":295,"column_start":26,"column_end":35},"kind":{"Impl":{"id":421}},"from":{"krate":0,"index":8951},"to":{"krate":2,"index":8887}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1420076,"byte_end":1420085,"line_start":304,"line_end":304,"column_start":38,"column_end":47},"kind":{"Impl":{"id":422}},"from":{"krate":0,"index":8951},"to":{"krate":46,"index":249}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1420297,"byte_end":1420306,"line_start":313,"line_end":313,"column_start":28,"column_end":37},"kind":{"Impl":{"id":423}},"from":{"krate":0,"index":8951},"to":{"krate":46,"index":469}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1420504,"byte_end":1420513,"line_start":321,"line_end":321,"column_start":36,"column_end":45},"kind":{"Impl":{"id":424}},"from":{"krate":0,"index":8951},"to":{"krate":46,"index":226}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1420784,"byte_end":1420793,"line_start":334,"line_end":334,"column_start":38,"column_end":47},"kind":{"Impl":{"id":425}},"from":{"krate":0,"index":8951},"to":{"krate":46,"index":747}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1421084,"byte_end":1421093,"line_start":345,"line_end":345,"column_start":45,"column_end":54},"kind":{"Impl":{"id":426}},"from":{"krate":0,"index":8951},"to":{"krate":46,"index":754}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1421847,"byte_end":1421856,"line_start":368,"line_end":368,"column_start":6,"column_end":15},"kind":{"Impl":{"id":427}},"from":{"krate":0,"index":8971},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1422450,"byte_end":1422459,"line_start":386,"line_end":386,"column_start":26,"column_end":35},"kind":{"Impl":{"id":428}},"from":{"krate":0,"index":8971},"to":{"krate":2,"index":8887}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1422747,"byte_end":1422756,"line_start":395,"line_end":395,"column_start":38,"column_end":47},"kind":{"Impl":{"id":429}},"from":{"krate":0,"index":8971},"to":{"krate":46,"index":249}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1422968,"byte_end":1422977,"line_start":404,"line_end":404,"column_start":28,"column_end":37},"kind":{"Impl":{"id":430}},"from":{"krate":0,"index":8971},"to":{"krate":46,"index":469}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1423175,"byte_end":1423184,"line_start":412,"line_end":412,"column_start":36,"column_end":45},"kind":{"Impl":{"id":431}},"from":{"krate":0,"index":8971},"to":{"krate":46,"index":226}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1423455,"byte_end":1423464,"line_start":425,"line_end":425,"column_start":38,"column_end":47},"kind":{"Impl":{"id":432}},"from":{"krate":0,"index":8971},"to":{"krate":46,"index":747}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1423755,"byte_end":1423764,"line_start":436,"line_end":436,"column_start":45,"column_end":54},"kind":{"Impl":{"id":433}},"from":{"krate":0,"index":8971},"to":{"krate":46,"index":754}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1424495,"byte_end":1424503,"line_start":458,"line_end":458,"column_start":6,"column_end":14},"kind":{"Impl":{"id":434}},"from":{"krate":0,"index":8991},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1425017,"byte_end":1425025,"line_start":474,"line_end":474,"column_start":26,"column_end":34},"kind":{"Impl":{"id":435}},"from":{"krate":0,"index":8991},"to":{"krate":2,"index":8887}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1425313,"byte_end":1425321,"line_start":483,"line_end":483,"column_start":38,"column_end":46},"kind":{"Impl":{"id":436}},"from":{"krate":0,"index":8991},"to":{"krate":46,"index":249}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1425533,"byte_end":1425541,"line_start":492,"line_end":492,"column_start":28,"column_end":36},"kind":{"Impl":{"id":437}},"from":{"krate":0,"index":8991},"to":{"krate":46,"index":469}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1425738,"byte_end":1425746,"line_start":500,"line_end":500,"column_start":36,"column_end":44},"kind":{"Impl":{"id":438}},"from":{"krate":0,"index":8991},"to":{"krate":46,"index":226}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1426017,"byte_end":1426025,"line_start":513,"line_end":513,"column_start":38,"column_end":46},"kind":{"Impl":{"id":439}},"from":{"krate":0,"index":8991},"to":{"krate":46,"index":747}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1426316,"byte_end":1426324,"line_start":524,"line_end":524,"column_start":45,"column_end":53},"kind":{"Impl":{"id":440}},"from":{"krate":0,"index":8991},"to":{"krate":46,"index":754}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1427122,"byte_end":1427130,"line_start":551,"line_end":551,"column_start":6,"column_end":14},"kind":{"Impl":{"id":441}},"from":{"krate":0,"index":9011},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1427923,"byte_end":1427931,"line_start":576,"line_end":576,"column_start":26,"column_end":34},"kind":{"Impl":{"id":442}},"from":{"krate":0,"index":9011},"to":{"krate":2,"index":8887}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1428219,"byte_end":1428227,"line_start":585,"line_end":585,"column_start":38,"column_end":46},"kind":{"Impl":{"id":443}},"from":{"krate":0,"index":9011},"to":{"krate":46,"index":249}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1428439,"byte_end":1428447,"line_start":594,"line_end":594,"column_start":28,"column_end":36},"kind":{"Impl":{"id":444}},"from":{"krate":0,"index":9011},"to":{"krate":46,"index":469}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1428644,"byte_end":1428652,"line_start":602,"line_end":602,"column_start":36,"column_end":44},"kind":{"Impl":{"id":445}},"from":{"krate":0,"index":9011},"to":{"krate":46,"index":226}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1428923,"byte_end":1428931,"line_start":615,"line_end":615,"column_start":38,"column_end":46},"kind":{"Impl":{"id":446}},"from":{"krate":0,"index":9011},"to":{"krate":46,"index":747}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1429222,"byte_end":1429230,"line_start":626,"line_end":626,"column_start":45,"column_end":53},"kind":{"Impl":{"id":447}},"from":{"krate":0,"index":9011},"to":{"krate":46,"index":754}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1429997,"byte_end":1430009,"line_start":649,"line_end":649,"column_start":6,"column_end":18},"kind":{"Impl":{"id":448}},"from":{"krate":0,"index":9031},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1430539,"byte_end":1430551,"line_start":665,"line_end":665,"column_start":26,"column_end":38},"kind":{"Impl":{"id":449}},"from":{"krate":0,"index":9031},"to":{"krate":2,"index":8887}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1430839,"byte_end":1430851,"line_start":674,"line_end":674,"column_start":38,"column_end":50},"kind":{"Impl":{"id":450}},"from":{"krate":0,"index":9031},"to":{"krate":46,"index":249}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1431063,"byte_end":1431075,"line_start":683,"line_end":683,"column_start":28,"column_end":40},"kind":{"Impl":{"id":451}},"from":{"krate":0,"index":9031},"to":{"krate":46,"index":469}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1431276,"byte_end":1431288,"line_start":691,"line_end":691,"column_start":36,"column_end":48},"kind":{"Impl":{"id":452}},"from":{"krate":0,"index":9031},"to":{"krate":46,"index":226}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1431559,"byte_end":1431571,"line_start":704,"line_end":704,"column_start":38,"column_end":50},"kind":{"Impl":{"id":453}},"from":{"krate":0,"index":9031},"to":{"krate":46,"index":747}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1431862,"byte_end":1431874,"line_start":715,"line_end":715,"column_start":45,"column_end":57},"kind":{"Impl":{"id":454}},"from":{"krate":0,"index":9031},"to":{"krate":46,"index":754}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1433191,"byte_end":1433195,"line_start":763,"line_end":763,"column_start":6,"column_end":10},"kind":{"Impl":{"id":455}},"from":{"krate":0,"index":9051},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1435903,"byte_end":1435907,"line_start":842,"line_end":842,"column_start":26,"column_end":30},"kind":{"Impl":{"id":456}},"from":{"krate":0,"index":9051},"to":{"krate":2,"index":8887}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1436230,"byte_end":1436234,"line_start":852,"line_end":852,"column_start":38,"column_end":42},"kind":{"Impl":{"id":457}},"from":{"krate":0,"index":9051},"to":{"krate":46,"index":249}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1436445,"byte_end":1436449,"line_start":861,"line_end":861,"column_start":28,"column_end":32},"kind":{"Impl":{"id":458}},"from":{"krate":0,"index":9051},"to":{"krate":46,"index":469}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1436641,"byte_end":1436645,"line_start":869,"line_end":869,"column_start":36,"column_end":40},"kind":{"Impl":{"id":459}},"from":{"krate":0,"index":9051},"to":{"krate":46,"index":226}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1436914,"byte_end":1436918,"line_start":882,"line_end":882,"column_start":38,"column_end":42},"kind":{"Impl":{"id":460}},"from":{"krate":0,"index":9051},"to":{"krate":46,"index":747}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1437208,"byte_end":1437212,"line_start":893,"line_end":893,"column_start":45,"column_end":49},"kind":{"Impl":{"id":461}},"from":{"krate":0,"index":9051},"to":{"krate":46,"index":754}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1438241,"byte_end":1438255,"line_start":920,"line_end":920,"column_start":6,"column_end":20},"kind":{"Impl":{"id":462}},"from":{"krate":0,"index":9071},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1438681,"byte_end":1438695,"line_start":934,"line_end":934,"column_start":26,"column_end":40},"kind":{"Impl":{"id":463}},"from":{"krate":0,"index":9071},"to":{"krate":2,"index":8887}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1438983,"byte_end":1438997,"line_start":943,"line_end":943,"column_start":38,"column_end":52},"kind":{"Impl":{"id":464}},"from":{"krate":0,"index":9071},"to":{"krate":46,"index":249}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1439209,"byte_end":1439223,"line_start":952,"line_end":952,"column_start":28,"column_end":42},"kind":{"Impl":{"id":465}},"from":{"krate":0,"index":9071},"to":{"krate":46,"index":469}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1439426,"byte_end":1439440,"line_start":960,"line_end":960,"column_start":36,"column_end":50},"kind":{"Impl":{"id":466}},"from":{"krate":0,"index":9071},"to":{"krate":46,"index":226}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1439711,"byte_end":1439725,"line_start":973,"line_end":973,"column_start":38,"column_end":52},"kind":{"Impl":{"id":467}},"from":{"krate":0,"index":9071},"to":{"krate":46,"index":747}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1440016,"byte_end":1440030,"line_start":984,"line_end":984,"column_start":45,"column_end":59},"kind":{"Impl":{"id":468}},"from":{"krate":0,"index":9071},"to":{"krate":46,"index":754}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1440892,"byte_end":1440902,"line_start":1008,"line_end":1008,"column_start":6,"column_end":16},"kind":{"Impl":{"id":469}},"from":{"krate":0,"index":9091},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1441396,"byte_end":1441406,"line_start":1024,"line_end":1024,"column_start":26,"column_end":36},"kind":{"Impl":{"id":470}},"from":{"krate":0,"index":9091},"to":{"krate":2,"index":8887}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1441694,"byte_end":1441704,"line_start":1033,"line_end":1033,"column_start":38,"column_end":48},"kind":{"Impl":{"id":471}},"from":{"krate":0,"index":9091},"to":{"krate":46,"index":249}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1441916,"byte_end":1441926,"line_start":1042,"line_end":1042,"column_start":28,"column_end":38},"kind":{"Impl":{"id":472}},"from":{"krate":0,"index":9091},"to":{"krate":46,"index":469}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1442125,"byte_end":1442135,"line_start":1050,"line_end":1050,"column_start":36,"column_end":46},"kind":{"Impl":{"id":473}},"from":{"krate":0,"index":9091},"to":{"krate":46,"index":226}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1442406,"byte_end":1442416,"line_start":1063,"line_end":1063,"column_start":38,"column_end":48},"kind":{"Impl":{"id":474}},"from":{"krate":0,"index":9091},"to":{"krate":46,"index":747}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1442707,"byte_end":1442717,"line_start":1074,"line_end":1074,"column_start":45,"column_end":55},"kind":{"Impl":{"id":475}},"from":{"krate":0,"index":9091},"to":{"krate":46,"index":754}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1443045,"byte_end":1443051,"line_start":1084,"line_end":1084,"column_start":26,"column_end":32},"kind":{"Impl":{"id":476}},"from":{"krate":0,"index":9111},"to":{"krate":2,"index":8887}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1443321,"byte_end":1443327,"line_start":1093,"line_end":1093,"column_start":45,"column_end":51},"kind":{"Impl":{"id":477}},"from":{"krate":0,"index":9111},"to":{"krate":46,"index":754}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1443369,"byte_end":1443375,"line_start":1094,"line_end":1094,"column_start":39,"column_end":45},"kind":{"Impl":{"id":478}},"from":{"krate":0,"index":9111},"to":{"krate":46,"index":578}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1443416,"byte_end":1443422,"line_start":1095,"line_end":1095,"column_start":38,"column_end":44},"kind":{"Impl":{"id":479}},"from":{"krate":0,"index":9111},"to":{"krate":46,"index":249}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1443820,"byte_end":1443826,"line_start":1109,"line_end":1109,"column_start":32,"column_end":38},"kind":{"Impl":{"id":480}},"from":{"krate":0,"index":9111},"to":{"krate":46,"index":469}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1444484,"byte_end":1444490,"line_start":1134,"line_end":1134,"column_start":38,"column_end":44},"kind":{"Impl":{"id":481}},"from":{"krate":0,"index":9111},"to":{"krate":46,"index":747}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1444740,"byte_end":1444746,"line_start":1144,"line_end":1144,"column_start":6,"column_end":12},"kind":{"Impl":{"id":482}},"from":{"krate":0,"index":9111},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1445774,"byte_end":1445778,"line_start":1174,"line_end":1174,"column_start":38,"column_end":42},"kind":{"Impl":{"id":483}},"from":{"krate":0,"index":9121},"to":{"krate":46,"index":249}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1445978,"byte_end":1445982,"line_start":1184,"line_end":1184,"column_start":10,"column_end":14},"kind":{"Impl":{"id":484}},"from":{"krate":0,"index":9121},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1446457,"byte_end":1446461,"line_start":1199,"line_end":1199,"column_start":34,"column_end":38},"kind":{"Impl":{"id":485}},"from":{"krate":0,"index":9121},"to":{"krate":46,"index":747}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1446774,"byte_end":1446782,"line_start":1211,"line_end":1211,"column_start":22,"column_end":30},"kind":{"Impl":{"id":486}},"from":{"krate":0,"index":5317},"to":{"krate":2,"index":2831}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1447039,"byte_end":1447050,"line_start":1221,"line_end":1221,"column_start":18,"column_end":29},"kind":{"Impl":{"id":487}},"from":{"krate":0,"index":5321},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1447501,"byte_end":1447505,"line_start":1237,"line_end":1237,"column_start":26,"column_end":30},"kind":{"Impl":{"id":488}},"from":{"krate":0,"index":9121},"to":{"krate":2,"index":8887}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1448010,"byte_end":1448017,"line_start":1253,"line_end":1253,"column_start":38,"column_end":45},"kind":{"Impl":{"id":489}},"from":{"krate":0,"index":9135},"to":{"krate":46,"index":249}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1448220,"byte_end":1448227,"line_start":1263,"line_end":1263,"column_start":10,"column_end":17},"kind":{"Impl":{"id":490}},"from":{"krate":0,"index":9135},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1448714,"byte_end":1448721,"line_start":1278,"line_end":1278,"column_start":34,"column_end":41},"kind":{"Impl":{"id":491}},"from":{"krate":0,"index":9135},"to":{"krate":46,"index":747}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1449037,"byte_end":1449048,"line_start":1290,"line_end":1290,"column_start":22,"column_end":33},"kind":{"Impl":{"id":492}},"from":{"krate":0,"index":5352},"to":{"krate":2,"index":2831}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1449311,"byte_end":1449325,"line_start":1300,"line_end":1300,"column_start":18,"column_end":32},"kind":{"Impl":{"id":493}},"from":{"krate":0,"index":5356},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1449800,"byte_end":1449807,"line_start":1318,"line_end":1318,"column_start":26,"column_end":33},"kind":{"Impl":{"id":494}},"from":{"krate":0,"index":9135},"to":{"krate":2,"index":8887}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1450121,"byte_end":1450125,"line_start":1331,"line_end":1331,"column_start":38,"column_end":42},"kind":{"Impl":{"id":495}},"from":{"krate":0,"index":9149},"to":{"krate":46,"index":249}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1450325,"byte_end":1450329,"line_start":1341,"line_end":1341,"column_start":10,"column_end":14},"kind":{"Impl":{"id":496}},"from":{"krate":0,"index":9149},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1450804,"byte_end":1450808,"line_start":1356,"line_end":1356,"column_start":34,"column_end":38},"kind":{"Impl":{"id":497}},"from":{"krate":0,"index":9149},"to":{"krate":46,"index":747}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1451121,"byte_end":1451129,"line_start":1368,"line_end":1368,"column_start":22,"column_end":30},"kind":{"Impl":{"id":498}},"from":{"krate":0,"index":5387},"to":{"krate":2,"index":2831}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1451386,"byte_end":1451397,"line_start":1378,"line_end":1378,"column_start":18,"column_end":29},"kind":{"Impl":{"id":499}},"from":{"krate":0,"index":5391},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1451848,"byte_end":1451852,"line_start":1394,"line_end":1394,"column_start":26,"column_end":30},"kind":{"Impl":{"id":500}},"from":{"krate":0,"index":9149},"to":{"krate":2,"index":8887}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1452271,"byte_end":1452280,"line_start":1409,"line_end":1409,"column_start":38,"column_end":47},"kind":{"Impl":{"id":501}},"from":{"krate":0,"index":9163},"to":{"krate":46,"index":249}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1452485,"byte_end":1452494,"line_start":1419,"line_end":1419,"column_start":10,"column_end":19},"kind":{"Impl":{"id":502}},"from":{"krate":0,"index":9163},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1452989,"byte_end":1452998,"line_start":1434,"line_end":1434,"column_start":34,"column_end":43},"kind":{"Impl":{"id":503}},"from":{"krate":0,"index":9163},"to":{"krate":46,"index":747}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1453316,"byte_end":1453329,"line_start":1446,"line_end":1446,"column_start":22,"column_end":35},"kind":{"Impl":{"id":504}},"from":{"krate":0,"index":5422},"to":{"krate":2,"index":2831}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1453596,"byte_end":1453612,"line_start":1456,"line_end":1456,"column_start":18,"column_end":34},"kind":{"Impl":{"id":505}},"from":{"krate":0,"index":5426},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1454093,"byte_end":1454102,"line_start":1474,"line_end":1474,"column_start":26,"column_end":35},"kind":{"Impl":{"id":506}},"from":{"krate":0,"index":9163},"to":{"krate":2,"index":8887}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1454436,"byte_end":1454449,"line_start":1487,"line_end":1487,"column_start":38,"column_end":51},"kind":{"Impl":{"id":507}},"from":{"krate":0,"index":9177},"to":{"krate":46,"index":249}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1454658,"byte_end":1454671,"line_start":1497,"line_end":1497,"column_start":10,"column_end":23},"kind":{"Impl":{"id":508}},"from":{"krate":0,"index":9177},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1455478,"byte_end":1455491,"line_start":1523,"line_end":1523,"column_start":34,"column_end":47},"kind":{"Impl":{"id":509}},"from":{"krate":0,"index":9177},"to":{"krate":46,"index":747}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1455922,"byte_end":1455939,"line_start":1539,"line_end":1539,"column_start":22,"column_end":39},"kind":{"Impl":{"id":510}},"from":{"krate":0,"index":5459},"to":{"krate":2,"index":2831}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1456227,"byte_end":1456247,"line_start":1549,"line_end":1549,"column_start":18,"column_end":38},"kind":{"Impl":{"id":511}},"from":{"krate":0,"index":5464},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1456902,"byte_end":1456915,"line_start":1572,"line_end":1572,"column_start":26,"column_end":39},"kind":{"Impl":{"id":512}},"from":{"krate":0,"index":9177},"to":{"krate":2,"index":8887}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1458335,"byte_end":1458338,"line_start":1611,"line_end":1611,"column_start":38,"column_end":41},"kind":{"Impl":{"id":513}},"from":{"krate":0,"index":9191},"to":{"krate":46,"index":249}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1458537,"byte_end":1458540,"line_start":1621,"line_end":1621,"column_start":10,"column_end":13},"kind":{"Impl":{"id":514}},"from":{"krate":0,"index":9191},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1459335,"byte_end":1459338,"line_start":1647,"line_end":1647,"column_start":34,"column_end":37},"kind":{"Impl":{"id":515}},"from":{"krate":0,"index":9191},"to":{"krate":46,"index":747}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1459767,"byte_end":1459774,"line_start":1663,"line_end":1663,"column_start":22,"column_end":29},"kind":{"Impl":{"id":516}},"from":{"krate":0,"index":5498},"to":{"krate":2,"index":2831}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1460048,"byte_end":1460058,"line_start":1673,"line_end":1673,"column_start":18,"column_end":28},"kind":{"Impl":{"id":517}},"from":{"krate":0,"index":5503},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1460672,"byte_end":1460675,"line_start":1694,"line_end":1694,"column_start":26,"column_end":29},"kind":{"Impl":{"id":518}},"from":{"krate":0,"index":9191},"to":{"krate":2,"index":8887}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1461326,"byte_end":1461331,"line_start":1712,"line_end":1712,"column_start":38,"column_end":43},"kind":{"Impl":{"id":519}},"from":{"krate":0,"index":9205},"to":{"krate":46,"index":249}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1461532,"byte_end":1461537,"line_start":1722,"line_end":1722,"column_start":10,"column_end":15},"kind":{"Impl":{"id":520}},"from":{"krate":0,"index":9205},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1462676,"byte_end":1462681,"line_start":1759,"line_end":1759,"column_start":34,"column_end":39},"kind":{"Impl":{"id":521}},"from":{"krate":0,"index":9205},"to":{"krate":46,"index":747}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1463375,"byte_end":1463384,"line_start":1781,"line_end":1781,"column_start":22,"column_end":31},"kind":{"Impl":{"id":522}},"from":{"krate":0,"index":5539},"to":{"krate":2,"index":2831}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1463720,"byte_end":1463732,"line_start":1794,"line_end":1794,"column_start":18,"column_end":30},"kind":{"Impl":{"id":523}},"from":{"krate":0,"index":5546},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1464600,"byte_end":1464605,"line_start":1823,"line_end":1823,"column_start":26,"column_end":31},"kind":{"Impl":{"id":524}},"from":{"krate":0,"index":9205},"to":{"krate":2,"index":8887}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1465001,"byte_end":1465004,"line_start":1838,"line_end":1838,"column_start":38,"column_end":41},"kind":{"Impl":{"id":525}},"from":{"krate":0,"index":9219},"to":{"krate":46,"index":249}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1465203,"byte_end":1465206,"line_start":1848,"line_end":1848,"column_start":10,"column_end":13},"kind":{"Impl":{"id":526}},"from":{"krate":0,"index":9219},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1466155,"byte_end":1466158,"line_start":1879,"line_end":1879,"column_start":34,"column_end":37},"kind":{"Impl":{"id":527}},"from":{"krate":0,"index":9219},"to":{"krate":46,"index":747}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1466679,"byte_end":1466686,"line_start":1897,"line_end":1897,"column_start":22,"column_end":29},"kind":{"Impl":{"id":528}},"from":{"krate":0,"index":5583},"to":{"krate":2,"index":2831}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1467005,"byte_end":1467015,"line_start":1910,"line_end":1910,"column_start":18,"column_end":28},"kind":{"Impl":{"id":529}},"from":{"krate":0,"index":5589},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1467764,"byte_end":1467767,"line_start":1935,"line_end":1935,"column_start":26,"column_end":29},"kind":{"Impl":{"id":530}},"from":{"krate":0,"index":9219},"to":{"krate":2,"index":8887}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1468193,"byte_end":1468206,"line_start":1950,"line_end":1950,"column_start":38,"column_end":51},"kind":{"Impl":{"id":531}},"from":{"krate":0,"index":9233},"to":{"krate":46,"index":249}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1468415,"byte_end":1468428,"line_start":1960,"line_end":1960,"column_start":10,"column_end":23},"kind":{"Impl":{"id":532}},"from":{"krate":0,"index":9233},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1469227,"byte_end":1469240,"line_start":1985,"line_end":1985,"column_start":34,"column_end":47},"kind":{"Impl":{"id":533}},"from":{"krate":0,"index":9233},"to":{"krate":46,"index":747}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1469686,"byte_end":1469703,"line_start":2001,"line_end":2001,"column_start":22,"column_end":39},"kind":{"Impl":{"id":534}},"from":{"krate":0,"index":5624},"to":{"krate":2,"index":2831}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1470027,"byte_end":1470047,"line_start":2013,"line_end":2013,"column_start":18,"column_end":38},"kind":{"Impl":{"id":535}},"from":{"krate":0,"index":5629},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1470766,"byte_end":1470779,"line_start":2039,"line_end":2039,"column_start":26,"column_end":39},"kind":{"Impl":{"id":536}},"from":{"krate":0,"index":9233},"to":{"krate":2,"index":8887}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1471181,"byte_end":1471185,"line_start":2054,"line_end":2054,"column_start":38,"column_end":42},"kind":{"Impl":{"id":537}},"from":{"krate":0,"index":9247},"to":{"krate":46,"index":249}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1471385,"byte_end":1471389,"line_start":2064,"line_end":2064,"column_start":10,"column_end":14},"kind":{"Impl":{"id":538}},"from":{"krate":0,"index":9247},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1471864,"byte_end":1471868,"line_start":2079,"line_end":2079,"column_start":34,"column_end":38},"kind":{"Impl":{"id":539}},"from":{"krate":0,"index":9247},"to":{"krate":46,"index":747}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1472181,"byte_end":1472189,"line_start":2091,"line_end":2091,"column_start":22,"column_end":30},"kind":{"Impl":{"id":540}},"from":{"krate":0,"index":5661},"to":{"krate":2,"index":2831}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1472446,"byte_end":1472457,"line_start":2101,"line_end":2101,"column_start":18,"column_end":29},"kind":{"Impl":{"id":541}},"from":{"krate":0,"index":5665},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1472908,"byte_end":1472912,"line_start":2117,"line_end":2117,"column_start":26,"column_end":30},"kind":{"Impl":{"id":542}},"from":{"krate":0,"index":9247},"to":{"krate":2,"index":8887}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1473250,"byte_end":1473256,"line_start":2131,"line_end":2131,"column_start":38,"column_end":44},"kind":{"Impl":{"id":543}},"from":{"krate":0,"index":9261},"to":{"krate":46,"index":249}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1473458,"byte_end":1473464,"line_start":2141,"line_end":2141,"column_start":10,"column_end":16},"kind":{"Impl":{"id":544}},"from":{"krate":0,"index":9261},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1473947,"byte_end":1473953,"line_start":2156,"line_end":2156,"column_start":34,"column_end":40},"kind":{"Impl":{"id":545}},"from":{"krate":0,"index":9261},"to":{"krate":46,"index":747}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1474268,"byte_end":1474278,"line_start":2168,"line_end":2168,"column_start":22,"column_end":32},"kind":{"Impl":{"id":546}},"from":{"krate":0,"index":5696},"to":{"krate":2,"index":2831}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1474539,"byte_end":1474552,"line_start":2178,"line_end":2178,"column_start":18,"column_end":31},"kind":{"Impl":{"id":547}},"from":{"krate":0,"index":5700},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1475024,"byte_end":1475030,"line_start":2196,"line_end":2196,"column_start":26,"column_end":32},"kind":{"Impl":{"id":548}},"from":{"krate":0,"index":9261},"to":{"krate":2,"index":8887}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1475451,"byte_end":1475460,"line_start":2211,"line_end":2211,"column_start":38,"column_end":47},"kind":{"Impl":{"id":549}},"from":{"krate":0,"index":9275},"to":{"krate":46,"index":249}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1475665,"byte_end":1475674,"line_start":2221,"line_end":2221,"column_start":10,"column_end":19},"kind":{"Impl":{"id":550}},"from":{"krate":0,"index":9275},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1476169,"byte_end":1476178,"line_start":2236,"line_end":2236,"column_start":34,"column_end":43},"kind":{"Impl":{"id":551}},"from":{"krate":0,"index":9275},"to":{"krate":46,"index":747}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1476496,"byte_end":1476509,"line_start":2248,"line_end":2248,"column_start":22,"column_end":35},"kind":{"Impl":{"id":552}},"from":{"krate":0,"index":5731},"to":{"krate":2,"index":2831}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1476776,"byte_end":1476792,"line_start":2258,"line_end":2258,"column_start":18,"column_end":34},"kind":{"Impl":{"id":553}},"from":{"krate":0,"index":5735},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1477273,"byte_end":1477282,"line_start":2276,"line_end":2276,"column_start":26,"column_end":35},"kind":{"Impl":{"id":554}},"from":{"krate":0,"index":9275},"to":{"krate":2,"index":8887}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1477712,"byte_end":1477723,"line_start":2291,"line_end":2291,"column_start":38,"column_end":49},"kind":{"Impl":{"id":555}},"from":{"krate":0,"index":9289},"to":{"krate":46,"index":249}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1477930,"byte_end":1477941,"line_start":2301,"line_end":2301,"column_start":10,"column_end":21},"kind":{"Impl":{"id":556}},"from":{"krate":0,"index":9289},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1478444,"byte_end":1478455,"line_start":2316,"line_end":2316,"column_start":34,"column_end":45},"kind":{"Impl":{"id":557}},"from":{"krate":0,"index":9289},"to":{"krate":46,"index":747}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1478775,"byte_end":1478790,"line_start":2328,"line_end":2328,"column_start":22,"column_end":37},"kind":{"Impl":{"id":558}},"from":{"krate":0,"index":5766},"to":{"krate":2,"index":2831}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1479061,"byte_end":1479079,"line_start":2338,"line_end":2338,"column_start":18,"column_end":36},"kind":{"Impl":{"id":559}},"from":{"krate":0,"index":5770},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1479566,"byte_end":1479577,"line_start":2356,"line_end":2356,"column_start":26,"column_end":37},"kind":{"Impl":{"id":560}},"from":{"krate":0,"index":9289},"to":{"krate":2,"index":8887}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1479917,"byte_end":1479932,"line_start":2369,"line_end":2369,"column_start":38,"column_end":53},"kind":{"Impl":{"id":561}},"from":{"krate":0,"index":9303},"to":{"krate":46,"index":249}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1480143,"byte_end":1480158,"line_start":2379,"line_end":2379,"column_start":10,"column_end":25},"kind":{"Impl":{"id":562}},"from":{"krate":0,"index":9303},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1480975,"byte_end":1480990,"line_start":2405,"line_end":2405,"column_start":34,"column_end":49},"kind":{"Impl":{"id":563}},"from":{"krate":0,"index":9303},"to":{"krate":46,"index":747}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1481426,"byte_end":1481445,"line_start":2421,"line_end":2421,"column_start":22,"column_end":41},"kind":{"Impl":{"id":564}},"from":{"krate":0,"index":5803},"to":{"krate":2,"index":2831}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1481738,"byte_end":1481760,"line_start":2431,"line_end":2431,"column_start":18,"column_end":40},"kind":{"Impl":{"id":565}},"from":{"krate":0,"index":5808},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1482427,"byte_end":1482442,"line_start":2454,"line_end":2454,"column_start":26,"column_end":41},"kind":{"Impl":{"id":566}},"from":{"krate":0,"index":9303},"to":{"krate":2,"index":8887}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1482814,"byte_end":1482818,"line_start":2468,"line_end":2468,"column_start":38,"column_end":42},"kind":{"Impl":{"id":567}},"from":{"krate":0,"index":9317},"to":{"krate":46,"index":249}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1483018,"byte_end":1483022,"line_start":2478,"line_end":2478,"column_start":10,"column_end":14},"kind":{"Impl":{"id":568}},"from":{"krate":0,"index":9317},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1483497,"byte_end":1483501,"line_start":2493,"line_end":2493,"column_start":34,"column_end":38},"kind":{"Impl":{"id":569}},"from":{"krate":0,"index":9317},"to":{"krate":46,"index":747}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1483814,"byte_end":1483822,"line_start":2505,"line_end":2505,"column_start":22,"column_end":30},"kind":{"Impl":{"id":570}},"from":{"krate":0,"index":5840},"to":{"krate":2,"index":2831}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1484079,"byte_end":1484090,"line_start":2515,"line_end":2515,"column_start":18,"column_end":29},"kind":{"Impl":{"id":571}},"from":{"krate":0,"index":5844},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1484541,"byte_end":1484545,"line_start":2531,"line_end":2531,"column_start":26,"column_end":30},"kind":{"Impl":{"id":572}},"from":{"krate":0,"index":9317},"to":{"krate":2,"index":8887}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1485089,"byte_end":1485096,"line_start":2548,"line_end":2548,"column_start":38,"column_end":45},"kind":{"Impl":{"id":573}},"from":{"krate":0,"index":9331},"to":{"krate":46,"index":249}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1485299,"byte_end":1485306,"line_start":2558,"line_end":2558,"column_start":10,"column_end":17},"kind":{"Impl":{"id":574}},"from":{"krate":0,"index":9331},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1486738,"byte_end":1486745,"line_start":2601,"line_end":2601,"column_start":34,"column_end":41},"kind":{"Impl":{"id":575}},"from":{"krate":0,"index":9331},"to":{"krate":46,"index":747}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1487354,"byte_end":1487365,"line_start":2621,"line_end":2621,"column_start":22,"column_end":33},"kind":{"Impl":{"id":576}},"from":{"krate":0,"index":5881},"to":{"krate":2,"index":2831}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1487712,"byte_end":1487726,"line_start":2635,"line_end":2635,"column_start":18,"column_end":32},"kind":{"Impl":{"id":577}},"from":{"krate":0,"index":5888},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1488650,"byte_end":1488657,"line_start":2667,"line_end":2667,"column_start":26,"column_end":33},"kind":{"Impl":{"id":578}},"from":{"krate":0,"index":9331},"to":{"krate":2,"index":8887}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1489441,"byte_end":1489445,"line_start":2689,"line_end":2689,"column_start":38,"column_end":42},"kind":{"Impl":{"id":579}},"from":{"krate":0,"index":9345},"to":{"krate":46,"index":249}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1489645,"byte_end":1489649,"line_start":2699,"line_end":2699,"column_start":10,"column_end":14},"kind":{"Impl":{"id":580}},"from":{"krate":0,"index":9345},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1490382,"byte_end":1490386,"line_start":2724,"line_end":2724,"column_start":34,"column_end":38},"kind":{"Impl":{"id":581}},"from":{"krate":0,"index":9345},"to":{"krate":46,"index":747}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1490806,"byte_end":1490814,"line_start":2740,"line_end":2740,"column_start":22,"column_end":30},"kind":{"Impl":{"id":582}},"from":{"krate":0,"index":5924},"to":{"krate":2,"index":2831}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1491121,"byte_end":1491132,"line_start":2752,"line_end":2752,"column_start":18,"column_end":29},"kind":{"Impl":{"id":583}},"from":{"krate":0,"index":5929},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1491750,"byte_end":1491754,"line_start":2773,"line_end":2773,"column_start":26,"column_end":30},"kind":{"Impl":{"id":584}},"from":{"krate":0,"index":9345},"to":{"krate":2,"index":8887}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1492246,"byte_end":1492250,"line_start":2790,"line_end":2790,"column_start":38,"column_end":42},"kind":{"Impl":{"id":585}},"from":{"krate":0,"index":9359},"to":{"krate":46,"index":249}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1492450,"byte_end":1492454,"line_start":2800,"line_end":2800,"column_start":10,"column_end":14},"kind":{"Impl":{"id":586}},"from":{"krate":0,"index":9359},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1493409,"byte_end":1493413,"line_start":2831,"line_end":2831,"column_start":34,"column_end":38},"kind":{"Impl":{"id":587}},"from":{"krate":0,"index":9359},"to":{"krate":46,"index":747}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1493928,"byte_end":1493936,"line_start":2849,"line_end":2849,"column_start":22,"column_end":30},"kind":{"Impl":{"id":588}},"from":{"krate":0,"index":5965},"to":{"krate":2,"index":2831}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1494269,"byte_end":1494280,"line_start":2862,"line_end":2862,"column_start":18,"column_end":29},"kind":{"Impl":{"id":589}},"from":{"krate":0,"index":5971},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1495039,"byte_end":1495043,"line_start":2887,"line_end":2887,"column_start":26,"column_end":30},"kind":{"Impl":{"id":590}},"from":{"krate":0,"index":9359},"to":{"krate":2,"index":8887}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1495777,"byte_end":1495786,"line_start":2908,"line_end":2908,"column_start":38,"column_end":47},"kind":{"Impl":{"id":591}},"from":{"krate":0,"index":9373},"to":{"krate":46,"index":249}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1495991,"byte_end":1496000,"line_start":2918,"line_end":2918,"column_start":10,"column_end":19},"kind":{"Impl":{"id":592}},"from":{"krate":0,"index":9373},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1498176,"byte_end":1498185,"line_start":2972,"line_end":2972,"column_start":34,"column_end":43},"kind":{"Impl":{"id":593}},"from":{"krate":0,"index":9373},"to":{"krate":46,"index":747}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1498839,"byte_end":1498852,"line_start":2994,"line_end":2994,"column_start":22,"column_end":35},"kind":{"Impl":{"id":594}},"from":{"krate":0,"index":6008},"to":{"krate":2,"index":2831}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1499196,"byte_end":1499212,"line_start":3007,"line_end":3007,"column_start":18,"column_end":34},"kind":{"Impl":{"id":595}},"from":{"krate":0,"index":6015},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1500094,"byte_end":1500103,"line_start":3037,"line_end":3037,"column_start":26,"column_end":35},"kind":{"Impl":{"id":596}},"from":{"krate":0,"index":9373},"to":{"krate":2,"index":8887}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1500515,"byte_end":1500523,"line_start":3052,"line_end":3052,"column_start":38,"column_end":46},"kind":{"Impl":{"id":597}},"from":{"krate":0,"index":9387},"to":{"krate":46,"index":249}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1500727,"byte_end":1500735,"line_start":3062,"line_end":3062,"column_start":10,"column_end":18},"kind":{"Impl":{"id":598}},"from":{"krate":0,"index":9387},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1501499,"byte_end":1501507,"line_start":3087,"line_end":3087,"column_start":34,"column_end":42},"kind":{"Impl":{"id":599}},"from":{"krate":0,"index":9387},"to":{"krate":46,"index":747}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1501939,"byte_end":1501951,"line_start":3103,"line_end":3103,"column_start":22,"column_end":34},"kind":{"Impl":{"id":600}},"from":{"krate":0,"index":6050},"to":{"krate":2,"index":2831}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1502269,"byte_end":1502284,"line_start":3115,"line_end":3115,"column_start":18,"column_end":33},"kind":{"Impl":{"id":601}},"from":{"krate":0,"index":6055},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1502978,"byte_end":1502986,"line_start":3141,"line_end":3141,"column_start":26,"column_end":34},"kind":{"Impl":{"id":602}},"from":{"krate":0,"index":9387},"to":{"krate":2,"index":8887}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1503349,"byte_end":1503357,"line_start":3155,"line_end":3155,"column_start":38,"column_end":46},"kind":{"Impl":{"id":603}},"from":{"krate":0,"index":9401},"to":{"krate":46,"index":249}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1503561,"byte_end":1503569,"line_start":3165,"line_end":3165,"column_start":10,"column_end":18},"kind":{"Impl":{"id":604}},"from":{"krate":0,"index":9401},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1504322,"byte_end":1504330,"line_start":3190,"line_end":3190,"column_start":34,"column_end":42},"kind":{"Impl":{"id":605}},"from":{"krate":0,"index":9401},"to":{"krate":46,"index":747}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1504754,"byte_end":1504766,"line_start":3206,"line_end":3206,"column_start":22,"column_end":34},"kind":{"Impl":{"id":606}},"from":{"krate":0,"index":6089},"to":{"krate":2,"index":2831}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1505081,"byte_end":1505096,"line_start":3218,"line_end":3218,"column_start":18,"column_end":33},"kind":{"Impl":{"id":607}},"from":{"krate":0,"index":6094},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1505745,"byte_end":1505753,"line_start":3241,"line_end":3241,"column_start":26,"column_end":34},"kind":{"Impl":{"id":608}},"from":{"krate":0,"index":9401},"to":{"krate":2,"index":8887}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1506310,"byte_end":1506318,"line_start":3258,"line_end":3258,"column_start":38,"column_end":46},"kind":{"Impl":{"id":609}},"from":{"krate":0,"index":9415},"to":{"krate":46,"index":249}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1506522,"byte_end":1506530,"line_start":3268,"line_end":3268,"column_start":10,"column_end":18},"kind":{"Impl":{"id":610}},"from":{"krate":0,"index":9415},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1507613,"byte_end":1507621,"line_start":3303,"line_end":3303,"column_start":34,"column_end":42},"kind":{"Impl":{"id":611}},"from":{"krate":0,"index":9415},"to":{"krate":46,"index":747}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1508382,"byte_end":1508394,"line_start":3329,"line_end":3329,"column_start":22,"column_end":34},"kind":{"Impl":{"id":612}},"from":{"krate":0,"index":6130},"to":{"krate":2,"index":2831}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1508720,"byte_end":1508735,"line_start":3342,"line_end":3342,"column_start":18,"column_end":33},"kind":{"Impl":{"id":613}},"from":{"krate":0,"index":6137},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1509603,"byte_end":1509611,"line_start":3370,"line_end":3370,"column_start":26,"column_end":34},"kind":{"Impl":{"id":614}},"from":{"krate":0,"index":9415},"to":{"krate":2,"index":8887}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1510034,"byte_end":1510052,"line_start":3385,"line_end":3385,"column_start":38,"column_end":56},"kind":{"Impl":{"id":615}},"from":{"krate":0,"index":9429},"to":{"krate":46,"index":249}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1510266,"byte_end":1510284,"line_start":3395,"line_end":3395,"column_start":10,"column_end":28},"kind":{"Impl":{"id":616}},"from":{"krate":0,"index":9429},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1512906,"byte_end":1512924,"line_start":3462,"line_end":3462,"column_start":34,"column_end":52},"kind":{"Impl":{"id":617}},"from":{"krate":0,"index":9429},"to":{"krate":46,"index":747}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1513871,"byte_end":1513893,"line_start":3492,"line_end":3492,"column_start":22,"column_end":44},"kind":{"Impl":{"id":618}},"from":{"krate":0,"index":6178},"to":{"krate":2,"index":2831}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1514325,"byte_end":1514350,"line_start":3507,"line_end":3507,"column_start":18,"column_end":43},"kind":{"Impl":{"id":619}},"from":{"krate":0,"index":6187},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1515686,"byte_end":1515704,"line_start":3549,"line_end":3549,"column_start":26,"column_end":44},"kind":{"Impl":{"id":620}},"from":{"krate":0,"index":9429},"to":{"krate":2,"index":8887}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1516395,"byte_end":1516400,"line_start":3569,"line_end":3569,"column_start":38,"column_end":43},"kind":{"Impl":{"id":621}},"from":{"krate":0,"index":9443},"to":{"krate":46,"index":249}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1516601,"byte_end":1516606,"line_start":3579,"line_end":3579,"column_start":10,"column_end":15},"kind":{"Impl":{"id":622}},"from":{"krate":0,"index":9443},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1525413,"byte_end":1525418,"line_start":3885,"line_end":3885,"column_start":34,"column_end":39},"kind":{"Impl":{"id":623}},"from":{"krate":0,"index":9443},"to":{"krate":46,"index":747}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1529483,"byte_end":1529492,"line_start":3945,"line_end":3945,"column_start":22,"column_end":31},"kind":{"Impl":{"id":624}},"from":{"krate":0,"index":6258},"to":{"krate":2,"index":2831}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1529970,"byte_end":1529982,"line_start":3963,"line_end":3963,"column_start":18,"column_end":30},"kind":{"Impl":{"id":625}},"from":{"krate":0,"index":6270},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1532189,"byte_end":1532194,"line_start":4035,"line_end":4035,"column_start":26,"column_end":31},"kind":{"Impl":{"id":626}},"from":{"krate":0,"index":9443},"to":{"krate":2,"index":8887}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1540689,"byte_end":1540695,"line_start":4272,"line_end":4272,"column_start":38,"column_end":44},"kind":{"Impl":{"id":627}},"from":{"krate":0,"index":9457},"to":{"krate":46,"index":249}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1540897,"byte_end":1540903,"line_start":4282,"line_end":4282,"column_start":10,"column_end":16},"kind":{"Impl":{"id":628}},"from":{"krate":0,"index":9457},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1543232,"byte_end":1543238,"line_start":4347,"line_end":4347,"column_start":34,"column_end":40},"kind":{"Impl":{"id":629}},"from":{"krate":0,"index":9457},"to":{"krate":46,"index":747}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1544513,"byte_end":1544523,"line_start":4377,"line_end":4377,"column_start":22,"column_end":32},"kind":{"Impl":{"id":630}},"from":{"krate":0,"index":6316},"to":{"krate":2,"index":2831}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1544930,"byte_end":1544943,"line_start":4392,"line_end":4392,"column_start":18,"column_end":31},"kind":{"Impl":{"id":631}},"from":{"krate":0,"index":6325},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Schema.rs","byte_start":1546569,"byte_end":1546575,"line_start":4448,"line_end":4448,"column_start":26,"column_end":32},"kind":{"Impl":{"id":632}},"from":{"krate":0,"index":9457},"to":{"krate":2,"index":8887}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1552328,"byte_end":1552354,"line_start":51,"line_end":51,"column_start":6,"column_end":32},"kind":{"Impl":{"id":633}},"from":{"krate":0,"index":9471},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1552848,"byte_end":1552874,"line_start":67,"line_end":67,"column_start":26,"column_end":52},"kind":{"Impl":{"id":634}},"from":{"krate":0,"index":9471},"to":{"krate":2,"index":8887}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1553162,"byte_end":1553188,"line_start":76,"line_end":76,"column_start":38,"column_end":64},"kind":{"Impl":{"id":635}},"from":{"krate":0,"index":9471},"to":{"krate":46,"index":249}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1553400,"byte_end":1553426,"line_start":85,"line_end":85,"column_start":28,"column_end":54},"kind":{"Impl":{"id":636}},"from":{"krate":0,"index":9471},"to":{"krate":46,"index":469}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1553641,"byte_end":1553667,"line_start":93,"line_end":93,"column_start":36,"column_end":62},"kind":{"Impl":{"id":637}},"from":{"krate":0,"index":9471},"to":{"krate":46,"index":226}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1553938,"byte_end":1553964,"line_start":106,"line_end":106,"column_start":38,"column_end":64},"kind":{"Impl":{"id":638}},"from":{"krate":0,"index":9471},"to":{"krate":46,"index":747}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1554255,"byte_end":1554281,"line_start":117,"line_end":117,"column_start":45,"column_end":71},"kind":{"Impl":{"id":639}},"from":{"krate":0,"index":9471},"to":{"krate":46,"index":754}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1555186,"byte_end":1555203,"line_start":144,"line_end":144,"column_start":6,"column_end":23},"kind":{"Impl":{"id":640}},"from":{"krate":0,"index":9491},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1556098,"byte_end":1556115,"line_start":169,"line_end":169,"column_start":26,"column_end":43},"kind":{"Impl":{"id":641}},"from":{"krate":0,"index":9491},"to":{"krate":2,"index":8887}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1556451,"byte_end":1556468,"line_start":179,"line_end":179,"column_start":38,"column_end":55},"kind":{"Impl":{"id":642}},"from":{"krate":0,"index":9491},"to":{"krate":46,"index":249}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1556679,"byte_end":1556696,"line_start":188,"line_end":188,"column_start":28,"column_end":45},"kind":{"Impl":{"id":643}},"from":{"krate":0,"index":9491},"to":{"krate":46,"index":469}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1556901,"byte_end":1556918,"line_start":196,"line_end":196,"column_start":36,"column_end":53},"kind":{"Impl":{"id":644}},"from":{"krate":0,"index":9491},"to":{"krate":46,"index":226}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1557187,"byte_end":1557204,"line_start":209,"line_end":209,"column_start":38,"column_end":55},"kind":{"Impl":{"id":645}},"from":{"krate":0,"index":9491},"to":{"krate":46,"index":747}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1557494,"byte_end":1557511,"line_start":220,"line_end":220,"column_start":45,"column_end":62},"kind":{"Impl":{"id":646}},"from":{"krate":0,"index":9491},"to":{"krate":46,"index":754}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1558934,"byte_end":1558954,"line_start":260,"line_end":260,"column_start":38,"column_end":58},"kind":{"Impl":{"id":647}},"from":{"krate":0,"index":9511},"to":{"krate":46,"index":249}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1559170,"byte_end":1559190,"line_start":270,"line_end":270,"column_start":10,"column_end":30},"kind":{"Impl":{"id":648}},"from":{"krate":0,"index":9511},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1561778,"byte_end":1561798,"line_start":339,"line_end":339,"column_start":34,"column_end":54},"kind":{"Impl":{"id":649}},"from":{"krate":0,"index":9511},"to":{"krate":46,"index":747}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1562898,"byte_end":1562922,"line_start":369,"line_end":369,"column_start":22,"column_end":46},"kind":{"Impl":{"id":650}},"from":{"krate":0,"index":6468},"to":{"krate":2,"index":2831}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1563390,"byte_end":1563417,"line_start":384,"line_end":384,"column_start":18,"column_end":45},"kind":{"Impl":{"id":651}},"from":{"krate":0,"index":6477},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1565145,"byte_end":1565165,"line_start":438,"line_end":438,"column_start":26,"column_end":46},"kind":{"Impl":{"id":652}},"from":{"krate":0,"index":9511},"to":{"krate":2,"index":8887}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1565805,"byte_end":1565825,"line_start":456,"line_end":456,"column_start":38,"column_end":58},"kind":{"Impl":{"id":653}},"from":{"krate":0,"index":9525},"to":{"krate":46,"index":249}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1566041,"byte_end":1566061,"line_start":466,"line_end":466,"column_start":10,"column_end":30},"kind":{"Impl":{"id":654}},"from":{"krate":0,"index":9525},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1569828,"byte_end":1569848,"line_start":575,"line_end":575,"column_start":34,"column_end":54},"kind":{"Impl":{"id":655}},"from":{"krate":0,"index":9525},"to":{"krate":46,"index":747}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1571129,"byte_end":1571153,"line_start":611,"line_end":611,"column_start":22,"column_end":46},"kind":{"Impl":{"id":656}},"from":{"krate":0,"index":6522},"to":{"krate":2,"index":2831}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1571720,"byte_end":1571747,"line_start":627,"line_end":627,"column_start":18,"column_end":45},"kind":{"Impl":{"id":657}},"from":{"krate":0,"index":6532},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1573912,"byte_end":1573932,"line_start":689,"line_end":689,"column_start":26,"column_end":46},"kind":{"Impl":{"id":658}},"from":{"krate":0,"index":9525},"to":{"krate":2,"index":8887}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1574626,"byte_end":1574646,"line_start":708,"line_end":708,"column_start":38,"column_end":58},"kind":{"Impl":{"id":659}},"from":{"krate":0,"index":9539},"to":{"krate":46,"index":249}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1574862,"byte_end":1574882,"line_start":718,"line_end":718,"column_start":10,"column_end":30},"kind":{"Impl":{"id":660}},"from":{"krate":0,"index":9539},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1580112,"byte_end":1580132,"line_start":865,"line_end":865,"column_start":34,"column_end":54},"kind":{"Impl":{"id":661}},"from":{"krate":0,"index":9539},"to":{"krate":46,"index":747}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1581795,"byte_end":1581819,"line_start":909,"line_end":909,"column_start":22,"column_end":46},"kind":{"Impl":{"id":662}},"from":{"krate":0,"index":6580},"to":{"krate":2,"index":2831}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1582381,"byte_end":1582408,"line_start":925,"line_end":925,"column_start":18,"column_end":45},"kind":{"Impl":{"id":663}},"from":{"krate":0,"index":6590},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1584846,"byte_end":1584866,"line_start":997,"line_end":997,"column_start":26,"column_end":46},"kind":{"Impl":{"id":664}},"from":{"krate":0,"index":9539},"to":{"krate":2,"index":8887}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1585483,"byte_end":1585495,"line_start":1015,"line_end":1015,"column_start":38,"column_end":50},"kind":{"Impl":{"id":665}},"from":{"krate":0,"index":9553},"to":{"krate":46,"index":249}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1585703,"byte_end":1585715,"line_start":1025,"line_end":1025,"column_start":10,"column_end":22},"kind":{"Impl":{"id":666}},"from":{"krate":0,"index":9553},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1596167,"byte_end":1596179,"line_start":1395,"line_end":1395,"column_start":34,"column_end":46},"kind":{"Impl":{"id":667}},"from":{"krate":0,"index":9553},"to":{"krate":46,"index":747}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1600570,"byte_end":1600586,"line_start":1457,"line_end":1457,"column_start":22,"column_end":38},"kind":{"Impl":{"id":668}},"from":{"krate":0,"index":6666},"to":{"krate":2,"index":2831}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1601178,"byte_end":1601197,"line_start":1475,"line_end":1475,"column_start":18,"column_end":37},"kind":{"Impl":{"id":669}},"from":{"krate":0,"index":6678},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/SparseTensor.rs","byte_start":1603613,"byte_end":1603625,"line_start":1549,"line_end":1549,"column_start":26,"column_end":38},"kind":{"Impl":{"id":670}},"from":{"krate":0,"index":9553},"to":{"krate":2,"index":8887}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1618316,"byte_end":1618325,"line_start":36,"line_end":36,"column_start":38,"column_end":47},"kind":{"Impl":{"id":671}},"from":{"krate":0,"index":9567},"to":{"krate":46,"index":249}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1618530,"byte_end":1618539,"line_start":46,"line_end":46,"column_start":10,"column_end":19},"kind":{"Impl":{"id":672}},"from":{"krate":0,"index":9567},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1619614,"byte_end":1619623,"line_start":80,"line_end":80,"column_start":34,"column_end":43},"kind":{"Impl":{"id":673}},"from":{"krate":0,"index":9567},"to":{"krate":46,"index":747}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1620258,"byte_end":1620271,"line_start":102,"line_end":102,"column_start":22,"column_end":35},"kind":{"Impl":{"id":674}},"from":{"krate":0,"index":6752},"to":{"krate":2,"index":2831}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1620597,"byte_end":1620613,"line_start":115,"line_end":115,"column_start":18,"column_end":34},"kind":{"Impl":{"id":675}},"from":{"krate":0,"index":6759},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1621423,"byte_end":1621432,"line_start":142,"line_end":142,"column_start":26,"column_end":35},"kind":{"Impl":{"id":676}},"from":{"krate":0,"index":9567},"to":{"krate":2,"index":8887}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1621834,"byte_end":1621840,"line_start":157,"line_end":157,"column_start":38,"column_end":44},"kind":{"Impl":{"id":677}},"from":{"krate":0,"index":9581},"to":{"krate":46,"index":249}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1622042,"byte_end":1622048,"line_start":167,"line_end":167,"column_start":10,"column_end":16},"kind":{"Impl":{"id":678}},"from":{"krate":0,"index":9581},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1630607,"byte_end":1630613,"line_start":475,"line_end":475,"column_start":34,"column_end":40},"kind":{"Impl":{"id":679}},"from":{"krate":0,"index":9581},"to":{"krate":46,"index":747}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1634210,"byte_end":1634220,"line_start":527,"line_end":527,"column_start":22,"column_end":32},"kind":{"Impl":{"id":680}},"from":{"krate":0,"index":6824},"to":{"krate":2,"index":2831}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1634684,"byte_end":1634697,"line_start":543,"line_end":543,"column_start":18,"column_end":31},"kind":{"Impl":{"id":681}},"from":{"krate":0,"index":6834},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/ipc/gen/Tensor.rs","byte_start":1636442,"byte_end":1636448,"line_start":599,"line_end":599,"column_start":26,"column_end":32},"kind":{"Impl":{"id":682}},"from":{"krate":0,"index":9581},"to":{"krate":2,"index":8887}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1657134,"byte_end":1657143,"line_start":218,"line_end":218,"column_start":19,"column_end":28},"kind":{"Impl":{"id":683}},"from":{"krate":0,"index":9595},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1657422,"byte_end":1657431,"line_start":229,"line_end":229,"column_start":32,"column_end":41},"kind":{"Impl":{"id":684}},"from":{"krate":0,"index":9595},"to":{"krate":2,"index":7310}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1669508,"byte_end":1669515,"line_start":508,"line_end":508,"column_start":6,"column_end":13},"kind":{"Impl":{"id":685}},"from":{"krate":0,"index":9606},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1703444,"byte_end":1703450,"line_start":1333,"line_end":1333,"column_start":15,"column_end":21},"kind":{"Impl":{"id":686}},"from":{"krate":0,"index":9612},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1705539,"byte_end":1705552,"line_start":1396,"line_end":1396,"column_start":18,"column_end":31},"kind":{"Impl":{"id":687}},"from":{"krate":0,"index":9619},"to":{"krate":2,"index":2831}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/json/reader.rs","byte_start":1705738,"byte_end":1705751,"line_start":1407,"line_end":1407,"column_start":6,"column_end":19},"kind":{"Impl":{"id":688}},"from":{"krate":0,"index":9619},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1761477,"byte_end":1761488,"line_start":45,"line_end":45,"column_start":6,"column_end":17},"kind":{"Impl":{"id":689}},"from":{"krate":0,"index":9626},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1768396,"byte_end":1768414,"line_start":245,"line_end":245,"column_start":18,"column_end":36},"kind":{"Impl":{"id":690}},"from":{"krate":0,"index":9633},"to":{"krate":2,"index":2831}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1768543,"byte_end":1768554,"line_start":253,"line_end":253,"column_start":29,"column_end":40},"kind":{"Impl":{"id":691}},"from":{"krate":0,"index":9626},"to":{"krate":2,"index":2759}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1769143,"byte_end":1769154,"line_start":271,"line_end":271,"column_start":28,"column_end":39},"kind":{"Impl":{"id":692}},"from":{"krate":0,"index":9626},"to":{"krate":2,"index":2756}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/record_batch.rs","byte_start":1769497,"byte_end":1769505,"line_start":284,"line_end":284,"column_start":30,"column_end":38},"kind":"SuperTrait","from":{"krate":2,"index":7310},"to":{"krate":0,"index":7096}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/tensor.rs","byte_start":1777697,"byte_end":1777703,"line_start":99,"line_end":99,"column_start":33,"column_end":39},"kind":{"Impl":{"id":693}},"from":{"krate":0,"index":9637},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/bit_chunk_iterator.rs","byte_start":1792845,"byte_end":1792854,"line_start":31,"line_end":31,"column_start":10,"column_end":19},"kind":{"Impl":{"id":694}},"from":{"krate":0,"index":9650},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/bit_chunk_iterator.rs","byte_start":1793532,"byte_end":1793541,"line_start":60,"line_end":60,"column_start":10,"column_end":19},"kind":{"Impl":{"id":695}},"from":{"krate":0,"index":9650},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/bit_chunk_iterator.rs","byte_start":1795215,"byte_end":1795224,"line_start":113,"line_end":113,"column_start":27,"column_end":36},"kind":{"Impl":{"id":696}},"from":{"krate":0,"index":9650},"to":{"krate":2,"index":7147}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/bit_chunk_iterator.rs","byte_start":1795385,"byte_end":1795401,"line_start":122,"line_end":122,"column_start":19,"column_end":35},"kind":{"Impl":{"id":697}},"from":{"krate":0,"index":9659},"to":{"krate":2,"index":7310}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/bit_chunk_iterator.rs","byte_start":1796646,"byte_end":1796662,"line_start":164,"line_end":164,"column_start":28,"column_end":44},"kind":{"Impl":{"id":698}},"from":{"krate":0,"index":9659},"to":{"krate":2,"index":7199}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/integration_util.rs","byte_start":1819155,"byte_end":1819169,"line_start":61,"line_end":61,"column_start":23,"column_end":37},"kind":{"Impl":{"id":705}},"from":{"krate":0,"index":9777},"to":{"krate":2,"index":2759}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/integration_util.rs","byte_start":1821422,"byte_end":1821431,"line_start":138,"line_end":138,"column_start":6,"column_end":15},"kind":{"Impl":{"id":716}},"from":{"krate":0,"index":9669},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/integration_util.rs","byte_start":1821897,"byte_end":1821912,"line_start":154,"line_end":154,"column_start":6,"column_end":21},"kind":{"Impl":{"id":717}},"from":{"krate":0,"index":9726},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/integration_util.rs","byte_start":1822408,"byte_end":1822422,"line_start":172,"line_end":172,"column_start":6,"column_end":20},"kind":{"Impl":{"id":718}},"from":{"krate":0,"index":9777},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/integration_util.rs","byte_start":1823287,"byte_end":1823301,"line_start":200,"line_end":200,"column_start":6,"column_end":20},"kind":{"Impl":{"id":719}},"from":{"krate":0,"index":9957},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/string_writer.rs","byte_start":1858628,"byte_end":1858640,"line_start":70,"line_end":70,"column_start":6,"column_end":18},"kind":{"Impl":{"id":720}},"from":{"krate":0,"index":10133},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/string_writer.rs","byte_start":1858762,"byte_end":1858774,"line_start":78,"line_end":78,"column_start":18,"column_end":30},"kind":{"Impl":{"id":721}},"from":{"krate":0,"index":10133},"to":{"krate":2,"index":2831}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/string_writer.rs","byte_start":1858851,"byte_end":1858863,"line_start":84,"line_end":84,"column_start":19,"column_end":31},"kind":{"Impl":{"id":722}},"from":{"krate":0,"index":10133},"to":{"krate":5,"index":5453}},{"span":{"file_name":"/home/adheip/.cargo/registry/src/github.com-1ecc6299db9ec823/arrow-3.0.0/src/util/string_writer.rs","byte_start":1858952,"byte_end":1858964,"line_start":90,"line_end":90,"column_start":16,"column_end":28},"kind":{"Impl":{"id":723}},"from":{"krate":0,"index":10133},"to":{"krate":1,"index":4335}}]}